
lcd_rysowanie_prymitywow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ccc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  08009e7c  08009e7c  00019e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b954  0800b954  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800b954  0800b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b95c  0800b95c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800b964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000058  0800b9bc  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  0800b9bc  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e400  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005fbd  00000000  00000000  0004e488  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002528  00000000  00000000  00054448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002258  00000000  00000000  00056970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b721  00000000  00000000  00058bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000255ff  00000000  00000000  000842e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4f14  00000000  00000000  000a98e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019e7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b64  00000000  00000000  0019e878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e64 	.word	0x08009e64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	08009e64 	.word	0x08009e64

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <DrawCircle>:
 */

///RGB_Code: the pixel color in ARGB mode (8-8-8-8)

void DrawCircle (uint16_t x_pos, uint16_t y_pos, uint16_t rad, uint32_t color)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	4603      	mov	r3, r0
 80004fa:	81fb      	strh	r3, [r7, #14]
 80004fc:	460b      	mov	r3, r1
 80004fe:	81bb      	strh	r3, [r7, #12]
 8000500:	4613      	mov	r3, r2
 8000502:	817b      	strh	r3, [r7, #10]
	uint16_t x_cur = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	82fb      	strh	r3, [r7, #22]
    uint16_t y_cur = rad;
 8000508:	897b      	ldrh	r3, [r7, #10]
 800050a:	82bb      	strh	r3, [r7, #20]
    int16_t c = 2 * (1 - rad);
 800050c:	897b      	ldrh	r3, [r7, #10]
 800050e:	f1c3 0301 	rsb	r3, r3, #1
 8000512:	b29b      	uxth	r3, r3
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	b29b      	uxth	r3, r3
 8000518:	827b      	strh	r3, [r7, #18]

    while(x_cur <= y_cur)
 800051a:	e080      	b.n	800061e <DrawCircle+0x12e>
    {
        BSP_LCD_DrawPixel(x_pos + x_cur, y_pos + y_cur, color);
 800051c:	89fa      	ldrh	r2, [r7, #14]
 800051e:	8afb      	ldrh	r3, [r7, #22]
 8000520:	4413      	add	r3, r2
 8000522:	b298      	uxth	r0, r3
 8000524:	89ba      	ldrh	r2, [r7, #12]
 8000526:	8abb      	ldrh	r3, [r7, #20]
 8000528:	4413      	add	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	f001 ffc8 	bl	80024c4 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x_cur,y_pos + y_cur, color);
 8000534:	89fa      	ldrh	r2, [r7, #14]
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	b298      	uxth	r0, r3
 800053c:	89ba      	ldrh	r2, [r7, #12]
 800053e:	8abb      	ldrh	r3, [r7, #20]
 8000540:	4413      	add	r3, r2
 8000542:	b29b      	uxth	r3, r3
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4619      	mov	r1, r3
 8000548:	f001 ffbc 	bl	80024c4 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x_cur,y_pos + -y_cur, color);
 800054c:	89fa      	ldrh	r2, [r7, #14]
 800054e:	8afb      	ldrh	r3, [r7, #22]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	b298      	uxth	r0, r3
 8000554:	89ba      	ldrh	r2, [r7, #12]
 8000556:	8abb      	ldrh	r3, [r7, #20]
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4619      	mov	r1, r3
 8000560:	f001 ffb0 	bl	80024c4 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + x_cur,y_pos + -y_cur, color);
 8000564:	89fa      	ldrh	r2, [r7, #14]
 8000566:	8afb      	ldrh	r3, [r7, #22]
 8000568:	4413      	add	r3, r2
 800056a:	b298      	uxth	r0, r3
 800056c:	89ba      	ldrh	r2, [r7, #12]
 800056e:	8abb      	ldrh	r3, [r7, #20]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	b29b      	uxth	r3, r3
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4619      	mov	r1, r3
 8000578:	f001 ffa4 	bl	80024c4 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + y_cur,y_pos + x_cur, color);
 800057c:	89fa      	ldrh	r2, [r7, #14]
 800057e:	8abb      	ldrh	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	b298      	uxth	r0, r3
 8000584:	89ba      	ldrh	r2, [r7, #12]
 8000586:	8afb      	ldrh	r3, [r7, #22]
 8000588:	4413      	add	r3, r2
 800058a:	b29b      	uxth	r3, r3
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4619      	mov	r1, r3
 8000590:	f001 ff98 	bl	80024c4 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y_cur,y_pos + x_cur, color);
 8000594:	89fa      	ldrh	r2, [r7, #14]
 8000596:	8abb      	ldrh	r3, [r7, #20]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b298      	uxth	r0, r3
 800059c:	89ba      	ldrh	r2, [r7, #12]
 800059e:	8afb      	ldrh	r3, [r7, #22]
 80005a0:	4413      	add	r3, r2
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	f001 ff8c 	bl	80024c4 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y_cur,y_pos + -x_cur, color);
 80005ac:	89fa      	ldrh	r2, [r7, #14]
 80005ae:	8abb      	ldrh	r3, [r7, #20]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	b298      	uxth	r0, r3
 80005b4:	89ba      	ldrh	r2, [r7, #12]
 80005b6:	8afb      	ldrh	r3, [r7, #22]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4619      	mov	r1, r3
 80005c0:	f001 ff80 	bl	80024c4 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + y_cur,y_pos + -x_cur, color);
 80005c4:	89fa      	ldrh	r2, [r7, #14]
 80005c6:	8abb      	ldrh	r3, [r7, #20]
 80005c8:	4413      	add	r3, r2
 80005ca:	b298      	uxth	r0, r3
 80005cc:	89ba      	ldrh	r2, [r7, #12]
 80005ce:	8afb      	ldrh	r3, [r7, #22]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4619      	mov	r1, r3
 80005d8:	f001 ff74 	bl	80024c4 <BSP_LCD_DrawPixel>

        if(2 * c > 1 - 2 * y_cur)
 80005dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005e0:	005a      	lsls	r2, r3, #1
 80005e2:	8abb      	ldrh	r3, [r7, #20]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	f1c3 0301 	rsb	r3, r3, #1
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dd0b      	ble.n	8000606 <DrawCircle+0x116>
        {
            y_cur--;
 80005ee:	8abb      	ldrh	r3, [r7, #20]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	82bb      	strh	r3, [r7, #20]
            c -= 2 * y_cur - 1;
 80005f4:	8a7a      	ldrh	r2, [r7, #18]
 80005f6:	8abb      	ldrh	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b29b      	uxth	r3, r3
 8000604:	827b      	strh	r3, [r7, #18]
        }
        x_cur++;
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	3301      	adds	r3, #1
 800060a:	82fb      	strh	r3, [r7, #22]
        c += 2 * x_cur + 1;
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	8a7b      	ldrh	r3, [r7, #18]
 8000614:	4413      	add	r3, r2
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b29b      	uxth	r3, r3
 800061c:	827b      	strh	r3, [r7, #18]
    while(x_cur <= y_cur)
 800061e:	8afa      	ldrh	r2, [r7, #22]
 8000620:	8abb      	ldrh	r3, [r7, #20]
 8000622:	429a      	cmp	r2, r3
 8000624:	f67f af7a 	bls.w	800051c <DrawCircle+0x2c>
    }
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <AnimCircle>:
 * @param rad	the radius of the circle
 * @param count	the number of circles
 * @param time	the time between drawings
 */

void AnimCircle (uint16_t x_pos, uint16_t y_pos, uint16_t rad, uint16_t count, uint16_t time){
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]

	//drawing animations with pixels
	for(int i = 0; i<count; i++){
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	e0a6      	b.n	80007a2 <AnimCircle+0x172>
		//diagonally
		DrawCircle(x_pos + i, y_pos + i, rad, 2164260608 + i*10);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	b29a      	uxth	r2, r3
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	4413      	add	r3, r2
 800065c:	b298      	uxth	r0, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	b29a      	uxth	r2, r3
 8000662:	88bb      	ldrh	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	b299      	uxth	r1, r3
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000676:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800067a:	887a      	ldrh	r2, [r7, #2]
 800067c:	f7ff ff38 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos - i, y_pos - i, rad, 2164260608 + i*10);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	b29b      	uxth	r3, r3
 8000684:	88fa      	ldrh	r2, [r7, #6]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	b298      	uxth	r0, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	b29b      	uxth	r3, r3
 800068e:	88ba      	ldrh	r2, [r7, #4]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	b299      	uxth	r1, r3
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80006a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006a6:	887a      	ldrh	r2, [r7, #2]
 80006a8:	f7ff ff22 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos + i, y_pos - i, rad, 2164260608 + i*10);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4413      	add	r3, r2
 80006b4:	b298      	uxth	r0, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	88ba      	ldrh	r2, [r7, #4]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b299      	uxth	r1, r3
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80006ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006d2:	887a      	ldrh	r2, [r7, #2]
 80006d4:	f7ff ff0c 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos - i, y_pos + i, rad, 2164260608 + i*10);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	88fa      	ldrh	r2, [r7, #6]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	b298      	uxth	r0, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	88bb      	ldrh	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	b299      	uxth	r1, r3
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4613      	mov	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4413      	add	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80006fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80006fe:	887a      	ldrh	r2, [r7, #2]
 8000700:	f7ff fef6 	bl	80004f0 <DrawCircle>

		//vertically and horizontally
		DrawCircle(x_pos, y_pos + i, rad, 2164260608 + i*10);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	b29a      	uxth	r2, r3
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	4413      	add	r3, r2
 800070c:	b299      	uxth	r1, r3
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800071c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000720:	887a      	ldrh	r2, [r7, #2]
 8000722:	88f8      	ldrh	r0, [r7, #6]
 8000724:	f7ff fee4 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos, y_pos - i, rad, 2164260608 + i*10);
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	b29b      	uxth	r3, r3
 800072c:	88ba      	ldrh	r2, [r7, #4]
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	b299      	uxth	r1, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000740:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000744:	887a      	ldrh	r2, [r7, #2]
 8000746:	88f8      	ldrh	r0, [r7, #6]
 8000748:	f7ff fed2 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos + i, y_pos, rad, 2164260608 + i*10);
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	b29a      	uxth	r2, r3
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	4413      	add	r3, r2
 8000754:	b298      	uxth	r0, r3
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	4613      	mov	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4413      	add	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000764:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000768:	887a      	ldrh	r2, [r7, #2]
 800076a:	88b9      	ldrh	r1, [r7, #4]
 800076c:	f7ff fec0 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos - i, y_pos, rad, 2164260608 + i*10);
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b29b      	uxth	r3, r3
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	b298      	uxth	r0, r3
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000788:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800078c:	887a      	ldrh	r2, [r7, #2]
 800078e:	88b9      	ldrh	r1, [r7, #4]
 8000790:	f7ff feae 	bl	80004f0 <DrawCircle>

		HAL_Delay(time);
 8000794:	8c3b      	ldrh	r3, [r7, #32]
 8000796:	4618      	mov	r0, r3
 8000798:	f002 f8fe 	bl	8002998 <HAL_Delay>
	for(int i = 0; i<count; i++){
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	3301      	adds	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	883b      	ldrh	r3, [r7, #0]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	f6ff af54 	blt.w	8000654 <AnimCircle+0x24>
	}

	//clearing the screen by drawing with pixels
	for(int i = 0; i<count; i++){
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e082      	b.n	80008b8 <AnimCircle+0x288>
		//diagonally
		DrawCircle(x_pos + i, y_pos + i, rad, BSP_LCD_GetBackColor());
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	4413      	add	r3, r2
 80007ba:	b29c      	uxth	r4, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	88bb      	ldrh	r3, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	b29d      	uxth	r5, r3
 80007c6:	f001 fd3f 	bl	8002248 <BSP_LCD_GetBackColor>
 80007ca:	4603      	mov	r3, r0
 80007cc:	887a      	ldrh	r2, [r7, #2]
 80007ce:	4629      	mov	r1, r5
 80007d0:	4620      	mov	r0, r4
 80007d2:	f7ff fe8d 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos - i, y_pos - i, rad, BSP_LCD_GetBackColor());
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	88fa      	ldrh	r2, [r7, #6]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	b29c      	uxth	r4, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	88ba      	ldrh	r2, [r7, #4]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	b29d      	uxth	r5, r3
 80007ea:	f001 fd2d 	bl	8002248 <BSP_LCD_GetBackColor>
 80007ee:	4603      	mov	r3, r0
 80007f0:	887a      	ldrh	r2, [r7, #2]
 80007f2:	4629      	mov	r1, r5
 80007f4:	4620      	mov	r0, r4
 80007f6:	f7ff fe7b 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos + i, y_pos - i, rad, BSP_LCD_GetBackColor());
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	4413      	add	r3, r2
 8000802:	b29c      	uxth	r4, r3
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	b29b      	uxth	r3, r3
 8000808:	88ba      	ldrh	r2, [r7, #4]
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29d      	uxth	r5, r3
 800080e:	f001 fd1b 	bl	8002248 <BSP_LCD_GetBackColor>
 8000812:	4603      	mov	r3, r0
 8000814:	887a      	ldrh	r2, [r7, #2]
 8000816:	4629      	mov	r1, r5
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fe69 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos - i, y_pos + i, rad, BSP_LCD_GetBackColor());
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	b29b      	uxth	r3, r3
 8000822:	88fa      	ldrh	r2, [r7, #6]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b29c      	uxth	r4, r3
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	b29a      	uxth	r2, r3
 800082c:	88bb      	ldrh	r3, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	b29d      	uxth	r5, r3
 8000832:	f001 fd09 	bl	8002248 <BSP_LCD_GetBackColor>
 8000836:	4603      	mov	r3, r0
 8000838:	887a      	ldrh	r2, [r7, #2]
 800083a:	4629      	mov	r1, r5
 800083c:	4620      	mov	r0, r4
 800083e:	f7ff fe57 	bl	80004f0 <DrawCircle>

		//vertically and horizontally
		DrawCircle(x_pos, y_pos + i, rad, BSP_LCD_GetBackColor());
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	b29a      	uxth	r2, r3
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	b29c      	uxth	r4, r3
 800084c:	f001 fcfc 	bl	8002248 <BSP_LCD_GetBackColor>
 8000850:	4603      	mov	r3, r0
 8000852:	887a      	ldrh	r2, [r7, #2]
 8000854:	88f8      	ldrh	r0, [r7, #6]
 8000856:	4621      	mov	r1, r4
 8000858:	f7ff fe4a 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos, y_pos - i, rad, BSP_LCD_GetBackColor());
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	b29b      	uxth	r3, r3
 8000860:	88ba      	ldrh	r2, [r7, #4]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	b29c      	uxth	r4, r3
 8000866:	f001 fcef 	bl	8002248 <BSP_LCD_GetBackColor>
 800086a:	4603      	mov	r3, r0
 800086c:	887a      	ldrh	r2, [r7, #2]
 800086e:	88f8      	ldrh	r0, [r7, #6]
 8000870:	4621      	mov	r1, r4
 8000872:	f7ff fe3d 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos + i, y_pos, rad, BSP_LCD_GetBackColor());
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	b29a      	uxth	r2, r3
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	4413      	add	r3, r2
 800087e:	b29c      	uxth	r4, r3
 8000880:	f001 fce2 	bl	8002248 <BSP_LCD_GetBackColor>
 8000884:	4603      	mov	r3, r0
 8000886:	887a      	ldrh	r2, [r7, #2]
 8000888:	88b9      	ldrh	r1, [r7, #4]
 800088a:	4620      	mov	r0, r4
 800088c:	f7ff fe30 	bl	80004f0 <DrawCircle>
		DrawCircle(x_pos - i, y_pos, rad, BSP_LCD_GetBackColor());
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	b29b      	uxth	r3, r3
 8000894:	88fa      	ldrh	r2, [r7, #6]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	b29c      	uxth	r4, r3
 800089a:	f001 fcd5 	bl	8002248 <BSP_LCD_GetBackColor>
 800089e:	4603      	mov	r3, r0
 80008a0:	887a      	ldrh	r2, [r7, #2]
 80008a2:	88b9      	ldrh	r1, [r7, #4]
 80008a4:	4620      	mov	r0, r4
 80008a6:	f7ff fe23 	bl	80004f0 <DrawCircle>

		HAL_Delay(time);
 80008aa:	8c3b      	ldrh	r3, [r7, #32]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f873 	bl	8002998 <HAL_Delay>
	for(int i = 0; i<count; i++){
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	883b      	ldrh	r3, [r7, #0]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	429a      	cmp	r2, r3
 80008be:	f6ff af78 	blt.w	80007b2 <AnimCircle+0x182>
	}
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080008cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_CRC_Init+0x20>)
 80008d2:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <MX_CRC_Init+0x24>)
 80008d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_CRC_Init+0x20>)
 80008d8:	f002 f962 	bl	8002ba0 <HAL_CRC_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008e2:	f000 fdcf 	bl	8001484 <Error_Handler>
  }

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000030c 	.word	0x2000030c
 80008f0:	40023000 	.word	0x40023000

080008f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a0b      	ldr	r2, [pc, #44]	; (8000930 <HAL_CRC_MspInit+0x3c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d10d      	bne.n	8000922 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_CRC_MspInit+0x40>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <HAL_CRC_MspInit+0x40>)
 8000910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <HAL_CRC_MspInit+0x40>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023000 	.word	0x40023000
 8000934:	40023800 	.word	0x40023800

08000938 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_DMA2D_Init+0x5c>)
 800093e:	4a16      	ldr	r2, [pc, #88]	; (8000998 <MX_DMA2D_Init+0x60>)
 8000940:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_DMA2D_Init+0x5c>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_DMA2D_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_DMA2D_Init+0x5c>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_DMA2D_Init+0x5c>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_DMA2D_Init+0x5c>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_DMA2D_Init+0x5c>)
 8000962:	2200      	movs	r2, #0
 8000964:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_DMA2D_Init+0x5c>)
 8000968:	2200      	movs	r2, #0
 800096a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800096c:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_DMA2D_Init+0x5c>)
 800096e:	f002 faef 	bl	8002f50 <HAL_DMA2D_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000978:	f000 fd84 	bl	8001484 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800097c:	2101      	movs	r1, #1
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_DMA2D_Init+0x5c>)
 8000980:	f002 fd54 	bl	800342c <HAL_DMA2D_ConfigLayer>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800098a:	f000 fd7b 	bl	8001484 <Error_Handler>
  }

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000314 	.word	0x20000314
 8000998:	4002b000 	.word	0x4002b000

0800099c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_DMA2D_MspInit+0x48>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d115      	bne.n	80009da <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_DMA2D_MspInit+0x4c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_DMA2D_MspInit+0x4c>)
 80009b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_DMA2D_MspInit+0x4c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2105      	movs	r1, #5
 80009ce:	205a      	movs	r0, #90	; 0x5a
 80009d0:	f002 f8bc 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80009d4:	205a      	movs	r0, #90	; 0x5a
 80009d6:	f002 f8d5 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	4002b000 	.word	0x4002b000
 80009e8:	40023800 	.word	0x40023800

080009ec <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a06:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <MX_FMC_Init+0x9c>)
 8000a08:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a1e:	2210      	movs	r2, #16
 8000a20:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a24:	2240      	movs	r2, #64	; 0x40
 8000a26:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a2a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a2e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a3c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_FMC_Init+0x98>)
 8000a6e:	f005 fe5b 	bl	8006728 <HAL_SDRAM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a78:	f000 fd04 	bl	8001484 <Error_Handler>
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000354 	.word	0x20000354
 8000a88:	a0000140 	.word	0xa0000140

08000a8c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <HAL_FMC_MspInit+0x104>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d16f      	bne.n	8000b88 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000aa8:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <HAL_FMC_MspInit+0x104>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_FMC_MspInit+0x108>)
 8000ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab6:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <HAL_FMC_MspInit+0x108>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6393      	str	r3, [r2, #56]	; 0x38
 8000abe:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HAL_FMC_MspInit+0x108>)
 8000ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000aca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ace:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000adc:	230c      	movs	r3, #12
 8000ade:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482c      	ldr	r0, [pc, #176]	; (8000b98 <HAL_FMC_MspInit+0x10c>)
 8000ae6:	f002 fdcf 	bl	8003688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000aea:	2301      	movs	r3, #1
 8000aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afa:	230c      	movs	r3, #12
 8000afc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <HAL_FMC_MspInit+0x110>)
 8000b04:	f002 fdc0 	bl	8003688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000b08:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b0c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <HAL_FMC_MspInit+0x114>)
 8000b24:	f002 fdb0 	bl	8003688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b2c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <HAL_FMC_MspInit+0x118>)
 8000b44:	f002 fda0 	bl	8003688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b48:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b4c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b5a:	230c      	movs	r3, #12
 8000b5c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	4811      	ldr	r0, [pc, #68]	; (8000ba8 <HAL_FMC_MspInit+0x11c>)
 8000b64:	f002 fd90 	bl	8003688 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b78:	230c      	movs	r3, #12
 8000b7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <HAL_FMC_MspInit+0x120>)
 8000b82:	f002 fd81 	bl	8003688 <HAL_GPIO_Init>
 8000b86:	e000      	b.n	8000b8a <HAL_FMC_MspInit+0xfe>
    return;
 8000b88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000074 	.word	0x20000074
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021400 	.word	0x40021400
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40021800 	.word	0x40021800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40020400 	.word	0x40020400

08000bb0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000bb8:	f7ff ff68 	bl	8000a8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	; 0x38
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	4b7a      	ldr	r3, [pc, #488]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a79      	ldr	r2, [pc, #484]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b77      	ldr	r3, [pc, #476]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	623b      	str	r3, [r7, #32]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a72      	ldr	r2, [pc, #456]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b70      	ldr	r3, [pc, #448]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	4b6c      	ldr	r3, [pc, #432]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a6b      	ldr	r2, [pc, #428]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	4b65      	ldr	r3, [pc, #404]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a64      	ldr	r2, [pc, #400]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b62      	ldr	r3, [pc, #392]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b5e      	ldr	r3, [pc, #376]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a5d      	ldr	r2, [pc, #372]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a56      	ldr	r2, [pc, #344]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b54      	ldr	r3, [pc, #336]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b50      	ldr	r3, [pc, #320]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000ca4:	f043 0310 	orr.w	r3, r3, #16
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0310 	and.w	r3, r3, #16
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <MX_GPIO_Init+0x204>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2116      	movs	r1, #22
 8000cd6:	4843      	ldr	r0, [pc, #268]	; (8000de4 <MX_GPIO_Init+0x208>)
 8000cd8:	f002 ff8a 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4841      	ldr	r0, [pc, #260]	; (8000de8 <MX_GPIO_Init+0x20c>)
 8000ce2:	f002 ff85 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000cec:	483f      	ldr	r0, [pc, #252]	; (8000dec <MX_GPIO_Init+0x210>)
 8000cee:	f002 ff7f 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000cf8:	483d      	ldr	r0, [pc, #244]	; (8000df0 <MX_GPIO_Init+0x214>)
 8000cfa:	f002 ff79 	bl	8003bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cfe:	2316      	movs	r3, #22
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4833      	ldr	r0, [pc, #204]	; (8000de4 <MX_GPIO_Init+0x208>)
 8000d16:	f002 fcb7 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d1a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d20:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x218>)
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <MX_GPIO_Init+0x20c>)
 8000d30:	f002 fcaa 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4827      	ldr	r0, [pc, #156]	; (8000de8 <MX_GPIO_Init+0x20c>)
 8000d4c:	f002 fc9c 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d50:	2320      	movs	r3, #32
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <MX_GPIO_Init+0x218>)
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4820      	ldr	r0, [pc, #128]	; (8000de4 <MX_GPIO_Init+0x208>)
 8000d64:	f002 fc90 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000d7c:	f002 fc84 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4815      	ldr	r0, [pc, #84]	; (8000dec <MX_GPIO_Init+0x210>)
 8000d96:	f002 fc77 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d9a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	4619      	mov	r1, r3
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_GPIO_Init+0x210>)
 8000db4:	f002 fc68 	bl	8003688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000db8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_GPIO_Init+0x214>)
 8000dd2:	f002 fc59 	bl	8003688 <HAL_GPIO_Init>

}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	; 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40021800 	.word	0x40021800
 8000df4:	10120000 	.word	0x10120000
 8000df8:	40020400 	.word	0x40020400

08000dfc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <MX_I2C3_Init+0x78>)
 8000e04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <MX_I2C3_Init+0x7c>)
 8000e0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e1e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e3a:	f004 f8dd 	bl	8004ff8 <HAL_I2C_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e44:	f000 fb1e 	bl	8001484 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4809      	ldr	r0, [pc, #36]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e4c:	f004 fa0c 	bl	8005268 <HAL_I2CEx_ConfigAnalogFilter>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e56:	f000 fb15 	bl	8001484 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_I2C3_Init+0x74>)
 8000e5e:	f004 fa3f 	bl	80052e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e68:	f000 fb0c 	bl	8001484 <Error_Handler>
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000388 	.word	0x20000388
 8000e74:	40005c00 	.word	0x40005c00
 8000e78:	000186a0 	.word	0x000186a0

08000e7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <HAL_I2C_MspInit+0xc4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d14b      	bne.n	8000f36 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4815      	ldr	r0, [pc, #84]	; (8000f48 <HAL_I2C_MspInit+0xcc>)
 8000ef4:	f002 fbc8 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efe:	2312      	movs	r3, #18
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <HAL_I2C_MspInit+0xd0>)
 8000f16:	f002 fbb7 	bl	8003688 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40005c00 	.word	0x40005c00
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	40020000 	.word	0x40020000

08000f50 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09a      	sub	sp, #104	; 0x68
 8000f54:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f008 ff77 	bl	8009e52 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 ff71 	bl	8009e52 <memset>

  hltdc.Instance = LTDC;
 8000f70:	4b4f      	ldr	r3, [pc, #316]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f72:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <MX_LTDC_Init+0x164>)
 8000f74:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f76:	4b4e      	ldr	r3, [pc, #312]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f7c:	4b4c      	ldr	r3, [pc, #304]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f88:	4b49      	ldr	r3, [pc, #292]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f90:	2209      	movs	r2, #9
 8000f92:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000f9a:	4b45      	ldr	r3, [pc, #276]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000f9c:	221d      	movs	r2, #29
 8000f9e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000fa6:	4b42      	ldr	r3, [pc, #264]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fa8:	f240 120d 	movw	r2, #269	; 0x10d
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fb0:	f240 1243 	movw	r2, #323	; 0x143
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fb8:	f240 1217 	movw	r2, #279	; 0x117
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000fbe:	4b3c      	ldr	r3, [pc, #240]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fc0:	f240 1247 	movw	r2, #327	; 0x147
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fce:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fd6:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fde:	4834      	ldr	r0, [pc, #208]	; (80010b0 <MX_LTDC_Init+0x160>)
 8000fe0:	f004 f9be 	bl	8005360 <HAL_LTDC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000fea:	f000 fa4b 	bl	8001484 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000ff2:	23f0      	movs	r3, #240	; 0xf0
 8000ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000ffa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ffe:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001000:	2302      	movs	r3, #2
 8001002:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001004:	23ff      	movs	r3, #255	; 0xff
 8001006:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800100c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001010:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001012:	2307      	movs	r3, #7
 8001014:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001016:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800101a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 800101c:	23f0      	movs	r3, #240	; 0xf0
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8001020:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001024:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	481b      	ldr	r0, [pc, #108]	; (80010b0 <MX_LTDC_Init+0x160>)
 8001042:	f004 fb1f 	bl	8005684 <HAL_LTDC_ConfigLayer>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 800104c:	f000 fa1a 	bl	8001484 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800106e:	2305      	movs	r3, #5
 8001070:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	2201      	movs	r2, #1
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <MX_LTDC_Init+0x160>)
 8001098:	f004 faf4 	bl	8005684 <HAL_LTDC_ConfigLayer>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80010a2:	f000 f9ef 	bl	8001484 <Error_Handler>
  }

}
 80010a6:	bf00      	nop
 80010a8:	3768      	adds	r7, #104	; 0x68
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200003dc 	.word	0x200003dc
 80010b4:	40016800 	.word	0x40016800

080010b8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a7b      	ldr	r2, [pc, #492]	; (80012c4 <HAL_LTDC_MspInit+0x20c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	f040 80f0 	bne.w	80012bc <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	4b79      	ldr	r3, [pc, #484]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	4a78      	ldr	r2, [pc, #480]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 80010e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ea:	6453      	str	r3, [r2, #68]	; 0x44
 80010ec:	4b76      	ldr	r3, [pc, #472]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	4b72      	ldr	r3, [pc, #456]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 80010fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001100:	4a71      	ldr	r2, [pc, #452]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001102:	f043 0320 	orr.w	r3, r3, #32
 8001106:	6313      	str	r3, [r2, #48]	; 0x30
 8001108:	4b6f      	ldr	r3, [pc, #444]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	f003 0320 	and.w	r3, r3, #32
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	4b6b      	ldr	r3, [pc, #428]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a6a      	ldr	r2, [pc, #424]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	4b64      	ldr	r3, [pc, #400]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a63      	ldr	r2, [pc, #396]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a5c      	ldr	r2, [pc, #368]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4a55      	ldr	r2, [pc, #340]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6313      	str	r3, [r2, #48]	; 0x30
 8001178:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a4e      	ldr	r2, [pc, #312]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <HAL_LTDC_MspInit+0x210>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011b2:	230e      	movs	r3, #14
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4843      	ldr	r0, [pc, #268]	; (80012cc <HAL_LTDC_MspInit+0x214>)
 80011be:	f002 fa63 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011c2:	f641 0358 	movw	r3, #6232	; 0x1858
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d4:	230e      	movs	r3, #14
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	483c      	ldr	r0, [pc, #240]	; (80012d0 <HAL_LTDC_MspInit+0x218>)
 80011e0:	f002 fa52 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011e4:	2303      	movs	r3, #3
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011f4:	2309      	movs	r3, #9
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	4619      	mov	r1, r3
 80011fe:	4835      	ldr	r0, [pc, #212]	; (80012d4 <HAL_LTDC_MspInit+0x21c>)
 8001200:	f002 fa42 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001204:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001216:	230e      	movs	r3, #14
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121e:	4619      	mov	r1, r3
 8001220:	482c      	ldr	r0, [pc, #176]	; (80012d4 <HAL_LTDC_MspInit+0x21c>)
 8001222:	f002 fa31 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001226:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001238:	230e      	movs	r3, #14
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	4825      	ldr	r0, [pc, #148]	; (80012d8 <HAL_LTDC_MspInit+0x220>)
 8001244:	f002 fa20 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001248:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125a:	230e      	movs	r3, #14
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	481d      	ldr	r0, [pc, #116]	; (80012dc <HAL_LTDC_MspInit+0x224>)
 8001266:	f002 fa0f 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800126a:	2348      	movs	r3, #72	; 0x48
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127a:	230e      	movs	r3, #14
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4816      	ldr	r0, [pc, #88]	; (80012e0 <HAL_LTDC_MspInit+0x228>)
 8001286:	f002 f9ff 	bl	8003688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800128a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800129c:	2309      	movs	r3, #9
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	480c      	ldr	r0, [pc, #48]	; (80012d8 <HAL_LTDC_MspInit+0x220>)
 80012a8:	f002 f9ee 	bl	8003688 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2105      	movs	r1, #5
 80012b0:	2058      	movs	r0, #88	; 0x58
 80012b2:	f001 fc4b 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012b6:	2058      	movs	r0, #88	; 0x58
 80012b8:	f001 fc64 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40016800 	.word	0x40016800
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f001 fb13 	bl	8002914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ee:	f000 f833 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f2:	f7ff fc73 	bl	8000bdc <MX_GPIO_Init>
  MX_CRC_Init();
 80012f6:	f7ff fae9 	bl	80008cc <MX_CRC_Init>
  MX_DMA2D_Init();
 80012fa:	f7ff fb1d 	bl	8000938 <MX_DMA2D_Init>
  MX_FMC_Init();
 80012fe:	f7ff fb75 	bl	80009ec <MX_FMC_Init>
  MX_I2C3_Init();
 8001302:	f7ff fd7b 	bl	8000dfc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001306:	f7ff fe23 	bl	8000f50 <MX_LTDC_Init>
  MX_SPI5_Init();
 800130a:	f000 f8c3 	bl	8001494 <MX_SPI5_Init>
  MX_TIM1_Init();
 800130e:	f000 fa3d 	bl	800178c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001312:	f000 faad 	bl	8001870 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();                                                     //Wlaczenie biblioteki
 8001316:	f000 fea1 	bl	800205c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie pierwszej warstw
 800131a:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800131e:	2000      	movs	r0, #0
 8001320:	f000 ff1e 	bl	8002160 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie drugiej warstwy
 8001324:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001328:	2001      	movs	r0, #1
 800132a:	f000 ff19 	bl	8002160 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);                          //Wybranie warstwy aktywnej
 800132e:	2001      	movs	r0, #1
 8001330:	f000 ff7a 	bl	8002228 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();                                                //Wlaczenie podswietlania
 8001334:	f000 ffe0 	bl	80022f8 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);                                     //Kolor Tla
 8001338:	4806      	ldr	r0, [pc, #24]	; (8001354 <main+0x70>)
 800133a:	f000 ffb5 	bl	80022a8 <BSP_LCD_Clear>



  while(1){
	  AnimCircle(120, 160, 40, 80, 500);
 800133e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2350      	movs	r3, #80	; 0x50
 8001346:	2228      	movs	r2, #40	; 0x28
 8001348:	21a0      	movs	r1, #160	; 0xa0
 800134a:	2078      	movs	r0, #120	; 0x78
 800134c:	f7ff f970 	bl	8000630 <AnimCircle>
 8001350:	e7f5      	b.n	800133e <main+0x5a>
 8001352:	bf00      	nop
 8001354:	ff0000ff 	.word	0xff0000ff

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0a0      	sub	sp, #128	; 0x80
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f008 fd73 	bl	8009e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2230      	movs	r2, #48	; 0x30
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f008 fd64 	bl	8009e52 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <SystemClock_Config+0x100>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <SystemClock_Config+0x100>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <SystemClock_Config+0x100>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <SystemClock_Config+0x104>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <SystemClock_Config+0x104>)
 80013b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <SystemClock_Config+0x104>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c2:	2301      	movs	r3, #1
 80013c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013cc:	2302      	movs	r3, #2
 80013ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013d6:	2308      	movs	r3, #8
 80013d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013da:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013e4:	2307      	movs	r3, #7
 80013e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fb49 	bl	8005a84 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013f8:	f000 f844 	bl	8001484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001408:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800140c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001412:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001414:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001418:	2105      	movs	r1, #5
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fda2 	bl	8005f64 <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001426:	f000 f82d 	bl	8001484 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800142a:	2308      	movs	r3, #8
 800142c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 800142e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001432:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4618      	mov	r0, r3
 8001442:	f004 ffb3 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800144c:	f000 f81a 	bl	8001484 <Error_Handler>
  }
}
 8001450:	bf00      	nop
 8001452:	3780      	adds	r7, #128	; 0x80
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40007000 	.word	0x40007000

08001460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001472:	f001 fa71 	bl	8002958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40001000 	.word	0x40001000

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_SPI5_Init+0x68>)
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <MX_SPI5_Init+0x6c>)
 800149c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_SPI5_Init+0x68>)
 80014a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014a4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_SPI5_Init+0x68>)
 80014a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ac:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <MX_SPI5_Init+0x68>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_SPI5_Init+0x68>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_SPI5_Init+0x68>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_SPI5_Init+0x68>)
 80014c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_SPI5_Init+0x68>)
 80014ca:	2218      	movs	r2, #24
 80014cc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_SPI5_Init+0x68>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_SPI5_Init+0x68>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_SPI5_Init+0x68>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_SPI5_Init+0x68>)
 80014e2:	220a      	movs	r2, #10
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_SPI5_Init+0x68>)
 80014e8:	f005 f99d 	bl	8006826 <HAL_SPI_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 80014f2:	f7ff ffc7 	bl	8001484 <Error_Handler>
  }

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000484 	.word	0x20000484
 8001500:	40015000 	.word	0x40015000

08001504 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_SPI_MspInit+0x84>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d12c      	bne.n	8001580 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <HAL_SPI_MspInit+0x88>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a10      	ldr	r2, [pc, #64]	; (800158c <HAL_SPI_MspInit+0x88>)
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_SPI_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0320 	and.w	r3, r3, #32
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800155e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001570:	2305      	movs	r3, #5
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_SPI_MspInit+0x8c>)
 800157c:	f002 f884 	bl	8003688 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001580:	bf00      	nop
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40015000 	.word	0x40015000
 800158c:	40023800 	.word	0x40023800
 8001590:	40021400 	.word	0x40021400

08001594 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <HAL_SPI_MspDeInit+0x30>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d10a      	bne.n	80015bc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_SPI_MspDeInit+0x34>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <HAL_SPI_MspDeInit+0x34>)
 80015ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80015b2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <HAL_SPI_MspDeInit+0x38>)
 80015b8:	f002 fa10 	bl	80039dc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40015000 	.word	0x40015000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40021400 	.word	0x40021400

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_MspInit+0x54>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_MspInit+0x54>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_MspInit+0x54>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	603b      	str	r3, [r7, #0]
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_MspInit+0x54>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_MspInit+0x54>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_MspInit+0x54>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	210f      	movs	r1, #15
 8001612:	f06f 0001 	mvn.w	r0, #1
 8001616:	f001 fa99 	bl	8002b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001638:	2200      	movs	r2, #0
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	2036      	movs	r0, #54	; 0x36
 800163e:	f001 fa85 	bl	8002b4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001642:	2036      	movs	r0, #54	; 0x36
 8001644:	f001 fa9e 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_InitTick+0xa4>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a1e      	ldr	r2, [pc, #120]	; (80016cc <HAL_InitTick+0xa4>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_InitTick+0xa4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001664:	f107 0210 	add.w	r2, r7, #16
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fe6a 	bl	8006348 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001674:	f004 fe40 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8001678:	4603      	mov	r3, r0
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <HAL_InitTick+0xa8>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	3b01      	subs	r3, #1
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_InitTick+0xac>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <HAL_InitTick+0xb0>)
 8001690:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_InitTick+0xac>)
 8001694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001698:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_InitTick+0xac>)
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_InitTick+0xac>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_InitTick+0xac>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <HAL_InitTick+0xac>)
 80016ae:	f005 fe45 	bl	800733c <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d104      	bne.n	80016c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016b8:	4806      	ldr	r0, [pc, #24]	; (80016d4 <HAL_InitTick+0xac>)
 80016ba:	f005 fe6a 	bl	8007392 <HAL_TIM_Base_Start_IT>
 80016be:	4603      	mov	r3, r0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3730      	adds	r7, #48	; 0x30
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	200004dc 	.word	0x200004dc
 80016d8:	40001000 	.word	0x40001000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM6_DAC_IRQHandler+0x10>)
 8001716:	f005 fe60 	bl	80073da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200004dc 	.word	0x200004dc

08001724 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OTG_HS_IRQHandler+0x10>)
 800172a:	f002 fa7a 	bl	8003c22 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000064c 	.word	0x2000064c

08001738 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <LTDC_IRQHandler+0x10>)
 800173e:	f003 fedf 	bl	8005500 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200003dc 	.word	0x200003dc

0800174c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA2D_IRQHandler+0x10>)
 8001752:	f001 fd5a 	bl	800320a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000314 	.word	0x20000314

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <SystemInit+0x28>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <SystemInit+0x28>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SystemInit+0x28>)
 8001776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177a:	609a      	str	r2, [r3, #8]
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <MX_TIM1_Init+0x98>)
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <MX_TIM1_Init+0x9c>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_TIM1_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_TIM1_Init+0x98>)
 80017bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM1_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_TIM1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM1_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_TIM1_Init+0x98>)
 80017d6:	f005 fdb1 	bl	800733c <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80017e0:	f7ff fe50 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM1_Init+0x98>)
 80017f2:	f005 fefa 	bl	80075ea <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80017fc:	f7ff fe42 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM1_Init+0x98>)
 800180e:	f006 f905 	bl	8007a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001818:	f7ff fe34 	bl	8001484 <Error_Handler>
  }

}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2000051c 	.word	0x2000051c
 8001828:	40010000 	.word	0x40010000

0800182c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <HAL_TIM_Base_MspInit+0x3c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10d      	bne.n	800185a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x40>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x40>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0x40>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40010000 	.word	0x40010000
 800186c:	40023800 	.word	0x40023800

08001870 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001876:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_USART1_UART_Init+0x50>)
 8001878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b09      	ldr	r3, [pc, #36]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART1_UART_Init+0x4c>)
 80018a8:	f006 f948 	bl	8007b3c <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018b2:	f7ff fde7 	bl	8001484 <Error_Handler>
  }

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000055c 	.word	0x2000055c
 80018c0:	40011000 	.word	0x40011000

080018c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_UART_MspInit+0x84>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d12c      	bne.n	8001940 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x88>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x88>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_UART_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_UART_MspInit+0x88>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_UART_MspInit+0x88>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800191e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001930:	2307      	movs	r3, #7
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <HAL_UART_MspInit+0x8c>)
 800193c:	f001 fea4 	bl	8003688 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40011000 	.word	0x40011000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800198c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001958:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800195a:	e003      	b.n	8001964 <LoopCopyDataInit>

0800195c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800195e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001960:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001962:	3104      	adds	r1, #4

08001964 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001964:	480b      	ldr	r0, [pc, #44]	; (8001994 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001968:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800196a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800196c:	d3f6      	bcc.n	800195c <CopyDataInit>
  ldr  r2, =_sbss
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001970:	e002      	b.n	8001978 <LoopFillZerobss>

08001972 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001972:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001974:	f842 3b04 	str.w	r3, [r2], #4

08001978 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800197a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800197c:	d3f9      	bcc.n	8001972 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800197e:	f7ff feef 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f008 fa37 	bl	8009df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7ff fcad 	bl	80012e4 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800198c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001990:	0800b964 	.word	0x0800b964
  ldr  r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001998:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 800199c:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 80019a0:	20000910 	.word	0x20000910

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>

080019a6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019aa:	f000 fa5d 	bl	8001e68 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80019ae:	20ca      	movs	r0, #202	; 0xca
 80019b0:	f000 f95d 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80019b4:	20c3      	movs	r0, #195	; 0xc3
 80019b6:	f000 f967 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80019ba:	2008      	movs	r0, #8
 80019bc:	f000 f964 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80019c0:	2050      	movs	r0, #80	; 0x50
 80019c2:	f000 f961 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80019c6:	20cf      	movs	r0, #207	; 0xcf
 80019c8:	f000 f951 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 f95b 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80019d2:	20c1      	movs	r0, #193	; 0xc1
 80019d4:	f000 f958 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80019d8:	2030      	movs	r0, #48	; 0x30
 80019da:	f000 f955 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80019de:	20ed      	movs	r0, #237	; 0xed
 80019e0:	f000 f945 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80019e4:	2064      	movs	r0, #100	; 0x64
 80019e6:	f000 f94f 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80019ea:	2003      	movs	r0, #3
 80019ec:	f000 f94c 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80019f0:	2012      	movs	r0, #18
 80019f2:	f000 f949 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80019f6:	2081      	movs	r0, #129	; 0x81
 80019f8:	f000 f946 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80019fc:	20e8      	movs	r0, #232	; 0xe8
 80019fe:	f000 f936 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a02:	2085      	movs	r0, #133	; 0x85
 8001a04:	f000 f940 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f93d 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a0e:	2078      	movs	r0, #120	; 0x78
 8001a10:	f000 f93a 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a14:	20cb      	movs	r0, #203	; 0xcb
 8001a16:	f000 f92a 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a1a:	2039      	movs	r0, #57	; 0x39
 8001a1c:	f000 f934 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a20:	202c      	movs	r0, #44	; 0x2c
 8001a22:	f000 f931 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 f92e 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a2c:	2034      	movs	r0, #52	; 0x34
 8001a2e:	f000 f92b 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001a32:	2002      	movs	r0, #2
 8001a34:	f000 f928 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001a38:	20f7      	movs	r0, #247	; 0xf7
 8001a3a:	f000 f918 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001a3e:	2020      	movs	r0, #32
 8001a40:	f000 f922 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001a44:	20ea      	movs	r0, #234	; 0xea
 8001a46:	f000 f912 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f91c 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f000 f919 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001a56:	20b1      	movs	r0, #177	; 0xb1
 8001a58:	f000 f909 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f000 f913 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a62:	201b      	movs	r0, #27
 8001a64:	f000 f910 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a68:	20b6      	movs	r0, #182	; 0xb6
 8001a6a:	f000 f900 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a6e:	200a      	movs	r0, #10
 8001a70:	f000 f90a 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001a74:	20a2      	movs	r0, #162	; 0xa2
 8001a76:	f000 f907 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001a7a:	20c0      	movs	r0, #192	; 0xc0
 8001a7c:	f000 f8f7 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a80:	2010      	movs	r0, #16
 8001a82:	f000 f901 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001a86:	20c1      	movs	r0, #193	; 0xc1
 8001a88:	f000 f8f1 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001a8c:	2010      	movs	r0, #16
 8001a8e:	f000 f8fb 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001a92:	20c5      	movs	r0, #197	; 0xc5
 8001a94:	f000 f8eb 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001a98:	2045      	movs	r0, #69	; 0x45
 8001a9a:	f000 f8f5 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001a9e:	2015      	movs	r0, #21
 8001aa0:	f000 f8f2 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001aa4:	20c7      	movs	r0, #199	; 0xc7
 8001aa6:	f000 f8e2 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001aaa:	2090      	movs	r0, #144	; 0x90
 8001aac:	f000 f8ec 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001ab0:	2036      	movs	r0, #54	; 0x36
 8001ab2:	f000 f8dc 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001ab6:	20c8      	movs	r0, #200	; 0xc8
 8001ab8:	f000 f8e6 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001abc:	20f2      	movs	r0, #242	; 0xf2
 8001abe:	f000 f8d6 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f8e0 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001ac8:	20b0      	movs	r0, #176	; 0xb0
 8001aca:	f000 f8d0 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001ace:	20c2      	movs	r0, #194	; 0xc2
 8001ad0:	f000 f8da 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001ad4:	20b6      	movs	r0, #182	; 0xb6
 8001ad6:	f000 f8ca 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001ada:	200a      	movs	r0, #10
 8001adc:	f000 f8d4 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001ae0:	20a7      	movs	r0, #167	; 0xa7
 8001ae2:	f000 f8d1 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001ae6:	2027      	movs	r0, #39	; 0x27
 8001ae8:	f000 f8ce 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001aec:	2004      	movs	r0, #4
 8001aee:	f000 f8cb 	bl	8001c88 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001af2:	202a      	movs	r0, #42	; 0x2a
 8001af4:	f000 f8bb 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 f8c5 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f8c2 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f000 f8bf 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b0a:	20ef      	movs	r0, #239	; 0xef
 8001b0c:	f000 f8bc 	bl	8001c88 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b10:	202b      	movs	r0, #43	; 0x2b
 8001b12:	f000 f8ac 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f8b6 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f000 f8b3 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b22:	2001      	movs	r0, #1
 8001b24:	f000 f8b0 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b28:	203f      	movs	r0, #63	; 0x3f
 8001b2a:	f000 f8ad 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b2e:	20f6      	movs	r0, #246	; 0xf6
 8001b30:	f000 f89d 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 f8a7 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 f8a4 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001b40:	2006      	movs	r0, #6
 8001b42:	f000 f8a1 	bl	8001c88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001b46:	202c      	movs	r0, #44	; 0x2c
 8001b48:	f000 f891 	bl	8001c6e <ili9341_WriteReg>
  LCD_Delay(200);
 8001b4c:	20c8      	movs	r0, #200	; 0xc8
 8001b4e:	f000 fa79 	bl	8002044 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001b52:	2026      	movs	r0, #38	; 0x26
 8001b54:	f000 f88b 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 f895 	bl	8001c88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001b5e:	20e0      	movs	r0, #224	; 0xe0
 8001b60:	f000 f885 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001b64:	200f      	movs	r0, #15
 8001b66:	f000 f88f 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001b6a:	2029      	movs	r0, #41	; 0x29
 8001b6c:	f000 f88c 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001b70:	2024      	movs	r0, #36	; 0x24
 8001b72:	f000 f889 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b76:	200c      	movs	r0, #12
 8001b78:	f000 f886 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001b7c:	200e      	movs	r0, #14
 8001b7e:	f000 f883 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b82:	2009      	movs	r0, #9
 8001b84:	f000 f880 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001b88:	204e      	movs	r0, #78	; 0x4e
 8001b8a:	f000 f87d 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001b8e:	2078      	movs	r0, #120	; 0x78
 8001b90:	f000 f87a 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001b94:	203c      	movs	r0, #60	; 0x3c
 8001b96:	f000 f877 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001b9a:	2009      	movs	r0, #9
 8001b9c:	f000 f874 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ba0:	2013      	movs	r0, #19
 8001ba2:	f000 f871 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ba6:	2005      	movs	r0, #5
 8001ba8:	f000 f86e 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001bac:	2017      	movs	r0, #23
 8001bae:	f000 f86b 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001bb2:	2011      	movs	r0, #17
 8001bb4:	f000 f868 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 f865 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001bbe:	20e1      	movs	r0, #225	; 0xe1
 8001bc0:	f000 f855 	bl	8001c6e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f000 f85f 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001bca:	2016      	movs	r0, #22
 8001bcc:	f000 f85c 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001bd0:	201b      	movs	r0, #27
 8001bd2:	f000 f859 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001bd6:	2004      	movs	r0, #4
 8001bd8:	f000 f856 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001bdc:	2011      	movs	r0, #17
 8001bde:	f000 f853 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001be2:	2007      	movs	r0, #7
 8001be4:	f000 f850 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001be8:	2031      	movs	r0, #49	; 0x31
 8001bea:	f000 f84d 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001bee:	2033      	movs	r0, #51	; 0x33
 8001bf0:	f000 f84a 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001bf4:	2042      	movs	r0, #66	; 0x42
 8001bf6:	f000 f847 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001bfa:	2005      	movs	r0, #5
 8001bfc:	f000 f844 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c00:	200c      	movs	r0, #12
 8001c02:	f000 f841 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c06:	200a      	movs	r0, #10
 8001c08:	f000 f83e 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c0c:	2028      	movs	r0, #40	; 0x28
 8001c0e:	f000 f83b 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c12:	202f      	movs	r0, #47	; 0x2f
 8001c14:	f000 f838 	bl	8001c88 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f000 f835 	bl	8001c88 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c1e:	2011      	movs	r0, #17
 8001c20:	f000 f825 	bl	8001c6e <ili9341_WriteReg>
  LCD_Delay(200);
 8001c24:	20c8      	movs	r0, #200	; 0xc8
 8001c26:	f000 fa0d 	bl	8002044 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c2a:	2029      	movs	r0, #41	; 0x29
 8001c2c:	f000 f81f 	bl	8001c6e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001c30:	202c      	movs	r0, #44	; 0x2c
 8001c32:	f000 f81c 	bl	8001c6e <ili9341_WriteReg>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c3e:	f000 f913 	bl	8001e68 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001c42:	2103      	movs	r1, #3
 8001c44:	20d3      	movs	r0, #211	; 0xd3
 8001c46:	f000 f82c 	bl	8001ca2 <ili9341_ReadData>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29b      	uxth	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c56:	2029      	movs	r0, #41	; 0x29
 8001c58:	f000 f809 	bl	8001c6e <ili9341_WriteReg>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001c64:	2028      	movs	r0, #40	; 0x28
 8001c66:	f000 f802 	bl	8001c6e <ili9341_WriteReg>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f98e 	bl	8001f9c <LCD_IO_WriteReg>
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 f95f 	bl	8001f58 <LCD_IO_WriteData>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460a      	mov	r2, r1
 8001cac:	80fb      	strh	r3, [r7, #6]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001cb2:	797a      	ldrb	r2, [r7, #5]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f991 	bl	8001fe0 <LCD_IO_ReadData>
 8001cbe:	4603      	mov	r3, r0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001ccc:	23f0      	movs	r3, #240	; 0xf0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001cdc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001cf0:	4819      	ldr	r0, [pc, #100]	; (8001d58 <SPIx_Init+0x6c>)
 8001cf2:	f005 fa03 	bl	80070fc <HAL_SPI_GetState>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d12b      	bne.n	8001d54 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <SPIx_Init+0x6c>)
 8001cfe:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <SPIx_Init+0x70>)
 8001d00:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <SPIx_Init+0x6c>)
 8001d04:	2218      	movs	r2, #24
 8001d06:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <SPIx_Init+0x6c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <SPIx_Init+0x6c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <SPIx_Init+0x6c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <SPIx_Init+0x6c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d20:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <SPIx_Init+0x6c>)
 8001d22:	2207      	movs	r2, #7
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <SPIx_Init+0x6c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <SPIx_Init+0x6c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <SPIx_Init+0x6c>)
 8001d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d38:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <SPIx_Init+0x6c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SPIx_Init+0x6c>)
 8001d42:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d46:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <SPIx_Init+0x6c>)
 8001d4a:	f000 f853 	bl	8001df4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d4e:	4802      	ldr	r0, [pc, #8]	; (8001d58 <SPIx_Init+0x6c>)
 8001d50:	f004 fd69 	bl	8006826 <HAL_SPI_Init>
  } 
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000078 	.word	0x20000078
 8001d5c:	40015000 	.word	0x40015000

08001d60 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <SPIx_Read+0x38>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f107 0108 	add.w	r1, r7, #8
 8001d7a:	4808      	ldr	r0, [pc, #32]	; (8001d9c <SPIx_Read+0x3c>)
 8001d7c:	f004 ff13 	bl	8006ba6 <HAL_SPI_Receive>
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001d8a:	f000 f827 	bl	8001ddc <SPIx_Error>
  }
  
  return readvalue;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000003c 	.word	0x2000003c
 8001d9c:	20000078 	.word	0x20000078

08001da0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <SPIx_Write+0x34>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1db9      	adds	r1, r7, #6
 8001db4:	2201      	movs	r2, #1
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <SPIx_Write+0x38>)
 8001db8:	f004 fdc1 	bl	800693e <HAL_SPI_Transmit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001dc6:	f000 f809 	bl	8001ddc <SPIx_Error>
  }
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000003c 	.word	0x2000003c
 8001dd8:	20000078 	.word	0x20000078

08001ddc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <SPIx_Error+0x14>)
 8001de2:	f004 fd84 	bl	80068ee <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001de6:	f7ff ff81 	bl	8001cec <SPIx_Init>
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000078 	.word	0x20000078

08001df4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <SPIx_MspInit+0x6c>)
 8001e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e04:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <SPIx_MspInit+0x6c>)
 8001e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <SPIx_MspInit+0x6c>)
 8001e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <SPIx_MspInit+0x6c>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <SPIx_MspInit+0x6c>)
 8001e22:	f043 0320 	orr.w	r3, r3, #32
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <SPIx_MspInit+0x6c>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001e34:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e42:	2301      	movs	r3, #1
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001e46:	2305      	movs	r3, #5
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <SPIx_MspInit+0x70>)
 8001e52:	f001 fc19 	bl	8003688 <HAL_GPIO_Init>
}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40021400 	.word	0x40021400

08001e68 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001e6e:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <LCD_IO_Init+0xe0>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d164      	bne.n	8001f40 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <LCD_IO_Init+0xe0>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4827      	ldr	r0, [pc, #156]	; (8001f50 <LCD_IO_Init+0xe8>)
 8001eb2:	f001 fbe9 	bl	8003688 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a23      	ldr	r2, [pc, #140]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4819      	ldr	r0, [pc, #100]	; (8001f50 <LCD_IO_Init+0xe8>)
 8001eec:	f001 fbcc 	bl	8003688 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <LCD_IO_Init+0xe4>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	4619      	mov	r1, r3
 8001f22:	480c      	ldr	r0, [pc, #48]	; (8001f54 <LCD_IO_Init+0xec>)
 8001f24:	f001 fbb0 	bl	8003688 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2104      	movs	r1, #4
 8001f2c:	4809      	ldr	r0, [pc, #36]	; (8001f54 <LCD_IO_Init+0xec>)
 8001f2e:	f001 fe5f 	bl	8003bf0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001f32:	2201      	movs	r2, #1
 8001f34:	2104      	movs	r1, #4
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <LCD_IO_Init+0xec>)
 8001f38:	f001 fe5a 	bl	8003bf0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001f3c:	f7ff fed6 	bl	8001cec <SPIx_Init>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200000d0 	.word	0x200000d0
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	40020800 	.word	0x40020800

08001f58 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f68:	480a      	ldr	r0, [pc, #40]	; (8001f94 <LCD_IO_WriteData+0x3c>)
 8001f6a:	f001 fe41 	bl	8003bf0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2104      	movs	r1, #4
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <LCD_IO_WriteData+0x40>)
 8001f74:	f001 fe3c 	bl	8003bf0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff10 	bl	8001da0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001f80:	2201      	movs	r2, #1
 8001f82:	2104      	movs	r1, #4
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <LCD_IO_WriteData+0x40>)
 8001f86:	f001 fe33 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40020800 	.word	0x40020800

08001f9c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fac:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <LCD_IO_WriteReg+0x3c>)
 8001fae:	f001 fe1f 	bl	8003bf0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4809      	ldr	r0, [pc, #36]	; (8001fdc <LCD_IO_WriteReg+0x40>)
 8001fb8:	f001 fe1a 	bl	8003bf0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff feed 	bl	8001da0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2104      	movs	r1, #4
 8001fca:	4804      	ldr	r0, [pc, #16]	; (8001fdc <LCD_IO_WriteReg+0x40>)
 8001fcc:	f001 fe10 	bl	8003bf0 <HAL_GPIO_WritePin>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40020800 	.word	0x40020800

08001fe0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460a      	mov	r2, r1
 8001fea:	80fb      	strh	r3, [r7, #6]
 8001fec:	4613      	mov	r3, r2
 8001fee:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	4810      	ldr	r0, [pc, #64]	; (800203c <LCD_IO_ReadData+0x5c>)
 8001ffa:	f001 fdf9 	bl	8003bf0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001ffe:	2200      	movs	r2, #0
 8002000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002004:	480e      	ldr	r0, [pc, #56]	; (8002040 <LCD_IO_ReadData+0x60>)
 8002006:	f001 fdf3 	bl	8003bf0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fec7 	bl	8001da0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002012:	797b      	ldrb	r3, [r7, #5]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fea3 	bl	8001d60 <SPIx_Read>
 800201a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800201c:	2201      	movs	r2, #1
 800201e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002022:	4807      	ldr	r0, [pc, #28]	; (8002040 <LCD_IO_ReadData+0x60>)
 8002024:	f001 fde4 	bl	8003bf0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002028:	2201      	movs	r2, #1
 800202a:	2104      	movs	r1, #4
 800202c:	4803      	ldr	r0, [pc, #12]	; (800203c <LCD_IO_ReadData+0x5c>)
 800202e:	f001 fddf 	bl	8003bf0 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00

08002044 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fca3 	bl	8002998 <HAL_Delay>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002062:	4a2e      	ldr	r2, [pc, #184]	; (800211c <BSP_LCD_Init+0xc0>)
 8002064:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002068:	2209      	movs	r2, #9
 800206a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <BSP_LCD_Init+0xbc>)
 800206e:	2201      	movs	r2, #1
 8002070:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002074:	221d      	movs	r2, #29
 8002076:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <BSP_LCD_Init+0xbc>)
 800207a:	2203      	movs	r2, #3
 800207c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002080:	f240 120d 	movw	r2, #269	; 0x10d
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002088:	f240 1243 	movw	r2, #323	; 0x143
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002090:	f240 1217 	movw	r2, #279	; 0x117
 8002094:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <BSP_LCD_Init+0xbc>)
 8002098:	f240 1247 	movw	r2, #327	; 0x147
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <BSP_LCD_Init+0xc4>)
 80020b8:	2208      	movs	r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80020bc:	4b18      	ldr	r3, [pc, #96]	; (8002120 <BSP_LCD_Init+0xc4>)
 80020be:	22c0      	movs	r2, #192	; 0xc0
 80020c0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <BSP_LCD_Init+0xc4>)
 80020c4:	2204      	movs	r2, #4
 80020c6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <BSP_LCD_Init+0xc4>)
 80020ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80020d0:	4813      	ldr	r0, [pc, #76]	; (8002120 <BSP_LCD_Init+0xc4>)
 80020d2:	f004 f96b 	bl	80063ac <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80020ee:	f000 f913 	bl	8002318 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80020f2:	4809      	ldr	r0, [pc, #36]	; (8002118 <BSP_LCD_Init+0xbc>)
 80020f4:	f003 f934 	bl	8005360 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <BSP_LCD_Init+0xc8>)
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <BSP_LCD_Init+0xcc>)
 80020fc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <BSP_LCD_Init+0xc8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002106:	f000 fa3b 	bl	8002580 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <BSP_LCD_Init+0xd0>)
 800210c:	f000 f8b2 	bl	8002274 <BSP_LCD_SetFont>

  return LCD_OK;
 8002110:	2300      	movs	r3, #0
}  
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	2000059c 	.word	0x2000059c
 800211c:	40016800 	.word	0x40016800
 8002120:	20000114 	.word	0x20000114
 8002124:	20000644 	.word	0x20000644
 8002128:	20000004 	.word	0x20000004
 800212c:	20000040 	.word	0x20000040

08002130 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <BSP_LCD_GetXSize+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	4798      	blx	r3
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000644 	.word	0x20000644

08002148 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <BSP_LCD_GetYSize+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	4798      	blx	r3
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000644 	.word	0x20000644

08002160 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002160:	b580      	push	{r7, lr}
 8002162:	b090      	sub	sp, #64	; 0x40
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002170:	f7ff ffde 	bl	8002130 <BSP_LCD_GetXSize>
 8002174:	4603      	mov	r3, r0
 8002176:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800217c:	f7ff ffe4 	bl	8002148 <BSP_LCD_GetYSize>
 8002180:	4603      	mov	r3, r0
 8002182:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002184:	2300      	movs	r3, #0
 8002186:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800218c:	23ff      	movs	r3, #255	; 0xff
 800218e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80021a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021ac:	2307      	movs	r3, #7
 80021ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80021b0:	f7ff ffbe 	bl	8002130 <BSP_LCD_GetXSize>
 80021b4:	4603      	mov	r3, r0
 80021b6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80021b8:	f7ff ffc6 	bl	8002148 <BSP_LCD_GetYSize>
 80021bc:	4603      	mov	r3, r0
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	4619      	mov	r1, r3
 80021c8:	4814      	ldr	r0, [pc, #80]	; (800221c <BSP_LCD_LayerDefaultInit+0xbc>)
 80021ca:	f003 fa5b 	bl	8005684 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	4913      	ldr	r1, [pc, #76]	; (8002220 <BSP_LCD_LayerDefaultInit+0xc0>)
 80021d2:	4613      	mov	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3304      	adds	r3, #4
 80021de:	f04f 32ff 	mov.w	r2, #4294967295
 80021e2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80021e4:	88fa      	ldrh	r2, [r7, #6]
 80021e6:	490e      	ldr	r1, [pc, #56]	; (8002220 <BSP_LCD_LayerDefaultInit+0xc0>)
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3308      	adds	r3, #8
 80021f4:	4a0b      	ldr	r2, [pc, #44]	; (8002224 <BSP_LCD_LayerDefaultInit+0xc4>)
 80021f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	4909      	ldr	r1, [pc, #36]	; (8002220 <BSP_LCD_LayerDefaultInit+0xc0>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800220a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <BSP_LCD_LayerDefaultInit+0xbc>)
 800220e:	f003 fa77 	bl	8005700 <HAL_LTDC_EnableDither>
}
 8002212:	bf00      	nop
 8002214:	3740      	adds	r7, #64	; 0x40
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2000059c 	.word	0x2000059c
 8002220:	20000148 	.word	0x20000148
 8002224:	20000040 	.word	0x20000040

08002228 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <BSP_LCD_SelectLayer+0x1c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000144 	.word	0x20000144

08002248 <BSP_LCD_GetBackColor>:
/**
  * @brief  Gets the LCD Background color. 
  * @retval Background color  
  */
uint32_t BSP_LCD_GetBackColor(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].BackColor;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <BSP_LCD_GetBackColor+0x24>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4907      	ldr	r1, [pc, #28]	; (8002270 <BSP_LCD_GetBackColor+0x28>)
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	3304      	adds	r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000144 	.word	0x20000144
 8002270:	20000148 	.word	0x20000148

08002274 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800227c:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <BSP_LCD_SetFont+0x2c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4908      	ldr	r1, [pc, #32]	; (80022a4 <BSP_LCD_SetFont+0x30>)
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	3308      	adds	r3, #8
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000144 	.word	0x20000144
 80022a4:	20000148 	.word	0x20000148

080022a8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <BSP_LCD_Clear+0x48>)
 80022b2:	681c      	ldr	r4, [r3, #0]
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <BSP_LCD_Clear+0x48>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <BSP_LCD_Clear+0x4c>)
 80022ba:	2134      	movs	r1, #52	; 0x34
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	335c      	adds	r3, #92	; 0x5c
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	461d      	mov	r5, r3
 80022c8:	f7ff ff32 	bl	8002130 <BSP_LCD_GetXSize>
 80022cc:	4606      	mov	r6, r0
 80022ce:	f7ff ff3b 	bl	8002148 <BSP_LCD_GetYSize>
 80022d2:	4602      	mov	r2, r0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	2300      	movs	r3, #0
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	4632      	mov	r2, r6
 80022e0:	4629      	mov	r1, r5
 80022e2:	4620      	mov	r0, r4
 80022e4:	f000 f914 	bl	8002510 <FillBuffer>
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f0:	20000144 	.word	0x20000144
 80022f4:	2000059c 	.word	0x2000059c

080022f8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <BSP_LCD_DisplayOn+0x1c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002306:	4b03      	ldr	r3, [pc, #12]	; (8002314 <BSP_LCD_DisplayOn+0x1c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4798      	blx	r3
  }
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000644 	.word	0x20000644

08002318 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	; 0x38
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	623b      	str	r3, [r7, #32]
 8002322:	4b61      	ldr	r3, [pc, #388]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a60      	ldr	r2, [pc, #384]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002328:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a59      	ldr	r2, [pc, #356]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002344:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a44      	ldr	r2, [pc, #272]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 8002398:	f043 0304 	orr.w	r3, r3, #4
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a36      	ldr	r2, [pc, #216]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023d0:	f043 0320 	orr.w	r3, r3, #32
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <BSP_LCD_MspInit+0x190>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80023fe:	f641 0358 	movw	r3, #6232	; 0x1858
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800240c:	2302      	movs	r3, #2
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002410:	230e      	movs	r3, #14
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	4619      	mov	r1, r3
 800241a:	4824      	ldr	r0, [pc, #144]	; (80024ac <BSP_LCD_MspInit+0x194>)
 800241c:	f001 f934 	bl	8003688 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002420:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242a:	4619      	mov	r1, r3
 800242c:	4820      	ldr	r0, [pc, #128]	; (80024b0 <BSP_LCD_MspInit+0x198>)
 800242e:	f001 f92b 	bl	8003688 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002432:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243c:	4619      	mov	r1, r3
 800243e:	481d      	ldr	r0, [pc, #116]	; (80024b4 <BSP_LCD_MspInit+0x19c>)
 8002440:	f001 f922 	bl	8003688 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002444:	2348      	movs	r3, #72	; 0x48
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244c:	4619      	mov	r1, r3
 800244e:	481a      	ldr	r0, [pc, #104]	; (80024b8 <BSP_LCD_MspInit+0x1a0>)
 8002450:	f001 f91a 	bl	8003688 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	4619      	mov	r1, r3
 8002460:	4816      	ldr	r0, [pc, #88]	; (80024bc <BSP_LCD_MspInit+0x1a4>)
 8002462:	f001 f911 	bl	8003688 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002466:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800246c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002470:	4619      	mov	r1, r3
 8002472:	4813      	ldr	r0, [pc, #76]	; (80024c0 <BSP_LCD_MspInit+0x1a8>)
 8002474:	f001 f908 	bl	8003688 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002478:	2303      	movs	r3, #3
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800247c:	2309      	movs	r3, #9
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002484:	4619      	mov	r1, r3
 8002486:	480a      	ldr	r0, [pc, #40]	; (80024b0 <BSP_LCD_MspInit+0x198>)
 8002488:	f001 f8fe 	bl	8003688 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800248c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002496:	4619      	mov	r1, r3
 8002498:	4809      	ldr	r0, [pc, #36]	; (80024c0 <BSP_LCD_MspInit+0x1a8>)
 800249a:	f001 f8f5 	bl	8003688 <HAL_GPIO_Init>
}
 800249e:	bf00      	nop
 80024a0:	3738      	adds	r7, #56	; 0x38
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	40020800 	.word	0x40020800
 80024b8:	40020c00 	.word	0x40020c00
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800

080024c4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	603a      	str	r2, [r7, #0]
 80024ce:	80fb      	strh	r3, [r7, #6]
 80024d0:	460b      	mov	r3, r1
 80024d2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <BSP_LCD_DrawPixel+0x44>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <BSP_LCD_DrawPixel+0x48>)
 80024da:	2134      	movs	r1, #52	; 0x34
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	335c      	adds	r3, #92	; 0x5c
 80024e4:	681c      	ldr	r4, [r3, #0]
 80024e6:	88bd      	ldrh	r5, [r7, #4]
 80024e8:	f7ff fe22 	bl	8002130 <BSP_LCD_GetXSize>
 80024ec:	4603      	mov	r3, r0
 80024ee:	fb03 f205 	mul.w	r2, r3, r5
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4423      	add	r3, r4
 80024fa:	461a      	mov	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bdb0      	pop	{r4, r5, r7, pc}
 8002508:	20000144 	.word	0x20000144
 800250c:	2000059c 	.word	0x2000059c

08002510 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800251e:	4b16      	ldr	r3, [pc, #88]	; (8002578 <FillBuffer+0x68>)
 8002520:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002524:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002526:	4b14      	ldr	r3, [pc, #80]	; (8002578 <FillBuffer+0x68>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <FillBuffer+0x68>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <FillBuffer+0x68>)
 8002534:	4a11      	ldr	r2, [pc, #68]	; (800257c <FillBuffer+0x6c>)
 8002536:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002538:	480f      	ldr	r0, [pc, #60]	; (8002578 <FillBuffer+0x68>)
 800253a:	f000 fd09 	bl	8002f50 <HAL_DMA2D_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d115      	bne.n	8002570 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	480c      	ldr	r0, [pc, #48]	; (8002578 <FillBuffer+0x68>)
 8002548:	f000 ff70 	bl	800342c <HAL_DMA2D_ConfigLayer>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10e      	bne.n	8002570 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69f9      	ldr	r1, [r7, #28]
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <FillBuffer+0x68>)
 800255e:	f000 fd40 	bl	8002fe2 <HAL_DMA2D_Start>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002568:	210a      	movs	r1, #10
 800256a:	4803      	ldr	r0, [pc, #12]	; (8002578 <FillBuffer+0x68>)
 800256c:	f000 fd64 	bl	8003038 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	200000d4 	.word	0x200000d4
 800257c:	4002b000 	.word	0x4002b000

08002580 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <BSP_SDRAM_Init+0xac>)
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <BSP_SDRAM_Init+0xb0>)
 8002588:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 8002592:	2207      	movs	r2, #7
 8002594:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002596:	4b27      	ldr	r3, [pc, #156]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 8002598:	2204      	movs	r2, #4
 800259a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 800259e:	2207      	movs	r2, #7
 80025a0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 80025aa:	2202      	movs	r2, #2
 80025ac:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 80025b0:	2202      	movs	r2, #2
 80025b2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025c2:	2204      	movs	r2, #4
 80025c4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025c8:	2210      	movs	r2, #16
 80025ca:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025d4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80025d8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025dc:	2200      	movs	r2, #0
 80025de:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025e6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80025f6:	2100      	movs	r1, #0
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <BSP_SDRAM_Init+0xac>)
 80025fa:	f000 f87f 	bl	80026fc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80025fe:	490d      	ldr	r1, [pc, #52]	; (8002634 <BSP_SDRAM_Init+0xb4>)
 8002600:	480a      	ldr	r0, [pc, #40]	; (800262c <BSP_SDRAM_Init+0xac>)
 8002602:	f004 f891 	bl	8006728 <HAL_SDRAM_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <BSP_SDRAM_Init+0xb8>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e002      	b.n	800261a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002614:	4b08      	ldr	r3, [pc, #32]	; (8002638 <BSP_SDRAM_Init+0xb8>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800261a:	f240 506a 	movw	r0, #1386	; 0x56a
 800261e:	f000 f80d 	bl	800263c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <BSP_SDRAM_Init+0xb8>)
 8002624:	781b      	ldrb	r3, [r3, #0]
}
 8002626:	4618      	mov	r0, r3
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000160 	.word	0x20000160
 8002630:	a0000140 	.word	0xa0000140
 8002634:	20000194 	.word	0x20000194
 8002638:	20000048 	.word	0x20000048

0800263c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002650:	2208      	movs	r2, #8
 8002652:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002656:	2201      	movs	r2, #1
 8002658:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800265c:	2200      	movs	r2, #0
 800265e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002664:	4923      	ldr	r1, [pc, #140]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002666:	4824      	ldr	r0, [pc, #144]	; (80026f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002668:	f004 f892 	bl	8006790 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800266c:	2001      	movs	r0, #1
 800266e:	f000 f993 	bl	8002998 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002674:	2202      	movs	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800267a:	2208      	movs	r2, #8
 800267c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002680:	2201      	movs	r2, #1
 8002682:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800268a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268e:	4919      	ldr	r1, [pc, #100]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002690:	4819      	ldr	r0, [pc, #100]	; (80026f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002692:	f004 f87d 	bl	8006790 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002698:	2203      	movs	r2, #3
 800269a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800269e:	2208      	movs	r2, #8
 80026a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026a4:	2204      	movs	r2, #4
 80026a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	4910      	ldr	r1, [pc, #64]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026b6:	f004 f86b 	bl	8006790 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80026ba:	f44f 730c 	mov.w	r3, #560	; 0x230
 80026be:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026c2:	2204      	movs	r2, #4
 80026c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026c8:	2208      	movs	r2, #8
 80026ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026d6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80026d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026dc:	4905      	ldr	r1, [pc, #20]	; (80026f4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80026de:	4806      	ldr	r0, [pc, #24]	; (80026f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026e0:	f004 f856 	bl	8006790 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4804      	ldr	r0, [pc, #16]	; (80026f8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80026e8:	f004 f87d 	bl	80067e6 <HAL_SDRAM_ProgramRefreshRate>
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200001b0 	.word	0x200001b0
 80026f8:	20000160 	.word	0x20000160

080026fc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b090      	sub	sp, #64	; 0x40
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80ec 	beq.w	80028e6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
 8002712:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002716:	4a76      	ldr	r2, [pc, #472]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6393      	str	r3, [r2, #56]	; 0x38
 800271e:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a6f      	ldr	r2, [pc, #444]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	4b69      	ldr	r3, [pc, #420]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b66      	ldr	r3, [pc, #408]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a61      	ldr	r2, [pc, #388]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	4b5b      	ldr	r3, [pc, #364]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a5a      	ldr	r2, [pc, #360]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a53      	ldr	r2, [pc, #332]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a4c      	ldr	r2, [pc, #304]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027c0:	f043 0320 	orr.w	r3, r3, #32
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0320 	and.w	r3, r3, #32
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a45      	ldr	r2, [pc, #276]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <BSP_SDRAM_MspInit+0x1f4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80027f2:	2302      	movs	r3, #2
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80027fa:	230c      	movs	r3, #12
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80027fe:	2360      	movs	r3, #96	; 0x60
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002806:	4619      	mov	r1, r3
 8002808:	483a      	ldr	r0, [pc, #232]	; (80028f4 <BSP_SDRAM_MspInit+0x1f8>)
 800280a:	f000 ff3d 	bl	8003688 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800280e:	2301      	movs	r3, #1
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002816:	4619      	mov	r1, r3
 8002818:	4837      	ldr	r0, [pc, #220]	; (80028f8 <BSP_SDRAM_MspInit+0x1fc>)
 800281a:	f000 ff35 	bl	8003688 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800281e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002828:	4619      	mov	r1, r3
 800282a:	4834      	ldr	r0, [pc, #208]	; (80028fc <BSP_SDRAM_MspInit+0x200>)
 800282c:	f000 ff2c 	bl	8003688 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002830:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800283a:	4619      	mov	r1, r3
 800283c:	4830      	ldr	r0, [pc, #192]	; (8002900 <BSP_SDRAM_MspInit+0x204>)
 800283e:	f000 ff23 	bl	8003688 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002842:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800284c:	4619      	mov	r1, r3
 800284e:	482d      	ldr	r0, [pc, #180]	; (8002904 <BSP_SDRAM_MspInit+0x208>)
 8002850:	f000 ff1a 	bl	8003688 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002854:	f248 1333 	movw	r3, #33075	; 0x8133
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800285a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285e:	4619      	mov	r1, r3
 8002860:	4829      	ldr	r0, [pc, #164]	; (8002908 <BSP_SDRAM_MspInit+0x20c>)
 8002862:	f000 ff11 	bl	8003688 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002866:	4b29      	ldr	r3, [pc, #164]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002872:	4b26      	ldr	r3, [pc, #152]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 8002874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002878:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 800287c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002880:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 8002884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002888:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 800288c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002890:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002898:	4b1c      	ldr	r3, [pc, #112]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 800289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800289e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028a8:	2203      	movs	r2, #3
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <BSP_SDRAM_MspInit+0x214>)
 80028bc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	4a11      	ldr	r2, [pc, #68]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80028ca:	4810      	ldr	r0, [pc, #64]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028cc:	f000 fa32 	bl	8002d34 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80028d0:	480e      	ldr	r0, [pc, #56]	; (800290c <BSP_SDRAM_MspInit+0x210>)
 80028d2:	f000 f981 	bl	8002bd8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	210f      	movs	r1, #15
 80028da:	2038      	movs	r0, #56	; 0x38
 80028dc:	f000 f936 	bl	8002b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80028e0:	2038      	movs	r0, #56	; 0x38
 80028e2:	f000 f94f 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80028e6:	bf00      	nop
 80028e8:	3740      	adds	r7, #64	; 0x40
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40021400 	.word	0x40021400
 8002908:	40021800 	.word	0x40021800
 800290c:	200001c0 	.word	0x200001c0
 8002910:	40026410 	.word	0x40026410

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_Init+0x40>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_Init+0x40>)
 800291e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_Init+0x40>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_Init+0x40>)
 800292a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_Init+0x40>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_Init+0x40>)
 8002936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f8fa 	bl	8002b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fe70 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f7fe fe42 	bl	80015d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023c00 	.word	0x40023c00

08002958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x24>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_IncTick+0x24>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000050 	.word	0x20000050
 800297c:	20000648 	.word	0x20000648

08002980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_GetTick+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000648 	.word	0x20000648

08002998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff ffee 	bl	8002980 <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d005      	beq.n	80029be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_Delay+0x40>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029be:	bf00      	nop
 80029c0:	f7ff ffde 	bl	8002980 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8f7      	bhi.n	80029c0 <HAL_Delay+0x28>
  {
  }
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000050 	.word	0x20000050

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff4c 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5e:	f7ff ff61 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002b62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6978      	ldr	r0, [r7, #20]
 8002b6a:	f7ff ffb1 	bl	8002ad0 <NVIC_EncodePriority>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff80 	bl	8002a7c <__NVIC_SetPriority>
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff54 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	795b      	ldrb	r3, [r3, #5]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd fe96 	bl	80008f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff fecc 	bl	8002980 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e099      	b.n	8002d28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c14:	e00f      	b.n	8002c36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c16:	f7ff feb3 	bl	8002980 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d908      	bls.n	8002c36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e078      	b.n	8002d28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e8      	bne.n	8002c16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_DMA_Init+0x158>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d107      	bne.n	8002ca0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0307 	bic.w	r3, r3, #7
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d117      	bne.n	8002cfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f8bd 	bl	8002e5c <DMA_CheckFifoParam>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e016      	b.n	8002d28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f874 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	223f      	movs	r2, #63	; 0x3f
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	f010803f 	.word	0xf010803f

08002d34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e050      	b.n	8002de8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d101      	bne.n	8002d56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	e048      	b.n	8002de8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2221      	movs	r2, #33	; 0x21
 8002d94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f82a 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	223f      	movs	r2, #63	; 0x3f
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b10      	subs	r3, #16
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <DMA_CalcBaseAndBitshift+0x64>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <DMA_CalcBaseAndBitshift+0x68>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d909      	bls.n	8002e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e30:	e007      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	0800b94c 	.word	0x0800b94c

08002e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d855      	bhi.n	8002f28 <DMA_CheckFifoParam+0xcc>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <DMA_CheckFifoParam+0x28>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea7 	.word	0x08002ea7
 8002e8c:	08002e95 	.word	0x08002e95
 8002e90:	08002f29 	.word	0x08002f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d045      	beq.n	8002f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e042      	b.n	8002f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eae:	d13f      	bne.n	8002f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e03c      	b.n	8002f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d121      	bne.n	8002f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d836      	bhi.n	8002f34 <DMA_CheckFifoParam+0xd8>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x70>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee3 	.word	0x08002ee3
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002ef5 	.word	0x08002ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e02f      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d024      	beq.n	8002f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e021      	b.n	8002f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002efc:	d11e      	bne.n	8002f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f02:	e01b      	b.n	8002f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <DMA_CheckFifoParam+0xb4>
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d003      	beq.n	8002f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0e:	e018      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e015      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e00b      	b.n	8002f40 <DMA_CheckFifoParam+0xe4>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e00a      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e008      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f30:	bf00      	nop
 8002f32:	e006      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f40:	bf00      	nop
    }
  } 
  
  return status; 
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e03b      	b.n	8002fda <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fd10 	bl	800099c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	f023 0107 	bic.w	r1, r3, #7
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d1      	ldr	r1, [r2, #12]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	430b      	orrs	r3, r1
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_DMA2D_Start+0x1c>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e018      	b.n	8003030 <HAL_DMA2D_Start+0x4e>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fa99 	bl	8003550 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0201 	orr.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d056      	beq.n	8003102 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003054:	f7ff fc94 	bl	8002980 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800305a:	e04b      	b.n	80030f4 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800306a:	2b00      	cmp	r3, #0
 800306c:	d023      	beq.n	80030b6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307c:	f043 0202 	orr.w	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2221      	movs	r2, #33	; 0x21
 80030a0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0a5      	b.n	8003202 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030bc:	d01a      	beq.n	80030f4 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80030be:	f7ff fc5f 	bl	8002980 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <HAL_DMA2D_PollForTransfer+0x9c>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10f      	bne.n	80030f4 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2203      	movs	r2, #3
 80030e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e086      	b.n	8003202 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ac      	beq.n	800305c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d061      	beq.n	80031e8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003124:	f7ff fc2c 	bl	8002980 <HAL_GetTick>
 8003128:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800312a:	e056      	b.n	80031da <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02e      	beq.n	800319c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	f043 0204 	orr.w	r2, r3, #4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2229      	movs	r2, #41	; 0x29
 8003186:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2204      	movs	r2, #4
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e032      	b.n	8003202 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d01a      	beq.n	80031da <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80031a4:	f7ff fbec 	bl	8002980 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <HAL_DMA2D_PollForTransfer+0x182>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10f      	bne.n	80031da <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	f043 0220 	orr.w	r2, r3, #32
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2203      	movs	r2, #3
 80031ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e013      	b.n	8003202 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0a1      	beq.n	800312c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2212      	movs	r2, #18
 80031ee:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d026      	beq.n	800327a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	2b00      	cmp	r3, #0
 8003234:	d021      	beq.n	800327a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003244:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2201      	movs	r2, #1
 8003258:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2204      	movs	r2, #4
 800325e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d026      	beq.n	80032d2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d021      	beq.n	80032d2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800329c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	f043 0202 	orr.w	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2204      	movs	r2, #4
 80032b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d026      	beq.n	800332a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d021      	beq.n	800332a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2208      	movs	r2, #8
 80032fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003302:	f043 0204 	orr.w	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2204      	movs	r2, #4
 800330e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d013      	beq.n	800335c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00e      	beq.n	800335c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2204      	movs	r2, #4
 8003354:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f853 	bl	8003402 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d024      	beq.n	80033b0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336c:	2b00      	cmp	r3, #0
 800336e:	d01f      	beq.n	80033b0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2202      	movs	r2, #2
 8003386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01f      	beq.n	80033fa <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01a      	beq.n	80033fa <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2210      	movs	r2, #16
 80033da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f80e 	bl	8003416 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_DMA2D_ConfigLayer+0x20>
 8003448:	2302      	movs	r3, #2
 800344a:	e079      	b.n	8003540 <HAL_DMA2D_ConfigLayer+0x114>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	3318      	adds	r3, #24
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003476:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_DMA2D_ConfigLayer+0x120>)
 8003478:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b0a      	cmp	r3, #10
 8003480:	d003      	beq.n	800348a <HAL_DMA2D_ConfigLayer+0x5e>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b09      	cmp	r3, #9
 8003488:	d107      	bne.n	800349a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e005      	b.n	80034a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	061b      	lsls	r3, r3, #24
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d120      	bne.n	80034ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	ea02 0103 	and.w	r1, r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d003      	beq.n	80034de <HAL_DMA2D_ConfigLayer+0xb2>
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b09      	cmp	r3, #9
 80034dc:	d127      	bne.n	800352e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
 80034ec:	e01f      	b.n	800352e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	ea02 0103 	and.w	r1, r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	430a      	orrs	r2, r1
 8003504:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b0a      	cmp	r3, #10
 8003516:	d003      	beq.n	8003520 <HAL_DMA2D_ConfigLayer+0xf4>
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b09      	cmp	r3, #9
 800351e:	d106      	bne.n	800352e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800352c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	ff03000f 	.word	0xff03000f

08003550 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003550:	b480      	push	{r7}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	041a      	lsls	r2, r3, #16
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	431a      	orrs	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003588:	d174      	bne.n	8003674 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003590:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003598:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
 80035c0:	e053      	b.n	800366a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d106      	bne.n	80035d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e048      	b.n	800366a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d111      	bne.n	8003604 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	0cdb      	lsrs	r3, r3, #19
 80035e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	0a9b      	lsrs	r3, r3, #10
 80035ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	02db      	lsls	r3, r3, #11
 80035fa:	4313      	orrs	r3, r2
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
 8003602:	e032      	b.n	800366a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d117      	bne.n	800363c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	0fdb      	lsrs	r3, r3, #31
 8003610:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	0cdb      	lsrs	r3, r3, #19
 8003616:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	0adb      	lsrs	r3, r3, #11
 800361c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	08db      	lsrs	r3, r3, #3
 8003622:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	029b      	lsls	r3, r3, #10
 800362c:	431a      	orrs	r2, r3
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	03db      	lsls	r3, r3, #15
 8003632:	4313      	orrs	r3, r2
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
 800363a:	e016      	b.n	800366a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	0f1b      	lsrs	r3, r3, #28
 8003640:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	0b1b      	lsrs	r3, r3, #12
 800364c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	011a      	lsls	r2, r3, #4
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	431a      	orrs	r2, r3
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	4313      	orrs	r3, r2
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003672:	e003      	b.n	800367c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	60da      	str	r2, [r3, #12]
}
 800367c:	bf00      	nop
 800367e:	372c      	adds	r7, #44	; 0x2c
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	; 0x24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
 80036a2:	e177      	b.n	8003994 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a4:	2201      	movs	r2, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4013      	ands	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f040 8166 	bne.w	800398e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00b      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d007      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036d6:	2b11      	cmp	r3, #17
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b12      	cmp	r3, #18
 80036e0:	d130      	bne.n	8003744 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 0201 	and.w	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	2203      	movs	r2, #3
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0xfc>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b12      	cmp	r3, #18
 8003782:	d123      	bne.n	80037cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	08da      	lsrs	r2, r3, #3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3208      	adds	r2, #8
 800378c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0203 	and.w	r2, r3, #3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80c0 	beq.w	800398e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_GPIO_Init+0x320>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800382a:	4a60      	ldr	r2, [pc, #384]	; (80039ac <HAL_GPIO_Init+0x324>)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	3302      	adds	r3, #2
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	220f      	movs	r2, #15
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_GPIO_Init+0x328>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d037      	beq.n	80038c6 <HAL_GPIO_Init+0x23e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a56      	ldr	r2, [pc, #344]	; (80039b4 <HAL_GPIO_Init+0x32c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d031      	beq.n	80038c2 <HAL_GPIO_Init+0x23a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a55      	ldr	r2, [pc, #340]	; (80039b8 <HAL_GPIO_Init+0x330>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d02b      	beq.n	80038be <HAL_GPIO_Init+0x236>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a54      	ldr	r2, [pc, #336]	; (80039bc <HAL_GPIO_Init+0x334>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d025      	beq.n	80038ba <HAL_GPIO_Init+0x232>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a53      	ldr	r2, [pc, #332]	; (80039c0 <HAL_GPIO_Init+0x338>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01f      	beq.n	80038b6 <HAL_GPIO_Init+0x22e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_GPIO_Init+0x33c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d019      	beq.n	80038b2 <HAL_GPIO_Init+0x22a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <HAL_GPIO_Init+0x340>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <HAL_GPIO_Init+0x226>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	; (80039cc <HAL_GPIO_Init+0x344>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d00d      	beq.n	80038aa <HAL_GPIO_Init+0x222>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	; (80039d0 <HAL_GPIO_Init+0x348>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d007      	beq.n	80038a6 <HAL_GPIO_Init+0x21e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	; (80039d4 <HAL_GPIO_Init+0x34c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d101      	bne.n	80038a2 <HAL_GPIO_Init+0x21a>
 800389e:	2309      	movs	r3, #9
 80038a0:	e012      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038a2:	230a      	movs	r3, #10
 80038a4:	e010      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038a6:	2308      	movs	r3, #8
 80038a8:	e00e      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038aa:	2307      	movs	r3, #7
 80038ac:	e00c      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038ae:	2306      	movs	r3, #6
 80038b0:	e00a      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038b2:	2305      	movs	r3, #5
 80038b4:	e008      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038b6:	2304      	movs	r3, #4
 80038b8:	e006      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e004      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038be:	2302      	movs	r3, #2
 80038c0:	e002      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_GPIO_Init+0x240>
 80038c6:	2300      	movs	r3, #0
 80038c8:	69fa      	ldr	r2, [r7, #28]
 80038ca:	f002 0203 	and.w	r2, r2, #3
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	4093      	lsls	r3, r2
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d8:	4934      	ldr	r1, [pc, #208]	; (80039ac <HAL_GPIO_Init+0x324>)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	3302      	adds	r3, #2
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <HAL_GPIO_Init+0x350>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800390a:	4a33      	ldr	r2, [pc, #204]	; (80039d8 <HAL_GPIO_Init+0x350>)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_GPIO_Init+0x350>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_GPIO_Init+0x350>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393a:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_GPIO_Init+0x350>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_GPIO_Init+0x350>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_GPIO_Init+0x350>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_GPIO_Init+0x350>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3301      	adds	r3, #1
 8003992:	61fb      	str	r3, [r7, #28]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f ae84 	bls.w	80036a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800399c:	bf00      	nop
 800399e:	3724      	adds	r7, #36	; 0x24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40020400 	.word	0x40020400
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020c00 	.word	0x40020c00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40021400 	.word	0x40021400
 80039c8:	40021800 	.word	0x40021800
 80039cc:	40021c00 	.word	0x40021c00
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40022400 	.word	0x40022400
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e0d9      	b.n	8003bac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039f8:	2201      	movs	r2, #1
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	f040 80c9 	bne.w	8003ba6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a14:	4a6a      	ldr	r2, [pc, #424]	; (8003bc0 <HAL_GPIO_DeInit+0x1e4>)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	220f      	movs	r2, #15
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a62      	ldr	r2, [pc, #392]	; (8003bc4 <HAL_GPIO_DeInit+0x1e8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d037      	beq.n	8003aae <HAL_GPIO_DeInit+0xd2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a61      	ldr	r2, [pc, #388]	; (8003bc8 <HAL_GPIO_DeInit+0x1ec>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_GPIO_DeInit+0xce>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a60      	ldr	r2, [pc, #384]	; (8003bcc <HAL_GPIO_DeInit+0x1f0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_GPIO_DeInit+0xca>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a5f      	ldr	r2, [pc, #380]	; (8003bd0 <HAL_GPIO_DeInit+0x1f4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d025      	beq.n	8003aa2 <HAL_GPIO_DeInit+0xc6>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a5e      	ldr	r2, [pc, #376]	; (8003bd4 <HAL_GPIO_DeInit+0x1f8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_DeInit+0xc2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a5d      	ldr	r2, [pc, #372]	; (8003bd8 <HAL_GPIO_DeInit+0x1fc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_DeInit+0xbe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a5c      	ldr	r2, [pc, #368]	; (8003bdc <HAL_GPIO_DeInit+0x200>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_DeInit+0xba>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a5b      	ldr	r2, [pc, #364]	; (8003be0 <HAL_GPIO_DeInit+0x204>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_DeInit+0xb6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a5a      	ldr	r2, [pc, #360]	; (8003be4 <HAL_GPIO_DeInit+0x208>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_DeInit+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a59      	ldr	r2, [pc, #356]	; (8003be8 <HAL_GPIO_DeInit+0x20c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_DeInit+0xae>
 8003a86:	2309      	movs	r3, #9
 8003a88:	e012      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	e010      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	e00e      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e00c      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e00a      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a9a:	2305      	movs	r3, #5
 8003a9c:	e008      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e006      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e004      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e002      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_DeInit+0xd4>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	f002 0203 	and.w	r2, r2, #3
 8003ab6:	0092      	lsls	r2, r2, #2
 8003ab8:	4093      	lsls	r3, r2
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d132      	bne.n	8003b26 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ac0:	4b4a      	ldr	r3, [pc, #296]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	4948      	ldr	r1, [pc, #288]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	4945      	ldr	r1, [pc, #276]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003adc:	4b43      	ldr	r3, [pc, #268]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	4941      	ldr	r1, [pc, #260]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	493e      	ldr	r1, [pc, #248]	; (8003bec <HAL_GPIO_DeInit+0x210>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	220f      	movs	r2, #15
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b08:	4a2d      	ldr	r2, [pc, #180]	; (8003bc0 <HAL_GPIO_DeInit+0x1e4>)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	43da      	mvns	r2, r3
 8003b18:	4829      	ldr	r0, [pc, #164]	; (8003bc0 <HAL_GPIO_DeInit+0x1e4>)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	400a      	ands	r2, r1
 8003b20:	3302      	adds	r3, #2
 8003b22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2103      	movs	r1, #3
 8003b30:	fa01 f303 	lsl.w	r3, r1, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	401a      	ands	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	08d2      	lsrs	r2, r2, #3
 8003b5c:	4019      	ands	r1, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2103      	movs	r1, #3
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	2101      	movs	r1, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	2103      	movs	r1, #3
 8003b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	401a      	ands	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	f67f af22 	bls.w	80039f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	40020000 	.word	0x40020000
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	40020800 	.word	0x40020800
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40021400 	.word	0x40021400
 8003bdc:	40021800 	.word	0x40021800
 8003be0:	40021c00 	.word	0x40021c00
 8003be4:	40022000 	.word	0x40022000
 8003be8:	40022400 	.word	0x40022400
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c0c:	e003      	b.n	8003c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 fd31 	bl	80086a0 <USB_GetMode>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 80ef 	bne.w	8003e24 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fd15 	bl	800867a <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80e5 	beq.w	8003e22 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f004 fd0c 	bl	800867a <USB_ReadInterrupts>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c6c:	d104      	bne.n	8003c78 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003c76:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 fcfc 	bl	800867a <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c8c:	d104      	bne.n	8003c98 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f004 fcec 	bl	800867a <USB_ReadInterrupts>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cac:	d104      	bne.n	8003cb8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cb6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f004 fcdc 	bl	800867a <USB_ReadInterrupts>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d103      	bne.n	8003cd4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f004 fcce 	bl	800867a <USB_ReadInterrupts>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce8:	d115      	bne.n	8003d16 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003cf2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d108      	bne.n	8003d16 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f005 fff1 	bl	8009cec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f004 fcd3 	bl	80086bc <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 fcad 	bl	800867a <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d2a:	d102      	bne.n	8003d32 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f001 f8ef 	bl	8004f10 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 fc9f 	bl	800867a <USB_ReadInterrupts>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d106      	bne.n	8003d54 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f005 ffb4 	bl	8009cb4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2208      	movs	r2, #8
 8003d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f004 fc8e 	bl	800867a <USB_ReadInterrupts>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d68:	d138      	bne.n	8003ddc <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 fcde 	bl	8008730 <USB_HC_ReadInterrupt>
 8003d74:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	e025      	b.n	8003dc8 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d018      	beq.n	8003dc2 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da6:	d106      	bne.n	8003db6 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f858 	bl	8003e64 <HCD_HC_IN_IRQHandler>
 8003db4:	e005      	b.n	8003dc2 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fc86 	bl	80046ce <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d3d4      	bcc.n	8003d7c <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 fc4a 	bl	800867a <USB_ReadInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d101      	bne.n	8003df4 <HAL_HCD_IRQHandler+0x1d2>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_HCD_IRQHandler+0x1d4>
 8003df4:	2300      	movs	r3, #0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0210 	bic.w	r2, r2, #16
 8003e08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 ffd4 	bl	8004db8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0210 	orr.w	r2, r2, #16
 8003e1e:	619a      	str	r2, [r3, #24]
 8003e20:	e000      	b.n	8003e24 <HAL_HCD_IRQHandler+0x202>
      return;
 8003e22:	bf00      	nop
    }
  }
}
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_HCD_Stop+0x16>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e00d      	b.n	8003e5c <HAL_HCD_Stop+0x32>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f004 fd7f 	bl	8008950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d119      	bne.n	8003ec8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	60d3      	str	r3, [r2, #12]
 8003ec6:	e0ce      	b.n	8004066 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	d12c      	bne.n	8003f3a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	335d      	adds	r3, #93	; 0x5d
 8003f04:	2207      	movs	r2, #7
 8003f06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	4611      	mov	r1, r2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f004 fc0d 	bl	8008752 <USB_HC_Halt>
 8003f38:	e095      	b.n	8004066 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d109      	bne.n	8003f64 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2320      	movs	r3, #32
 8003f60:	6093      	str	r3, [r2, #8]
 8003f62:	e080      	b.n	8004066 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d134      	bne.n	8003fe4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	0151      	lsls	r1, r2, #5
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	440a      	add	r2, r1
 8003f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	335d      	adds	r3, #93	; 0x5d
 8003faa:	2205      	movs	r2, #5
 8003fac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	2308      	movs	r3, #8
 8003fd0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f004 fbb8 	bl	8008752 <USB_HC_Halt>
 8003fe2:	e040      	b.n	8004066 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d134      	bne.n	8004066 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	440a      	add	r2, r1
 8004012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f004 fb93 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	461a      	mov	r2, r3
 800403a:	2310      	movs	r3, #16
 800403c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	440b      	add	r3, r1
 800404c:	335d      	adds	r3, #93	; 0x5d
 800404e:	2208      	movs	r2, #8
 8004050:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	461a      	mov	r2, r3
 8004060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004064:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d122      	bne.n	80040c4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	440a      	add	r2, r1
 8004094:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004098:	f043 0302 	orr.w	r3, r3, #2
 800409c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f004 fb52 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	461a      	mov	r2, r3
 80040bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80040c2:	e300      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	f040 80fd 	bne.w	80042d6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01b      	beq.n	800411c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	440b      	add	r3, r1
 80040f2:	3348      	adds	r3, #72	; 0x48
 80040f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	0159      	lsls	r1, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	440b      	add	r3, r1
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004108:	1ad1      	subs	r1, r2, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4403      	add	r3, r0
 8004118:	334c      	adds	r3, #76	; 0x4c
 800411a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	335d      	adds	r3, #93	; 0x5d
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	3358      	adds	r3, #88	; 0x58
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	2301      	movs	r3, #1
 8004154:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	333f      	adds	r3, #63	; 0x3f
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	440b      	add	r3, r1
 800417a:	333f      	adds	r3, #63	; 0x3f
 800417c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800417e:	2b02      	cmp	r3, #2
 8004180:	d121      	bne.n	80041c6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4413      	add	r3, r2
 800418a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	440a      	add	r2, r1
 8004198:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 fad0 	bl	8008752 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041be:	461a      	mov	r2, r3
 80041c0:	2310      	movs	r3, #16
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e070      	b.n	80042a8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	333f      	adds	r3, #63	; 0x3f
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d12a      	bne.n	8004232 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	335c      	adds	r3, #92	; 0x5c
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	b2d8      	uxtb	r0, r3
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	440b      	add	r3, r1
 8004222:	335c      	adds	r3, #92	; 0x5c
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4601      	mov	r1, r0
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f005 fd6c 	bl	8009d08 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004230:	e03a      	b.n	80042a8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	333f      	adds	r3, #63	; 0x3f
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d12f      	bne.n	80042a8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	335c      	adds	r3, #92	; 0x5c
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	3350      	adds	r3, #80	; 0x50
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	f083 0301 	eor.w	r3, r3, #1
 8004272:	b2d8      	uxtb	r0, r3
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	3350      	adds	r3, #80	; 0x50
 8004284:	4602      	mov	r2, r0
 8004286:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	b2d8      	uxtb	r0, r3
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	440b      	add	r3, r1
 800429a:	335c      	adds	r3, #92	; 0x5c
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	4601      	mov	r1, r0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f005 fd30 	bl	8009d08 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	440b      	add	r3, r1
 80042b6:	3350      	adds	r3, #80	; 0x50
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	f083 0301 	eor.w	r3, r3, #1
 80042be:	b2d8      	uxtb	r0, r3
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	3350      	adds	r3, #80	; 0x50
 80042d0:	4602      	mov	r2, r0
 80042d2:	701a      	strb	r2, [r3, #0]
}
 80042d4:	e1f7      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f040 811a 	bne.w	8004522 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	440a      	add	r2, r1
 8004304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004308:	f023 0302 	bic.w	r3, r3, #2
 800430c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	440b      	add	r3, r1
 800431c:	335d      	adds	r3, #93	; 0x5d
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d10a      	bne.n	800433a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	440b      	add	r3, r1
 8004332:	335c      	adds	r3, #92	; 0x5c
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e0d9      	b.n	80044ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	440b      	add	r3, r1
 8004348:	335d      	adds	r3, #93	; 0x5d
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b05      	cmp	r3, #5
 800434e:	d10a      	bne.n	8004366 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	440b      	add	r3, r1
 800435e:	335c      	adds	r3, #92	; 0x5c
 8004360:	2205      	movs	r2, #5
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e0c3      	b.n	80044ee <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	335d      	adds	r3, #93	; 0x5d
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b06      	cmp	r3, #6
 800437a:	d00a      	beq.n	8004392 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	335d      	adds	r3, #93	; 0x5d
 800438c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800438e:	2b08      	cmp	r3, #8
 8004390:	d156      	bne.n	8004440 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	3358      	adds	r3, #88	; 0x58
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	1c59      	adds	r1, r3, #1
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4403      	add	r3, r0
 80043b4:	3358      	adds	r3, #88	; 0x58
 80043b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	440b      	add	r3, r1
 80043c6:	3358      	adds	r3, #88	; 0x58
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d914      	bls.n	80043f8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	440b      	add	r3, r1
 80043dc:	3358      	adds	r3, #88	; 0x58
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	440b      	add	r3, r1
 80043f0:	335c      	adds	r3, #92	; 0x5c
 80043f2:	2204      	movs	r2, #4
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	e009      	b.n	800440c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	440b      	add	r3, r1
 8004406:	335c      	adds	r3, #92	; 0x5c
 8004408:	2202      	movs	r2, #2
 800440a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004422:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800442a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e056      	b.n	80044ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	440b      	add	r3, r1
 800444e:	335d      	adds	r3, #93	; 0x5d
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d123      	bne.n	800449e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	440b      	add	r3, r1
 8004464:	335c      	adds	r3, #92	; 0x5c
 8004466:	2202      	movs	r2, #2
 8004468:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4413      	add	r3, r2
 8004472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004480:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004488:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004496:	461a      	mov	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e027      	b.n	80044ee <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	440b      	add	r3, r1
 80044ac:	335d      	adds	r3, #93	; 0x5d
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	d11c      	bne.n	80044ee <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	440b      	add	r3, r1
 80044c2:	3358      	adds	r3, #88	; 0x58
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4403      	add	r3, r0
 80044d6:	3358      	adds	r3, #88	; 0x58
 80044d8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	440b      	add	r3, r1
 80044e8:	335c      	adds	r3, #92	; 0x5c
 80044ea:	2204      	movs	r2, #4
 80044ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fa:	461a      	mov	r2, r3
 80044fc:	2302      	movs	r3, #2
 80044fe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	b2d8      	uxtb	r0, r3
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	335c      	adds	r3, #92	; 0x5c
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	4601      	mov	r1, r0
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f005 fbf4 	bl	8009d08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004520:	e0d1      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d13e      	bne.n	80045b6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	440a      	add	r2, r1
 800454e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004552:	f043 0302 	orr.w	r3, r3, #2
 8004556:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	440b      	add	r3, r1
 8004566:	3358      	adds	r3, #88	; 0x58
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4403      	add	r3, r0
 800457a:	3358      	adds	r3, #88	; 0x58
 800457c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	440b      	add	r3, r1
 800458c:	335d      	adds	r3, #93	; 0x5d
 800458e:	2206      	movs	r2, #6
 8004590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f004 f8d8 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	461a      	mov	r2, r3
 80045b0:	2380      	movs	r3, #128	; 0x80
 80045b2:	6093      	str	r3, [r2, #8]
}
 80045b4:	e087      	b.n	80046c6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d17c      	bne.n	80046c6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	440b      	add	r3, r1
 80045da:	333f      	adds	r3, #63	; 0x3f
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d122      	bne.n	8004628 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4613      	mov	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	4413      	add	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	440b      	add	r3, r1
 80045f0:	3358      	adds	r3, #88	; 0x58
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	0151      	lsls	r1, r2, #5
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	440a      	add	r2, r1
 800460c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f004 f896 	bl	8008752 <USB_HC_Halt>
 8004626:	e045      	b.n	80046b4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	440b      	add	r3, r1
 8004636:	333f      	adds	r3, #63	; 0x3f
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4613      	mov	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	440b      	add	r3, r1
 800464c:	333f      	adds	r3, #63	; 0x3f
 800464e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004650:	2b02      	cmp	r3, #2
 8004652:	d12f      	bne.n	80046b4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	440b      	add	r3, r1
 8004662:	3358      	adds	r3, #88	; 0x58
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d121      	bne.n	80046b4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	440b      	add	r3, r1
 800467e:	335d      	adds	r3, #93	; 0x5d
 8004680:	2203      	movs	r2, #3
 8004682:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	440a      	add	r2, r1
 800469a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800469e:	f043 0302 	orr.w	r3, r3, #2
 80046a2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	4611      	mov	r1, r2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f004 f84f 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	461a      	mov	r2, r3
 80046c2:	2310      	movs	r3, #16
 80046c4:	6093      	str	r3, [r2, #8]
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d119      	bne.n	8004732 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470a:	461a      	mov	r2, r3
 800470c:	2304      	movs	r3, #4
 800470e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	440a      	add	r2, r1
 8004726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800472a:	f043 0302 	orr.w	r3, r3, #2
 800472e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004730:	e33e      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b20      	cmp	r3, #32
 8004746:	d141      	bne.n	80047cc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	461a      	mov	r2, r3
 8004756:	2320      	movs	r3, #32
 8004758:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	440b      	add	r3, r1
 8004768:	333d      	adds	r3, #61	; 0x3d
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	f040 831f 	bne.w	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	00db      	lsls	r3, r3, #3
 800477e:	440b      	add	r3, r1
 8004780:	333d      	adds	r3, #61	; 0x3d
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	440b      	add	r3, r1
 8004794:	335c      	adds	r3, #92	; 0x5c
 8004796:	2202      	movs	r2, #2
 8004798:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	0151      	lsls	r1, r2, #5
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	440a      	add	r2, r1
 80047b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047b4:	f043 0302 	orr.w	r3, r3, #2
 80047b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f003 ffc4 	bl	8008752 <USB_HC_Halt>
}
 80047ca:	e2f1      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b40      	cmp	r3, #64	; 0x40
 80047e0:	d13f      	bne.n	8004862 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	440b      	add	r3, r1
 80047f0:	335d      	adds	r3, #93	; 0x5d
 80047f2:	2204      	movs	r2, #4
 80047f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	440b      	add	r3, r1
 8004804:	333d      	adds	r3, #61	; 0x3d
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	440b      	add	r3, r1
 8004818:	3358      	adds	r3, #88	; 0x58
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	440a      	add	r2, r1
 8004834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f003 ff82 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485a:	461a      	mov	r2, r3
 800485c:	2340      	movs	r3, #64	; 0x40
 800485e:	6093      	str	r3, [r2, #8]
}
 8004860:	e2a6      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d122      	bne.n	80048c0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	440a      	add	r2, r1
 8004890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004894:	f043 0302 	orr.w	r3, r3, #2
 8004898:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f003 ff54 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	461a      	mov	r2, r3
 80048b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048bc:	6093      	str	r3, [r2, #8]
}
 80048be:	e277      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d135      	bne.n	8004942 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	440b      	add	r3, r1
 80048e4:	3358      	adds	r3, #88	; 0x58
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f003 ff1c 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	461a      	mov	r2, r3
 8004928:	2301      	movs	r3, #1
 800492a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	440b      	add	r3, r1
 800493a:	335d      	adds	r3, #93	; 0x5d
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
}
 8004940:	e236      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d12b      	bne.n	80049b0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4413      	add	r3, r2
 8004960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004964:	461a      	mov	r2, r3
 8004966:	2308      	movs	r3, #8
 8004968:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	440a      	add	r2, r1
 8004980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004984:	f043 0302 	orr.w	r3, r3, #2
 8004988:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f003 fedc 	bl	8008752 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	440b      	add	r3, r1
 80049a8:	335d      	adds	r3, #93	; 0x5d
 80049aa:	2205      	movs	r2, #5
 80049ac:	701a      	strb	r2, [r3, #0]
}
 80049ae:	e1ff      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	d155      	bne.n	8004a72 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4613      	mov	r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	440b      	add	r3, r1
 80049d4:	3358      	adds	r3, #88	; 0x58
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	440b      	add	r3, r1
 80049e8:	335d      	adds	r3, #93	; 0x5d
 80049ea:	2203      	movs	r2, #3
 80049ec:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	440b      	add	r3, r1
 80049fc:	333d      	adds	r3, #61	; 0x3d
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d114      	bne.n	8004a2e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	440b      	add	r3, r1
 8004a12:	333c      	adds	r3, #60	; 0x3c
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	440b      	add	r3, r1
 8004a28:	333d      	adds	r3, #61	; 0x3d
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a48:	f043 0302 	orr.w	r3, r3, #2
 8004a4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 fe7a 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	6093      	str	r3, [r2, #8]
}
 8004a70:	e19e      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d12b      	bne.n	8004ae0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aa2:	f043 0302 	orr.w	r3, r3, #2
 8004aa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 fe4d 	bl	8008752 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	335d      	adds	r3, #93	; 0x5d
 8004ac8:	2206      	movs	r2, #6
 8004aca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	6093      	str	r3, [r2, #8]
}
 8004ade:	e167      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af6:	d135      	bne.n	8004b64 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b12:	f043 0302 	orr.w	r3, r3, #2
 8004b16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 fe15 	bl	8008752 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	461a      	mov	r2, r3
 8004b36:	2310      	movs	r3, #16
 8004b38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b46:	461a      	mov	r2, r3
 8004b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	440b      	add	r3, r1
 8004b5c:	335d      	adds	r3, #93	; 0x5d
 8004b5e:	2208      	movs	r2, #8
 8004b60:	701a      	strb	r2, [r3, #0]
}
 8004b62:	e125      	b.n	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	f040 811a 	bne.w	8004db0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	0151      	lsls	r1, r2, #5
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	440a      	add	r2, r1
 8004b92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b96:	f023 0302 	bic.w	r3, r3, #2
 8004b9a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	440b      	add	r3, r1
 8004baa:	335d      	adds	r3, #93	; 0x5d
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d137      	bne.n	8004c22 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	440b      	add	r3, r1
 8004bc0:	335c      	adds	r3, #92	; 0x5c
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	440b      	add	r3, r1
 8004bd4:	333f      	adds	r3, #63	; 0x3f
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d00b      	beq.n	8004bf4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	440b      	add	r3, r1
 8004bea:	333f      	adds	r3, #63	; 0x3f
 8004bec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	f040 80c5 	bne.w	8004d7e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	440b      	add	r3, r1
 8004c02:	3351      	adds	r3, #81	; 0x51
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	f083 0301 	eor.w	r3, r3, #1
 8004c0a:	b2d8      	uxtb	r0, r3
 8004c0c:	6879      	ldr	r1, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	440b      	add	r3, r1
 8004c1a:	3351      	adds	r3, #81	; 0x51
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e0ad      	b.n	8004d7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	440b      	add	r3, r1
 8004c30:	335d      	adds	r3, #93	; 0x5d
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d10a      	bne.n	8004c4e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	440b      	add	r3, r1
 8004c46:	335c      	adds	r3, #92	; 0x5c
 8004c48:	2202      	movs	r2, #2
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e097      	b.n	8004d7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	335d      	adds	r3, #93	; 0x5d
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d10a      	bne.n	8004c7a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	440b      	add	r3, r1
 8004c72:	335c      	adds	r3, #92	; 0x5c
 8004c74:	2202      	movs	r2, #2
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e081      	b.n	8004d7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	335d      	adds	r3, #93	; 0x5d
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b05      	cmp	r3, #5
 8004c8e:	d10a      	bne.n	8004ca6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	440b      	add	r3, r1
 8004c9e:	335c      	adds	r3, #92	; 0x5c
 8004ca0:	2205      	movs	r2, #5
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	e06b      	b.n	8004d7e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	440b      	add	r3, r1
 8004cb4:	335d      	adds	r3, #93	; 0x5d
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d00a      	beq.n	8004cd2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	440b      	add	r3, r1
 8004cca:	335d      	adds	r3, #93	; 0x5d
 8004ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d155      	bne.n	8004d7e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	3358      	adds	r3, #88	; 0x58
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	1c59      	adds	r1, r3, #1
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4403      	add	r3, r0
 8004cf4:	3358      	adds	r3, #88	; 0x58
 8004cf6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	3358      	adds	r3, #88	; 0x58
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d914      	bls.n	8004d38 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3358      	adds	r3, #88	; 0x58
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	335c      	adds	r3, #92	; 0x5c
 8004d32:	2204      	movs	r2, #4
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e009      	b.n	8004d4c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	335c      	adds	r3, #92	; 0x5c
 8004d48:	2202      	movs	r2, #2
 8004d4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	b2d8      	uxtb	r0, r3
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	440b      	add	r3, r1
 8004da2:	335c      	adds	r3, #92	; 0x5c
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	4601      	mov	r1, r0
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f004 ffac 	bl	8009d08 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004db0:	bf00      	nop
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08a      	sub	sp, #40	; 0x28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	0c5b      	lsrs	r3, r3, #17
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d003      	beq.n	8004dfc <HCD_RXQLVL_IRQHandler+0x44>
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	f000 8082 	beq.w	8004efe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004dfa:	e083      	b.n	8004f04 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d07f      	beq.n	8004f02 <HCD_RXQLVL_IRQHandler+0x14a>
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	3344      	adds	r3, #68	; 0x44
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d074      	beq.n	8004f02 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	440b      	add	r3, r1
 8004e2a:	3344      	adds	r3, #68	; 0x44
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	b292      	uxth	r2, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f003 fbf8 	bl	8008628 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	440b      	add	r3, r1
 8004e46:	3344      	adds	r3, #68	; 0x44
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	18d1      	adds	r1, r2, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4403      	add	r3, r0
 8004e5c:	3344      	adds	r3, #68	; 0x44
 8004e5e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	334c      	adds	r3, #76	; 0x4c
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	18d1      	adds	r1, r2, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4403      	add	r3, r0
 8004e84:	334c      	adds	r3, #76	; 0x4c
 8004e86:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HCD_RXQLVL_IRQHandler+0x154>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d031      	beq.n	8004f02 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ebc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	3350      	adds	r3, #80	; 0x50
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	f083 0301 	eor.w	r3, r3, #1
 8004ee6:	b2d8      	uxtb	r0, r3
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3350      	adds	r3, #80	; 0x50
 8004ef8:	4602      	mov	r2, r0
 8004efa:	701a      	strb	r2, [r3, #0]
      break;
 8004efc:	e001      	b.n	8004f02 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004f02:	bf00      	nop
  }
}
 8004f04:	bf00      	nop
 8004f06:	3728      	adds	r7, #40	; 0x28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	1ff80000 	.word	0x1ff80000

08004f10 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f3c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d10b      	bne.n	8004f60 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d102      	bne.n	8004f58 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f004 febc 	bl	8009cd0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f043 0302 	orr.w	r3, r3, #2
 8004f5e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d132      	bne.n	8004fd0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f043 0308 	orr.w	r3, r3, #8
 8004f70:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d126      	bne.n	8004fca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d113      	bne.n	8004fac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f8e:	d106      	bne.n	8004f9e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2102      	movs	r1, #2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 fb90 	bl	80086bc <USB_InitFSLSPClkSel>
 8004f9c:	e011      	b.n	8004fc2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fb89 	bl	80086bc <USB_InitFSLSPClkSel>
 8004faa:	e00a      	b.n	8004fc2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004fc0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f004 feb2 	bl	8009d2c <HAL_HCD_PortEnabled_Callback>
 8004fc8:	e002      	b.n	8004fd0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f004 febc 	bl	8009d48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d103      	bne.n	8004fe2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0320 	orr.w	r3, r3, #32
 8004fe0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6013      	str	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e11f      	b.n	800524a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fb ff2c 	bl	8000e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800504a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800505a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800505c:	f001 f94c 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8005060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a7b      	ldr	r2, [pc, #492]	; (8005254 <HAL_I2C_Init+0x25c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d807      	bhi.n	800507c <HAL_I2C_Init+0x84>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a7a      	ldr	r2, [pc, #488]	; (8005258 <HAL_I2C_Init+0x260>)
 8005070:	4293      	cmp	r3, r2
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e006      	b.n	800508a <HAL_I2C_Init+0x92>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a77      	ldr	r2, [pc, #476]	; (800525c <HAL_I2C_Init+0x264>)
 8005080:	4293      	cmp	r3, r2
 8005082:	bf94      	ite	ls
 8005084:	2301      	movls	r3, #1
 8005086:	2300      	movhi	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0db      	b.n	800524a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a72      	ldr	r2, [pc, #456]	; (8005260 <HAL_I2C_Init+0x268>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	0c9b      	lsrs	r3, r3, #18
 800509c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a64      	ldr	r2, [pc, #400]	; (8005254 <HAL_I2C_Init+0x25c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d802      	bhi.n	80050cc <HAL_I2C_Init+0xd4>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	3301      	adds	r3, #1
 80050ca:	e009      	b.n	80050e0 <HAL_I2C_Init+0xe8>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	4a63      	ldr	r2, [pc, #396]	; (8005264 <HAL_I2C_Init+0x26c>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	3301      	adds	r3, #1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4956      	ldr	r1, [pc, #344]	; (8005254 <HAL_I2C_Init+0x25c>)
 80050fc:	428b      	cmp	r3, r1
 80050fe:	d80d      	bhi.n	800511c <HAL_I2C_Init+0x124>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	1e59      	subs	r1, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fbb1 f3f3 	udiv	r3, r1, r3
 800510e:	3301      	adds	r3, #1
 8005110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005114:	2b04      	cmp	r3, #4
 8005116:	bf38      	it	cc
 8005118:	2304      	movcc	r3, #4
 800511a:	e04f      	b.n	80051bc <HAL_I2C_Init+0x1c4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d111      	bne.n	8005148 <HAL_I2C_Init+0x150>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	1e58      	subs	r0, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6859      	ldr	r1, [r3, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	440b      	add	r3, r1
 8005132:	fbb0 f3f3 	udiv	r3, r0, r3
 8005136:	3301      	adds	r3, #1
 8005138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	e012      	b.n	800516e <HAL_I2C_Init+0x176>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	1e58      	subs	r0, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6859      	ldr	r1, [r3, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	0099      	lsls	r1, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	fbb0 f3f3 	udiv	r3, r0, r3
 800515e:	3301      	adds	r3, #1
 8005160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005164:	2b00      	cmp	r3, #0
 8005166:	bf0c      	ite	eq
 8005168:	2301      	moveq	r3, #1
 800516a:	2300      	movne	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Init+0x17e>
 8005172:	2301      	movs	r3, #1
 8005174:	e022      	b.n	80051bc <HAL_I2C_Init+0x1c4>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10e      	bne.n	800519c <HAL_I2C_Init+0x1a4>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1e58      	subs	r0, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6859      	ldr	r1, [r3, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	440b      	add	r3, r1
 800518c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005190:	3301      	adds	r3, #1
 8005192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519a:	e00f      	b.n	80051bc <HAL_I2C_Init+0x1c4>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	1e58      	subs	r0, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	0099      	lsls	r1, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b2:	3301      	adds	r3, #1
 80051b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6809      	ldr	r1, [r1, #0]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69da      	ldr	r2, [r3, #28]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6911      	ldr	r1, [r2, #16]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	4311      	orrs	r1, r2
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	000186a0 	.word	0x000186a0
 8005258:	001e847f 	.word	0x001e847f
 800525c:	003d08ff 	.word	0x003d08ff
 8005260:	431bde83 	.word	0x431bde83
 8005264:	10624dd3 	.word	0x10624dd3

08005268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b20      	cmp	r3, #32
 800527c:	d129      	bne.n	80052d2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2224      	movs	r2, #36	; 0x24
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0210 	bic.w	r2, r2, #16
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052ea:	2300      	movs	r3, #0
 80052ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d12a      	bne.n	8005350 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2224      	movs	r2, #36	; 0x24
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0201 	bic.w	r2, r2, #1
 8005310:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800531a:	89fb      	ldrh	r3, [r7, #14]
 800531c:	f023 030f 	bic.w	r3, r3, #15
 8005320:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	b29a      	uxth	r2, r3
 8005326:	89fb      	ldrh	r3, [r7, #14]
 8005328:	4313      	orrs	r3, r2
 800532a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	89fa      	ldrh	r2, [r7, #14]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005350:	2302      	movs	r3, #2
  }
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0bf      	b.n	80054f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fb fe96 	bl	80010b8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80053a2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053b8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6899      	ldr	r1, [r3, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b4a      	ldr	r3, [pc, #296]	; (80054fc <HAL_LTDC_Init+0x19c>)
 80053d4:	400b      	ands	r3, r1
 80053d6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6899      	ldr	r1, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699a      	ldr	r2, [r3, #24]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68d9      	ldr	r1, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	4b3e      	ldr	r3, [pc, #248]	; (80054fc <HAL_LTDC_Init+0x19c>)
 8005402:	400b      	ands	r3, r1
 8005404:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	041b      	lsls	r3, r3, #16
 800540c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6919      	ldr	r1, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b33      	ldr	r3, [pc, #204]	; (80054fc <HAL_LTDC_Init+0x19c>)
 8005430:	400b      	ands	r3, r1
 8005432:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6919      	ldr	r1, [r3, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6959      	ldr	r1, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b27      	ldr	r3, [pc, #156]	; (80054fc <HAL_LTDC_Init+0x19c>)
 800545e:	400b      	ands	r3, r1
 8005460:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6959      	ldr	r1, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005490:	041b      	lsls	r3, r3, #16
 8005492:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80054a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0206 	orr.w	r2, r2, #6
 80054ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	f000f800 	.word	0xf000f800

08005500 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005516:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	d023      	beq.n	800556a <HAL_LTDC_IRQHandler+0x6a>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01e      	beq.n	800556a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0204 	bic.w	r2, r2, #4
 800553a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2204      	movs	r2, #4
 8005542:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800554a:	f043 0201 	orr.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2204      	movs	r2, #4
 8005558:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f86f 	bl	8005648 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d023      	beq.n	80055bc <HAL_LTDC_IRQHandler+0xbc>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01e      	beq.n	80055bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0202 	bic.w	r2, r2, #2
 800558c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2202      	movs	r2, #2
 8005594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800559c:	f043 0202 	orr.w	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2204      	movs	r2, #4
 80055aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f846 	bl	8005648 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01b      	beq.n	80055fe <HAL_LTDC_IRQHandler+0xfe>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2201      	movs	r2, #1
 80055e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f82f 	bl	800565c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01b      	beq.n	8005640 <HAL_LTDC_IRQHandler+0x140>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d016      	beq.n	8005640 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2208      	movs	r2, #8
 8005628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f818 	bl	8005670 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005640:	bf00      	nop
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005684:	b5b0      	push	{r4, r5, r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005696:	2b01      	cmp	r3, #1
 8005698:	d101      	bne.n	800569e <HAL_LTDC_ConfigLayer+0x1a>
 800569a:	2302      	movs	r3, #2
 800569c:	e02c      	b.n	80056f8 <HAL_LTDC_ConfigLayer+0x74>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2134      	movs	r1, #52	; 0x34
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4614      	mov	r4, r2
 80056c2:	461d      	mov	r5, r3
 80056c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f83b 	bl	8005754 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2201      	movs	r2, #1
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bdb0      	pop	{r4, r5, r7, pc}

08005700 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_LTDC_EnableDither+0x16>
 8005712:	2302      	movs	r3, #2
 8005714:	e016      	b.n	8005744 <HAL_LTDC_EnableDither+0x44>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <HAL_LTDC_EnableDither+0x50>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4a09      	ldr	r2, [pc, #36]	; (8005750 <HAL_LTDC_EnableDither+0x50>)
 800572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005730:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40016800 	.word	0x40016800

08005754 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005754:	b480      	push	{r7}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005770:	4413      	add	r3, r2
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	01db      	lsls	r3, r3, #7
 8005780:	4413      	add	r3, r2
 8005782:	3384      	adds	r3, #132	; 0x84
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	4611      	mov	r1, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	01d2      	lsls	r2, r2, #7
 8005790:	440a      	add	r2, r1
 8005792:	3284      	adds	r2, #132	; 0x84
 8005794:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005798:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057aa:	4413      	add	r3, r2
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	01db      	lsls	r3, r3, #7
 80057b8:	440b      	add	r3, r1
 80057ba:	3384      	adds	r3, #132	; 0x84
 80057bc:	4619      	mov	r1, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d2:	4413      	add	r3, r2
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	4413      	add	r3, r2
 80057e4:	3384      	adds	r3, #132	; 0x84
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	4611      	mov	r1, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	01d2      	lsls	r2, r2, #7
 80057f2:	440a      	add	r2, r1
 80057f4:	3284      	adds	r2, #132	; 0x84
 80057f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80057fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800580a:	4413      	add	r3, r2
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	01db      	lsls	r3, r3, #7
 8005818:	440b      	add	r3, r1
 800581a:	3384      	adds	r3, #132	; 0x84
 800581c:	4619      	mov	r1, r3
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4313      	orrs	r3, r2
 8005822:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	; 0x84
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	4611      	mov	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	01d2      	lsls	r2, r2, #7
 800583e:	440a      	add	r2, r1
 8005840:	3284      	adds	r2, #132	; 0x84
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	01db      	lsls	r3, r3, #7
 8005852:	4413      	add	r3, r2
 8005854:	3384      	adds	r3, #132	; 0x84
 8005856:	461a      	mov	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	3384      	adds	r3, #132	; 0x84
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	01db      	lsls	r3, r3, #7
 8005894:	4413      	add	r3, r2
 8005896:	3384      	adds	r3, #132	; 0x84
 8005898:	461a      	mov	r2, r3
 800589a:	2300      	movs	r3, #0
 800589c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058a4:	461a      	mov	r2, r3
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	01db      	lsls	r3, r3, #7
 80058b8:	440b      	add	r3, r1
 80058ba:	3384      	adds	r3, #132	; 0x84
 80058bc:	4619      	mov	r1, r3
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	01db      	lsls	r3, r3, #7
 80058ce:	4413      	add	r3, r2
 80058d0:	3384      	adds	r3, #132	; 0x84
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	4611      	mov	r1, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	01d2      	lsls	r2, r2, #7
 80058de:	440a      	add	r2, r1
 80058e0:	3284      	adds	r2, #132	; 0x84
 80058e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058e6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	01db      	lsls	r3, r3, #7
 80058f2:	4413      	add	r3, r2
 80058f4:	3384      	adds	r3, #132	; 0x84
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	01db      	lsls	r3, r3, #7
 8005908:	4413      	add	r3, r2
 800590a:	3384      	adds	r3, #132	; 0x84
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	4611      	mov	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	01d2      	lsls	r2, r2, #7
 8005918:	440a      	add	r2, r1
 800591a:	3284      	adds	r2, #132	; 0x84
 800591c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	6809      	ldr	r1, [r1, #0]
 8005932:	4608      	mov	r0, r1
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	01c9      	lsls	r1, r1, #7
 8005938:	4401      	add	r1, r0
 800593a:	3184      	adds	r1, #132	; 0x84
 800593c:	4313      	orrs	r3, r2
 800593e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	01db      	lsls	r3, r3, #7
 800594a:	4413      	add	r3, r2
 800594c:	3384      	adds	r3, #132	; 0x84
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	01db      	lsls	r3, r3, #7
 800595a:	4413      	add	r3, r2
 800595c:	3384      	adds	r3, #132	; 0x84
 800595e:	461a      	mov	r2, r3
 8005960:	2300      	movs	r3, #0
 8005962:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	01db      	lsls	r3, r3, #7
 800596e:	4413      	add	r3, r2
 8005970:	3384      	adds	r3, #132	; 0x84
 8005972:	461a      	mov	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005982:	2304      	movs	r3, #4
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e01b      	b.n	80059c0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d102      	bne.n	8005996 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005990:	2303      	movs	r3, #3
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e014      	b.n	80059c0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d00b      	beq.n	80059b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d007      	beq.n	80059b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d003      	beq.n	80059b6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	d102      	bne.n	80059bc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80059b6:	2302      	movs	r3, #2
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	e001      	b.n	80059c0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	01db      	lsls	r3, r3, #7
 80059ca:	4413      	add	r3, r2
 80059cc:	3384      	adds	r3, #132	; 0x84
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	4611      	mov	r1, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	01d2      	lsls	r2, r2, #7
 80059da:	440a      	add	r2, r1
 80059dc:	3284      	adds	r2, #132	; 0x84
 80059de:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80059e2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	fb02 f303 	mul.w	r3, r2, r3
 80059ee:	041a      	lsls	r2, r3, #16
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1acb      	subs	r3, r1, r3
 80059fa:	69f9      	ldr	r1, [r7, #28]
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	3303      	adds	r3, #3
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	6809      	ldr	r1, [r1, #0]
 8005a06:	4608      	mov	r0, r1
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	01c9      	lsls	r1, r1, #7
 8005a0c:	4401      	add	r1, r0
 8005a0e:	3184      	adds	r1, #132	; 0x84
 8005a10:	4313      	orrs	r3, r2
 8005a12:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	01db      	lsls	r3, r3, #7
 8005a1e:	4413      	add	r3, r2
 8005a20:	3384      	adds	r3, #132	; 0x84
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	01d2      	lsls	r2, r2, #7
 8005a2e:	440a      	add	r2, r1
 8005a30:	3284      	adds	r2, #132	; 0x84
 8005a32:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	01db      	lsls	r3, r3, #7
 8005a46:	4413      	add	r3, r2
 8005a48:	3384      	adds	r3, #132	; 0x84
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	01db      	lsls	r3, r3, #7
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3384      	adds	r3, #132	; 0x84
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	4611      	mov	r1, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	01d2      	lsls	r2, r2, #7
 8005a6c:	440a      	add	r2, r1
 8005a6e:	3284      	adds	r2, #132	; 0x84
 8005a70:	f043 0301 	orr.w	r3, r3, #1
 8005a74:	6013      	str	r3, [r2, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3724      	adds	r7, #36	; 0x24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e25b      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d075      	beq.n	8005b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aa2:	4ba3      	ldr	r3, [pc, #652]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d00c      	beq.n	8005ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aae:	4ba0      	ldr	r3, [pc, #640]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d112      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aba:	4b9d      	ldr	r3, [pc, #628]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ac6:	d10b      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac8:	4b99      	ldr	r3, [pc, #612]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d05b      	beq.n	8005b8c <HAL_RCC_OscConfig+0x108>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d157      	bne.n	8005b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e236      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae8:	d106      	bne.n	8005af8 <HAL_RCC_OscConfig+0x74>
 8005aea:	4b91      	ldr	r3, [pc, #580]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a90      	ldr	r2, [pc, #576]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e01d      	b.n	8005b34 <HAL_RCC_OscConfig+0xb0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x98>
 8005b02:	4b8b      	ldr	r3, [pc, #556]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a8a      	ldr	r2, [pc, #552]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b88      	ldr	r3, [pc, #544]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a87      	ldr	r2, [pc, #540]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCC_OscConfig+0xb0>
 8005b1c:	4b84      	ldr	r3, [pc, #528]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a83      	ldr	r2, [pc, #524]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b81      	ldr	r3, [pc, #516]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a80      	ldr	r2, [pc, #512]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d013      	beq.n	8005b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3c:	f7fc ff20 	bl	8002980 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fc ff1c 	bl	8002980 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e1fb      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	4b76      	ldr	r3, [pc, #472]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0xc0>
 8005b62:	e014      	b.n	8005b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fc ff0c 	bl	8002980 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fc ff08 	bl	8002980 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e1e7      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7e:	4b6c      	ldr	r3, [pc, #432]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0xe8>
 8005b8a:	e000      	b.n	8005b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d063      	beq.n	8005c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b9a:	4b65      	ldr	r3, [pc, #404]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ba6:	4b62      	ldr	r3, [pc, #392]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d11c      	bne.n	8005bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bb2:	4b5f      	ldr	r3, [pc, #380]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d116      	bne.n	8005bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bbe:	4b5c      	ldr	r3, [pc, #368]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x152>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e1bb      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd6:	4b56      	ldr	r3, [pc, #344]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	4952      	ldr	r1, [pc, #328]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bea:	e03a      	b.n	8005c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bf4:	4b4f      	ldr	r3, [pc, #316]	; (8005d34 <HAL_RCC_OscConfig+0x2b0>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fc fec1 	bl	8002980 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c02:	f7fc febd 	bl	8002980 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e19c      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c14:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c20:	4b43      	ldr	r3, [pc, #268]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4940      	ldr	r1, [pc, #256]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]
 8005c34:	e015      	b.n	8005c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c36:	4b3f      	ldr	r3, [pc, #252]	; (8005d34 <HAL_RCC_OscConfig+0x2b0>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3c:	f7fc fea0 	bl	8002980 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c44:	f7fc fe9c 	bl	8002980 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e17b      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0302 	and.w	r3, r3, #2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d030      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c76:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <HAL_RCC_OscConfig+0x2b4>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7c:	f7fc fe80 	bl	8002980 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c84:	f7fc fe7c 	bl	8002980 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e15b      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c96:	4b26      	ldr	r3, [pc, #152]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0x200>
 8005ca2:	e015      	b.n	8005cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ca4:	4b24      	ldr	r3, [pc, #144]	; (8005d38 <HAL_RCC_OscConfig+0x2b4>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005caa:	f7fc fe69 	bl	8002980 <HAL_GetTick>
 8005cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb2:	f7fc fe65 	bl	8002980 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e144      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc4:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1f0      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80a0 	beq.w	8005e1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce2:	4b13      	ldr	r3, [pc, #76]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10f      	bne.n	8005d0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cee:	2300      	movs	r3, #0
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d0e:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_OscConfig+0x2b8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d121      	bne.n	8005d5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1a:	4b08      	ldr	r3, [pc, #32]	; (8005d3c <HAL_RCC_OscConfig+0x2b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a07      	ldr	r2, [pc, #28]	; (8005d3c <HAL_RCC_OscConfig+0x2b8>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d26:	f7fc fe2b 	bl	8002980 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	e011      	b.n	8005d52 <HAL_RCC_OscConfig+0x2ce>
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800
 8005d34:	42470000 	.word	0x42470000
 8005d38:	42470e80 	.word	0x42470e80
 8005d3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d40:	f7fc fe1e 	bl	8002980 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e0fd      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d52:	4b81      	ldr	r3, [pc, #516]	; (8005f58 <HAL_RCC_OscConfig+0x4d4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d106      	bne.n	8005d74 <HAL_RCC_OscConfig+0x2f0>
 8005d66:	4b7d      	ldr	r3, [pc, #500]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6a:	4a7c      	ldr	r2, [pc, #496]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
 8005d72:	e01c      	b.n	8005dae <HAL_RCC_OscConfig+0x32a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b05      	cmp	r3, #5
 8005d7a:	d10c      	bne.n	8005d96 <HAL_RCC_OscConfig+0x312>
 8005d7c:	4b77      	ldr	r3, [pc, #476]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	4a76      	ldr	r2, [pc, #472]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d82:	f043 0304 	orr.w	r3, r3, #4
 8005d86:	6713      	str	r3, [r2, #112]	; 0x70
 8005d88:	4b74      	ldr	r3, [pc, #464]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8c:	4a73      	ldr	r2, [pc, #460]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	6713      	str	r3, [r2, #112]	; 0x70
 8005d94:	e00b      	b.n	8005dae <HAL_RCC_OscConfig+0x32a>
 8005d96:	4b71      	ldr	r3, [pc, #452]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a70      	ldr	r2, [pc, #448]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	4b6e      	ldr	r3, [pc, #440]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a6d      	ldr	r2, [pc, #436]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d015      	beq.n	8005de2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db6:	f7fc fde3 	bl	8002980 <HAL_GetTick>
 8005dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbc:	e00a      	b.n	8005dd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fc fddf 	bl	8002980 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e0bc      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd4:	4b61      	ldr	r3, [pc, #388]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ee      	beq.n	8005dbe <HAL_RCC_OscConfig+0x33a>
 8005de0:	e014      	b.n	8005e0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de2:	f7fc fdcd 	bl	8002980 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7fc fdc9 	bl	8002980 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0a6      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e00:	4b56      	ldr	r3, [pc, #344]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1ee      	bne.n	8005dea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d105      	bne.n	8005e1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e12:	4b52      	ldr	r3, [pc, #328]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	4a51      	ldr	r2, [pc, #324]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 8092 	beq.w	8005f4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e28:	4b4c      	ldr	r3, [pc, #304]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 030c 	and.w	r3, r3, #12
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d05c      	beq.n	8005eee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d141      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3c:	4b48      	ldr	r3, [pc, #288]	; (8005f60 <HAL_RCC_OscConfig+0x4dc>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e42:	f7fc fd9d 	bl	8002980 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fc fd99 	bl	8002980 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e078      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5c:	4b3f      	ldr	r3, [pc, #252]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	019b      	lsls	r3, r3, #6
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	085b      	lsrs	r3, r3, #1
 8005e80:	3b01      	subs	r3, #1
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	061b      	lsls	r3, r3, #24
 8005e8c:	4933      	ldr	r1, [pc, #204]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e92:	4b33      	ldr	r3, [pc, #204]	; (8005f60 <HAL_RCC_OscConfig+0x4dc>)
 8005e94:	2201      	movs	r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fc fd72 	bl	8002980 <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea0:	f7fc fd6e 	bl	8002980 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e04d      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb2:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x41c>
 8005ebe:	e045      	b.n	8005f4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec0:	4b27      	ldr	r3, [pc, #156]	; (8005f60 <HAL_RCC_OscConfig+0x4dc>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec6:	f7fc fd5b 	bl	8002980 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ece:	f7fc fd57 	bl	8002980 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e036      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee0:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f0      	bne.n	8005ece <HAL_RCC_OscConfig+0x44a>
 8005eec:	e02e      	b.n	8005f4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e029      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005efa:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <HAL_RCC_OscConfig+0x4d8>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d11c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d115      	bne.n	8005f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f22:	4013      	ands	r3, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d10d      	bne.n	8005f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d106      	bne.n	8005f48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d001      	beq.n	8005f4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e000      	b.n	8005f4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40007000 	.word	0x40007000
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	42470060 	.word	0x42470060

08005f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e0cc      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f78:	4b68      	ldr	r3, [pc, #416]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	683a      	ldr	r2, [r7, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d90c      	bls.n	8005fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f86:	4b65      	ldr	r3, [pc, #404]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8e:	4b63      	ldr	r3, [pc, #396]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0b8      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d020      	beq.n	8005fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fb8:	4b59      	ldr	r3, [pc, #356]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	4a58      	ldr	r2, [pc, #352]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd0:	4b53      	ldr	r3, [pc, #332]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	4a52      	ldr	r2, [pc, #328]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fdc:	4b50      	ldr	r3, [pc, #320]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	494d      	ldr	r1, [pc, #308]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d044      	beq.n	8006084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d107      	bne.n	8006012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006002:	4b47      	ldr	r3, [pc, #284]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d119      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e07f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d003      	beq.n	8006022 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800601e:	2b03      	cmp	r3, #3
 8006020:	d107      	bne.n	8006032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006022:	4b3f      	ldr	r3, [pc, #252]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e06f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006032:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e067      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 0203 	bic.w	r2, r3, #3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4934      	ldr	r1, [pc, #208]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006054:	f7fc fc94 	bl	8002980 <HAL_GetTick>
 8006058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800605a:	e00a      	b.n	8006072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605c:	f7fc fc90 	bl	8002980 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	4293      	cmp	r3, r2
 800606c:	d901      	bls.n	8006072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e04f      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006072:	4b2b      	ldr	r3, [pc, #172]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 020c 	and.w	r2, r3, #12
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	429a      	cmp	r2, r3
 8006082:	d1eb      	bne.n	800605c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 030f 	and.w	r3, r3, #15
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d20c      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d001      	beq.n	80060ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e032      	b.n	8006112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060b8:	4b19      	ldr	r3, [pc, #100]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4916      	ldr	r1, [pc, #88]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060d6:	4b12      	ldr	r3, [pc, #72]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	490e      	ldr	r1, [pc, #56]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ea:	f000 f821 	bl	8006130 <HAL_RCC_GetSysClockFreq>
 80060ee:	4601      	mov	r1, r0
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_RCC_ClockConfig+0x1bc>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	4a0a      	ldr	r2, [pc, #40]	; (8006124 <HAL_RCC_ClockConfig+0x1c0>)
 80060fc:	5cd3      	ldrb	r3, [r2, r3]
 80060fe:	fa21 f303 	lsr.w	r3, r1, r3
 8006102:	4a09      	ldr	r2, [pc, #36]	; (8006128 <HAL_RCC_ClockConfig+0x1c4>)
 8006104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <HAL_RCC_ClockConfig+0x1c8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fb fa8c 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023c00 	.word	0x40023c00
 8006120:	40023800 	.word	0x40023800
 8006124:	08009e7c 	.word	0x08009e7c
 8006128:	20000000 	.word	0x20000000
 800612c:	2000004c 	.word	0x2000004c

08006130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	2300      	movs	r3, #0
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006146:	4b63      	ldr	r3, [pc, #396]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 030c 	and.w	r3, r3, #12
 800614e:	2b04      	cmp	r3, #4
 8006150:	d007      	beq.n	8006162 <HAL_RCC_GetSysClockFreq+0x32>
 8006152:	2b08      	cmp	r3, #8
 8006154:	d008      	beq.n	8006168 <HAL_RCC_GetSysClockFreq+0x38>
 8006156:	2b00      	cmp	r3, #0
 8006158:	f040 80b4 	bne.w	80062c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800615c:	4b5e      	ldr	r3, [pc, #376]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800615e:	60bb      	str	r3, [r7, #8]
       break;
 8006160:	e0b3      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006162:	4b5e      	ldr	r3, [pc, #376]	; (80062dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006164:	60bb      	str	r3, [r7, #8]
      break;
 8006166:	e0b0      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006168:	4b5a      	ldr	r3, [pc, #360]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006170:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006172:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d04a      	beq.n	8006214 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800617e:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	099b      	lsrs	r3, r3, #6
 8006184:	f04f 0400 	mov.w	r4, #0
 8006188:	f240 11ff 	movw	r1, #511	; 0x1ff
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	ea03 0501 	and.w	r5, r3, r1
 8006194:	ea04 0602 	and.w	r6, r4, r2
 8006198:	4629      	mov	r1, r5
 800619a:	4632      	mov	r2, r6
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	f04f 0400 	mov.w	r4, #0
 80061a4:	0154      	lsls	r4, r2, #5
 80061a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80061aa:	014b      	lsls	r3, r1, #5
 80061ac:	4619      	mov	r1, r3
 80061ae:	4622      	mov	r2, r4
 80061b0:	1b49      	subs	r1, r1, r5
 80061b2:	eb62 0206 	sbc.w	r2, r2, r6
 80061b6:	f04f 0300 	mov.w	r3, #0
 80061ba:	f04f 0400 	mov.w	r4, #0
 80061be:	0194      	lsls	r4, r2, #6
 80061c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80061c4:	018b      	lsls	r3, r1, #6
 80061c6:	1a5b      	subs	r3, r3, r1
 80061c8:	eb64 0402 	sbc.w	r4, r4, r2
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	00e2      	lsls	r2, r4, #3
 80061d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80061da:	00d9      	lsls	r1, r3, #3
 80061dc:	460b      	mov	r3, r1
 80061de:	4614      	mov	r4, r2
 80061e0:	195b      	adds	r3, r3, r5
 80061e2:	eb44 0406 	adc.w	r4, r4, r6
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	0262      	lsls	r2, r4, #9
 80061f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80061f4:	0259      	lsls	r1, r3, #9
 80061f6:	460b      	mov	r3, r1
 80061f8:	4614      	mov	r4, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	4621      	mov	r1, r4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f04f 0400 	mov.w	r4, #0
 8006204:	461a      	mov	r2, r3
 8006206:	4623      	mov	r3, r4
 8006208:	f7f9 fff2 	bl	80001f0 <__aeabi_uldivmod>
 800620c:	4603      	mov	r3, r0
 800620e:	460c      	mov	r4, r1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	e049      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006214:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	099b      	lsrs	r3, r3, #6
 800621a:	f04f 0400 	mov.w	r4, #0
 800621e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	ea03 0501 	and.w	r5, r3, r1
 800622a:	ea04 0602 	and.w	r6, r4, r2
 800622e:	4629      	mov	r1, r5
 8006230:	4632      	mov	r2, r6
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	f04f 0400 	mov.w	r4, #0
 800623a:	0154      	lsls	r4, r2, #5
 800623c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006240:	014b      	lsls	r3, r1, #5
 8006242:	4619      	mov	r1, r3
 8006244:	4622      	mov	r2, r4
 8006246:	1b49      	subs	r1, r1, r5
 8006248:	eb62 0206 	sbc.w	r2, r2, r6
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	f04f 0400 	mov.w	r4, #0
 8006254:	0194      	lsls	r4, r2, #6
 8006256:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800625a:	018b      	lsls	r3, r1, #6
 800625c:	1a5b      	subs	r3, r3, r1
 800625e:	eb64 0402 	sbc.w	r4, r4, r2
 8006262:	f04f 0100 	mov.w	r1, #0
 8006266:	f04f 0200 	mov.w	r2, #0
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006270:	00d9      	lsls	r1, r3, #3
 8006272:	460b      	mov	r3, r1
 8006274:	4614      	mov	r4, r2
 8006276:	195b      	adds	r3, r3, r5
 8006278:	eb44 0406 	adc.w	r4, r4, r6
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	02a2      	lsls	r2, r4, #10
 8006286:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800628a:	0299      	lsls	r1, r3, #10
 800628c:	460b      	mov	r3, r1
 800628e:	4614      	mov	r4, r2
 8006290:	4618      	mov	r0, r3
 8006292:	4621      	mov	r1, r4
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f04f 0400 	mov.w	r4, #0
 800629a:	461a      	mov	r2, r3
 800629c:	4623      	mov	r3, r4
 800629e:	f7f9 ffa7 	bl	80001f0 <__aeabi_uldivmod>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	3301      	adds	r3, #1
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	60bb      	str	r3, [r7, #8]
      break;
 80062c2:	e002      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80062c6:	60bb      	str	r3, [r7, #8]
      break;
 80062c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ca:	68bb      	ldr	r3, [r7, #8]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d4:	40023800 	.word	0x40023800
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	007a1200 	.word	0x007a1200

080062e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e4:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000000 	.word	0x20000000

080062f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062fc:	f7ff fff0 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006300:	4601      	mov	r1, r0
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0a9b      	lsrs	r3, r3, #10
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4a03      	ldr	r2, [pc, #12]	; (800631c <HAL_RCC_GetPCLK1Freq+0x24>)
 800630e:	5cd3      	ldrb	r3, [r2, r3]
 8006310:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	40023800 	.word	0x40023800
 800631c:	08009e8c 	.word	0x08009e8c

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006324:	f7ff ffdc 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006328:	4601      	mov	r1, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0b5b      	lsrs	r3, r3, #13
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4a03      	ldr	r2, [pc, #12]	; (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006336:	5cd3      	ldrb	r3, [r2, r3]
 8006338:	fa21 f303 	lsr.w	r3, r1, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	08009e8c 	.word	0x08009e8c

08006348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	220f      	movs	r2, #15
 8006356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006358:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0203 	and.w	r2, r3, #3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006364:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800637c:	4b09      	ldr	r3, [pc, #36]	; (80063a4 <HAL_RCC_GetClockConfig+0x5c>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	08db      	lsrs	r3, r3, #3
 8006382:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800638a:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <HAL_RCC_GetClockConfig+0x60>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 020f 	and.w	r2, r3, #15
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	601a      	str	r2, [r3, #0]
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40023c00 	.word	0x40023c00

080063ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d075      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063e0:	4bad      	ldr	r3, [pc, #692]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063e6:	f7fc facb 	bl	8002980 <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80063ec:	e008      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80063ee:	f7fc fac7 	bl	8002980 <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e18b      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006400:	4ba6      	ldr	r3, [pc, #664]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f0      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d009      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	019a      	lsls	r2, r3, #6
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	071b      	lsls	r3, r3, #28
 8006424:	499d      	ldr	r1, [pc, #628]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01f      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006438:	4b98      	ldr	r3, [pc, #608]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800643a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800643e:	0f1b      	lsrs	r3, r3, #28
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	019a      	lsls	r2, r3, #6
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	431a      	orrs	r2, r3
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	071b      	lsls	r3, r3, #28
 8006458:	4990      	ldr	r1, [pc, #576]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006460:	4b8e      	ldr	r3, [pc, #568]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006466:	f023 021f 	bic.w	r2, r3, #31
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	3b01      	subs	r3, #1
 8006470:	498a      	ldr	r1, [pc, #552]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00d      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	019a      	lsls	r2, r3, #6
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	061b      	lsls	r3, r3, #24
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	071b      	lsls	r3, r3, #28
 8006498:	4980      	ldr	r1, [pc, #512]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064a0:	4b7d      	ldr	r3, [pc, #500]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064a6:	f7fc fa6b 	bl	8002980 <HAL_GetTick>
 80064aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ae:	f7fc fa67 	bl	8002980 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e12b      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064c0:	4b76      	ldr	r3, [pc, #472]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d079      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064e4:	4b6e      	ldr	r3, [pc, #440]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ea:	f7fc fa49 	bl	8002980 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80064f2:	f7fc fa45 	bl	8002980 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e109      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006504:	4b65      	ldr	r3, [pc, #404]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800650c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006510:	d0ef      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d020      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800651e:	4b5f      	ldr	r3, [pc, #380]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	0f1b      	lsrs	r3, r3, #28
 8006526:	f003 0307 	and.w	r3, r3, #7
 800652a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	019a      	lsls	r2, r3, #6
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	061b      	lsls	r3, r3, #24
 8006538:	431a      	orrs	r2, r3
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	071b      	lsls	r3, r3, #28
 800653e:	4957      	ldr	r1, [pc, #348]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006546:	4b55      	ldr	r3, [pc, #340]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	3b01      	subs	r3, #1
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	4950      	ldr	r1, [pc, #320]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800655a:	4313      	orrs	r3, r2
 800655c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01e      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800656c:	4b4b      	ldr	r3, [pc, #300]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006572:	0e1b      	lsrs	r3, r3, #24
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	019a      	lsls	r2, r3, #6
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	061b      	lsls	r3, r3, #24
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	071b      	lsls	r3, r3, #28
 800658c:	4943      	ldr	r1, [pc, #268]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006594:	4b41      	ldr	r3, [pc, #260]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800659a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	493e      	ldr	r1, [pc, #248]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065aa:	4b3d      	ldr	r3, [pc, #244]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065b0:	f7fc f9e6 	bl	8002980 <HAL_GetTick>
 80065b4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80065b8:	f7fc f9e2 	bl	8002980 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e0a6      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065ca:	4b34      	ldr	r3, [pc, #208]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d6:	d1ef      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 808d 	beq.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	4b2c      	ldr	r3, [pc, #176]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	4a2b      	ldr	r2, [pc, #172]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f4:	6413      	str	r3, [r2, #64]	; 0x40
 80065f6:	4b29      	ldr	r3, [pc, #164]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006602:	4b28      	ldr	r3, [pc, #160]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a27      	ldr	r2, [pc, #156]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800660e:	f7fc f9b7 	bl	8002980 <HAL_GetTick>
 8006612:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006616:	f7fc f9b3 	bl	8002980 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e077      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006628:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d039      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	d032      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800665c:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006662:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006668:	4a0c      	ldr	r2, [pc, #48]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800666e:	4b0b      	ldr	r3, [pc, #44]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b01      	cmp	r3, #1
 8006678:	d11e      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800667a:	f7fc f981 	bl	8002980 <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006680:	e014      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006682:	f7fc f97d 	bl	8002980 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006690:	4293      	cmp	r3, r2
 8006692:	d90b      	bls.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e03f      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006698:	42470068 	.word	0x42470068
 800669c:	40023800 	.word	0x40023800
 80066a0:	42470070 	.word	0x42470070
 80066a4:	40007000 	.word	0x40007000
 80066a8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ac:	4b1c      	ldr	r3, [pc, #112]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0e4      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c4:	d10d      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80066c6:	4b16      	ldr	r3, [pc, #88]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	4911      	ldr	r1, [pc, #68]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	608b      	str	r3, [r1, #8]
 80066e0:	e005      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x342>
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	4a0e      	ldr	r2, [pc, #56]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fa:	4909      	ldr	r1, [pc, #36]	; (8006720 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d004      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006712:	4b04      	ldr	r3, [pc, #16]	; (8006724 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006714:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	40023800 	.word	0x40023800
 8006724:	424711e0 	.word	0x424711e0

08006728 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e025      	b.n	8006788 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fa fa2d 	bl	8000bb0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	3304      	adds	r3, #4
 8006766:	4619      	mov	r1, r3
 8006768:	4610      	mov	r0, r2
 800676a:	f001 fdb1 	bl	80082d0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	461a      	mov	r2, r3
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	f001 fe1c 	bl	80083b6 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d101      	bne.n	80067ac <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e018      	b.n	80067de <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fe79 	bl	80084b4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d104      	bne.n	80067d4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2205      	movs	r2, #5
 80067ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80067d2:	e003      	b.n	80067dc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d101      	bne.n	8006800 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
 80067fe:	e00e      	b.n	800681e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f001 fe8c 	bl	800852c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e056      	b.n	80068e6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fa fe56 	bl	8001504 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	ea42 0103 	orr.w	r1, r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	f003 0104 	and.w	r1, r3, #4
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69da      	ldr	r2, [r3, #28]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e01a      	b.n	8006936 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006916:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fa fe3b 	bl	8001594 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b088      	sub	sp, #32
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <HAL_SPI_Transmit+0x22>
 800695c:	2302      	movs	r3, #2
 800695e:	e11e      	b.n	8006b9e <HAL_SPI_Transmit+0x260>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006968:	f7fc f80a 	bl	8002980 <HAL_GetTick>
 800696c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	d002      	beq.n	8006984 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800697e:	2302      	movs	r3, #2
 8006980:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006982:	e103      	b.n	8006b8c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x52>
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006994:	e0fa      	b.n	8006b8c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2203      	movs	r2, #3
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069dc:	d107      	bne.n	80069ee <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f8:	2b40      	cmp	r3, #64	; 0x40
 80069fa:	d007      	beq.n	8006a0c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a14:	d14b      	bne.n	8006aae <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_SPI_Transmit+0xe6>
 8006a1e:	8afb      	ldrh	r3, [r7, #22]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d13e      	bne.n	8006aa2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a28:	881a      	ldrh	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	1c9a      	adds	r2, r3, #2
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a48:	e02b      	b.n	8006aa2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d112      	bne.n	8006a7e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	881a      	ldrh	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	1c9a      	adds	r2, r3, #2
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a7c:	e011      	b.n	8006aa2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a7e:	f7fb ff7f 	bl	8002980 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d803      	bhi.n	8006a96 <HAL_SPI_Transmit+0x158>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a94:	d102      	bne.n	8006a9c <HAL_SPI_Transmit+0x15e>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aa0:	e074      	b.n	8006b8c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ce      	bne.n	8006a4a <HAL_SPI_Transmit+0x10c>
 8006aac:	e04c      	b.n	8006b48 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Transmit+0x17e>
 8006ab6:	8afb      	ldrh	r3, [r7, #22]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d140      	bne.n	8006b3e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ae2:	e02c      	b.n	8006b3e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d113      	bne.n	8006b1a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	7812      	ldrb	r2, [r2, #0]
 8006afe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b18:	e011      	b.n	8006b3e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1a:	f7fb ff31 	bl	8002980 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d803      	bhi.n	8006b32 <HAL_SPI_Transmit+0x1f4>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_Transmit+0x1fa>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b3c:	e026      	b.n	8006b8c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1cd      	bne.n	8006ae4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fbb3 	bl	80072b8 <SPI_EndRxTxTransaction>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b66:	2300      	movs	r3, #0
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d002      	beq.n	8006b8a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e000      	b.n	8006b8c <HAL_SPI_Transmit+0x24e>
  }

error:
 8006b8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b088      	sub	sp, #32
 8006baa:	af02      	add	r7, sp, #8
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc2:	d112      	bne.n	8006bea <HAL_SPI_Receive+0x44>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10e      	bne.n	8006bea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2204      	movs	r2, #4
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bd4:	88fa      	ldrh	r2, [r7, #6]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f8e9 	bl	8006db8 <HAL_SPI_TransmitReceive>
 8006be6:	4603      	mov	r3, r0
 8006be8:	e0e2      	b.n	8006db0 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_SPI_Receive+0x52>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e0db      	b.n	8006db0 <HAL_SPI_Receive+0x20a>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c00:	f7fb febe 	bl	8002980 <HAL_GetTick>
 8006c04:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d002      	beq.n	8006c18 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c12:	2302      	movs	r3, #2
 8006c14:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c16:	e0c2      	b.n	8006d9e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <HAL_SPI_Receive+0x7e>
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d102      	bne.n	8006c2a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c28:	e0b9      	b.n	8006d9e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	88fa      	ldrh	r2, [r7, #6]
 8006c48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c70:	d107      	bne.n	8006c82 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b40      	cmp	r3, #64	; 0x40
 8006c8e:	d007      	beq.n	8006ca0 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d162      	bne.n	8006d6e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ca8:	e02e      	b.n	8006d08 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d115      	bne.n	8006ce4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f103 020c 	add.w	r2, r3, #12
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ce2:	e011      	b.n	8006d08 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ce4:	f7fb fe4c 	bl	8002980 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d803      	bhi.n	8006cfc <HAL_SPI_Receive+0x156>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d102      	bne.n	8006d02 <HAL_SPI_Receive+0x15c>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d06:	e04a      	b.n	8006d9e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1cb      	bne.n	8006caa <HAL_SPI_Receive+0x104>
 8006d12:	e031      	b.n	8006d78 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d113      	bne.n	8006d4a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	b292      	uxth	r2, r2
 8006d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	1c9a      	adds	r2, r3, #2
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d48:	e011      	b.n	8006d6e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fb fe19 	bl	8002980 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Receive+0x1bc>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Receive+0x1c2>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d6c:	e017      	b.n	8006d9e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1cd      	bne.n	8006d14 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fa35 	bl	80071ec <SPI_EndRxTransaction>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d002      	beq.n	8006d8e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
 8006d9a:	e000      	b.n	8006d9e <HAL_SPI_Receive+0x1f8>
  }

error :
 8006d9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b08c      	sub	sp, #48	; 0x30
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x26>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e18a      	b.n	80070f4 <HAL_SPI_TransmitReceive+0x33c>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006de6:	f7fb fdcb 	bl	8002980 <HAL_GetTick>
 8006dea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006dfc:	887b      	ldrh	r3, [r7, #2]
 8006dfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d00f      	beq.n	8006e28 <HAL_SPI_TransmitReceive+0x70>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e0e:	d107      	bne.n	8006e20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d103      	bne.n	8006e20 <HAL_SPI_TransmitReceive+0x68>
 8006e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d003      	beq.n	8006e28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e26:	e15b      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_SPI_TransmitReceive+0x82>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <HAL_SPI_TransmitReceive+0x82>
 8006e34:	887b      	ldrh	r3, [r7, #2]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e40:	e14e      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	d003      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2205      	movs	r2, #5
 8006e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	887a      	ldrh	r2, [r7, #2]
 8006e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	887a      	ldrh	r2, [r7, #2]
 8006e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	887a      	ldrh	r2, [r7, #2]
 8006e78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	887a      	ldrh	r2, [r7, #2]
 8006e7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d007      	beq.n	8006eaa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb2:	d178      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_TransmitReceive+0x10a>
 8006ebc:	8b7b      	ldrh	r3, [r7, #26]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d166      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec6:	881a      	ldrh	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	1c9a      	adds	r2, r3, #2
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee6:	e053      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d11b      	bne.n	8006f2e <HAL_SPI_TransmitReceive+0x176>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <HAL_SPI_TransmitReceive+0x176>
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d113      	bne.n	8006f2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	881a      	ldrh	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	1c9a      	adds	r2, r3, #2
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d119      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x1b8>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d014      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f50:	b292      	uxth	r2, r2
 8006f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	1c9a      	adds	r2, r3, #2
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f70:	f7fb fd06 	bl	8002980 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d807      	bhi.n	8006f90 <HAL_SPI_TransmitReceive+0x1d8>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d003      	beq.n	8006f90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f8e:	e0a7      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1a6      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x130>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1a1      	bne.n	8006ee8 <HAL_SPI_TransmitReceive+0x130>
 8006fa4:	e07c      	b.n	80070a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_SPI_TransmitReceive+0x1fc>
 8006fae:	8b7b      	ldrh	r3, [r7, #26]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d16b      	bne.n	800708c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	7812      	ldrb	r2, [r2, #0]
 8006fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fda:	e057      	b.n	800708c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d11c      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x26c>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d017      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x26c>
 8006ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d114      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	7812      	ldrb	r2, [r2, #0]
 8007006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007016:	b29b      	uxth	r3, r3
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007020:	2300      	movs	r3, #0
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b01      	cmp	r3, #1
 8007030:	d119      	bne.n	8007066 <HAL_SPI_TransmitReceive+0x2ae>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d014      	beq.n	8007066 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007062:	2301      	movs	r3, #1
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007066:	f7fb fc8b 	bl	8002980 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007072:	429a      	cmp	r2, r3
 8007074:	d803      	bhi.n	800707e <HAL_SPI_TransmitReceive+0x2c6>
 8007076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d102      	bne.n	8007084 <HAL_SPI_TransmitReceive+0x2cc>
 800707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800708a:	e029      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007090:	b29b      	uxth	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1a2      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x224>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d19d      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f907 	bl	80072b8 <SPI_EndRxTxTransaction>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d006      	beq.n	80070be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80070bc:	e010      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	617b      	str	r3, [r7, #20]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	e000      	b.n	80070e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80070de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3730      	adds	r7, #48	; 0x30
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800710a:	b2db      	uxtb	r3, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4613      	mov	r3, r2
 8007126:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007128:	e04c      	b.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007130:	d048      	beq.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007132:	f7fb fc25 	bl	8002980 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d902      	bls.n	8007148 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d13d      	bne.n	80071c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007156:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007160:	d111      	bne.n	8007186 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716a:	d004      	beq.n	8007176 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007174:	d107      	bne.n	8007186 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007184:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800718e:	d10f      	bne.n	80071b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e00f      	b.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	4013      	ands	r3, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bf0c      	ite	eq
 80071d4:	2301      	moveq	r3, #1
 80071d6:	2300      	movne	r3, #0
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	461a      	mov	r2, r3
 80071dc:	79fb      	ldrb	r3, [r7, #7]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d1a3      	bne.n	800712a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007200:	d111      	bne.n	8007226 <SPI_EndRxTransaction+0x3a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800720a:	d004      	beq.n	8007216 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007214:	d107      	bne.n	8007226 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007224:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800722e:	d12a      	bne.n	8007286 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007238:	d012      	beq.n	8007260 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2200      	movs	r2, #0
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7ff ff67 	bl	8007118 <SPI_WaitFlagStateUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02d      	beq.n	80072ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	f043 0220 	orr.w	r2, r3, #32
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e026      	b.n	80072ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2200      	movs	r2, #0
 8007268:	2101      	movs	r1, #1
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ff54 	bl	8007118 <SPI_WaitFlagStateUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01a      	beq.n	80072ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e013      	b.n	80072ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	2101      	movs	r1, #1
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f7ff ff41 	bl	8007118 <SPI_WaitFlagStateUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d007      	beq.n	80072ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	f043 0220 	orr.w	r2, r3, #32
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e000      	b.n	80072ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072c4:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <SPI_EndRxTxTransaction+0x7c>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <SPI_EndRxTxTransaction+0x80>)
 80072ca:	fba2 2303 	umull	r2, r3, r2, r3
 80072ce:	0d5b      	lsrs	r3, r3, #21
 80072d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072e2:	d112      	bne.n	800730a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff ff12 	bl	8007118 <SPI_WaitFlagStateUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	f043 0220 	orr.w	r2, r3, #32
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e00f      	b.n	800732a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00a      	beq.n	8007326 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	3b01      	subs	r3, #1
 8007314:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007320:	2b80      	cmp	r3, #128	; 0x80
 8007322:	d0f2      	beq.n	800730a <SPI_EndRxTxTransaction+0x52>
 8007324:	e000      	b.n	8007328 <SPI_EndRxTxTransaction+0x70>
        break;
 8007326:	bf00      	nop
  }

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20000000 	.word	0x20000000
 8007338:	165e9f81 	.word	0x165e9f81

0800733c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e01d      	b.n	800738a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7fa fa62 	bl	800182c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	4619      	mov	r1, r3
 800737a:	4610      	mov	r0, r2
 800737c:	f000 fa14 	bl	80077a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0201 	orr.w	r2, r2, #1
 80073a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d007      	beq.n	80073cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d122      	bne.n	8007436 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d11b      	bne.n	8007436 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f06f 0202 	mvn.w	r2, #2
 8007406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f9a5 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 8007422:	e005      	b.n	8007430 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f997 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f9a8 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b04      	cmp	r3, #4
 8007442:	d122      	bne.n	800748a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b04      	cmp	r3, #4
 8007450:	d11b      	bne.n	800748a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0204 	mvn.w	r2, #4
 800745a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f97b 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 8007476:	e005      	b.n	8007484 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f96d 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f97e 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b08      	cmp	r3, #8
 8007496:	d122      	bne.n	80074de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	d11b      	bne.n	80074de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f06f 0208 	mvn.w	r2, #8
 80074ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2204      	movs	r2, #4
 80074b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f951 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 80074ca:	e005      	b.n	80074d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f943 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f954 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	f003 0310 	and.w	r3, r3, #16
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d122      	bne.n	8007532 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f003 0310 	and.w	r3, r3, #16
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d11b      	bne.n	8007532 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f06f 0210 	mvn.w	r2, #16
 8007502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2208      	movs	r2, #8
 8007508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f927 	bl	800776c <HAL_TIM_IC_CaptureCallback>
 800751e:	e005      	b.n	800752c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f919 	bl	8007758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f92a 	bl	8007780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10e      	bne.n	800755e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f06f 0201 	mvn.w	r2, #1
 8007556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7f9 ff81 	bl	8001460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007568:	2b80      	cmp	r3, #128	; 0x80
 800756a:	d10e      	bne.n	800758a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007576:	2b80      	cmp	r3, #128	; 0x80
 8007578:	d107      	bne.n	800758a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 facf 	bl	8007b28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007594:	2b40      	cmp	r3, #64	; 0x40
 8007596:	d10e      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	d107      	bne.n	80075b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8ef 	bl	8007794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d10e      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d107      	bne.n	80075e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f06f 0220 	mvn.w	r2, #32
 80075da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fa99 	bl	8007b14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b084      	sub	sp, #16
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_ConfigClockSource+0x18>
 80075fe:	2302      	movs	r3, #2
 8007600:	e0a6      	b.n	8007750 <HAL_TIM_ConfigClockSource+0x166>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007620:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007628:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b40      	cmp	r3, #64	; 0x40
 8007638:	d067      	beq.n	800770a <HAL_TIM_ConfigClockSource+0x120>
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d80b      	bhi.n	8007656 <HAL_TIM_ConfigClockSource+0x6c>
 800763e:	2b10      	cmp	r3, #16
 8007640:	d073      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x140>
 8007642:	2b10      	cmp	r3, #16
 8007644:	d802      	bhi.n	800764c <HAL_TIM_ConfigClockSource+0x62>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d06f      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800764a:	e078      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800764c:	2b20      	cmp	r3, #32
 800764e:	d06c      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x140>
 8007650:	2b30      	cmp	r3, #48	; 0x30
 8007652:	d06a      	beq.n	800772a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007654:	e073      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007656:	2b70      	cmp	r3, #112	; 0x70
 8007658:	d00d      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x8c>
 800765a:	2b70      	cmp	r3, #112	; 0x70
 800765c:	d804      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x7e>
 800765e:	2b50      	cmp	r3, #80	; 0x50
 8007660:	d033      	beq.n	80076ca <HAL_TIM_ConfigClockSource+0xe0>
 8007662:	2b60      	cmp	r3, #96	; 0x60
 8007664:	d041      	beq.n	80076ea <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007666:	e06a      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800766c:	d066      	beq.n	800773c <HAL_TIM_ConfigClockSource+0x152>
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007672:	d017      	beq.n	80076a4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007674:	e063      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6818      	ldr	r0, [r3, #0]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	6899      	ldr	r1, [r3, #8]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f000 f9a9 	bl	80079dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007698:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	609a      	str	r2, [r3, #8]
      break;
 80076a2:	e04c      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	6899      	ldr	r1, [r3, #8]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f000 f992 	bl	80079dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c6:	609a      	str	r2, [r3, #8]
      break;
 80076c8:	e039      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6859      	ldr	r1, [r3, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f000 f906 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2150      	movs	r1, #80	; 0x50
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 f95f 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 80076e8:	e029      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6818      	ldr	r0, [r3, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6859      	ldr	r1, [r3, #4]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f000 f925 	bl	8007946 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2160      	movs	r1, #96	; 0x60
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f94f 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007708:	e019      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	461a      	mov	r2, r3
 8007718:	f000 f8e6 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2140      	movs	r1, #64	; 0x40
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f93f 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 8007728:	e009      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f000 f936 	bl	80079a6 <TIM_ITRx_SetConfig>
      break;
 800773a:	e000      	b.n	800773e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800773c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a40      	ldr	r2, [pc, #256]	; (80078bc <TIM_Base_SetConfig+0x114>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c6:	d00f      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a3d      	ldr	r2, [pc, #244]	; (80078c0 <TIM_Base_SetConfig+0x118>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a3c      	ldr	r2, [pc, #240]	; (80078c4 <TIM_Base_SetConfig+0x11c>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d007      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a3b      	ldr	r2, [pc, #236]	; (80078c8 <TIM_Base_SetConfig+0x120>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a3a      	ldr	r2, [pc, #232]	; (80078cc <TIM_Base_SetConfig+0x124>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d108      	bne.n	80077fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a2f      	ldr	r2, [pc, #188]	; (80078bc <TIM_Base_SetConfig+0x114>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d02b      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007808:	d027      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a2c      	ldr	r2, [pc, #176]	; (80078c0 <TIM_Base_SetConfig+0x118>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d023      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a2b      	ldr	r2, [pc, #172]	; (80078c4 <TIM_Base_SetConfig+0x11c>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d01f      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <TIM_Base_SetConfig+0x120>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d01b      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a29      	ldr	r2, [pc, #164]	; (80078cc <TIM_Base_SetConfig+0x124>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d017      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a28      	ldr	r2, [pc, #160]	; (80078d0 <TIM_Base_SetConfig+0x128>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <TIM_Base_SetConfig+0x12c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00f      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a26      	ldr	r2, [pc, #152]	; (80078d8 <TIM_Base_SetConfig+0x130>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00b      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a25      	ldr	r2, [pc, #148]	; (80078dc <TIM_Base_SetConfig+0x134>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d007      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <TIM_Base_SetConfig+0x138>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d003      	beq.n	800785a <TIM_Base_SetConfig+0xb2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <TIM_Base_SetConfig+0x13c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d108      	bne.n	800786c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <TIM_Base_SetConfig+0x114>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d003      	beq.n	80078a0 <TIM_Base_SetConfig+0xf8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a0c      	ldr	r2, [pc, #48]	; (80078cc <TIM_Base_SetConfig+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d103      	bne.n	80078a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	615a      	str	r2, [r3, #20]
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40010000 	.word	0x40010000
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	40010400 	.word	0x40010400
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40014400 	.word	0x40014400
 80078d8:	40014800 	.word	0x40014800
 80078dc:	40001800 	.word	0x40001800
 80078e0:	40001c00 	.word	0x40001c00
 80078e4:	40002000 	.word	0x40002000

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0201 	bic.w	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f023 030a 	bic.w	r3, r3, #10
 8007924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b087      	sub	sp, #28
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	f023 0210 	bic.w	r2, r3, #16
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6a1b      	ldr	r3, [r3, #32]
 8007968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	031b      	lsls	r3, r3, #12
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	621a      	str	r2, [r3, #32]
}
 800799a:	bf00      	nop
 800799c:	371c      	adds	r7, #28
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b085      	sub	sp, #20
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f043 0307 	orr.w	r3, r3, #7
 80079c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	609a      	str	r2, [r3, #8]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079dc:	b480      	push	{r7}
 80079de:	b087      	sub	sp, #28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
 80079e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	021a      	lsls	r2, r3, #8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e05a      	b.n	8007aea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d022      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a80:	d01d      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1d      	ldr	r2, [pc, #116]	; (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d018      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1a      	ldr	r2, [pc, #104]	; (8007b04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00e      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a15      	ldr	r2, [pc, #84]	; (8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d10c      	bne.n	8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40010000 	.word	0x40010000
 8007afc:	40000400 	.word	0x40000400
 8007b00:	40000800 	.word	0x40000800
 8007b04:	40000c00 	.word	0x40000c00
 8007b08:	40010400 	.word	0x40010400
 8007b0c:	40014000 	.word	0x40014000
 8007b10:	40001800 	.word	0x40001800

08007b14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e03f      	b.n	8007bce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7f9 feae 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2224      	movs	r2, #36	; 0x24
 8007b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f829 	bl	8007bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691a      	ldr	r2, [r3, #16]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	695a      	ldr	r2, [r3, #20]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	69db      	ldr	r3, [r3, #28]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007c1a:	f023 030c 	bic.w	r3, r3, #12
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6812      	ldr	r2, [r2, #0]
 8007c22:	68f9      	ldr	r1, [r7, #12]
 8007c24:	430b      	orrs	r3, r1
 8007c26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c46:	f040 818b 	bne.w	8007f60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4ac1      	ldr	r2, [pc, #772]	; (8007f54 <UART_SetConfig+0x37c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d005      	beq.n	8007c60 <UART_SetConfig+0x88>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4abf      	ldr	r2, [pc, #764]	; (8007f58 <UART_SetConfig+0x380>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	f040 80bd 	bne.w	8007dda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c60:	f7fe fb5e 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8007c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	461d      	mov	r5, r3
 8007c6a:	f04f 0600 	mov.w	r6, #0
 8007c6e:	46a8      	mov	r8, r5
 8007c70:	46b1      	mov	r9, r6
 8007c72:	eb18 0308 	adds.w	r3, r8, r8
 8007c76:	eb49 0409 	adc.w	r4, r9, r9
 8007c7a:	4698      	mov	r8, r3
 8007c7c:	46a1      	mov	r9, r4
 8007c7e:	eb18 0805 	adds.w	r8, r8, r5
 8007c82:	eb49 0906 	adc.w	r9, r9, r6
 8007c86:	f04f 0100 	mov.w	r1, #0
 8007c8a:	f04f 0200 	mov.w	r2, #0
 8007c8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c9a:	4688      	mov	r8, r1
 8007c9c:	4691      	mov	r9, r2
 8007c9e:	eb18 0005 	adds.w	r0, r8, r5
 8007ca2:	eb49 0106 	adc.w	r1, r9, r6
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	461d      	mov	r5, r3
 8007cac:	f04f 0600 	mov.w	r6, #0
 8007cb0:	196b      	adds	r3, r5, r5
 8007cb2:	eb46 0406 	adc.w	r4, r6, r6
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4623      	mov	r3, r4
 8007cba:	f7f8 fa99 	bl	80001f0 <__aeabi_uldivmod>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	4ba5      	ldr	r3, [pc, #660]	; (8007f5c <UART_SetConfig+0x384>)
 8007cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	461d      	mov	r5, r3
 8007cd4:	f04f 0600 	mov.w	r6, #0
 8007cd8:	46a9      	mov	r9, r5
 8007cda:	46b2      	mov	sl, r6
 8007cdc:	eb19 0309 	adds.w	r3, r9, r9
 8007ce0:	eb4a 040a 	adc.w	r4, sl, sl
 8007ce4:	4699      	mov	r9, r3
 8007ce6:	46a2      	mov	sl, r4
 8007ce8:	eb19 0905 	adds.w	r9, r9, r5
 8007cec:	eb4a 0a06 	adc.w	sl, sl, r6
 8007cf0:	f04f 0100 	mov.w	r1, #0
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d04:	4689      	mov	r9, r1
 8007d06:	4692      	mov	sl, r2
 8007d08:	eb19 0005 	adds.w	r0, r9, r5
 8007d0c:	eb4a 0106 	adc.w	r1, sl, r6
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	461d      	mov	r5, r3
 8007d16:	f04f 0600 	mov.w	r6, #0
 8007d1a:	196b      	adds	r3, r5, r5
 8007d1c:	eb46 0406 	adc.w	r4, r6, r6
 8007d20:	461a      	mov	r2, r3
 8007d22:	4623      	mov	r3, r4
 8007d24:	f7f8 fa64 	bl	80001f0 <__aeabi_uldivmod>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4b8b      	ldr	r3, [pc, #556]	; (8007f5c <UART_SetConfig+0x384>)
 8007d30:	fba3 1302 	umull	r1, r3, r3, r2
 8007d34:	095b      	lsrs	r3, r3, #5
 8007d36:	2164      	movs	r1, #100	; 0x64
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	3332      	adds	r3, #50	; 0x32
 8007d42:	4a86      	ldr	r2, [pc, #536]	; (8007f5c <UART_SetConfig+0x384>)
 8007d44:	fba2 2303 	umull	r2, r3, r2, r3
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d50:	4498      	add	r8, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	461d      	mov	r5, r3
 8007d56:	f04f 0600 	mov.w	r6, #0
 8007d5a:	46a9      	mov	r9, r5
 8007d5c:	46b2      	mov	sl, r6
 8007d5e:	eb19 0309 	adds.w	r3, r9, r9
 8007d62:	eb4a 040a 	adc.w	r4, sl, sl
 8007d66:	4699      	mov	r9, r3
 8007d68:	46a2      	mov	sl, r4
 8007d6a:	eb19 0905 	adds.w	r9, r9, r5
 8007d6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d72:	f04f 0100 	mov.w	r1, #0
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d86:	4689      	mov	r9, r1
 8007d88:	4692      	mov	sl, r2
 8007d8a:	eb19 0005 	adds.w	r0, r9, r5
 8007d8e:	eb4a 0106 	adc.w	r1, sl, r6
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	461d      	mov	r5, r3
 8007d98:	f04f 0600 	mov.w	r6, #0
 8007d9c:	196b      	adds	r3, r5, r5
 8007d9e:	eb46 0406 	adc.w	r4, r6, r6
 8007da2:	461a      	mov	r2, r3
 8007da4:	4623      	mov	r3, r4
 8007da6:	f7f8 fa23 	bl	80001f0 <__aeabi_uldivmod>
 8007daa:	4603      	mov	r3, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b6a      	ldr	r3, [pc, #424]	; (8007f5c <UART_SetConfig+0x384>)
 8007db2:	fba3 1302 	umull	r1, r3, r3, r2
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	2164      	movs	r1, #100	; 0x64
 8007dba:	fb01 f303 	mul.w	r3, r1, r3
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	3332      	adds	r3, #50	; 0x32
 8007dc4:	4a65      	ldr	r2, [pc, #404]	; (8007f5c <UART_SetConfig+0x384>)
 8007dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dca:	095b      	lsrs	r3, r3, #5
 8007dcc:	f003 0207 	and.w	r2, r3, #7
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4442      	add	r2, r8
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	e26f      	b.n	80082ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dda:	f7fe fa8d 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8007dde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	461d      	mov	r5, r3
 8007de4:	f04f 0600 	mov.w	r6, #0
 8007de8:	46a8      	mov	r8, r5
 8007dea:	46b1      	mov	r9, r6
 8007dec:	eb18 0308 	adds.w	r3, r8, r8
 8007df0:	eb49 0409 	adc.w	r4, r9, r9
 8007df4:	4698      	mov	r8, r3
 8007df6:	46a1      	mov	r9, r4
 8007df8:	eb18 0805 	adds.w	r8, r8, r5
 8007dfc:	eb49 0906 	adc.w	r9, r9, r6
 8007e00:	f04f 0100 	mov.w	r1, #0
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e14:	4688      	mov	r8, r1
 8007e16:	4691      	mov	r9, r2
 8007e18:	eb18 0005 	adds.w	r0, r8, r5
 8007e1c:	eb49 0106 	adc.w	r1, r9, r6
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	461d      	mov	r5, r3
 8007e26:	f04f 0600 	mov.w	r6, #0
 8007e2a:	196b      	adds	r3, r5, r5
 8007e2c:	eb46 0406 	adc.w	r4, r6, r6
 8007e30:	461a      	mov	r2, r3
 8007e32:	4623      	mov	r3, r4
 8007e34:	f7f8 f9dc 	bl	80001f0 <__aeabi_uldivmod>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4b47      	ldr	r3, [pc, #284]	; (8007f5c <UART_SetConfig+0x384>)
 8007e40:	fba3 2302 	umull	r2, r3, r3, r2
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	461d      	mov	r5, r3
 8007e4e:	f04f 0600 	mov.w	r6, #0
 8007e52:	46a9      	mov	r9, r5
 8007e54:	46b2      	mov	sl, r6
 8007e56:	eb19 0309 	adds.w	r3, r9, r9
 8007e5a:	eb4a 040a 	adc.w	r4, sl, sl
 8007e5e:	4699      	mov	r9, r3
 8007e60:	46a2      	mov	sl, r4
 8007e62:	eb19 0905 	adds.w	r9, r9, r5
 8007e66:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e6a:	f04f 0100 	mov.w	r1, #0
 8007e6e:	f04f 0200 	mov.w	r2, #0
 8007e72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e7e:	4689      	mov	r9, r1
 8007e80:	4692      	mov	sl, r2
 8007e82:	eb19 0005 	adds.w	r0, r9, r5
 8007e86:	eb4a 0106 	adc.w	r1, sl, r6
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	461d      	mov	r5, r3
 8007e90:	f04f 0600 	mov.w	r6, #0
 8007e94:	196b      	adds	r3, r5, r5
 8007e96:	eb46 0406 	adc.w	r4, r6, r6
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	f7f8 f9a7 	bl	80001f0 <__aeabi_uldivmod>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	4b2c      	ldr	r3, [pc, #176]	; (8007f5c <UART_SetConfig+0x384>)
 8007eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	2164      	movs	r1, #100	; 0x64
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	3332      	adds	r3, #50	; 0x32
 8007ebc:	4a27      	ldr	r2, [pc, #156]	; (8007f5c <UART_SetConfig+0x384>)
 8007ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007eca:	4498      	add	r8, r3
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	461d      	mov	r5, r3
 8007ed0:	f04f 0600 	mov.w	r6, #0
 8007ed4:	46a9      	mov	r9, r5
 8007ed6:	46b2      	mov	sl, r6
 8007ed8:	eb19 0309 	adds.w	r3, r9, r9
 8007edc:	eb4a 040a 	adc.w	r4, sl, sl
 8007ee0:	4699      	mov	r9, r3
 8007ee2:	46a2      	mov	sl, r4
 8007ee4:	eb19 0905 	adds.w	r9, r9, r5
 8007ee8:	eb4a 0a06 	adc.w	sl, sl, r6
 8007eec:	f04f 0100 	mov.w	r1, #0
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ef8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007efc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f00:	4689      	mov	r9, r1
 8007f02:	4692      	mov	sl, r2
 8007f04:	eb19 0005 	adds.w	r0, r9, r5
 8007f08:	eb4a 0106 	adc.w	r1, sl, r6
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	461d      	mov	r5, r3
 8007f12:	f04f 0600 	mov.w	r6, #0
 8007f16:	196b      	adds	r3, r5, r5
 8007f18:	eb46 0406 	adc.w	r4, r6, r6
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4623      	mov	r3, r4
 8007f20:	f7f8 f966 	bl	80001f0 <__aeabi_uldivmod>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <UART_SetConfig+0x384>)
 8007f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	2164      	movs	r1, #100	; 0x64
 8007f34:	fb01 f303 	mul.w	r3, r1, r3
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	3332      	adds	r3, #50	; 0x32
 8007f3e:	4a07      	ldr	r2, [pc, #28]	; (8007f5c <UART_SetConfig+0x384>)
 8007f40:	fba2 2303 	umull	r2, r3, r2, r3
 8007f44:	095b      	lsrs	r3, r3, #5
 8007f46:	f003 0207 	and.w	r2, r3, #7
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4442      	add	r2, r8
 8007f50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007f52:	e1b2      	b.n	80082ba <UART_SetConfig+0x6e2>
 8007f54:	40011000 	.word	0x40011000
 8007f58:	40011400 	.word	0x40011400
 8007f5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4ad7      	ldr	r2, [pc, #860]	; (80082c4 <UART_SetConfig+0x6ec>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d005      	beq.n	8007f76 <UART_SetConfig+0x39e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4ad6      	ldr	r2, [pc, #856]	; (80082c8 <UART_SetConfig+0x6f0>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	f040 80d1 	bne.w	8008118 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f76:	f7fe f9d3 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8007f7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	469a      	mov	sl, r3
 8007f80:	f04f 0b00 	mov.w	fp, #0
 8007f84:	46d0      	mov	r8, sl
 8007f86:	46d9      	mov	r9, fp
 8007f88:	eb18 0308 	adds.w	r3, r8, r8
 8007f8c:	eb49 0409 	adc.w	r4, r9, r9
 8007f90:	4698      	mov	r8, r3
 8007f92:	46a1      	mov	r9, r4
 8007f94:	eb18 080a 	adds.w	r8, r8, sl
 8007f98:	eb49 090b 	adc.w	r9, r9, fp
 8007f9c:	f04f 0100 	mov.w	r1, #0
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007fa8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007fac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007fb0:	4688      	mov	r8, r1
 8007fb2:	4691      	mov	r9, r2
 8007fb4:	eb1a 0508 	adds.w	r5, sl, r8
 8007fb8:	eb4b 0609 	adc.w	r6, fp, r9
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	f04f 0400 	mov.w	r4, #0
 8007fce:	0094      	lsls	r4, r2, #2
 8007fd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fd4:	008b      	lsls	r3, r1, #2
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	4623      	mov	r3, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	4631      	mov	r1, r6
 8007fde:	f7f8 f907 	bl	80001f0 <__aeabi_uldivmod>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	4bb8      	ldr	r3, [pc, #736]	; (80082cc <UART_SetConfig+0x6f4>)
 8007fea:	fba3 2302 	umull	r2, r3, r3, r2
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	469b      	mov	fp, r3
 8007ff8:	f04f 0c00 	mov.w	ip, #0
 8007ffc:	46d9      	mov	r9, fp
 8007ffe:	46e2      	mov	sl, ip
 8008000:	eb19 0309 	adds.w	r3, r9, r9
 8008004:	eb4a 040a 	adc.w	r4, sl, sl
 8008008:	4699      	mov	r9, r3
 800800a:	46a2      	mov	sl, r4
 800800c:	eb19 090b 	adds.w	r9, r9, fp
 8008010:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008014:	f04f 0100 	mov.w	r1, #0
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008020:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008024:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008028:	4689      	mov	r9, r1
 800802a:	4692      	mov	sl, r2
 800802c:	eb1b 0509 	adds.w	r5, fp, r9
 8008030:	eb4c 060a 	adc.w	r6, ip, sl
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	4619      	mov	r1, r3
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	f04f 0400 	mov.w	r4, #0
 8008046:	0094      	lsls	r4, r2, #2
 8008048:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800804c:	008b      	lsls	r3, r1, #2
 800804e:	461a      	mov	r2, r3
 8008050:	4623      	mov	r3, r4
 8008052:	4628      	mov	r0, r5
 8008054:	4631      	mov	r1, r6
 8008056:	f7f8 f8cb 	bl	80001f0 <__aeabi_uldivmod>
 800805a:	4603      	mov	r3, r0
 800805c:	460c      	mov	r4, r1
 800805e:	461a      	mov	r2, r3
 8008060:	4b9a      	ldr	r3, [pc, #616]	; (80082cc <UART_SetConfig+0x6f4>)
 8008062:	fba3 1302 	umull	r1, r3, r3, r2
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	2164      	movs	r1, #100	; 0x64
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	3332      	adds	r3, #50	; 0x32
 8008074:	4a95      	ldr	r2, [pc, #596]	; (80082cc <UART_SetConfig+0x6f4>)
 8008076:	fba2 2303 	umull	r2, r3, r2, r3
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008080:	4498      	add	r8, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	469b      	mov	fp, r3
 8008086:	f04f 0c00 	mov.w	ip, #0
 800808a:	46d9      	mov	r9, fp
 800808c:	46e2      	mov	sl, ip
 800808e:	eb19 0309 	adds.w	r3, r9, r9
 8008092:	eb4a 040a 	adc.w	r4, sl, sl
 8008096:	4699      	mov	r9, r3
 8008098:	46a2      	mov	sl, r4
 800809a:	eb19 090b 	adds.w	r9, r9, fp
 800809e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80080a2:	f04f 0100 	mov.w	r1, #0
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080b6:	4689      	mov	r9, r1
 80080b8:	4692      	mov	sl, r2
 80080ba:	eb1b 0509 	adds.w	r5, fp, r9
 80080be:	eb4c 060a 	adc.w	r6, ip, sl
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	4619      	mov	r1, r3
 80080c8:	f04f 0200 	mov.w	r2, #0
 80080cc:	f04f 0300 	mov.w	r3, #0
 80080d0:	f04f 0400 	mov.w	r4, #0
 80080d4:	0094      	lsls	r4, r2, #2
 80080d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080da:	008b      	lsls	r3, r1, #2
 80080dc:	461a      	mov	r2, r3
 80080de:	4623      	mov	r3, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	4631      	mov	r1, r6
 80080e4:	f7f8 f884 	bl	80001f0 <__aeabi_uldivmod>
 80080e8:	4603      	mov	r3, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	461a      	mov	r2, r3
 80080ee:	4b77      	ldr	r3, [pc, #476]	; (80082cc <UART_SetConfig+0x6f4>)
 80080f0:	fba3 1302 	umull	r1, r3, r3, r2
 80080f4:	095b      	lsrs	r3, r3, #5
 80080f6:	2164      	movs	r1, #100	; 0x64
 80080f8:	fb01 f303 	mul.w	r3, r1, r3
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	3332      	adds	r3, #50	; 0x32
 8008102:	4a72      	ldr	r2, [pc, #456]	; (80082cc <UART_SetConfig+0x6f4>)
 8008104:	fba2 2303 	umull	r2, r3, r2, r3
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	f003 020f 	and.w	r2, r3, #15
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4442      	add	r2, r8
 8008114:	609a      	str	r2, [r3, #8]
 8008116:	e0d0      	b.n	80082ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008118:	f7fe f8ee 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 800811c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	469a      	mov	sl, r3
 8008122:	f04f 0b00 	mov.w	fp, #0
 8008126:	46d0      	mov	r8, sl
 8008128:	46d9      	mov	r9, fp
 800812a:	eb18 0308 	adds.w	r3, r8, r8
 800812e:	eb49 0409 	adc.w	r4, r9, r9
 8008132:	4698      	mov	r8, r3
 8008134:	46a1      	mov	r9, r4
 8008136:	eb18 080a 	adds.w	r8, r8, sl
 800813a:	eb49 090b 	adc.w	r9, r9, fp
 800813e:	f04f 0100 	mov.w	r1, #0
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800814a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800814e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008152:	4688      	mov	r8, r1
 8008154:	4691      	mov	r9, r2
 8008156:	eb1a 0508 	adds.w	r5, sl, r8
 800815a:	eb4b 0609 	adc.w	r6, fp, r9
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	4619      	mov	r1, r3
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	f04f 0400 	mov.w	r4, #0
 8008170:	0094      	lsls	r4, r2, #2
 8008172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008176:	008b      	lsls	r3, r1, #2
 8008178:	461a      	mov	r2, r3
 800817a:	4623      	mov	r3, r4
 800817c:	4628      	mov	r0, r5
 800817e:	4631      	mov	r1, r6
 8008180:	f7f8 f836 	bl	80001f0 <__aeabi_uldivmod>
 8008184:	4603      	mov	r3, r0
 8008186:	460c      	mov	r4, r1
 8008188:	461a      	mov	r2, r3
 800818a:	4b50      	ldr	r3, [pc, #320]	; (80082cc <UART_SetConfig+0x6f4>)
 800818c:	fba3 2302 	umull	r2, r3, r3, r2
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	469b      	mov	fp, r3
 800819a:	f04f 0c00 	mov.w	ip, #0
 800819e:	46d9      	mov	r9, fp
 80081a0:	46e2      	mov	sl, ip
 80081a2:	eb19 0309 	adds.w	r3, r9, r9
 80081a6:	eb4a 040a 	adc.w	r4, sl, sl
 80081aa:	4699      	mov	r9, r3
 80081ac:	46a2      	mov	sl, r4
 80081ae:	eb19 090b 	adds.w	r9, r9, fp
 80081b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081b6:	f04f 0100 	mov.w	r1, #0
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081ca:	4689      	mov	r9, r1
 80081cc:	4692      	mov	sl, r2
 80081ce:	eb1b 0509 	adds.w	r5, fp, r9
 80081d2:	eb4c 060a 	adc.w	r6, ip, sl
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4619      	mov	r1, r3
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	f04f 0400 	mov.w	r4, #0
 80081e8:	0094      	lsls	r4, r2, #2
 80081ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081ee:	008b      	lsls	r3, r1, #2
 80081f0:	461a      	mov	r2, r3
 80081f2:	4623      	mov	r3, r4
 80081f4:	4628      	mov	r0, r5
 80081f6:	4631      	mov	r1, r6
 80081f8:	f7f7 fffa 	bl	80001f0 <__aeabi_uldivmod>
 80081fc:	4603      	mov	r3, r0
 80081fe:	460c      	mov	r4, r1
 8008200:	461a      	mov	r2, r3
 8008202:	4b32      	ldr	r3, [pc, #200]	; (80082cc <UART_SetConfig+0x6f4>)
 8008204:	fba3 1302 	umull	r1, r3, r3, r2
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	2164      	movs	r1, #100	; 0x64
 800820c:	fb01 f303 	mul.w	r3, r1, r3
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	3332      	adds	r3, #50	; 0x32
 8008216:	4a2d      	ldr	r2, [pc, #180]	; (80082cc <UART_SetConfig+0x6f4>)
 8008218:	fba2 2303 	umull	r2, r3, r2, r3
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008222:	4498      	add	r8, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	469b      	mov	fp, r3
 8008228:	f04f 0c00 	mov.w	ip, #0
 800822c:	46d9      	mov	r9, fp
 800822e:	46e2      	mov	sl, ip
 8008230:	eb19 0309 	adds.w	r3, r9, r9
 8008234:	eb4a 040a 	adc.w	r4, sl, sl
 8008238:	4699      	mov	r9, r3
 800823a:	46a2      	mov	sl, r4
 800823c:	eb19 090b 	adds.w	r9, r9, fp
 8008240:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008244:	f04f 0100 	mov.w	r1, #0
 8008248:	f04f 0200 	mov.w	r2, #0
 800824c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008250:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008254:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008258:	4689      	mov	r9, r1
 800825a:	4692      	mov	sl, r2
 800825c:	eb1b 0509 	adds.w	r5, fp, r9
 8008260:	eb4c 060a 	adc.w	r6, ip, sl
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4619      	mov	r1, r3
 800826a:	f04f 0200 	mov.w	r2, #0
 800826e:	f04f 0300 	mov.w	r3, #0
 8008272:	f04f 0400 	mov.w	r4, #0
 8008276:	0094      	lsls	r4, r2, #2
 8008278:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800827c:	008b      	lsls	r3, r1, #2
 800827e:	461a      	mov	r2, r3
 8008280:	4623      	mov	r3, r4
 8008282:	4628      	mov	r0, r5
 8008284:	4631      	mov	r1, r6
 8008286:	f7f7 ffb3 	bl	80001f0 <__aeabi_uldivmod>
 800828a:	4603      	mov	r3, r0
 800828c:	460c      	mov	r4, r1
 800828e:	461a      	mov	r2, r3
 8008290:	4b0e      	ldr	r3, [pc, #56]	; (80082cc <UART_SetConfig+0x6f4>)
 8008292:	fba3 1302 	umull	r1, r3, r3, r2
 8008296:	095b      	lsrs	r3, r3, #5
 8008298:	2164      	movs	r1, #100	; 0x64
 800829a:	fb01 f303 	mul.w	r3, r1, r3
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	3332      	adds	r3, #50	; 0x32
 80082a4:	4a09      	ldr	r2, [pc, #36]	; (80082cc <UART_SetConfig+0x6f4>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	f003 020f 	and.w	r2, r3, #15
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4442      	add	r2, r8
 80082b6:	609a      	str	r2, [r3, #8]
}
 80082b8:	e7ff      	b.n	80082ba <UART_SetConfig+0x6e2>
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	40011000 	.word	0x40011000
 80082c8:	40011400 	.word	0x40011400
 80082cc:	51eb851f 	.word	0x51eb851f

080082d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d029      	beq.n	800833e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80082f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80082fa:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008304:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800830a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008310:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008316:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800831c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008322:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008328:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800832e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e034      	b.n	80083a8 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800834a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008354:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800835a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800836e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008372:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800837c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008382:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008388:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800838e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008394:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4313      	orrs	r3, r2
 800839a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b087      	sub	sp, #28
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d02e      	beq.n	800842e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80083dc:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80083ec:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80083f6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008400:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	3b01      	subs	r3, #1
 8008408:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800840a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	3b01      	subs	r3, #1
 8008412:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008414:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	3b01      	subs	r3, #1
 800841c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800841e:	4313      	orrs	r3, r2
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	e03b      	b.n	80084a6 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800843a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800843e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	3b01      	subs	r3, #1
 8008446:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	3b01      	subs	r3, #1
 800844e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008450:	4313      	orrs	r3, r2
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008464:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	3b01      	subs	r3, #1
 8008472:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008474:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	3b01      	subs	r3, #1
 800847c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800847e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	3b01      	subs	r3, #1
 8008486:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008488:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	3b01      	subs	r3, #1
 8008490:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008492:	4313      	orrs	r3, r2
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	371c      	adds	r7, #28
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80084d0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80084da:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80084e2:	4313      	orrs	r3, r2
 80084e4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80084ec:	f7fa fa48 	bl	8002980 <HAL_GetTick>
 80084f0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80084f2:	e010      	b.n	8008516 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d00c      	beq.n	8008516 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <FMC_SDRAM_SendCommand+0x5e>
 8008502:	f7fa fa3d 	bl	8002980 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d201      	bcs.n	8008516 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e006      	b.n	8008524 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b20      	cmp	r3, #32
 8008520:	d0e8      	beq.n	80084f4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	695a      	ldr	r2, [r3, #20]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f043 0201 	orr.w	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f023 0201 	bic.w	r2, r3, #1
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	019b      	lsls	r3, r3, #6
 80085aa:	f043 0220 	orr.w	r2, r3, #32
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4a09      	ldr	r2, [pc, #36]	; (80085e0 <USB_FlushTxFifo+0x48>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d901      	bls.n	80085c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e006      	b.n	80085d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d0f0      	beq.n	80085b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	00030d40 	.word	0x00030d40

080085e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2210      	movs	r2, #16
 80085f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a09      	ldr	r2, [pc, #36]	; (8008624 <USB_FlushRxFifo+0x40>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d901      	bls.n	8008608 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e006      	b.n	8008616 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b10      	cmp	r3, #16
 8008612:	d0f0      	beq.n	80085f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	00030d40 	.word	0x00030d40

08008628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008628:	b480      	push	{r7}
 800862a:	b089      	sub	sp, #36	; 0x24
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800863e:	88fb      	ldrh	r3, [r7, #6]
 8008640:	3303      	adds	r3, #3
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008646:	2300      	movs	r3, #0
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	e00b      	b.n	8008664 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	601a      	str	r2, [r3, #0]
    pDest++;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3304      	adds	r3, #4
 800865c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	3301      	adds	r3, #1
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	429a      	cmp	r2, r3
 800866a:	d3ef      	bcc.n	800864c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800866c:	69fb      	ldr	r3, [r7, #28]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3724      	adds	r7, #36	; 0x24
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	68fa      	ldr	r2, [r7, #12]
 800868e:	4013      	ands	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008692:	68fb      	ldr	r3, [r7, #12]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	f003 0301 	and.w	r3, r3, #1
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	68f9      	ldr	r1, [r7, #12]
 80086f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80086f4:	4313      	orrs	r3, r2
 80086f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80086f8:	78fb      	ldrb	r3, [r7, #3]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d107      	bne.n	800870e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008704:	461a      	mov	r2, r3
 8008706:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800870a:	6053      	str	r3, [r2, #4]
 800870c:	e009      	b.n	8008722 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800870e:	78fb      	ldrb	r3, [r7, #3]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d106      	bne.n	8008722 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800871a:	461a      	mov	r2, r3
 800871c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008720:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008742:	695b      	ldr	r3, [r3, #20]
 8008744:	b29b      	uxth	r3, r3
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008752:	b480      	push	{r7}
 8008754:	b087      	sub	sp, #28
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	460b      	mov	r3, r1
 800875c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	0c9b      	lsrs	r3, r3, #18
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <USB_HC_Halt+0x3a>
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d16c      	bne.n	8008866 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	4413      	add	r3, r2
 8008794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	0151      	lsls	r1, r2, #5
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	440a      	add	r2, r1
 80087a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087aa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d143      	bne.n	8008840 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	0151      	lsls	r1, r2, #5
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	440a      	add	r2, r1
 80087ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	0151      	lsls	r1, r2, #5
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	440a      	add	r2, r1
 80087ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	0151      	lsls	r1, r2, #5
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	440a      	add	r2, r1
 800880e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008816:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	3301      	adds	r3, #1
 800881c:	617b      	str	r3, [r7, #20]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008824:	d81d      	bhi.n	8008862 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4413      	add	r3, r2
 800882e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800883c:	d0ec      	beq.n	8008818 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800883e:	e080      	b.n	8008942 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	440a      	add	r2, r1
 8008856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800885a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800885e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008860:	e06f      	b.n	8008942 <USB_HC_Halt+0x1f0>
          break;
 8008862:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008864:	e06d      	b.n	8008942 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4413      	add	r3, r2
 800886e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	0151      	lsls	r1, r2, #5
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	440a      	add	r2, r1
 800887c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008884:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008892:	2b00      	cmp	r3, #0
 8008894:	d143      	bne.n	800891e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4413      	add	r3, r2
 800889e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	0151      	lsls	r1, r2, #5
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	440a      	add	r2, r1
 80088cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088f4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	3301      	adds	r3, #1
 80088fa:	617b      	str	r3, [r7, #20]
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008902:	d81d      	bhi.n	8008940 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	4413      	add	r3, r2
 800890c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800891a:	d0ec      	beq.n	80088f6 <USB_HC_Halt+0x1a4>
 800891c:	e011      	b.n	8008942 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	0151      	lsls	r1, r2, #5
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	440a      	add	r2, r1
 8008934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	e000      	b.n	8008942 <USB_HC_Halt+0x1f0>
          break;
 8008940:	bf00      	nop
    }
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff fe07 	bl	8008574 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008966:	2110      	movs	r1, #16
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fe15 	bl	8008598 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff fe38 	bl	80085e4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	e01f      	b.n	80089ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008990:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008998:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ae:	461a      	mov	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	3301      	adds	r3, #1
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b0f      	cmp	r3, #15
 80089be:	d9dc      	bls.n	800897a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	e034      	b.n	8008a30 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fa:	461a      	mov	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	3301      	adds	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a0c:	d80c      	bhi.n	8008a28 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a24:	d0ec      	beq.n	8008a00 <USB_StopHost+0xb0>
 8008a26:	e000      	b.n	8008a2a <USB_StopHost+0xda>
        break;
 8008a28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b0f      	cmp	r3, #15
 8008a34:	d9c7      	bls.n	80089c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff fd80 	bl	8008552 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f804 	bl	8008a80 <USBH_HandleSof>
}
 8008a78:	bf00      	nop
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b0b      	cmp	r3, #11
 8008a90:	d10a      	bne.n	8008aa8 <USBH_HandleSof+0x28>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
  }
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f000 f8ae 	bl	8008c38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008adc:	bf00      	nop
}
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008af4:	bf00      	nop
}
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b34:	2200      	movs	r2, #0
 8008b36:	4619      	mov	r1, r3
 8008b38:	f000 f87e 	bl	8008c38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 f8fc 	bl	8009d64 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	791b      	ldrb	r3, [r3, #4]
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f830 	bl	8008bd8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	795b      	ldrb	r3, [r3, #5]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f82a 	bl	8008bd8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	f000 f84c 	bl	8008c38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f000 f835 	bl	8008c38 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	2b0a      	cmp	r3, #10
 8008be8:	d80d      	bhi.n	8008c06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	33e0      	adds	r3, #224	; 0xe0
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008bfc:	6879      	ldr	r1, [r7, #4]
 8008bfe:	33e0      	adds	r3, #224	; 0xe0
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c06:	2300      	movs	r3, #0
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c1a:	f3ef 8305 	mrs	r3, IPSR
 8008c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8008c20:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bf14      	ite	ne
 8008c26:	2301      	movne	r3, #1
 8008c28:	2300      	moveq	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <osMessagePut+0x1e>
    ticks = 1;
 8008c52:	2301      	movs	r3, #1
 8008c54:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008c56:	f7ff ffdd 	bl	8008c14 <inHandlerMode>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d018      	beq.n	8008c92 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008c60:	f107 0210 	add.w	r2, r7, #16
 8008c64:	f107 0108 	add.w	r1, r7, #8
 8008c68:	2300      	movs	r3, #0
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f9a6 	bl	8008fbc <xQueueGenericSendFromISR>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d001      	beq.n	8008c7a <osMessagePut+0x42>
      return osErrorOS;
 8008c76:	23ff      	movs	r3, #255	; 0xff
 8008c78:	e018      	b.n	8008cac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d014      	beq.n	8008caa <osMessagePut+0x72>
 8008c80:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <osMessagePut+0x7c>)
 8008c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	e00b      	b.n	8008caa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008c92:	f107 0108 	add.w	r1, r7, #8
 8008c96:	2300      	movs	r3, #0
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 f894 	bl	8008dc8 <xQueueGenericSend>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d001      	beq.n	8008caa <osMessagePut+0x72>
      return osErrorOS;
 8008ca6:	23ff      	movs	r3, #255	; 0xff
 8008ca8:	e000      	b.n	8008cac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d103      	bne.n	8008d20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	60fb      	str	r3, [r7, #12]
 8008d1e:	e00c      	b.n	8008d3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3308      	adds	r3, #8
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	e002      	b.n	8008d2e <vListInsert+0x2e>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d2f6      	bcs.n	8008d28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	601a      	str	r2, [r3, #0]
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d72:	b480      	push	{r7}
 8008d74:	b085      	sub	sp, #20
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6892      	ldr	r2, [r2, #8]
 8008d88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6852      	ldr	r2, [r2, #4]
 8008d92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d103      	bne.n	8008da6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08e      	sub	sp, #56	; 0x38
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d109      	bne.n	8008df8 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008df6:	e7fe      	b.n	8008df6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d103      	bne.n	8008e06 <xQueueGenericSend+0x3e>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <xQueueGenericSend+0x42>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <xQueueGenericSend+0x44>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <xQueueGenericSend+0x5c>
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
 8008e22:	e7fe      	b.n	8008e22 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d103      	bne.n	8008e32 <xQueueGenericSend+0x6a>
 8008e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSend+0x6e>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSend+0x70>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d109      	bne.n	8008e50 <xQueueGenericSend+0x88>
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	623b      	str	r3, [r7, #32]
 8008e4e:	e7fe      	b.n	8008e4e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e50:	f000 fd26 	bl	80098a0 <xTaskGetSchedulerState>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d102      	bne.n	8008e60 <xQueueGenericSend+0x98>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <xQueueGenericSend+0x9c>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e000      	b.n	8008e66 <xQueueGenericSend+0x9e>
 8008e64:	2300      	movs	r3, #0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <xQueueGenericSend+0xb6>
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	61fb      	str	r3, [r7, #28]
 8008e7c:	e7fe      	b.n	8008e7c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e7e:	f000 fe2b 	bl	8009ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d302      	bcc.n	8008e94 <xQueueGenericSend+0xcc>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d129      	bne.n	8008ee8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	68b9      	ldr	r1, [r7, #8]
 8008e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9a:	f000 f923 	bl	80090e4 <prvCopyDataToQueue>
 8008e9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d010      	beq.n	8008eca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	3324      	adds	r3, #36	; 0x24
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fbf3 	bl	8009698 <xTaskRemoveFromEventList>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d013      	beq.n	8008ee0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008eb8:	4b3f      	ldr	r3, [pc, #252]	; (8008fb8 <xQueueGenericSend+0x1f0>)
 8008eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ebe:	601a      	str	r2, [r3, #0]
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	e00a      	b.n	8008ee0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d007      	beq.n	8008ee0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ed0:	4b39      	ldr	r3, [pc, #228]	; (8008fb8 <xQueueGenericSend+0x1f0>)
 8008ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ee0:	f000 fe28 	bl	8009b34 <vPortExitCritical>
				return pdPASS;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e063      	b.n	8008fb0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d103      	bne.n	8008ef6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008eee:	f000 fe21 	bl	8009b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e05c      	b.n	8008fb0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d106      	bne.n	8008f0a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fc2b 	bl	800975c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f06:	2301      	movs	r3, #1
 8008f08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f0a:	f000 fe13 	bl	8009b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f0e:	f000 f9bd 	bl	800928c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f12:	f000 fde1 	bl	8009ad8 <vPortEnterCritical>
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f1c:	b25b      	sxtb	r3, r3
 8008f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f22:	d103      	bne.n	8008f2c <xQueueGenericSend+0x164>
 8008f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f32:	b25b      	sxtb	r3, r3
 8008f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f38:	d103      	bne.n	8008f42 <xQueueGenericSend+0x17a>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f42:	f000 fdf7 	bl	8009b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f46:	1d3a      	adds	r2, r7, #4
 8008f48:	f107 0314 	add.w	r3, r7, #20
 8008f4c:	4611      	mov	r1, r2
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f000 fc1a 	bl	8009788 <xTaskCheckForTimeOut>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d124      	bne.n	8008fa4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f5c:	f000 f97e 	bl	800925c <prvIsQueueFull>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d018      	beq.n	8008f98 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	3310      	adds	r3, #16
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 fb6e 	bl	8009650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f76:	f000 f91f 	bl	80091b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f7a:	f000 f995 	bl	80092a8 <xTaskResumeAll>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f47f af7c 	bne.w	8008e7e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <xQueueGenericSend+0x1f0>)
 8008f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	e772      	b.n	8008e7e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f9a:	f000 f90d 	bl	80091b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f9e:	f000 f983 	bl	80092a8 <xTaskResumeAll>
 8008fa2:	e76c      	b.n	8008e7e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa6:	f000 f907 	bl	80091b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008faa:	f000 f97d 	bl	80092a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3738      	adds	r7, #56	; 0x38
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08e      	sub	sp, #56	; 0x38
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
 8008fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d109      	bne.n	8008fe8 <xQueueGenericSendFromISR+0x2c>
 8008fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe6:	e7fe      	b.n	8008fe6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <xQueueGenericSendFromISR+0x3a>
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <xQueueGenericSendFromISR+0x3e>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e000      	b.n	8008ffc <xQueueGenericSendFromISR+0x40>
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d109      	bne.n	8009014 <xQueueGenericSendFromISR+0x58>
 8009000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	623b      	str	r3, [r7, #32]
 8009012:	e7fe      	b.n	8009012 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d103      	bne.n	8009022 <xQueueGenericSendFromISR+0x66>
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <xQueueGenericSendFromISR+0x6a>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <xQueueGenericSendFromISR+0x6c>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d109      	bne.n	8009040 <xQueueGenericSendFromISR+0x84>
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	61fb      	str	r3, [r7, #28]
 800903e:	e7fe      	b.n	800903e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009040:	f000 fdfa 	bl	8009c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009044:	f3ef 8211 	mrs	r2, BASEPRI
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	61ba      	str	r2, [r7, #24]
 800905a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800905c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009068:	429a      	cmp	r2, r3
 800906a:	d302      	bcc.n	8009072 <xQueueGenericSendFromISR+0xb6>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b02      	cmp	r3, #2
 8009070:	d12c      	bne.n	80090cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009078:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009082:	f000 f82f 	bl	80090e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009086:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800908a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908e:	d112      	bne.n	80090b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	d016      	beq.n	80090c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	3324      	adds	r3, #36	; 0x24
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fafb 	bl	8009698 <xTaskRemoveFromEventList>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	e007      	b.n	80090c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090ba:	3301      	adds	r3, #1
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	b25a      	sxtb	r2, r3
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090c6:	2301      	movs	r3, #1
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80090ca:	e001      	b.n	80090d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090cc:	2300      	movs	r3, #0
 80090ce:	637b      	str	r3, [r7, #52]	; 0x34
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3738      	adds	r7, #56	; 0x38
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10d      	bne.n	800911e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d14d      	bne.n	80091a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fbe4 	bl	80098dc <xTaskPriorityDisinherit>
 8009114:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	e043      	b.n	80091a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d119      	bne.n	8009158 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6858      	ldr	r0, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912c:	461a      	mov	r2, r3
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	f000 fe84 	bl	8009e3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	441a      	add	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685a      	ldr	r2, [r3, #4]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	d32b      	bcc.n	80091a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
 8009156:	e026      	b.n	80091a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68d8      	ldr	r0, [r3, #12]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	461a      	mov	r2, r3
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	f000 fe6a 	bl	8009e3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	425b      	negs	r3, r3
 8009172:	441a      	add	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d207      	bcs.n	8009194 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918c:	425b      	negs	r3, r3
 800918e:	441a      	add	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b02      	cmp	r3, #2
 8009198:	d105      	bne.n	80091a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091ae:	697b      	ldr	r3, [r7, #20]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091c0:	f000 fc8a 	bl	8009ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091cc:	e011      	b.n	80091f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fa5c 	bl	8009698 <xTaskRemoveFromEventList>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091e6:	f000 fb2f 	bl	8009848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dce9      	bgt.n	80091ce <prvUnlockQueue+0x16>
 80091fa:	e000      	b.n	80091fe <prvUnlockQueue+0x46>
					break;
 80091fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	22ff      	movs	r2, #255	; 0xff
 8009202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009206:	f000 fc95 	bl	8009b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800920a:	f000 fc65 	bl	8009ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009214:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009216:	e011      	b.n	800923c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d012      	beq.n	8009246 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3310      	adds	r3, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fa37 	bl	8009698 <xTaskRemoveFromEventList>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009230:	f000 fb0a 	bl	8009848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	3b01      	subs	r3, #1
 8009238:	b2db      	uxtb	r3, r3
 800923a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800923c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	dce9      	bgt.n	8009218 <prvUnlockQueue+0x60>
 8009244:	e000      	b.n	8009248 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009246:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	22ff      	movs	r2, #255	; 0xff
 800924c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009250:	f000 fc70 	bl	8009b34 <vPortExitCritical>
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009264:	f000 fc38 	bl	8009ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009270:	429a      	cmp	r2, r3
 8009272:	d102      	bne.n	800927a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009274:	2301      	movs	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	e001      	b.n	800927e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800927e:	f000 fc59 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009290:	4b04      	ldr	r3, [pc, #16]	; (80092a4 <vTaskSuspendAll+0x18>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4a03      	ldr	r2, [pc, #12]	; (80092a4 <vTaskSuspendAll+0x18>)
 8009298:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800929a:	bf00      	nop
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	20000300 	.word	0x20000300

080092a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092b6:	4b41      	ldr	r3, [pc, #260]	; (80093bc <xTaskResumeAll+0x114>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <xTaskResumeAll+0x2a>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	e7fe      	b.n	80092d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092d2:	f000 fc01 	bl	8009ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092d6:	4b39      	ldr	r3, [pc, #228]	; (80093bc <xTaskResumeAll+0x114>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3b01      	subs	r3, #1
 80092dc:	4a37      	ldr	r2, [pc, #220]	; (80093bc <xTaskResumeAll+0x114>)
 80092de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e0:	4b36      	ldr	r3, [pc, #216]	; (80093bc <xTaskResumeAll+0x114>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d161      	bne.n	80093ac <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092e8:	4b35      	ldr	r3, [pc, #212]	; (80093c0 <xTaskResumeAll+0x118>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d05d      	beq.n	80093ac <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092f0:	e02e      	b.n	8009350 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f2:	4b34      	ldr	r3, [pc, #208]	; (80093c4 <xTaskResumeAll+0x11c>)
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3318      	adds	r3, #24
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fd37 	bl	8008d72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3304      	adds	r3, #4
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff fd32 	bl	8008d72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009312:	2201      	movs	r2, #1
 8009314:	409a      	lsls	r2, r3
 8009316:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <xTaskResumeAll+0x120>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4313      	orrs	r3, r2
 800931c:	4a2a      	ldr	r2, [pc, #168]	; (80093c8 <xTaskResumeAll+0x120>)
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <xTaskResumeAll+0x124>)
 800932e:	441a      	add	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3304      	adds	r3, #4
 8009334:	4619      	mov	r1, r3
 8009336:	4610      	mov	r0, r2
 8009338:	f7ff fcbe 	bl	8008cb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4b23      	ldr	r3, [pc, #140]	; (80093d0 <xTaskResumeAll+0x128>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009346:	429a      	cmp	r2, r3
 8009348:	d302      	bcc.n	8009350 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800934a:	4b22      	ldr	r3, [pc, #136]	; (80093d4 <xTaskResumeAll+0x12c>)
 800934c:	2201      	movs	r2, #1
 800934e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009350:	4b1c      	ldr	r3, [pc, #112]	; (80093c4 <xTaskResumeAll+0x11c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1cc      	bne.n	80092f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800935e:	f000 fa7f 	bl	8009860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009362:	4b1d      	ldr	r3, [pc, #116]	; (80093d8 <xTaskResumeAll+0x130>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d010      	beq.n	8009390 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800936e:	f000 f837 	bl	80093e0 <xTaskIncrementTick>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009378:	4b16      	ldr	r3, [pc, #88]	; (80093d4 <xTaskResumeAll+0x12c>)
 800937a:	2201      	movs	r2, #1
 800937c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3b01      	subs	r3, #1
 8009382:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1f1      	bne.n	800936e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800938a:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <xTaskResumeAll+0x130>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009390:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <xTaskResumeAll+0x12c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800939c:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <xTaskResumeAll+0x134>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093ac:	f000 fbc2 	bl	8009b34 <vPortExitCritical>

	return xAlreadyYielded;
 80093b0:	68bb      	ldr	r3, [r7, #8]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000300 	.word	0x20000300
 80093c0:	200002e0 	.word	0x200002e0
 80093c4:	200002b8 	.word	0x200002b8
 80093c8:	200002e8 	.word	0x200002e8
 80093cc:	20000224 	.word	0x20000224
 80093d0:	20000220 	.word	0x20000220
 80093d4:	200002f4 	.word	0x200002f4
 80093d8:	200002f0 	.word	0x200002f0
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ea:	4b4e      	ldr	r3, [pc, #312]	; (8009524 <xTaskIncrementTick+0x144>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f040 8087 	bne.w	8009502 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80093f4:	4b4c      	ldr	r3, [pc, #304]	; (8009528 <xTaskIncrementTick+0x148>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093fc:	4a4a      	ldr	r2, [pc, #296]	; (8009528 <xTaskIncrementTick+0x148>)
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11f      	bne.n	8009448 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009408:	4b48      	ldr	r3, [pc, #288]	; (800952c <xTaskIncrementTick+0x14c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <xTaskIncrementTick+0x46>
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	e7fe      	b.n	8009424 <xTaskIncrementTick+0x44>
 8009426:	4b41      	ldr	r3, [pc, #260]	; (800952c <xTaskIncrementTick+0x14c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	4b40      	ldr	r3, [pc, #256]	; (8009530 <xTaskIncrementTick+0x150>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a3e      	ldr	r2, [pc, #248]	; (800952c <xTaskIncrementTick+0x14c>)
 8009432:	6013      	str	r3, [r2, #0]
 8009434:	4a3e      	ldr	r2, [pc, #248]	; (8009530 <xTaskIncrementTick+0x150>)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	4b3e      	ldr	r3, [pc, #248]	; (8009534 <xTaskIncrementTick+0x154>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	4a3c      	ldr	r2, [pc, #240]	; (8009534 <xTaskIncrementTick+0x154>)
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	f000 fa0c 	bl	8009860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009448:	4b3b      	ldr	r3, [pc, #236]	; (8009538 <xTaskIncrementTick+0x158>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	429a      	cmp	r2, r3
 8009450:	d348      	bcc.n	80094e4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009452:	4b36      	ldr	r3, [pc, #216]	; (800952c <xTaskIncrementTick+0x14c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800945c:	4b36      	ldr	r3, [pc, #216]	; (8009538 <xTaskIncrementTick+0x158>)
 800945e:	f04f 32ff 	mov.w	r2, #4294967295
 8009462:	601a      	str	r2, [r3, #0]
					break;
 8009464:	e03e      	b.n	80094e4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009466:	4b31      	ldr	r3, [pc, #196]	; (800952c <xTaskIncrementTick+0x14c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	429a      	cmp	r2, r3
 800947c:	d203      	bcs.n	8009486 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800947e:	4a2e      	ldr	r2, [pc, #184]	; (8009538 <xTaskIncrementTick+0x158>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009484:	e02e      	b.n	80094e4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3304      	adds	r3, #4
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff fc71 	bl	8008d72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	3318      	adds	r3, #24
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff fc68 	bl	8008d72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	2201      	movs	r2, #1
 80094a8:	409a      	lsls	r2, r3
 80094aa:	4b24      	ldr	r3, [pc, #144]	; (800953c <xTaskIncrementTick+0x15c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	4a22      	ldr	r2, [pc, #136]	; (800953c <xTaskIncrementTick+0x15c>)
 80094b2:	6013      	str	r3, [r2, #0]
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b8:	4613      	mov	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <xTaskIncrementTick+0x160>)
 80094c2:	441a      	add	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7ff fbf4 	bl	8008cb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d4:	4b1b      	ldr	r3, [pc, #108]	; (8009544 <xTaskIncrementTick+0x164>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094da:	429a      	cmp	r2, r3
 80094dc:	d3b9      	bcc.n	8009452 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094e2:	e7b6      	b.n	8009452 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80094e4:	4b17      	ldr	r3, [pc, #92]	; (8009544 <xTaskIncrementTick+0x164>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ea:	4915      	ldr	r1, [pc, #84]	; (8009540 <xTaskIncrementTick+0x160>)
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	440b      	add	r3, r1
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d907      	bls.n	800950c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80094fc:	2301      	movs	r3, #1
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	e004      	b.n	800950c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009502:	4b11      	ldr	r3, [pc, #68]	; (8009548 <xTaskIncrementTick+0x168>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3301      	adds	r3, #1
 8009508:	4a0f      	ldr	r2, [pc, #60]	; (8009548 <xTaskIncrementTick+0x168>)
 800950a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800950c:	4b0f      	ldr	r3, [pc, #60]	; (800954c <xTaskIncrementTick+0x16c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009518:	697b      	ldr	r3, [r7, #20]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20000300 	.word	0x20000300
 8009528:	200002e4 	.word	0x200002e4
 800952c:	200002b0 	.word	0x200002b0
 8009530:	200002b4 	.word	0x200002b4
 8009534:	200002f8 	.word	0x200002f8
 8009538:	200002fc 	.word	0x200002fc
 800953c:	200002e8 	.word	0x200002e8
 8009540:	20000224 	.word	0x20000224
 8009544:	20000220 	.word	0x20000220
 8009548:	200002f0 	.word	0x200002f0
 800954c:	200002f4 	.word	0x200002f4

08009550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009556:	4b39      	ldr	r3, [pc, #228]	; (800963c <vTaskSwitchContext+0xec>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800955e:	4b38      	ldr	r3, [pc, #224]	; (8009640 <vTaskSwitchContext+0xf0>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009564:	e065      	b.n	8009632 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009566:	4b36      	ldr	r3, [pc, #216]	; (8009640 <vTaskSwitchContext+0xf0>)
 8009568:	2200      	movs	r2, #0
 800956a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800956c:	4b35      	ldr	r3, [pc, #212]	; (8009644 <vTaskSwitchContext+0xf4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	61fb      	str	r3, [r7, #28]
 8009574:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009578:	61bb      	str	r3, [r7, #24]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	429a      	cmp	r2, r3
 8009582:	d111      	bne.n	80095a8 <vTaskSwitchContext+0x58>
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3304      	adds	r3, #4
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	429a      	cmp	r2, r3
 800958e:	d10b      	bne.n	80095a8 <vTaskSwitchContext+0x58>
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	3308      	adds	r3, #8
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	429a      	cmp	r2, r3
 800959a:	d105      	bne.n	80095a8 <vTaskSwitchContext+0x58>
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	330c      	adds	r3, #12
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69ba      	ldr	r2, [r7, #24]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d008      	beq.n	80095ba <vTaskSwitchContext+0x6a>
 80095a8:	4b26      	ldr	r3, [pc, #152]	; (8009644 <vTaskSwitchContext+0xf4>)
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	4b25      	ldr	r3, [pc, #148]	; (8009644 <vTaskSwitchContext+0xf4>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3334      	adds	r3, #52	; 0x34
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f7f7 fb05 	bl	8000bc4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ba:	4b23      	ldr	r3, [pc, #140]	; (8009648 <vTaskSwitchContext+0xf8>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	fab3 f383 	clz	r3, r3
 80095c6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095c8:	7afb      	ldrb	r3, [r7, #11]
 80095ca:	f1c3 031f 	rsb	r3, r3, #31
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	491e      	ldr	r1, [pc, #120]	; (800964c <vTaskSwitchContext+0xfc>)
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d109      	bne.n	80095f8 <vTaskSwitchContext+0xa8>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	607b      	str	r3, [r7, #4]
 80095f6:	e7fe      	b.n	80095f6 <vTaskSwitchContext+0xa6>
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4a12      	ldr	r2, [pc, #72]	; (800964c <vTaskSwitchContext+0xfc>)
 8009604:	4413      	add	r3, r2
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	3308      	adds	r3, #8
 800961a:	429a      	cmp	r2, r3
 800961c:	d104      	bne.n	8009628 <vTaskSwitchContext+0xd8>
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	605a      	str	r2, [r3, #4]
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	4a05      	ldr	r2, [pc, #20]	; (8009644 <vTaskSwitchContext+0xf4>)
 8009630:	6013      	str	r3, [r2, #0]
}
 8009632:	bf00      	nop
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20000300 	.word	0x20000300
 8009640:	200002f4 	.word	0x200002f4
 8009644:	20000220 	.word	0x20000220
 8009648:	200002e8 	.word	0x200002e8
 800964c:	20000224 	.word	0x20000224

08009650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d109      	bne.n	8009674 <vTaskPlaceOnEventList+0x24>
 8009660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	e7fe      	b.n	8009672 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009674:	4b07      	ldr	r3, [pc, #28]	; (8009694 <vTaskPlaceOnEventList+0x44>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3318      	adds	r3, #24
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff fb3f 	bl	8008d00 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009682:	2101      	movs	r1, #1
 8009684:	6838      	ldr	r0, [r7, #0]
 8009686:	f000 f9ad 	bl	80099e4 <prvAddCurrentTaskToDelayedList>
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000220 	.word	0x20000220

08009698 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d109      	bne.n	80096c2 <xTaskRemoveFromEventList+0x2a>
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	e7fe      	b.n	80096c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fb53 	bl	8008d72 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096cc:	4b1d      	ldr	r3, [pc, #116]	; (8009744 <xTaskRemoveFromEventList+0xac>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11c      	bne.n	800970e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff fb4a 	bl	8008d72 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e2:	2201      	movs	r2, #1
 80096e4:	409a      	lsls	r2, r3
 80096e6:	4b18      	ldr	r3, [pc, #96]	; (8009748 <xTaskRemoveFromEventList+0xb0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	4a16      	ldr	r2, [pc, #88]	; (8009748 <xTaskRemoveFromEventList+0xb0>)
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f4:	4613      	mov	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4a13      	ldr	r2, [pc, #76]	; (800974c <xTaskRemoveFromEventList+0xb4>)
 80096fe:	441a      	add	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f7ff fad6 	bl	8008cb8 <vListInsertEnd>
 800970c:	e005      	b.n	800971a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	3318      	adds	r3, #24
 8009712:	4619      	mov	r1, r3
 8009714:	480e      	ldr	r0, [pc, #56]	; (8009750 <xTaskRemoveFromEventList+0xb8>)
 8009716:	f7ff facf 	bl	8008cb8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	4b0d      	ldr	r3, [pc, #52]	; (8009754 <xTaskRemoveFromEventList+0xbc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009724:	429a      	cmp	r2, r3
 8009726:	d905      	bls.n	8009734 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800972c:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <xTaskRemoveFromEventList+0xc0>)
 800972e:	2201      	movs	r2, #1
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	e001      	b.n	8009738 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009738:	697b      	ldr	r3, [r7, #20]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20000300 	.word	0x20000300
 8009748:	200002e8 	.word	0x200002e8
 800974c:	20000224 	.word	0x20000224
 8009750:	200002b8 	.word	0x200002b8
 8009754:	20000220 	.word	0x20000220
 8009758:	200002f4 	.word	0x200002f4

0800975c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009764:	4b06      	ldr	r3, [pc, #24]	; (8009780 <vTaskInternalSetTimeOutState+0x24>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <vTaskInternalSetTimeOutState+0x28>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	605a      	str	r2, [r3, #4]
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	200002f8 	.word	0x200002f8
 8009784:	200002e4 	.word	0x200002e4

08009788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d109      	bne.n	80097ac <xTaskCheckForTimeOut+0x24>
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	613b      	str	r3, [r7, #16]
 80097aa:	e7fe      	b.n	80097aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <xTaskCheckForTimeOut+0x3e>
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	60fb      	str	r3, [r7, #12]
 80097c4:	e7fe      	b.n	80097c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80097c6:	f000 f987 	bl	8009ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097ca:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <xTaskCheckForTimeOut+0xb8>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e2:	d102      	bne.n	80097ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	e023      	b.n	8009832 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	4b15      	ldr	r3, [pc, #84]	; (8009844 <xTaskCheckForTimeOut+0xbc>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d007      	beq.n	8009806 <xTaskCheckForTimeOut+0x7e>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d302      	bcc.n	8009806 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009800:	2301      	movs	r3, #1
 8009802:	61fb      	str	r3, [r7, #28]
 8009804:	e015      	b.n	8009832 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	429a      	cmp	r2, r3
 800980e:	d20b      	bcs.n	8009828 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff ff9d 	bl	800975c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009822:	2300      	movs	r3, #0
 8009824:	61fb      	str	r3, [r7, #28]
 8009826:	e004      	b.n	8009832 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800982e:	2301      	movs	r3, #1
 8009830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009832:	f000 f97f 	bl	8009b34 <vPortExitCritical>

	return xReturn;
 8009836:	69fb      	ldr	r3, [r7, #28]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200002e4 	.word	0x200002e4
 8009844:	200002f8 	.word	0x200002f8

08009848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800984c:	4b03      	ldr	r3, [pc, #12]	; (800985c <vTaskMissedYield+0x14>)
 800984e:	2201      	movs	r2, #1
 8009850:	601a      	str	r2, [r3, #0]
}
 8009852:	bf00      	nop
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	200002f4 	.word	0x200002f4

08009860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009866:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <prvResetNextTaskUnblockTime+0x38>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d104      	bne.n	800987a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009870:	4b0a      	ldr	r3, [pc, #40]	; (800989c <prvResetNextTaskUnblockTime+0x3c>)
 8009872:	f04f 32ff 	mov.w	r2, #4294967295
 8009876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009878:	e008      	b.n	800988c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987a:	4b07      	ldr	r3, [pc, #28]	; (8009898 <prvResetNextTaskUnblockTime+0x38>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a04      	ldr	r2, [pc, #16]	; (800989c <prvResetNextTaskUnblockTime+0x3c>)
 800988a:	6013      	str	r3, [r2, #0]
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	200002b0 	.word	0x200002b0
 800989c:	200002fc 	.word	0x200002fc

080098a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098a6:	4b0b      	ldr	r3, [pc, #44]	; (80098d4 <xTaskGetSchedulerState+0x34>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d102      	bne.n	80098b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80098ae:	2301      	movs	r3, #1
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	e008      	b.n	80098c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <xTaskGetSchedulerState+0x38>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d102      	bne.n	80098c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80098bc:	2302      	movs	r3, #2
 80098be:	607b      	str	r3, [r7, #4]
 80098c0:	e001      	b.n	80098c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80098c2:	2300      	movs	r3, #0
 80098c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80098c6:	687b      	ldr	r3, [r7, #4]
	}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	200002ec 	.word	0x200002ec
 80098d8:	20000300 	.word	0x20000300

080098dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d06c      	beq.n	80099cc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80098f2:	4b39      	ldr	r3, [pc, #228]	; (80099d8 <xTaskPriorityDisinherit+0xfc>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d009      	beq.n	8009910 <xTaskPriorityDisinherit+0x34>
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60fb      	str	r3, [r7, #12]
 800990e:	e7fe      	b.n	800990e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009914:	2b00      	cmp	r3, #0
 8009916:	d109      	bne.n	800992c <xTaskPriorityDisinherit+0x50>
 8009918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	60bb      	str	r3, [r7, #8]
 800992a:	e7fe      	b.n	800992a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009930:	1e5a      	subs	r2, r3, #1
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993e:	429a      	cmp	r2, r3
 8009940:	d044      	beq.n	80099cc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009946:	2b00      	cmp	r3, #0
 8009948:	d140      	bne.n	80099cc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3304      	adds	r3, #4
 800994e:	4618      	mov	r0, r3
 8009950:	f7ff fa0f 	bl	8008d72 <uxListRemove>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d115      	bne.n	8009986 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	491f      	ldr	r1, [pc, #124]	; (80099dc <xTaskPriorityDisinherit+0x100>)
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xTaskPriorityDisinherit+0xaa>
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	2201      	movs	r2, #1
 8009976:	fa02 f303 	lsl.w	r3, r2, r3
 800997a:	43da      	mvns	r2, r3
 800997c:	4b18      	ldr	r3, [pc, #96]	; (80099e0 <xTaskPriorityDisinherit+0x104>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4013      	ands	r3, r2
 8009982:	4a17      	ldr	r2, [pc, #92]	; (80099e0 <xTaskPriorityDisinherit+0x104>)
 8009984:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	f1c3 0207 	rsb	r2, r3, #7
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	2201      	movs	r2, #1
 80099a0:	409a      	lsls	r2, r3
 80099a2:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <xTaskPriorityDisinherit+0x104>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	4a0d      	ldr	r2, [pc, #52]	; (80099e0 <xTaskPriorityDisinherit+0x104>)
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4a08      	ldr	r2, [pc, #32]	; (80099dc <xTaskPriorityDisinherit+0x100>)
 80099ba:	441a      	add	r2, r3
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	3304      	adds	r3, #4
 80099c0:	4619      	mov	r1, r3
 80099c2:	4610      	mov	r0, r2
 80099c4:	f7ff f978 	bl	8008cb8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099cc:	697b      	ldr	r3, [r7, #20]
	}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3718      	adds	r7, #24
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20000220 	.word	0x20000220
 80099dc:	20000224 	.word	0x20000224
 80099e0:	200002e8 	.word	0x200002e8

080099e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80099ee:	4b29      	ldr	r3, [pc, #164]	; (8009a94 <prvAddCurrentTaskToDelayedList+0xb0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099f4:	4b28      	ldr	r3, [pc, #160]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3304      	adds	r3, #4
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff f9b9 	bl	8008d72 <uxListRemove>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10b      	bne.n	8009a1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009a06:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a12:	43da      	mvns	r2, r3
 8009a14:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	4a20      	ldr	r2, [pc, #128]	; (8009a9c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009a1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d10a      	bne.n	8009a3c <prvAddCurrentTaskToDelayedList+0x58>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d007      	beq.n	8009a3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a2c:	4b1a      	ldr	r3, [pc, #104]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	481a      	ldr	r0, [pc, #104]	; (8009aa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009a36:	f7ff f93f 	bl	8008cb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a3a:	e026      	b.n	8009a8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4413      	add	r3, r2
 8009a42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a44:	4b14      	ldr	r3, [pc, #80]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68ba      	ldr	r2, [r7, #8]
 8009a4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d209      	bcs.n	8009a68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a54:	4b13      	ldr	r3, [pc, #76]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	4b0f      	ldr	r3, [pc, #60]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7ff f94d 	bl	8008d00 <vListInsert>
}
 8009a66:	e010      	b.n	8009a8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7ff f943 	bl	8008d00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d202      	bcs.n	8009a8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009a84:	4a09      	ldr	r2, [pc, #36]	; (8009aac <prvAddCurrentTaskToDelayedList+0xc8>)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	6013      	str	r3, [r2, #0]
}
 8009a8a:	bf00      	nop
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	200002e4 	.word	0x200002e4
 8009a98:	20000220 	.word	0x20000220
 8009a9c:	200002e8 	.word	0x200002e8
 8009aa0:	200002cc 	.word	0x200002cc
 8009aa4:	200002b4 	.word	0x200002b4
 8009aa8:	200002b0 	.word	0x200002b0
 8009aac:	200002fc 	.word	0x200002fc

08009ab0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ab0:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <pxCurrentTCBConst2>)
 8009ab2:	6819      	ldr	r1, [r3, #0]
 8009ab4:	6808      	ldr	r0, [r1, #0]
 8009ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	f380 8809 	msr	PSP, r0
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f04f 0000 	mov.w	r0, #0
 8009ac6:	f380 8811 	msr	BASEPRI, r0
 8009aca:	4770      	bx	lr
 8009acc:	f3af 8000 	nop.w

08009ad0 <pxCurrentTCBConst2>:
 8009ad0:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop

08009ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009af0:	4b0e      	ldr	r3, [pc, #56]	; (8009b2c <vPortEnterCritical+0x54>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	4a0d      	ldr	r2, [pc, #52]	; (8009b2c <vPortEnterCritical+0x54>)
 8009af8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009afa:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <vPortEnterCritical+0x54>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d10e      	bne.n	8009b20 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b02:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <vPortEnterCritical+0x58>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d009      	beq.n	8009b20 <vPortEnterCritical+0x48>
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	603b      	str	r3, [r7, #0]
 8009b1e:	e7fe      	b.n	8009b1e <vPortEnterCritical+0x46>
	}
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	20000054 	.word	0x20000054
 8009b30:	e000ed04 	.word	0xe000ed04

08009b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b3a:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <vPortExitCritical+0x4c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d109      	bne.n	8009b56 <vPortExitCritical+0x22>
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	e7fe      	b.n	8009b54 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009b56:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <vPortExitCritical+0x4c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	4a08      	ldr	r2, [pc, #32]	; (8009b80 <vPortExitCritical+0x4c>)
 8009b5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <vPortExitCritical+0x4c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <vPortExitCritical+0x3e>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b72:	bf00      	nop
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	20000054 	.word	0x20000054
	...

08009b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b90:	f3ef 8009 	mrs	r0, PSP
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <pxCurrentTCBConst>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	f01e 0f10 	tst.w	lr, #16
 8009ba0:	bf08      	it	eq
 8009ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	6010      	str	r0, [r2, #0]
 8009bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bb4:	f380 8811 	msr	BASEPRI, r0
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f7ff fcc6 	bl	8009550 <vTaskSwitchContext>
 8009bc4:	f04f 0000 	mov.w	r0, #0
 8009bc8:	f380 8811 	msr	BASEPRI, r0
 8009bcc:	bc09      	pop	{r0, r3}
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	6808      	ldr	r0, [r1, #0]
 8009bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd6:	f01e 0f10 	tst.w	lr, #16
 8009bda:	bf08      	it	eq
 8009bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009be0:	f380 8809 	msr	PSP, r0
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	f3af 8000 	nop.w

08009bf0 <pxCurrentTCBConst>:
 8009bf0:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c10:	f7ff fbe6 	bl	80093e0 <xTaskIncrementTick>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c1a:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <SysTick_Handler+0x3c>)
 8009c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c20:	601a      	str	r2, [r3, #0]
 8009c22:	2300      	movs	r3, #0
 8009c24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	e000ed04 	.word	0xe000ed04

08009c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c3e:	f3ef 8305 	mrs	r3, IPSR
 8009c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b0f      	cmp	r3, #15
 8009c48:	d913      	bls.n	8009c72 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c4a:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <vPortValidateInterruptPriority+0x6c>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c54:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <vPortValidateInterruptPriority+0x70>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	7afa      	ldrb	r2, [r7, #11]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d209      	bcs.n	8009c72 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
 8009c70:	e7fe      	b.n	8009c70 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c72:	4b0e      	ldr	r3, [pc, #56]	; (8009cac <vPortValidateInterruptPriority+0x74>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <vPortValidateInterruptPriority+0x78>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d909      	bls.n	8009c96 <vPortValidateInterruptPriority+0x5e>
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	e7fe      	b.n	8009c94 <vPortValidateInterruptPriority+0x5c>
	}
 8009c96:	bf00      	nop
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	e000e3f0 	.word	0xe000e3f0
 8009ca8:	20000304 	.word	0x20000304
 8009cac:	e000ed0c 	.word	0xe000ed0c
 8009cb0:	20000308 	.word	0x20000308

08009cb4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe feca 	bl	8008a5c <USBH_LL_IncTimer>
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7fe ff0e 	bl	8008b00 <USBH_LL_Connect>
}
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe ff23 	bl	8008b46 <USBH_LL_Disconnect>
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	70fb      	strb	r3, [r7, #3]
 8009d14:	4613      	mov	r3, r2
 8009d16:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe ff43 	bl	8008baa <USBH_LL_NotifyURBChange>
#endif
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe feb8 	bl	8008ab0 <USBH_LL_PortEnabled>
}
 8009d40:	bf00      	nop
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fec4 	bl	8008ae4 <USBH_LL_PortDisabled>
}
 8009d5c:	bf00      	nop
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7fa f855 	bl	8003e2a <HAL_HCD_Stop>
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f808 	bl	8009d9c <USBH_Get_USB_Status>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
	...

08009d9c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009da6:	2300      	movs	r3, #0
 8009da8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009daa:	79fb      	ldrb	r3, [r7, #7]
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d817      	bhi.n	8009de0 <USBH_Get_USB_Status+0x44>
 8009db0:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <USBH_Get_USB_Status+0x1c>)
 8009db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db6:	bf00      	nop
 8009db8:	08009dc9 	.word	0x08009dc9
 8009dbc:	08009dcf 	.word	0x08009dcf
 8009dc0:	08009dd5 	.word	0x08009dd5
 8009dc4:	08009ddb 	.word	0x08009ddb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]
    break;
 8009dcc:	e00b      	b.n	8009de6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009dce:	2302      	movs	r3, #2
 8009dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd2:	e008      	b.n	8009de6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009dd8:	e005      	b.n	8009de6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	73fb      	strb	r3, [r7, #15]
    break;
 8009dde:	e002      	b.n	8009de6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009de0:	2302      	movs	r3, #2
 8009de2:	73fb      	strb	r3, [r7, #15]
    break;
 8009de4:	bf00      	nop
  }
  return usb_status;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <__libc_init_array>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4e0d      	ldr	r6, [pc, #52]	; (8009e2c <__libc_init_array+0x38>)
 8009df8:	4c0d      	ldr	r4, [pc, #52]	; (8009e30 <__libc_init_array+0x3c>)
 8009dfa:	1ba4      	subs	r4, r4, r6
 8009dfc:	10a4      	asrs	r4, r4, #2
 8009dfe:	2500      	movs	r5, #0
 8009e00:	42a5      	cmp	r5, r4
 8009e02:	d109      	bne.n	8009e18 <__libc_init_array+0x24>
 8009e04:	4e0b      	ldr	r6, [pc, #44]	; (8009e34 <__libc_init_array+0x40>)
 8009e06:	4c0c      	ldr	r4, [pc, #48]	; (8009e38 <__libc_init_array+0x44>)
 8009e08:	f000 f82c 	bl	8009e64 <_init>
 8009e0c:	1ba4      	subs	r4, r4, r6
 8009e0e:	10a4      	asrs	r4, r4, #2
 8009e10:	2500      	movs	r5, #0
 8009e12:	42a5      	cmp	r5, r4
 8009e14:	d105      	bne.n	8009e22 <__libc_init_array+0x2e>
 8009e16:	bd70      	pop	{r4, r5, r6, pc}
 8009e18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e1c:	4798      	blx	r3
 8009e1e:	3501      	adds	r5, #1
 8009e20:	e7ee      	b.n	8009e00 <__libc_init_array+0xc>
 8009e22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e26:	4798      	blx	r3
 8009e28:	3501      	adds	r5, #1
 8009e2a:	e7f2      	b.n	8009e12 <__libc_init_array+0x1e>
 8009e2c:	0800b95c 	.word	0x0800b95c
 8009e30:	0800b95c 	.word	0x0800b95c
 8009e34:	0800b95c 	.word	0x0800b95c
 8009e38:	0800b960 	.word	0x0800b960

08009e3c <memcpy>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	1e43      	subs	r3, r0, #1
 8009e40:	440a      	add	r2, r1
 8009e42:	4291      	cmp	r1, r2
 8009e44:	d100      	bne.n	8009e48 <memcpy+0xc>
 8009e46:	bd10      	pop	{r4, pc}
 8009e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e50:	e7f7      	b.n	8009e42 <memcpy+0x6>

08009e52 <memset>:
 8009e52:	4402      	add	r2, r0
 8009e54:	4603      	mov	r3, r0
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d100      	bne.n	8009e5c <memset+0xa>
 8009e5a:	4770      	bx	lr
 8009e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009e60:	e7f9      	b.n	8009e56 <memset+0x4>
	...

08009e64 <_init>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	bf00      	nop
 8009e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6a:	bc08      	pop	{r3}
 8009e6c:	469e      	mov	lr, r3
 8009e6e:	4770      	bx	lr

08009e70 <_fini>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	bf00      	nop
 8009e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e76:	bc08      	pop	{r3}
 8009e78:	469e      	mov	lr, r3
 8009e7a:	4770      	bx	lr
