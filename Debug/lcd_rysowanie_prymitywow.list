
lcd_rysowanie_prymitywow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ffc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ad8  0800a1ac  0800a1ac  0001a1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc84  0800bc84  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc84  0800bc84  0001bc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc8c  0800bc8c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc8c  0800bc8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc90  0800bc90  0001bc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800bc94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b8  20000058  0800bcec  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  0800bcec  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e565  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005fcc  00000000  00000000  0004e5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002538  00000000  00000000  000545c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002268  00000000  00000000  00056af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b721  00000000  00000000  00058d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000256ad  00000000  00000000  00084481  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4f53  00000000  00000000  000a9b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019ea81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009bc0  00000000  00000000  0019eafc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000058 	.word	0x20000058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a194 	.word	0x0800a194

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	0800a194 	.word	0x0800a194

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <DrawLine>:
 * @param y2 Y position of the beginning point
 * @param color	the color of the line
 */

void DrawLine ( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4604      	mov	r4, r0
 80004f8:	4608      	mov	r0, r1
 80004fa:	4611      	mov	r1, r2
 80004fc:	461a      	mov	r2, r3
 80004fe:	4623      	mov	r3, r4
 8000500:	80fb      	strh	r3, [r7, #6]
 8000502:	4603      	mov	r3, r0
 8000504:	80bb      	strh	r3, [r7, #4]
 8000506:	460b      	mov	r3, r1
 8000508:	807b      	strh	r3, [r7, #2]
 800050a:	4613      	mov	r3, r2
 800050c:	803b      	strh	r3, [r7, #0]
    int16_t delta_x, delta_y, g, h, c;

    delta_x = x2-x1;
 800050e:	887a      	ldrh	r2, [r7, #2]
 8000510:	88fb      	ldrh	r3, [r7, #6]
 8000512:	1ad3      	subs	r3, r2, r3
 8000514:	b29b      	uxth	r3, r3
 8000516:	823b      	strh	r3, [r7, #16]
    if (delta_x > 0)
 8000518:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800051c:	2b00      	cmp	r3, #0
 800051e:	dd02      	ble.n	8000526 <DrawLine+0x36>
        g = +1;
 8000520:	2301      	movs	r3, #1
 8000522:	82fb      	strh	r3, [r7, #22]
 8000524:	e002      	b.n	800052c <DrawLine+0x3c>
    else
        g = -1;
 8000526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052a:	82fb      	strh	r3, [r7, #22]
    delta_x = abs(delta_x);
 800052c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000530:	2b00      	cmp	r3, #0
 8000532:	bfb8      	it	lt
 8000534:	425b      	neglt	r3, r3
 8000536:	823b      	strh	r3, [r7, #16]
    delta_y = y2-y1;
 8000538:	883a      	ldrh	r2, [r7, #0]
 800053a:	88bb      	ldrh	r3, [r7, #4]
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	b29b      	uxth	r3, r3
 8000540:	81fb      	strh	r3, [r7, #14]
    if (delta_y > 0)
 8000542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000546:	2b00      	cmp	r3, #0
 8000548:	dd02      	ble.n	8000550 <DrawLine+0x60>
        h = +1;
 800054a:	2301      	movs	r3, #1
 800054c:	82bb      	strh	r3, [r7, #20]
 800054e:	e002      	b.n	8000556 <DrawLine+0x66>
    else
        h = -1;
 8000550:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000554:	82bb      	strh	r3, [r7, #20]
    delta_y = abs(delta_y);
 8000556:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bfb8      	it	lt
 800055e:	425b      	neglt	r3, r3
 8000560:	81fb      	strh	r3, [r7, #14]
    if (delta_x > delta_y)
 8000562:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800056a:	429a      	cmp	r2, r3
 800056c:	dd2d      	ble.n	80005ca <DrawLine+0xda>
    {
        c = -delta_x;
 800056e:	8a3b      	ldrh	r3, [r7, #16]
 8000570:	425b      	negs	r3, r3
 8000572:	b29b      	uxth	r3, r3
 8000574:	827b      	strh	r3, [r7, #18]
        while (x1 != x2) {
 8000576:	e021      	b.n	80005bc <DrawLine+0xcc>
        BSP_LCD_DrawPixel(x1,y1, color);
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	88b9      	ldrh	r1, [r7, #4]
 800057c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f936 	bl	80027f0 <BSP_LCD_DrawPixel>
        c += 2*delta_y;
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	b29a      	uxth	r2, r3
 800058a:	8a7b      	ldrh	r3, [r7, #18]
 800058c:	4413      	add	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	827b      	strh	r3, [r7, #18]
        if (c > 0)
 8000592:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000596:	2b00      	cmp	r3, #0
 8000598:	dd0b      	ble.n	80005b2 <DrawLine+0xc2>
        {
            y1 += h;
 800059a:	88ba      	ldrh	r2, [r7, #4]
 800059c:	8abb      	ldrh	r3, [r7, #20]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	80bb      	strh	r3, [r7, #4]
            c -= 2*delta_x;
 80005a4:	8a7a      	ldrh	r2, [r7, #18]
 80005a6:	8a3b      	ldrh	r3, [r7, #16]
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	827b      	strh	r3, [r7, #18]
        }
        x1 += g;
 80005b2:	88fa      	ldrh	r2, [r7, #6]
 80005b4:	8afb      	ldrh	r3, [r7, #22]
 80005b6:	4413      	add	r3, r2
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	80fb      	strh	r3, [r7, #6]
        while (x1 != x2) {
 80005bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80005c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d1d7      	bne.n	8000578 <DrawLine+0x88>
                c -= 2*delta_y;
            }
            y1 += h;
        }
    }
}
 80005c8:	e02c      	b.n	8000624 <DrawLine+0x134>
        c = -delta_y;
 80005ca:	89fb      	ldrh	r3, [r7, #14]
 80005cc:	425b      	negs	r3, r3
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	827b      	strh	r3, [r7, #18]
        while (y1 != y2)
 80005d2:	e021      	b.n	8000618 <DrawLine+0x128>
            BSP_LCD_DrawPixel(x1,y1, color);
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	88b9      	ldrh	r1, [r7, #4]
 80005d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 f908 	bl	80027f0 <BSP_LCD_DrawPixel>
            c += 2*delta_x;
 80005e0:	8a3b      	ldrh	r3, [r7, #16]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	8a7b      	ldrh	r3, [r7, #18]
 80005e8:	4413      	add	r3, r2
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	827b      	strh	r3, [r7, #18]
            if (c > 0)
 80005ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dd0b      	ble.n	800060e <DrawLine+0x11e>
                x1 += g;
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	8afb      	ldrh	r3, [r7, #22]
 80005fa:	4413      	add	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	80fb      	strh	r3, [r7, #6]
                c -= 2*delta_y;
 8000600:	8a7a      	ldrh	r2, [r7, #18]
 8000602:	89fb      	ldrh	r3, [r7, #14]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	b29b      	uxth	r3, r3
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	b29b      	uxth	r3, r3
 800060c:	827b      	strh	r3, [r7, #18]
            y1 += h;
 800060e:	88ba      	ldrh	r2, [r7, #4]
 8000610:	8abb      	ldrh	r3, [r7, #20]
 8000612:	4413      	add	r3, r2
 8000614:	b29b      	uxth	r3, r3
 8000616:	80bb      	strh	r3, [r7, #4]
        while (y1 != y2)
 8000618:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800061c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000620:	429a      	cmp	r2, r3
 8000622:	d1d7      	bne.n	80005d4 <DrawLine+0xe4>
}
 8000624:	bf00      	nop
 8000626:	371c      	adds	r7, #28
 8000628:	46bd      	mov	sp, r7
 800062a:	bd90      	pop	{r4, r7, pc}

0800062c <drawingLetterD>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterD (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b087      	sub	sp, #28
 8000630:	af02      	add	r7, sp, #8
 8000632:	4603      	mov	r3, r0
 8000634:	603a      	str	r2, [r7, #0]
 8000636:	80fb      	strh	r3, [r7, #6]
 8000638:	460b      	mov	r3, r1
 800063a:	80bb      	strh	r3, [r7, #4]
    DrawLine(x_pos, y_pos, x_pos, y_pos-45, color);
 800063c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000640:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000644:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000648:	88bb      	ldrh	r3, [r7, #4]
 800064a:	3b2d      	subs	r3, #45	; 0x2d
 800064c:	b29b      	uxth	r3, r3
 800064e:	b21c      	sxth	r4, r3
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4623      	mov	r3, r4
 8000656:	f7ff ff4b 	bl	80004f0 <DrawLine>

    x_pos = (int16_t)x_pos;
    y_pos = (int16_t)(y_pos - 23);
 800065a:	88bb      	ldrh	r3, [r7, #4]
 800065c:	3b17      	subs	r3, #23
 800065e:	80bb      	strh	r3, [r7, #4]
    int16_t rad = 24;
 8000660:	2318      	movs	r3, #24
 8000662:	813b      	strh	r3, [r7, #8]
    int16_t x = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	81fb      	strh	r3, [r7, #14]
    int16_t y = rad;
 8000668:	893b      	ldrh	r3, [r7, #8]
 800066a:	81bb      	strh	r3, [r7, #12]
    int16_t c = 2*(1 - rad);
 800066c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000670:	f1c3 0301 	rsb	r3, r3, #1
 8000674:	b29b      	uxth	r3, r3
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	b29b      	uxth	r3, r3
 800067a:	817b      	strh	r3, [r7, #10]

    while(x<=y)
 800067c:	e057      	b.n	800072e <drawingLetterD+0x102>
    {
        BSP_LCD_DrawPixel(x_pos + x, y_pos + y, color);
 800067e:	89fa      	ldrh	r2, [r7, #14]
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4413      	add	r3, r2
 8000684:	b298      	uxth	r0, r3
 8000686:	89ba      	ldrh	r2, [r7, #12]
 8000688:	88bb      	ldrh	r3, [r7, #4]
 800068a:	4413      	add	r3, r2
 800068c:	b29b      	uxth	r3, r3
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f002 f8ad 	bl	80027f0 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + x,y_pos + -y, color);
 8000696:	89fa      	ldrh	r2, [r7, #14]
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	4413      	add	r3, r2
 800069c:	b298      	uxth	r0, r3
 800069e:	89bb      	ldrh	r3, [r7, #12]
 80006a0:	88ba      	ldrh	r2, [r7, #4]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f002 f8a1 	bl	80027f0 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + y,y_pos + x, color);
 80006ae:	89ba      	ldrh	r2, [r7, #12]
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4413      	add	r3, r2
 80006b4:	b298      	uxth	r0, r3
 80006b6:	89fa      	ldrh	r2, [r7, #14]
 80006b8:	88bb      	ldrh	r3, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	b29b      	uxth	r3, r3
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f002 f895 	bl	80027f0 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + y,y_pos + -x, color);
 80006c6:	89ba      	ldrh	r2, [r7, #12]
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	4413      	add	r3, r2
 80006cc:	b298      	uxth	r0, r3
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	88ba      	ldrh	r2, [r7, #4]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f002 f889 	bl	80027f0 <BSP_LCD_DrawPixel>
        if(2*c > 1-2*y){
 80006de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006e2:	005a      	lsls	r2, r3, #1
 80006e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	f1c3 0301 	rsb	r3, r3, #1
 80006ee:	429a      	cmp	r2, r3
 80006f0:	dd0e      	ble.n	8000710 <drawingLetterD+0xe4>
            y--;
 80006f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	3b01      	subs	r3, #1
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	81bb      	strh	r3, [r7, #12]
            c -= 2*y-1;
 80006fe:	897a      	ldrh	r2, [r7, #10]
 8000700:	89bb      	ldrh	r3, [r7, #12]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	b29b      	uxth	r3, r3
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b29b      	uxth	r3, r3
 800070a:	3301      	adds	r3, #1
 800070c:	b29b      	uxth	r3, r3
 800070e:	817b      	strh	r3, [r7, #10]
        }
        x++;
 8000710:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000714:	b29b      	uxth	r3, r3
 8000716:	3301      	adds	r3, #1
 8000718:	b29b      	uxth	r3, r3
 800071a:	81fb      	strh	r3, [r7, #14]
        c+=2*x+1;
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	b29a      	uxth	r2, r3
 8000722:	897b      	ldrh	r3, [r7, #10]
 8000724:	4413      	add	r3, r2
 8000726:	b29b      	uxth	r3, r3
 8000728:	3301      	adds	r3, #1
 800072a:	b29b      	uxth	r3, r3
 800072c:	817b      	strh	r3, [r7, #10]
    while(x<=y)
 800072e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000732:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000736:	429a      	cmp	r2, r3
 8000738:	dda1      	ble.n	800067e <drawingLetterD+0x52>
    }
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bd90      	pop	{r4, r7, pc}

08000742 <drawingLetterC>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterC (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	603a      	str	r2, [r7, #0]
 800074c:	80fb      	strh	r3, [r7, #6]
 800074e:	460b      	mov	r3, r1
 8000750:	80bb      	strh	r3, [r7, #4]
    y_pos = y_pos - 23;
 8000752:	88bb      	ldrh	r3, [r7, #4]
 8000754:	3b17      	subs	r3, #23
 8000756:	80bb      	strh	r3, [r7, #4]

    int16_t rad = 24;
 8000758:	2318      	movs	r3, #24
 800075a:	813b      	strh	r3, [r7, #8]

    int16_t x = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	81fb      	strh	r3, [r7, #14]
    int16_t y = rad;
 8000760:	893b      	ldrh	r3, [r7, #8]
 8000762:	81bb      	strh	r3, [r7, #12]

    int16_t c = 2*(1 - rad);
 8000764:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000768:	f1c3 0301 	rsb	r3, r3, #1
 800076c:	b29b      	uxth	r3, r3
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	817b      	strh	r3, [r7, #10]

    while(x<=y){
 8000774:	e057      	b.n	8000826 <drawingLetterC+0xe4>
        BSP_LCD_DrawPixel(x_pos + -x,y_pos + y, color);
 8000776:	89fb      	ldrh	r3, [r7, #14]
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	b298      	uxth	r0, r3
 800077e:	89ba      	ldrh	r2, [r7, #12]
 8000780:	88bb      	ldrh	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	683a      	ldr	r2, [r7, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f002 f831 	bl	80027f0 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x,y_pos + -y, color);
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	88fa      	ldrh	r2, [r7, #6]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	b298      	uxth	r0, r3
 8000796:	89bb      	ldrh	r3, [r7, #12]
 8000798:	88ba      	ldrh	r2, [r7, #4]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f002 f825 	bl	80027f0 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + -y,y_pos + x, color);
 80007a6:	89bb      	ldrh	r3, [r7, #12]
 80007a8:	88fa      	ldrh	r2, [r7, #6]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	b298      	uxth	r0, r3
 80007ae:	89fa      	ldrh	r2, [r7, #14]
 80007b0:	88bb      	ldrh	r3, [r7, #4]
 80007b2:	4413      	add	r3, r2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	f002 f819 	bl	80027f0 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y,y_pos + -x, color);
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	88fa      	ldrh	r2, [r7, #6]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	b298      	uxth	r0, r3
 80007c6:	89fb      	ldrh	r3, [r7, #14]
 80007c8:	88ba      	ldrh	r2, [r7, #4]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f002 f80d 	bl	80027f0 <BSP_LCD_DrawPixel>
        if(2*c > 1-2*y){
 80007d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007da:	005a      	lsls	r2, r3, #1
 80007dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	f1c3 0301 	rsb	r3, r3, #1
 80007e6:	429a      	cmp	r2, r3
 80007e8:	dd0e      	ble.n	8000808 <drawingLetterC+0xc6>
            y--;
 80007ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3b01      	subs	r3, #1
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	81bb      	strh	r3, [r7, #12]
            c -= 2*y-1;
 80007f6:	897a      	ldrh	r2, [r7, #10]
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	b29b      	uxth	r3, r3
 8000802:	3301      	adds	r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	817b      	strh	r3, [r7, #10]
        }
        x++;
 8000808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800080c:	b29b      	uxth	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	b29b      	uxth	r3, r3
 8000812:	81fb      	strh	r3, [r7, #14]
        c+=2*x+1;
 8000814:	89fb      	ldrh	r3, [r7, #14]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	b29a      	uxth	r2, r3
 800081a:	897b      	ldrh	r3, [r7, #10]
 800081c:	4413      	add	r3, r2
 800081e:	b29b      	uxth	r3, r3
 8000820:	3301      	adds	r3, #1
 8000822:	b29b      	uxth	r3, r3
 8000824:	817b      	strh	r3, [r7, #10]
    while(x<=y){
 8000826:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800082a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800082e:	429a      	cmp	r2, r3
 8000830:	dda1      	ble.n	8000776 <drawingLetterC+0x34>
    }
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <drawingLetterA>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterA (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 800083a:	b590      	push	{r4, r7, lr}
 800083c:	b085      	sub	sp, #20
 800083e:	af02      	add	r7, sp, #8
 8000840:	4603      	mov	r3, r0
 8000842:	603a      	str	r2, [r7, #0]
 8000844:	80fb      	strh	r3, [r7, #6]
 8000846:	460b      	mov	r3, r1
 8000848:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos, x_pos+20, y_pos-45, color);
 800084a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800084e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	3314      	adds	r3, #20
 8000856:	b29b      	uxth	r3, r3
 8000858:	b21a      	sxth	r2, r3
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	3b2d      	subs	r3, #45	; 0x2d
 800085e:	b29b      	uxth	r3, r3
 8000860:	b21c      	sxth	r4, r3
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	4623      	mov	r3, r4
 8000868:	f7ff fe42 	bl	80004f0 <DrawLine>
     DrawLine(x_pos+20, y_pos-45, x_pos+40, y_pos, color);
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	3314      	adds	r3, #20
 8000870:	b29b      	uxth	r3, r3
 8000872:	b218      	sxth	r0, r3
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	3b2d      	subs	r3, #45	; 0x2d
 8000878:	b29b      	uxth	r3, r3
 800087a:	b219      	sxth	r1, r3
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	3328      	adds	r3, #40	; 0x28
 8000880:	b29b      	uxth	r3, r3
 8000882:	b21a      	sxth	r2, r3
 8000884:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4623      	mov	r3, r4
 800088e:	f7ff fe2f 	bl	80004f0 <DrawLine>
     DrawLine(x_pos+5, y_pos-25, x_pos+35, y_pos-25, color);
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	3305      	adds	r3, #5
 8000896:	b29b      	uxth	r3, r3
 8000898:	b218      	sxth	r0, r3
 800089a:	88bb      	ldrh	r3, [r7, #4]
 800089c:	3b19      	subs	r3, #25
 800089e:	b29b      	uxth	r3, r3
 80008a0:	b219      	sxth	r1, r3
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	3323      	adds	r3, #35	; 0x23
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	88bb      	ldrh	r3, [r7, #4]
 80008ac:	3b19      	subs	r3, #25
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	b21c      	sxth	r4, r3
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4623      	mov	r3, r4
 80008b8:	f7ff fe1a 	bl	80004f0 <DrawLine>
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <drawingLetterW>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterW (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	4603      	mov	r3, r0
 80008cc:	603a      	str	r2, [r7, #0]
 80008ce:	80fb      	strh	r3, [r7, #6]
 80008d0:	460b      	mov	r3, r1
 80008d2:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos-25, x_pos+10, y_pos, color);
 80008d4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80008d8:	88bb      	ldrh	r3, [r7, #4]
 80008da:	3b19      	subs	r3, #25
 80008dc:	b29b      	uxth	r3, r3
 80008de:	b219      	sxth	r1, r3
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	330a      	adds	r3, #10
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4623      	mov	r3, r4
 80008f2:	f7ff fdfd 	bl	80004f0 <DrawLine>
     DrawLine(x_pos+10, y_pos, x_pos+20, y_pos-20, color);
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	330a      	adds	r3, #10
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b218      	sxth	r0, r3
 80008fe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	3314      	adds	r3, #20
 8000906:	b29b      	uxth	r3, r3
 8000908:	b21a      	sxth	r2, r3
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	3b14      	subs	r3, #20
 800090e:	b29b      	uxth	r3, r3
 8000910:	b21c      	sxth	r4, r3
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	4623      	mov	r3, r4
 8000918:	f7ff fdea 	bl	80004f0 <DrawLine>
     DrawLine(x_pos+20, y_pos-20, x_pos+30, y_pos, color);
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	3314      	adds	r3, #20
 8000920:	b29b      	uxth	r3, r3
 8000922:	b218      	sxth	r0, r3
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	3b14      	subs	r3, #20
 8000928:	b29b      	uxth	r3, r3
 800092a:	b219      	sxth	r1, r3
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	331e      	adds	r3, #30
 8000930:	b29b      	uxth	r3, r3
 8000932:	b21a      	sxth	r2, r3
 8000934:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	4623      	mov	r3, r4
 800093e:	f7ff fdd7 	bl	80004f0 <DrawLine>
     DrawLine(x_pos+30, y_pos, x_pos+40, y_pos-25, color);
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	331e      	adds	r3, #30
 8000946:	b29b      	uxth	r3, r3
 8000948:	b218      	sxth	r0, r3
 800094a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	3328      	adds	r3, #40	; 0x28
 8000952:	b29b      	uxth	r3, r3
 8000954:	b21a      	sxth	r2, r3
 8000956:	88bb      	ldrh	r3, [r7, #4]
 8000958:	3b19      	subs	r3, #25
 800095a:	b29b      	uxth	r3, r3
 800095c:	b21c      	sxth	r4, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4623      	mov	r3, r4
 8000964:	f7ff fdc4 	bl	80004f0 <DrawLine>
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bd90      	pop	{r4, r7, pc}

08000970 <drawingLetterN>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterN (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af02      	add	r7, sp, #8
 8000976:	4603      	mov	r3, r0
 8000978:	603a      	str	r2, [r7, #0]
 800097a:	80fb      	strh	r3, [r7, #6]
 800097c:	460b      	mov	r3, r1
 800097e:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos-25, x_pos, y_pos, color);
 8000980:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	3b19      	subs	r3, #25
 8000988:	b29b      	uxth	r3, r3
 800098a:	b219      	sxth	r1, r3
 800098c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000990:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	9300      	str	r3, [sp, #0]
 8000998:	4623      	mov	r3, r4
 800099a:	f7ff fda9 	bl	80004f0 <DrawLine>
     DrawLine(x_pos, y_pos-25, x_pos+15, y_pos, color);
 800099e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	3b19      	subs	r3, #25
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	b219      	sxth	r1, r3
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	330f      	adds	r3, #15
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	4623      	mov	r3, r4
 80009bc:	f7ff fd98 	bl	80004f0 <DrawLine>
     DrawLine(x_pos+15, y_pos, x_pos+15, y_pos-25, color);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	330f      	adds	r3, #15
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	b218      	sxth	r0, r3
 80009c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	330f      	adds	r3, #15
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	3b19      	subs	r3, #25
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b21c      	sxth	r4, r3
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4623      	mov	r3, r4
 80009e2:	f7ff fd85 	bl	80004f0 <DrawLine>
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd90      	pop	{r4, r7, pc}

080009ee <drawingLetterL>:
 * @param x_pos X position of the bottom right corner of the letter
 * @param y_pos Y position of the bottom right corner of the letter
 */

void drawingLetterL (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 80009ee:	b590      	push	{r4, r7, lr}
 80009f0:	b085      	sub	sp, #20
 80009f2:	af02      	add	r7, sp, #8
 80009f4:	4603      	mov	r3, r0
 80009f6:	603a      	str	r2, [r7, #0]
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	460b      	mov	r3, r1
 80009fc:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos, x_pos, y_pos-45, color);
 80009fe:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	3b2d      	subs	r3, #45	; 0x2d
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b21c      	sxth	r4, r3
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4623      	mov	r3, r4
 8000a18:	f7ff fd6a 	bl	80004f0 <DrawLine>
     DrawLine(x_pos, y_pos, x_pos+30, y_pos, color);
 8000a1c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a20:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	331e      	adds	r3, #30
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	4623      	mov	r3, r4
 8000a36:	f7ff fd5b 	bl	80004f0 <DrawLine>
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd90      	pop	{r4, r7, pc}

08000a42 <drawingText>:
 * @param x_pos X position of the bottom right corner of the letter
 * @param y_pos Y position of the bottom right corner of the letter
 */

void drawingText (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b084      	sub	sp, #16
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	603a      	str	r2, [r7, #0]
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i < 6; i++){
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e060      	b.n	8000b1a <drawingText+0xd8>
		drawingLetterA(x_pos + i, y_pos + i, color);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b298      	uxth	r0, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f7ff fee3 	bl	800083a <drawingLetterA>
		drawingLetterW(x_pos + i + 40, y_pos + i, color);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	3328      	adds	r3, #40	; 0x28
 8000a80:	b298      	uxth	r0, r3
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	88bb      	ldrh	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	683a      	ldr	r2, [r7, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff ff18 	bl	80008c4 <drawingLetterW>
		drawingLetterN(x_pos + i + 85, y_pos + i, color);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	88fb      	ldrh	r3, [r7, #6]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	3355      	adds	r3, #85	; 0x55
 8000aa0:	b298      	uxth	r0, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f7ff ff5e 	bl	8000970 <drawingLetterN>
		drawingLetterL(x_pos + i + 120, y_pos + i, color);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	4413      	add	r3, r2
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	3378      	adds	r3, #120	; 0x78
 8000ac0:	b298      	uxth	r0, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	88bb      	ldrh	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff ff8d 	bl	80009ee <drawingLetterL>
		drawingLetterC(x_pos + i + 175, y_pos + i, color);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	4413      	add	r3, r2
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	33af      	adds	r3, #175	; 0xaf
 8000ae0:	b298      	uxth	r0, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	f7ff fe27 	bl	8000742 <drawingLetterC>
		drawingLetterD(x_pos + i + 195, y_pos + i, color);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	88fb      	ldrh	r3, [r7, #6]
 8000afa:	4413      	add	r3, r2
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	33c3      	adds	r3, #195	; 0xc3
 8000b00:	b298      	uxth	r0, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	88bb      	ldrh	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f7ff fd8c 	bl	800062c <drawingLetterD>
	for(int i = 0; i < 6; i++){
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	dd9b      	ble.n	8000a58 <drawingText+0x16>
	}
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <animationText>:
 * @param x_pos X position of the bottom right corner of the animation
 * @param y_pos Y position of the bottom right corner of the animation
 */

void animationText (uint16_t x_pos, uint16_t y_pos)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	460a      	mov	r2, r1
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4613      	mov	r3, r2
 8000b36:	80bb      	strh	r3, [r7, #4]
	uint32_t color = 2164272953;
 8000b38:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <animationText+0xdc>)
 8000b3a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<10; i++){
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	e02c      	b.n	8000b9c <animationText+0x74>
		for(int j = 0; j<10; j++){
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	e01f      	b.n	8000b88 <animationText+0x60>
			drawingText(5, 60 + j + 30*i, color + 12345*i);
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	1acb      	subs	r3, r1, r3
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	333c      	adds	r3, #60	; 0x3c
 8000b60:	b299      	uxth	r1, r3
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	f243 0239 	movw	r2, #12345	; 0x3039
 8000b68:	fb02 f303 	mul.w	r3, r2, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	461a      	mov	r2, r3
 8000b74:	2005      	movs	r0, #5
 8000b76:	f7ff ff64 	bl	8000a42 <drawingText>
			HAL_Delay(500);
 8000b7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7e:	f002 f8a1 	bl	8002cc4 <HAL_Delay>
		for(int j = 0; j<10; j++){
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	3301      	adds	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2b09      	cmp	r3, #9
 8000b8c:	dddc      	ble.n	8000b48 <animationText+0x20>
		}
		HAL_Delay(1000);
 8000b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b92:	f002 f897 	bl	8002cc4 <HAL_Delay>
	for(int i = 0; i<10; i++){
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	2b09      	cmp	r3, #9
 8000ba0:	ddcf      	ble.n	8000b42 <animationText+0x1a>
	}
	for(int i = 0; i<5; i++){
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e026      	b.n	8000bf6 <animationText+0xce>
		for(int j = 0; j<10; j++){
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	e019      	b.n	8000be2 <animationText+0xba>
			drawingText(5, 60 + 2*j + 30*i, BSP_LCD_GetBackColor());
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	f103 011e 	add.w	r1, r3, #30
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	b29c      	uxth	r4, r3
 8000bc4:	f001 fcd6 	bl	8002574 <BSP_LCD_GetBackColor>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4621      	mov	r1, r4
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f7ff ff37 	bl	8000a42 <drawingText>
			HAL_Delay(500);
 8000bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd8:	f002 f874 	bl	8002cc4 <HAL_Delay>
		for(int j = 0; j<10; j++){
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	3301      	adds	r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	dde2      	ble.n	8000bae <animationText+0x86>
		}
		HAL_Delay(1000);
 8000be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bec:	f002 f86a 	bl	8002cc4 <HAL_Delay>
	for(int i = 0; i<5; i++){
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	ddd5      	ble.n	8000ba8 <animationText+0x80>
	}

	//BSP_LCD_Clear(LCD_COLOR_BLUE);
}
 8000bfc:	bf00      	nop
 8000bfe:	3724      	adds	r7, #36	; 0x24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	81002f39 	.word	0x81002f39

08000c08 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_CRC_Init+0x20>)
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <MX_CRC_Init+0x24>)
 8000c10:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_CRC_Init+0x20>)
 8000c14:	f002 f95a 	bl	8002ecc <HAL_CRC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c1e:	f000 fdc7 	bl	80017b0 <Error_Handler>
  }

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000030c 	.word	0x2000030c
 8000c2c:	40023000 	.word	0x40023000

08000c30 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_CRC_MspInit+0x3c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10d      	bne.n	8000c5e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_CRC_MspInit+0x40>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <HAL_CRC_MspInit+0x40>)
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_CRC_MspInit+0x40>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023000 	.word	0x40023000
 8000c70:	40023800 	.word	0x40023800

08000c74 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <MX_DMA2D_Init+0x60>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000caa:	f002 fae7 	bl	800327c <HAL_DMA2D_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000cb4:	f000 fd7c 	bl	80017b0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_DMA2D_Init+0x5c>)
 8000cbc:	f002 fd4c 	bl	8003758 <HAL_DMA2D_ConfigLayer>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000cc6:	f000 fd73 	bl	80017b0 <Error_Handler>
  }

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000314 	.word	0x20000314
 8000cd4:	4002b000 	.word	0x4002b000

08000cd8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_DMA2D_MspInit+0x48>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d115      	bne.n	8000d16 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_DMA2D_MspInit+0x4c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0c      	ldr	r2, [pc, #48]	; (8000d24 <HAL_DMA2D_MspInit+0x4c>)
 8000cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_DMA2D_MspInit+0x4c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	205a      	movs	r0, #90	; 0x5a
 8000d0c:	f002 f8b4 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d10:	205a      	movs	r0, #90	; 0x5a
 8000d12:	f002 f8cd 	bl	8002eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	4002b000 	.word	0x4002b000
 8000d24:	40023800 	.word	0x40023800

08000d28 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d42:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <MX_FMC_Init+0x9c>)
 8000d44:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d54:	2204      	movs	r2, #4
 8000d56:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d5a:	2210      	movs	r2, #16
 8000d5c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d60:	2240      	movs	r2, #64	; 0x40
 8000d62:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d66:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000d6a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d78:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d86:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000d94:	2307      	movs	r3, #7
 8000d96:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_FMC_Init+0x98>)
 8000daa:	f005 fe53 	bl	8006a54 <HAL_SDRAM_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000db4:	f000 fcfc 	bl	80017b0 <Error_Handler>
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000354 	.word	0x20000354
 8000dc4:	a0000140 	.word	0xa0000140

08000dc8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_FMC_MspInit+0x104>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d16f      	bne.n	8000ec4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000de4:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_FMC_MspInit+0x104>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_FMC_MspInit+0x108>)
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	4a37      	ldr	r2, [pc, #220]	; (8000ed0 <HAL_FMC_MspInit+0x108>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6393      	str	r3, [r2, #56]	; 0x38
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_FMC_MspInit+0x108>)
 8000dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e0a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e18:	230c      	movs	r3, #12
 8000e1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <HAL_FMC_MspInit+0x10c>)
 8000e22:	f002 fdc7 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e26:	2301      	movs	r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e36:	230c      	movs	r3, #12
 8000e38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <HAL_FMC_MspInit+0x110>)
 8000e40:	f002 fdb8 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000e44:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e48:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e56:	230c      	movs	r3, #12
 8000e58:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	481f      	ldr	r0, [pc, #124]	; (8000edc <HAL_FMC_MspInit+0x114>)
 8000e60:	f002 fda8 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e64:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e68:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e76:	230c      	movs	r3, #12
 8000e78:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <HAL_FMC_MspInit+0x118>)
 8000e80:	f002 fd98 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000e84:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e88:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <HAL_FMC_MspInit+0x11c>)
 8000ea0:	f002 fd88 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ea4:	2360      	movs	r3, #96	; 0x60
 8000ea6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <HAL_FMC_MspInit+0x120>)
 8000ebe:	f002 fd79 	bl	80039b4 <HAL_GPIO_Init>
 8000ec2:	e000      	b.n	8000ec6 <HAL_FMC_MspInit+0xfe>
    return;
 8000ec4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000074 	.word	0x20000074
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40020c00 	.word	0x40020c00
 8000ee8:	40020400 	.word	0x40020400

08000eec <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000ef4:	f7ff ff68 	bl	8000dc8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	; 0x38
 8000f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
 8000f32:	4b7a      	ldr	r3, [pc, #488]	; (800111c <MX_GPIO_Init+0x204>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a79      	ldr	r2, [pc, #484]	; (800111c <MX_GPIO_Init+0x204>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b77      	ldr	r3, [pc, #476]	; (800111c <MX_GPIO_Init+0x204>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	4b73      	ldr	r3, [pc, #460]	; (800111c <MX_GPIO_Init+0x204>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a72      	ldr	r2, [pc, #456]	; (800111c <MX_GPIO_Init+0x204>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b70      	ldr	r3, [pc, #448]	; (800111c <MX_GPIO_Init+0x204>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	4b6c      	ldr	r3, [pc, #432]	; (800111c <MX_GPIO_Init+0x204>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a6b      	ldr	r2, [pc, #428]	; (800111c <MX_GPIO_Init+0x204>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b69      	ldr	r3, [pc, #420]	; (800111c <MX_GPIO_Init+0x204>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	4b65      	ldr	r3, [pc, #404]	; (800111c <MX_GPIO_Init+0x204>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a64      	ldr	r2, [pc, #400]	; (800111c <MX_GPIO_Init+0x204>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b62      	ldr	r3, [pc, #392]	; (800111c <MX_GPIO_Init+0x204>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b5e      	ldr	r3, [pc, #376]	; (800111c <MX_GPIO_Init+0x204>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a5d      	ldr	r2, [pc, #372]	; (800111c <MX_GPIO_Init+0x204>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b5b      	ldr	r3, [pc, #364]	; (800111c <MX_GPIO_Init+0x204>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b57      	ldr	r3, [pc, #348]	; (800111c <MX_GPIO_Init+0x204>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a56      	ldr	r2, [pc, #344]	; (800111c <MX_GPIO_Init+0x204>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <MX_GPIO_Init+0x204>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	4b50      	ldr	r3, [pc, #320]	; (800111c <MX_GPIO_Init+0x204>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a4f      	ldr	r2, [pc, #316]	; (800111c <MX_GPIO_Init+0x204>)
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b4d      	ldr	r3, [pc, #308]	; (800111c <MX_GPIO_Init+0x204>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b49      	ldr	r3, [pc, #292]	; (800111c <MX_GPIO_Init+0x204>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a48      	ldr	r2, [pc, #288]	; (800111c <MX_GPIO_Init+0x204>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <MX_GPIO_Init+0x204>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2116      	movs	r1, #22
 8001012:	4843      	ldr	r0, [pc, #268]	; (8001120 <MX_GPIO_Init+0x208>)
 8001014:	f002 ff82 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	4841      	ldr	r0, [pc, #260]	; (8001124 <MX_GPIO_Init+0x20c>)
 800101e:	f002 ff7d 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001028:	483f      	ldr	r0, [pc, #252]	; (8001128 <MX_GPIO_Init+0x210>)
 800102a:	f002 ff77 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001034:	483d      	ldr	r0, [pc, #244]	; (800112c <MX_GPIO_Init+0x214>)
 8001036:	f002 ff71 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800103a:	2316      	movs	r3, #22
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4833      	ldr	r0, [pc, #204]	; (8001120 <MX_GPIO_Init+0x208>)
 8001052:	f002 fcaf 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001056:	f248 0307 	movw	r3, #32775	; 0x8007
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <MX_GPIO_Init+0x218>)
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	482e      	ldr	r0, [pc, #184]	; (8001124 <MX_GPIO_Init+0x20c>)
 800106c:	f002 fca2 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	4827      	ldr	r0, [pc, #156]	; (8001124 <MX_GPIO_Init+0x20c>)
 8001088:	f002 fc94 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800108c:	2320      	movs	r3, #32
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <MX_GPIO_Init+0x218>)
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	4820      	ldr	r0, [pc, #128]	; (8001120 <MX_GPIO_Init+0x208>)
 80010a0:	f002 fc88 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80010a4:	2304      	movs	r3, #4
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	481f      	ldr	r0, [pc, #124]	; (8001134 <MX_GPIO_Init+0x21c>)
 80010b8:	f002 fc7c 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80010bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	4619      	mov	r1, r3
 80010d0:	4815      	ldr	r0, [pc, #84]	; (8001128 <MX_GPIO_Init+0x210>)
 80010d2:	f002 fc6f 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80010d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010dc:	2301      	movs	r3, #1
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ec:	4619      	mov	r1, r3
 80010ee:	480e      	ldr	r0, [pc, #56]	; (8001128 <MX_GPIO_Init+0x210>)
 80010f0:	f002 fc60 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80010f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110a:	4619      	mov	r1, r3
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_GPIO_Init+0x214>)
 800110e:	f002 fc51 	bl	80039b4 <HAL_GPIO_Init>

}
 8001112:	bf00      	nop
 8001114:	3738      	adds	r7, #56	; 0x38
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021800 	.word	0x40021800
 8001130:	10120000 	.word	0x10120000
 8001134:	40020400 	.word	0x40020400

08001138 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_I2C3_Init+0x74>)
 800113e:	4a1c      	ldr	r2, [pc, #112]	; (80011b0 <MX_I2C3_Init+0x78>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_I2C3_Init+0x74>)
 8001144:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <MX_I2C3_Init+0x7c>)
 8001146:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_I2C3_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_I2C3_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_I2C3_Init+0x74>)
 8001156:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_I2C3_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C3_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_I2C3_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C3_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_I2C3_Init+0x74>)
 8001176:	f004 f8d5 	bl	8005324 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001180:	f000 fb16 	bl	80017b0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <MX_I2C3_Init+0x74>)
 8001188:	f004 fa04 	bl	8005594 <HAL_I2CEx_ConfigAnalogFilter>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001192:	f000 fb0d 	bl	80017b0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C3_Init+0x74>)
 800119a:	f004 fa37 	bl	800560c <HAL_I2CEx_ConfigDigitalFilter>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80011a4:	f000 fb04 	bl	80017b0 <Error_Handler>
  }

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000388 	.word	0x20000388
 80011b0:	40005c00 	.word	0x40005c00
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a29      	ldr	r2, [pc, #164]	; (800127c <HAL_I2C_MspInit+0xc4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d14b      	bne.n	8001272 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001224:	2304      	movs	r3, #4
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4815      	ldr	r0, [pc, #84]	; (8001284 <HAL_I2C_MspInit+0xcc>)
 8001230:	f002 fbc0 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800123a:	2312      	movs	r3, #18
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123e:	2301      	movs	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001246:	2304      	movs	r3, #4
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	480d      	ldr	r0, [pc, #52]	; (8001288 <HAL_I2C_MspInit+0xd0>)
 8001252:	f002 fbaf 	bl	80039b4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 8001260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_I2C_MspInit+0xc8>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40005c00 	.word	0x40005c00
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800
 8001288:	40020000 	.word	0x40020000

0800128c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b09a      	sub	sp, #104	; 0x68
 8001290:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001292:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001296:	2234      	movs	r2, #52	; 0x34
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f008 ff71 	bl	800a182 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2234      	movs	r2, #52	; 0x34
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 ff6b 	bl	800a182 <memset>

  hltdc.Instance = LTDC;
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <MX_LTDC_Init+0x160>)
 80012ae:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <MX_LTDC_Init+0x164>)
 80012b0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_LTDC_Init+0x160>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012b8:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <MX_LTDC_Init+0x160>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012be:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <MX_LTDC_Init+0x160>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012c4:	4b49      	ldr	r3, [pc, #292]	; (80013ec <MX_LTDC_Init+0x160>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80012ca:	4b48      	ldr	r3, [pc, #288]	; (80013ec <MX_LTDC_Init+0x160>)
 80012cc:	2209      	movs	r2, #9
 80012ce:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <MX_LTDC_Init+0x160>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80012d6:	4b45      	ldr	r3, [pc, #276]	; (80013ec <MX_LTDC_Init+0x160>)
 80012d8:	221d      	movs	r2, #29
 80012da:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <MX_LTDC_Init+0x160>)
 80012de:	2203      	movs	r2, #3
 80012e0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <MX_LTDC_Init+0x160>)
 80012e4:	f240 120d 	movw	r2, #269	; 0x10d
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80012ea:	4b40      	ldr	r3, [pc, #256]	; (80013ec <MX_LTDC_Init+0x160>)
 80012ec:	f240 1243 	movw	r2, #323	; 0x143
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <MX_LTDC_Init+0x160>)
 80012f4:	f240 1217 	movw	r2, #279	; 0x117
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80012fa:	4b3c      	ldr	r3, [pc, #240]	; (80013ec <MX_LTDC_Init+0x160>)
 80012fc:	f240 1247 	movw	r2, #327	; 0x147
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <MX_LTDC_Init+0x160>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800130a:	4b38      	ldr	r3, [pc, #224]	; (80013ec <MX_LTDC_Init+0x160>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001312:	4b36      	ldr	r3, [pc, #216]	; (80013ec <MX_LTDC_Init+0x160>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800131a:	4834      	ldr	r0, [pc, #208]	; (80013ec <MX_LTDC_Init+0x160>)
 800131c:	f004 f9b6 	bl	800568c <HAL_LTDC_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001326:	f000 fa43 	bl	80017b0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 800132e:	23f0      	movs	r3, #240	; 0xf0
 8001330:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8001336:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800133c:	2302      	movs	r3, #2
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001340:	23ff      	movs	r3, #255	; 0xff
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001348:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800134c:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800134e:	2307      	movs	r3, #7
 8001350:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001352:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001356:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8001358:	23f0      	movs	r3, #240	; 0xf0
 800135a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 800135c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001360:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001374:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_LTDC_Init+0x160>)
 800137e:	f004 fb17 	bl	80059b0 <HAL_LTDC_ConfigLayer>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8001388:	f000 fa12 	bl	80017b0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013aa:	2305      	movs	r3, #5
 80013ac:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_LTDC_Init+0x160>)
 80013d4:	f004 faec 	bl	80059b0 <HAL_LTDC_ConfigLayer>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 80013de:	f000 f9e7 	bl	80017b0 <Error_Handler>
  }

}
 80013e2:	bf00      	nop
 80013e4:	3768      	adds	r7, #104	; 0x68
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200003dc 	.word	0x200003dc
 80013f0:	40016800 	.word	0x40016800

080013f4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	; 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a7b      	ldr	r2, [pc, #492]	; (8001600 <HAL_LTDC_MspInit+0x20c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	f040 80f0 	bne.w	80015f8 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	4b79      	ldr	r3, [pc, #484]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	4a78      	ldr	r2, [pc, #480]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001422:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001426:	6453      	str	r3, [r2, #68]	; 0x44
 8001428:	4b76      	ldr	r3, [pc, #472]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	4b72      	ldr	r3, [pc, #456]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a71      	ldr	r2, [pc, #452]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800143e:	f043 0320 	orr.w	r3, r3, #32
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0320 	and.w	r3, r3, #32
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	4b6b      	ldr	r3, [pc, #428]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	4a6a      	ldr	r2, [pc, #424]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6313      	str	r3, [r2, #48]	; 0x30
 8001460:	4b68      	ldr	r3, [pc, #416]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a63      	ldr	r2, [pc, #396]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001476:	f043 0302 	orr.w	r3, r3, #2
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	4a5c      	ldr	r2, [pc, #368]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 8001492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001496:	6313      	str	r3, [r2, #48]	; 0x30
 8001498:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6313      	str	r3, [r2, #48]	; 0x30
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_LTDC_MspInit+0x210>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80014dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014ee:	230e      	movs	r3, #14
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4843      	ldr	r0, [pc, #268]	; (8001608 <HAL_LTDC_MspInit+0x214>)
 80014fa:	f002 fa5b 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80014fe:	f641 0358 	movw	r3, #6232	; 0x1858
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001510:	230e      	movs	r3, #14
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	483c      	ldr	r0, [pc, #240]	; (800160c <HAL_LTDC_MspInit+0x218>)
 800151c:	f002 fa4a 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001520:	2303      	movs	r3, #3
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001530:	2309      	movs	r3, #9
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4835      	ldr	r0, [pc, #212]	; (8001610 <HAL_LTDC_MspInit+0x21c>)
 800153c:	f002 fa3a 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001540:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001552:	230e      	movs	r3, #14
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <HAL_LTDC_MspInit+0x21c>)
 800155e:	f002 fa29 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001562:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001574:	230e      	movs	r3, #14
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4825      	ldr	r0, [pc, #148]	; (8001614 <HAL_LTDC_MspInit+0x220>)
 8001580:	f002 fa18 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001584:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001596:	230e      	movs	r3, #14
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <HAL_LTDC_MspInit+0x224>)
 80015a2:	f002 fa07 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80015a6:	2348      	movs	r3, #72	; 0x48
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b6:	230e      	movs	r3, #14
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4816      	ldr	r0, [pc, #88]	; (800161c <HAL_LTDC_MspInit+0x228>)
 80015c2:	f002 f9f7 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80015c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015d8:	2309      	movs	r3, #9
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <HAL_LTDC_MspInit+0x220>)
 80015e4:	f002 f9e6 	bl	80039b4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2105      	movs	r1, #5
 80015ec:	2058      	movs	r0, #88	; 0x58
 80015ee:	f001 fc43 	bl	8002e78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015f2:	2058      	movs	r0, #88	; 0x58
 80015f4:	f001 fc5c 	bl	8002eb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80015f8:	bf00      	nop
 80015fa:	3738      	adds	r7, #56	; 0x38
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40016800 	.word	0x40016800
 8001604:	40023800 	.word	0x40023800
 8001608:	40021400 	.word	0x40021400
 800160c:	40020000 	.word	0x40020000
 8001610:	40020400 	.word	0x40020400
 8001614:	40021800 	.word	0x40021800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020c00 	.word	0x40020c00

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f001 fb0c 	bl	8002c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f82c 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f7ff fc74 	bl	8000f18 <MX_GPIO_Init>
  MX_CRC_Init();
 8001630:	f7ff faea 	bl	8000c08 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001634:	f7ff fb1e 	bl	8000c74 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001638:	f7ff fb76 	bl	8000d28 <MX_FMC_Init>
  MX_I2C3_Init();
 800163c:	f7ff fd7c 	bl	8001138 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001640:	f7ff fe24 	bl	800128c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001644:	f000 f8bc 	bl	80017c0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001648:	f000 fa36 	bl	8001ab8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800164c:	f000 faa6 	bl	8001b9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();                                                     //Wlaczenie biblioteki
 8001650:	f000 fe9a 	bl	8002388 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie pierwszej warstw
 8001654:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001658:	2000      	movs	r0, #0
 800165a:	f000 ff17 	bl	800248c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie drugiej warstwy
 800165e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001662:	2001      	movs	r0, #1
 8001664:	f000 ff12 	bl	800248c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);                          //Wybranie warstwy aktywnej
 8001668:	2001      	movs	r0, #1
 800166a:	f000 ff73 	bl	8002554 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();                                                //Wlaczenie podswietlania
 800166e:	f000 ffd9 	bl	8002624 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);                                     //Kolor Tla
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	f000 ffad 	bl	80025d4 <BSP_LCD_Clear>


  while(1){
	  //animationCircle(120, 160, 40, 80, 500);
	  //drawingText(5, 60);
	  animationText(5, 60);
 800167a:	213c      	movs	r1, #60	; 0x3c
 800167c:	2005      	movs	r0, #5
 800167e:	f7ff fa53 	bl	8000b28 <animationText>
 8001682:	e7fa      	b.n	800167a <main+0x5a>

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b0a0      	sub	sp, #128	; 0x80
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800168e:	2230      	movs	r2, #48	; 0x30
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f008 fd75 	bl	800a182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2230      	movs	r2, #48	; 0x30
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 fd66 	bl	800a182 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <SystemClock_Config+0x100>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a31      	ldr	r2, [pc, #196]	; (8001784 <SystemClock_Config+0x100>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <SystemClock_Config+0x100>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <SystemClock_Config+0x104>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a2b      	ldr	r2, [pc, #172]	; (8001788 <SystemClock_Config+0x104>)
 80016dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <SystemClock_Config+0x104>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ee:	2301      	movs	r3, #1
 80016f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f8:	2302      	movs	r3, #2
 80016fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001700:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001702:	2308      	movs	r3, #8
 8001704:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001706:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800170a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170c:	2302      	movs	r3, #2
 800170e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001710:	2307      	movs	r3, #7
 8001712:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001714:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001718:	4618      	mov	r0, r3
 800171a:	f004 fb49 	bl	8005db0 <HAL_RCC_OscConfig>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001724:	f000 f844 	bl	80017b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001728:	230f      	movs	r3, #15
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172c:	2302      	movs	r3, #2
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001730:	2300      	movs	r3, #0
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800173a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001740:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001744:	2105      	movs	r1, #5
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fda2 	bl	8006290 <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001752:	f000 f82d 	bl	80017b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001756:	2308      	movs	r3, #8
 8001758:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 800175a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800175e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001760:	2302      	movs	r3, #2
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4618      	mov	r0, r3
 800176e:	f004 ffb3 	bl	80066d8 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001778:	f000 f81a 	bl	80017b0 <Error_Handler>
  }
}
 800177c:	bf00      	nop
 800177e:	3780      	adds	r7, #128	; 0x80
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	40007000 	.word	0x40007000

0800178c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800179e:	f001 fa71 	bl	8002c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40001000 	.word	0x40001000

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_SPI5_Init+0x68>)
 80017c6:	4a19      	ldr	r2, [pc, #100]	; (800182c <MX_SPI5_Init+0x6c>)
 80017c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <MX_SPI5_Init+0x68>)
 80017cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_SPI5_Init+0x68>)
 80017d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017d8:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_SPI5_Init+0x68>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_SPI5_Init+0x68>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_SPI5_Init+0x68>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_SPI5_Init+0x68>)
 80017ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f2:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_SPI5_Init+0x68>)
 80017f6:	2218      	movs	r2, #24
 80017f8:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <MX_SPI5_Init+0x68>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_SPI5_Init+0x68>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <MX_SPI5_Init+0x68>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_SPI5_Init+0x68>)
 800180e:	220a      	movs	r2, #10
 8001810:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_SPI5_Init+0x68>)
 8001814:	f005 f99d 	bl	8006b52 <HAL_SPI_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 800181e:	f7ff ffc7 	bl	80017b0 <Error_Handler>
  }

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000484 	.word	0x20000484
 800182c:	40015000 	.word	0x40015000

08001830 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_SPI_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_SPI_MspInit+0x88>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_SPI_MspInit+0x88>)
 800185c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_SPI_MspInit+0x88>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_SPI_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_SPI_MspInit+0x88>)
 8001878:	f043 0320 	orr.w	r3, r3, #32
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_SPI_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800188a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800189c:	2305      	movs	r3, #5
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_SPI_MspInit+0x8c>)
 80018a8:	f002 f884 	bl	80039b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40015000 	.word	0x40015000
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40021400 	.word	0x40021400

080018c0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <HAL_SPI_MspDeInit+0x30>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d10a      	bne.n	80018e8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_SPI_MspDeInit+0x34>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_SPI_MspDeInit+0x34>)
 80018d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018dc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80018de:	f44f 7160 	mov.w	r1, #896	; 0x380
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <HAL_SPI_MspDeInit+0x38>)
 80018e4:	f002 fa10 	bl	8003d08 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40015000 	.word	0x40015000
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40021400 	.word	0x40021400

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_MspInit+0x54>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_MspInit+0x54>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <HAL_MspInit+0x54>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_MspInit+0x54>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_MspInit+0x54>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_MspInit+0x54>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	210f      	movs	r1, #15
 800193e:	f06f 0001 	mvn.w	r0, #1
 8001942:	f001 fa99 	bl	8002e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	; 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	2036      	movs	r0, #54	; 0x36
 800196a:	f001 fa85 	bl	8002e78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800196e:	2036      	movs	r0, #54	; 0x36
 8001970:	f001 fa9e 	bl	8002eb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_InitTick+0xa4>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_InitTick+0xa4>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6413      	str	r3, [r2, #64]	; 0x40
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_InitTick+0xa4>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001990:	f107 0210 	add.w	r2, r7, #16
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4611      	mov	r1, r2
 800199a:	4618      	mov	r0, r3
 800199c:	f004 fe6a 	bl	8006674 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80019a0:	f004 fe40 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 80019a4:	4603      	mov	r3, r0
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_InitTick+0xa8>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	3b01      	subs	r3, #1
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_InitTick+0xac>)
 80019ba:	4a12      	ldr	r2, [pc, #72]	; (8001a04 <HAL_InitTick+0xb0>)
 80019bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_InitTick+0xac>)
 80019c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_InitTick+0xac>)
 80019c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_InitTick+0xac>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_InitTick+0xac>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <HAL_InitTick+0xac>)
 80019da:	f005 fe45 	bl	8007668 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d104      	bne.n	80019ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019e4:	4806      	ldr	r0, [pc, #24]	; (8001a00 <HAL_InitTick+0xac>)
 80019e6:	f005 fe6a 	bl	80076be <HAL_TIM_Base_Start_IT>
 80019ea:	4603      	mov	r3, r0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3730      	adds	r7, #48	; 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	431bde83 	.word	0x431bde83
 8001a00:	200004dc 	.word	0x200004dc
 8001a04:	40001000 	.word	0x40001000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <TIM6_DAC_IRQHandler+0x10>)
 8001a42:	f005 fe60 	bl	8007706 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200004dc 	.word	0x200004dc

08001a50 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <OTG_HS_IRQHandler+0x10>)
 8001a56:	f002 fa7a 	bl	8003f4e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000064c 	.word	0x2000064c

08001a64 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <LTDC_IRQHandler+0x10>)
 8001a6a:	f003 fedf 	bl	800582c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200003dc 	.word	0x200003dc

08001a78 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <DMA2D_IRQHandler+0x10>)
 8001a7e:	f001 fd5a 	bl	8003536 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000314 	.word	0x20000314

08001a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <SystemInit+0x28>)
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <SystemInit+0x28>)
 8001a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa0:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SystemInit+0x28>)
 8001aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <MX_TIM1_Init+0x9c>)
 8001ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b00:	4813      	ldr	r0, [pc, #76]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001b02:	f005 fdb1 	bl	8007668 <HAL_TIM_Base_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b0c:	f7ff fe50 	bl	80017b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001b1e:	f005 fefa 	bl	8007916 <HAL_TIM_ConfigClockSource>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b28:	f7ff fe42 	bl	80017b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b34:	463b      	mov	r3, r7
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_TIM1_Init+0x98>)
 8001b3a:	f006 f905 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b44:	f7ff fe34 	bl	80017b0 <Error_Handler>
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	2000051c 	.word	0x2000051c
 8001b54:	40010000 	.word	0x40010000

08001b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_TIM_Base_MspInit+0x3c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10d      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_TIM_Base_MspInit+0x40>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	4a09      	ldr	r2, [pc, #36]	; (8001b98 <HAL_TIM_Base_MspInit+0x40>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_TIM_Base_MspInit+0x40>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40023800 	.word	0x40023800

08001b9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <MX_USART1_UART_Init+0x50>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_USART1_UART_Init+0x4c>)
 8001bd4:	f006 f948 	bl	8007e68 <HAL_UART_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bde:	f7ff fde7 	bl	80017b0 <Error_Handler>
  }

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000055c 	.word	0x2000055c
 8001bec:	40011000 	.word	0x40011000

08001bf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0x84>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d12c      	bne.n	8001c6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_UART_MspInit+0x88>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_UART_MspInit+0x8c>)
 8001c68:	f001 fea4 	bl	80039b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40011000 	.word	0x40011000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c86:	e003      	b.n	8001c90 <LoopCopyDataInit>

08001c88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c8e:	3104      	adds	r1, #4

08001c90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c90:	480b      	ldr	r0, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c98:	d3f6      	bcc.n	8001c88 <CopyDataInit>
  ldr  r2, =_sbss
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c9c:	e002      	b.n	8001ca4 <LoopFillZerobss>

08001c9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ca0:	f842 3b04 	str.w	r3, [r2], #4

08001ca4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ca6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca8:	d3f9      	bcc.n	8001c9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001caa:	f7ff feef 	bl	8001a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f008 fa39 	bl	800a124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff fcb5 	bl	8001620 <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cb8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001cbc:	0800bc94 	.word	0x0800bc94
  ldr  r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cc4:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 8001cc8:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 8001ccc:	20000910 	.word	0x20000910

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>

08001cd2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cd6:	f000 fa5d 	bl	8002194 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001cda:	20ca      	movs	r0, #202	; 0xca
 8001cdc:	f000 f95d 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001ce0:	20c3      	movs	r0, #195	; 0xc3
 8001ce2:	f000 f967 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001ce6:	2008      	movs	r0, #8
 8001ce8:	f000 f964 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001cec:	2050      	movs	r0, #80	; 0x50
 8001cee:	f000 f961 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001cf2:	20cf      	movs	r0, #207	; 0xcf
 8001cf4:	f000 f951 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f95b 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001cfe:	20c1      	movs	r0, #193	; 0xc1
 8001d00:	f000 f958 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d04:	2030      	movs	r0, #48	; 0x30
 8001d06:	f000 f955 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d0a:	20ed      	movs	r0, #237	; 0xed
 8001d0c:	f000 f945 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d10:	2064      	movs	r0, #100	; 0x64
 8001d12:	f000 f94f 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d16:	2003      	movs	r0, #3
 8001d18:	f000 f94c 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d1c:	2012      	movs	r0, #18
 8001d1e:	f000 f949 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d22:	2081      	movs	r0, #129	; 0x81
 8001d24:	f000 f946 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d28:	20e8      	movs	r0, #232	; 0xe8
 8001d2a:	f000 f936 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d2e:	2085      	movs	r0, #133	; 0x85
 8001d30:	f000 f940 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f000 f93d 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d3a:	2078      	movs	r0, #120	; 0x78
 8001d3c:	f000 f93a 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d40:	20cb      	movs	r0, #203	; 0xcb
 8001d42:	f000 f92a 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d46:	2039      	movs	r0, #57	; 0x39
 8001d48:	f000 f934 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d4c:	202c      	movs	r0, #44	; 0x2c
 8001d4e:	f000 f931 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f92e 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d58:	2034      	movs	r0, #52	; 0x34
 8001d5a:	f000 f92b 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f000 f928 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d64:	20f7      	movs	r0, #247	; 0xf7
 8001d66:	f000 f918 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d6a:	2020      	movs	r0, #32
 8001d6c:	f000 f922 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001d70:	20ea      	movs	r0, #234	; 0xea
 8001d72:	f000 f912 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f91c 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f919 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001d82:	20b1      	movs	r0, #177	; 0xb1
 8001d84:	f000 f909 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 f913 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001d8e:	201b      	movs	r0, #27
 8001d90:	f000 f910 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d94:	20b6      	movs	r0, #182	; 0xb6
 8001d96:	f000 f900 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f000 f90a 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001da0:	20a2      	movs	r0, #162	; 0xa2
 8001da2:	f000 f907 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001da6:	20c0      	movs	r0, #192	; 0xc0
 8001da8:	f000 f8f7 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001dac:	2010      	movs	r0, #16
 8001dae:	f000 f901 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001db2:	20c1      	movs	r0, #193	; 0xc1
 8001db4:	f000 f8f1 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001db8:	2010      	movs	r0, #16
 8001dba:	f000 f8fb 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001dbe:	20c5      	movs	r0, #197	; 0xc5
 8001dc0:	f000 f8eb 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001dc4:	2045      	movs	r0, #69	; 0x45
 8001dc6:	f000 f8f5 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001dca:	2015      	movs	r0, #21
 8001dcc:	f000 f8f2 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001dd0:	20c7      	movs	r0, #199	; 0xc7
 8001dd2:	f000 f8e2 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001dd6:	2090      	movs	r0, #144	; 0x90
 8001dd8:	f000 f8ec 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001ddc:	2036      	movs	r0, #54	; 0x36
 8001dde:	f000 f8dc 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001de2:	20c8      	movs	r0, #200	; 0xc8
 8001de4:	f000 f8e6 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001de8:	20f2      	movs	r0, #242	; 0xf2
 8001dea:	f000 f8d6 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 f8e0 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001df4:	20b0      	movs	r0, #176	; 0xb0
 8001df6:	f000 f8d0 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001dfa:	20c2      	movs	r0, #194	; 0xc2
 8001dfc:	f000 f8da 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e00:	20b6      	movs	r0, #182	; 0xb6
 8001e02:	f000 f8ca 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e06:	200a      	movs	r0, #10
 8001e08:	f000 f8d4 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e0c:	20a7      	movs	r0, #167	; 0xa7
 8001e0e:	f000 f8d1 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e12:	2027      	movs	r0, #39	; 0x27
 8001e14:	f000 f8ce 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e18:	2004      	movs	r0, #4
 8001e1a:	f000 f8cb 	bl	8001fb4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e1e:	202a      	movs	r0, #42	; 0x2a
 8001e20:	f000 f8bb 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f000 f8c5 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f000 f8c2 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 f8bf 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e36:	20ef      	movs	r0, #239	; 0xef
 8001e38:	f000 f8bc 	bl	8001fb4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e3c:	202b      	movs	r0, #43	; 0x2b
 8001e3e:	f000 f8ac 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f8b6 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 f8b3 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f000 f8b0 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e54:	203f      	movs	r0, #63	; 0x3f
 8001e56:	f000 f8ad 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e5a:	20f6      	movs	r0, #246	; 0xf6
 8001e5c:	f000 f89d 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f000 f8a7 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 f8a4 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e6c:	2006      	movs	r0, #6
 8001e6e:	f000 f8a1 	bl	8001fb4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001e72:	202c      	movs	r0, #44	; 0x2c
 8001e74:	f000 f891 	bl	8001f9a <ili9341_WriteReg>
  LCD_Delay(200);
 8001e78:	20c8      	movs	r0, #200	; 0xc8
 8001e7a:	f000 fa79 	bl	8002370 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001e7e:	2026      	movs	r0, #38	; 0x26
 8001e80:	f000 f88b 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f000 f895 	bl	8001fb4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001e8a:	20e0      	movs	r0, #224	; 0xe0
 8001e8c:	f000 f885 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001e90:	200f      	movs	r0, #15
 8001e92:	f000 f88f 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001e96:	2029      	movs	r0, #41	; 0x29
 8001e98:	f000 f88c 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001e9c:	2024      	movs	r0, #36	; 0x24
 8001e9e:	f000 f889 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ea2:	200c      	movs	r0, #12
 8001ea4:	f000 f886 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001ea8:	200e      	movs	r0, #14
 8001eaa:	f000 f883 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001eae:	2009      	movs	r0, #9
 8001eb0:	f000 f880 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001eb4:	204e      	movs	r0, #78	; 0x4e
 8001eb6:	f000 f87d 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001eba:	2078      	movs	r0, #120	; 0x78
 8001ebc:	f000 f87a 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ec0:	203c      	movs	r0, #60	; 0x3c
 8001ec2:	f000 f877 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ec6:	2009      	movs	r0, #9
 8001ec8:	f000 f874 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ecc:	2013      	movs	r0, #19
 8001ece:	f000 f871 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ed2:	2005      	movs	r0, #5
 8001ed4:	f000 f86e 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ed8:	2017      	movs	r0, #23
 8001eda:	f000 f86b 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ede:	2011      	movs	r0, #17
 8001ee0:	f000 f868 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f000 f865 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001eea:	20e1      	movs	r0, #225	; 0xe1
 8001eec:	f000 f855 	bl	8001f9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f000 f85f 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001ef6:	2016      	movs	r0, #22
 8001ef8:	f000 f85c 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001efc:	201b      	movs	r0, #27
 8001efe:	f000 f859 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f02:	2004      	movs	r0, #4
 8001f04:	f000 f856 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f08:	2011      	movs	r0, #17
 8001f0a:	f000 f853 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f0e:	2007      	movs	r0, #7
 8001f10:	f000 f850 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f14:	2031      	movs	r0, #49	; 0x31
 8001f16:	f000 f84d 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f1a:	2033      	movs	r0, #51	; 0x33
 8001f1c:	f000 f84a 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f20:	2042      	movs	r0, #66	; 0x42
 8001f22:	f000 f847 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f26:	2005      	movs	r0, #5
 8001f28:	f000 f844 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f2c:	200c      	movs	r0, #12
 8001f2e:	f000 f841 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f32:	200a      	movs	r0, #10
 8001f34:	f000 f83e 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f38:	2028      	movs	r0, #40	; 0x28
 8001f3a:	f000 f83b 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f3e:	202f      	movs	r0, #47	; 0x2f
 8001f40:	f000 f838 	bl	8001fb4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f44:	200f      	movs	r0, #15
 8001f46:	f000 f835 	bl	8001fb4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f000 f825 	bl	8001f9a <ili9341_WriteReg>
  LCD_Delay(200);
 8001f50:	20c8      	movs	r0, #200	; 0xc8
 8001f52:	f000 fa0d 	bl	8002370 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f56:	2029      	movs	r0, #41	; 0x29
 8001f58:	f000 f81f 	bl	8001f9a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f5c:	202c      	movs	r0, #44	; 0x2c
 8001f5e:	f000 f81c 	bl	8001f9a <ili9341_WriteReg>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f6a:	f000 f913 	bl	8002194 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f6e:	2103      	movs	r1, #3
 8001f70:	20d3      	movs	r0, #211	; 0xd3
 8001f72:	f000 f82c 	bl	8001fce <ili9341_ReadData>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29b      	uxth	r3, r3
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f82:	2029      	movs	r0, #41	; 0x29
 8001f84:	f000 f809 	bl	8001f9a <ili9341_WriteReg>
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001f90:	2028      	movs	r0, #40	; 0x28
 8001f92:	f000 f802 	bl	8001f9a <ili9341_WriteReg>
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f98e 	bl	80022c8 <LCD_IO_WriteReg>
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 f95f 	bl	8002284 <LCD_IO_WriteData>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	80fb      	strh	r3, [r7, #6]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001fde:	797a      	ldrb	r2, [r7, #5]
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 f991 	bl	800230c <LCD_IO_ReadData>
 8001fea:	4603      	mov	r3, r0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001ff8:	23f0      	movs	r3, #240	; 0xf0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002008:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800201c:	4819      	ldr	r0, [pc, #100]	; (8002084 <SPIx_Init+0x6c>)
 800201e:	f005 fa03 	bl	8007428 <HAL_SPI_GetState>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12b      	bne.n	8002080 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <SPIx_Init+0x6c>)
 800202a:	4a17      	ldr	r2, [pc, #92]	; (8002088 <SPIx_Init+0x70>)
 800202c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <SPIx_Init+0x6c>)
 8002030:	2218      	movs	r2, #24
 8002032:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <SPIx_Init+0x6c>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <SPIx_Init+0x6c>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <SPIx_Init+0x6c>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <SPIx_Init+0x6c>)
 8002048:	2200      	movs	r2, #0
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <SPIx_Init+0x6c>)
 800204e:	2207      	movs	r2, #7
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <SPIx_Init+0x6c>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <SPIx_Init+0x6c>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <SPIx_Init+0x6c>)
 8002060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002064:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <SPIx_Init+0x6c>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <SPIx_Init+0x6c>)
 800206e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002072:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <SPIx_Init+0x6c>)
 8002076:	f000 f853 	bl	8002120 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800207a:	4802      	ldr	r0, [pc, #8]	; (8002084 <SPIx_Init+0x6c>)
 800207c:	f004 fd69 	bl	8006b52 <HAL_SPI_Init>
  } 
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000078 	.word	0x20000078
 8002088:	40015000 	.word	0x40015000

0800208c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <SPIx_Read+0x38>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f107 0108 	add.w	r1, r7, #8
 80020a6:	4808      	ldr	r0, [pc, #32]	; (80020c8 <SPIx_Read+0x3c>)
 80020a8:	f004 ff13 	bl	8006ed2 <HAL_SPI_Receive>
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020b6:	f000 f827 	bl	8002108 <SPIx_Error>
  }
  
  return readvalue;
 80020ba:	68bb      	ldr	r3, [r7, #8]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	2000003c 	.word	0x2000003c
 80020c8:	20000078 	.word	0x20000078

080020cc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <SPIx_Write+0x34>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1db9      	adds	r1, r7, #6
 80020e0:	2201      	movs	r2, #1
 80020e2:	4808      	ldr	r0, [pc, #32]	; (8002104 <SPIx_Write+0x38>)
 80020e4:	f004 fdc1 	bl	8006c6a <HAL_SPI_Transmit>
 80020e8:	4603      	mov	r3, r0
 80020ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020f2:	f000 f809 	bl	8002108 <SPIx_Error>
  }
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000003c 	.word	0x2000003c
 8002104:	20000078 	.word	0x20000078

08002108 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <SPIx_Error+0x14>)
 800210e:	f004 fd84 	bl	8006c1a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002112:	f7ff ff81 	bl	8002018 <SPIx_Init>
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000078 	.word	0x20000078

08002120 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	4b17      	ldr	r3, [pc, #92]	; (800218c <SPIx_MspInit+0x6c>)
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <SPIx_MspInit+0x6c>)
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002136:	6453      	str	r3, [r2, #68]	; 0x44
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <SPIx_MspInit+0x6c>)
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <SPIx_MspInit+0x6c>)
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	4a0f      	ldr	r2, [pc, #60]	; (800218c <SPIx_MspInit+0x6c>)
 800214e:	f043 0320 	orr.w	r3, r3, #32
 8002152:	6313      	str	r3, [r2, #48]	; 0x30
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <SPIx_MspInit+0x6c>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002160:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002164:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800216a:	2302      	movs	r3, #2
 800216c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800216e:	2301      	movs	r3, #1
 8002170:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002172:	2305      	movs	r3, #5
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <SPIx_MspInit+0x70>)
 800217e:	f001 fc19 	bl	80039b4 <HAL_GPIO_Init>
}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40021400 	.word	0x40021400

08002194 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800219a:	4b36      	ldr	r3, [pc, #216]	; (8002274 <LCD_IO_Init+0xe0>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d164      	bne.n	800226c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <LCD_IO_Init+0xe0>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	4b32      	ldr	r3, [pc, #200]	; (8002278 <LCD_IO_Init+0xe4>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	4a31      	ldr	r2, [pc, #196]	; (8002278 <LCD_IO_Init+0xe4>)
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	6313      	str	r3, [r2, #48]	; 0x30
 80021b8:	4b2f      	ldr	r3, [pc, #188]	; (8002278 <LCD_IO_Init+0xe4>)
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80021c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4827      	ldr	r0, [pc, #156]	; (800227c <LCD_IO_Init+0xe8>)
 80021de:	f001 fbe9 	bl	80039b4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <LCD_IO_Init+0xe4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a23      	ldr	r2, [pc, #140]	; (8002278 <LCD_IO_Init+0xe4>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <LCD_IO_Init+0xe4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4619      	mov	r1, r3
 8002216:	4819      	ldr	r0, [pc, #100]	; (800227c <LCD_IO_Init+0xe8>)
 8002218:	f001 fbcc 	bl	80039b4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800221c:	2300      	movs	r3, #0
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <LCD_IO_Init+0xe4>)
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <LCD_IO_Init+0xe4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	6313      	str	r3, [r2, #48]	; 0x30
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <LCD_IO_Init+0xe4>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002238:	2304      	movs	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800223c:	2301      	movs	r3, #1
 800223e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	4619      	mov	r1, r3
 800224e:	480c      	ldr	r0, [pc, #48]	; (8002280 <LCD_IO_Init+0xec>)
 8002250:	f001 fbb0 	bl	80039b4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002254:	2200      	movs	r2, #0
 8002256:	2104      	movs	r1, #4
 8002258:	4809      	ldr	r0, [pc, #36]	; (8002280 <LCD_IO_Init+0xec>)
 800225a:	f001 fe5f 	bl	8003f1c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800225e:	2201      	movs	r2, #1
 8002260:	2104      	movs	r1, #4
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <LCD_IO_Init+0xec>)
 8002264:	f001 fe5a 	bl	8003f1c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002268:	f7ff fed6 	bl	8002018 <SPIx_Init>
  }
}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200000d0 	.word	0x200000d0
 8002278:	40023800 	.word	0x40023800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40020800 	.word	0x40020800

08002284 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800228e:	2201      	movs	r2, #1
 8002290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002294:	480a      	ldr	r0, [pc, #40]	; (80022c0 <LCD_IO_WriteData+0x3c>)
 8002296:	f001 fe41 	bl	8003f1c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800229a:	2200      	movs	r2, #0
 800229c:	2104      	movs	r1, #4
 800229e:	4809      	ldr	r0, [pc, #36]	; (80022c4 <LCD_IO_WriteData+0x40>)
 80022a0:	f001 fe3c 	bl	8003f1c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff10 	bl	80020cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022ac:	2201      	movs	r2, #1
 80022ae:	2104      	movs	r1, #4
 80022b0:	4804      	ldr	r0, [pc, #16]	; (80022c4 <LCD_IO_WriteData+0x40>)
 80022b2:	f001 fe33 	bl	8003f1c <HAL_GPIO_WritePin>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40020800 	.word	0x40020800

080022c8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80022d2:	2200      	movs	r2, #0
 80022d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d8:	480a      	ldr	r0, [pc, #40]	; (8002304 <LCD_IO_WriteReg+0x3c>)
 80022da:	f001 fe1f 	bl	8003f1c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80022de:	2200      	movs	r2, #0
 80022e0:	2104      	movs	r1, #4
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <LCD_IO_WriteReg+0x40>)
 80022e4:	f001 fe1a 	bl	8003f1c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff feed 	bl	80020cc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022f2:	2201      	movs	r2, #1
 80022f4:	2104      	movs	r1, #4
 80022f6:	4804      	ldr	r0, [pc, #16]	; (8002308 <LCD_IO_WriteReg+0x40>)
 80022f8:	f001 fe10 	bl	8003f1c <HAL_GPIO_WritePin>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40020800 	.word	0x40020800

0800230c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	460a      	mov	r2, r1
 8002316:	80fb      	strh	r3, [r7, #6]
 8002318:	4613      	mov	r3, r2
 800231a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002320:	2200      	movs	r2, #0
 8002322:	2104      	movs	r1, #4
 8002324:	4810      	ldr	r0, [pc, #64]	; (8002368 <LCD_IO_ReadData+0x5c>)
 8002326:	f001 fdf9 	bl	8003f1c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002330:	480e      	ldr	r0, [pc, #56]	; (800236c <LCD_IO_ReadData+0x60>)
 8002332:	f001 fdf3 	bl	8003f1c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fec7 	bl	80020cc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800233e:	797b      	ldrb	r3, [r7, #5]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fea3 	bl	800208c <SPIx_Read>
 8002346:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002348:	2201      	movs	r2, #1
 800234a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <LCD_IO_ReadData+0x60>)
 8002350:	f001 fde4 	bl	8003f1c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002354:	2201      	movs	r2, #1
 8002356:	2104      	movs	r1, #4
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <LCD_IO_ReadData+0x5c>)
 800235a:	f001 fddf 	bl	8003f1c <HAL_GPIO_WritePin>
  
  return readvalue;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00

08002370 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fca3 	bl	8002cc4 <HAL_Delay>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <BSP_LCD_Init+0xbc>)
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <BSP_LCD_Init+0xc0>)
 8002390:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002392:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <BSP_LCD_Init+0xbc>)
 8002394:	2209      	movs	r2, #9
 8002396:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <BSP_LCD_Init+0xbc>)
 800239a:	2201      	movs	r2, #1
 800239c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800239e:	4b29      	ldr	r3, [pc, #164]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023a0:	221d      	movs	r2, #29
 80023a2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023a6:	2203      	movs	r2, #3
 80023a8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023ac:	f240 120d 	movw	r2, #269	; 0x10d
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023b4:	f240 1243 	movw	r2, #323	; 0x143
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023bc:	f240 1217 	movw	r2, #279	; 0x117
 80023c0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023c4:	f240 1247 	movw	r2, #327	; 0x147
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <BSP_LCD_Init+0xbc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <BSP_LCD_Init+0xc4>)
 80023e4:	2208      	movs	r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <BSP_LCD_Init+0xc4>)
 80023ea:	22c0      	movs	r2, #192	; 0xc0
 80023ec:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <BSP_LCD_Init+0xc4>)
 80023f0:	2204      	movs	r2, #4
 80023f2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <BSP_LCD_Init+0xc4>)
 80023f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023fa:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80023fc:	4813      	ldr	r0, [pc, #76]	; (800244c <BSP_LCD_Init+0xc4>)
 80023fe:	f004 f96b 	bl	80066d8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <BSP_LCD_Init+0xbc>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <BSP_LCD_Init+0xbc>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <BSP_LCD_Init+0xbc>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <BSP_LCD_Init+0xbc>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800241a:	f000 f913 	bl	8002644 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <BSP_LCD_Init+0xbc>)
 8002420:	f003 f934 	bl	800568c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <BSP_LCD_Init+0xc8>)
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <BSP_LCD_Init+0xcc>)
 8002428:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <BSP_LCD_Init+0xc8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002432:	f000 fa3b 	bl	80028ac <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002436:	4808      	ldr	r0, [pc, #32]	; (8002458 <BSP_LCD_Init+0xd0>)
 8002438:	f000 f8b2 	bl	80025a0 <BSP_LCD_SetFont>

  return LCD_OK;
 800243c:	2300      	movs	r3, #0
}  
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	2000059c 	.word	0x2000059c
 8002448:	40016800 	.word	0x40016800
 800244c:	20000114 	.word	0x20000114
 8002450:	20000644 	.word	0x20000644
 8002454:	20000004 	.word	0x20000004
 8002458:	20000040 	.word	0x20000040

0800245c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <BSP_LCD_GetXSize+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	4798      	blx	r3
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000644 	.word	0x20000644

08002474 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002478:	4b03      	ldr	r3, [pc, #12]	; (8002488 <BSP_LCD_GetYSize+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	4798      	blx	r3
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000644 	.word	0x20000644

0800248c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800248c:	b580      	push	{r7, lr}
 800248e:	b090      	sub	sp, #64	; 0x40
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800249c:	f7ff ffde 	bl	800245c <BSP_LCD_GetXSize>
 80024a0:	4603      	mov	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80024a8:	f7ff ffe4 	bl	8002474 <BSP_LCD_GetYSize>
 80024ac:	4603      	mov	r3, r0
 80024ae:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80024b8:	23ff      	movs	r3, #255	; 0xff
 80024ba:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80024d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80024d8:	2307      	movs	r3, #7
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80024dc:	f7ff ffbe 	bl	800245c <BSP_LCD_GetXSize>
 80024e0:	4603      	mov	r3, r0
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80024e4:	f7ff ffc6 	bl	8002474 <BSP_LCD_GetYSize>
 80024e8:	4603      	mov	r3, r0
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	4814      	ldr	r0, [pc, #80]	; (8002548 <BSP_LCD_LayerDefaultInit+0xbc>)
 80024f6:	f003 fa5b 	bl	80059b0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	4913      	ldr	r1, [pc, #76]	; (800254c <BSP_LCD_LayerDefaultInit+0xc0>)
 80024fe:	4613      	mov	r3, r2
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3304      	adds	r3, #4
 800250a:	f04f 32ff 	mov.w	r2, #4294967295
 800250e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	490e      	ldr	r1, [pc, #56]	; (800254c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002514:	4613      	mov	r3, r2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3308      	adds	r3, #8
 8002520:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002522:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	4909      	ldr	r1, [pc, #36]	; (800254c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002536:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002538:	4803      	ldr	r0, [pc, #12]	; (8002548 <BSP_LCD_LayerDefaultInit+0xbc>)
 800253a:	f003 fa77 	bl	8005a2c <HAL_LTDC_EnableDither>
}
 800253e:	bf00      	nop
 8002540:	3740      	adds	r7, #64	; 0x40
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2000059c 	.word	0x2000059c
 800254c:	20000148 	.word	0x20000148
 8002550:	20000040 	.word	0x20000040

08002554 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <BSP_LCD_SelectLayer+0x1c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6013      	str	r3, [r2, #0]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000144 	.word	0x20000144

08002574 <BSP_LCD_GetBackColor>:
/**
  * @brief  Gets the LCD Background color. 
  * @retval Background color  
  */
uint32_t BSP_LCD_GetBackColor(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].BackColor;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <BSP_LCD_GetBackColor+0x24>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4907      	ldr	r1, [pc, #28]	; (800259c <BSP_LCD_GetBackColor+0x28>)
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3304      	adds	r3, #4
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000144 	.word	0x20000144
 800259c:	20000148 	.word	0x20000148

080025a0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <BSP_LCD_SetFont+0x2c>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4908      	ldr	r1, [pc, #32]	; (80025d0 <BSP_LCD_SetFont+0x30>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3308      	adds	r3, #8
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000144 	.word	0x20000144
 80025d0:	20000148 	.word	0x20000148

080025d4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <BSP_LCD_Clear+0x48>)
 80025de:	681c      	ldr	r4, [r3, #0]
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <BSP_LCD_Clear+0x48>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <BSP_LCD_Clear+0x4c>)
 80025e6:	2134      	movs	r1, #52	; 0x34
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	335c      	adds	r3, #92	; 0x5c
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461d      	mov	r5, r3
 80025f4:	f7ff ff32 	bl	800245c <BSP_LCD_GetXSize>
 80025f8:	4606      	mov	r6, r0
 80025fa:	f7ff ff3b 	bl	8002474 <BSP_LCD_GetYSize>
 80025fe:	4602      	mov	r2, r0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	2300      	movs	r3, #0
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	4632      	mov	r2, r6
 800260c:	4629      	mov	r1, r5
 800260e:	4620      	mov	r0, r4
 8002610:	f000 f914 	bl	800283c <FillBuffer>
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	20000144 	.word	0x20000144
 8002620:	2000059c 	.word	0x2000059c

08002624 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <BSP_LCD_DisplayOn+0x1c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002632:	4b03      	ldr	r3, [pc, #12]	; (8002640 <BSP_LCD_DisplayOn+0x1c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4798      	blx	r3
  }
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000644 	.word	0x20000644

08002644 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08e      	sub	sp, #56	; 0x38
 8002648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	4b61      	ldr	r3, [pc, #388]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a60      	ldr	r2, [pc, #384]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b57      	ldr	r3, [pc, #348]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a52      	ldr	r2, [pc, #328]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	4b4c      	ldr	r3, [pc, #304]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a4b      	ldr	r2, [pc, #300]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a44      	ldr	r2, [pc, #272]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a3d      	ldr	r2, [pc, #244]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026e0:	f043 0308 	orr.w	r3, r3, #8
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b3b      	ldr	r3, [pc, #236]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b37      	ldr	r3, [pc, #220]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a36      	ldr	r2, [pc, #216]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 80026fc:	f043 0320 	orr.w	r3, r3, #32
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <BSP_LCD_MspInit+0x190>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800272a:	f641 0358 	movw	r3, #6232	; 0x1858
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002734:	2300      	movs	r3, #0
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002738:	2302      	movs	r3, #2
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800273c:	230e      	movs	r3, #14
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	4824      	ldr	r0, [pc, #144]	; (80027d8 <BSP_LCD_MspInit+0x194>)
 8002748:	f001 f934 	bl	80039b4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800274c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002756:	4619      	mov	r1, r3
 8002758:	4820      	ldr	r0, [pc, #128]	; (80027dc <BSP_LCD_MspInit+0x198>)
 800275a:	f001 f92b 	bl	80039b4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800275e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	481d      	ldr	r0, [pc, #116]	; (80027e0 <BSP_LCD_MspInit+0x19c>)
 800276c:	f001 f922 	bl	80039b4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002770:	2348      	movs	r3, #72	; 0x48
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	481a      	ldr	r0, [pc, #104]	; (80027e4 <BSP_LCD_MspInit+0x1a0>)
 800277c:	f001 f91a 	bl	80039b4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278a:	4619      	mov	r1, r3
 800278c:	4816      	ldr	r0, [pc, #88]	; (80027e8 <BSP_LCD_MspInit+0x1a4>)
 800278e:	f001 f911 	bl	80039b4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002792:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279c:	4619      	mov	r1, r3
 800279e:	4813      	ldr	r0, [pc, #76]	; (80027ec <BSP_LCD_MspInit+0x1a8>)
 80027a0:	f001 f908 	bl	80039b4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80027a4:	2303      	movs	r3, #3
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80027a8:	2309      	movs	r3, #9
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80027ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	480a      	ldr	r0, [pc, #40]	; (80027dc <BSP_LCD_MspInit+0x198>)
 80027b4:	f001 f8fe 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80027b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c2:	4619      	mov	r1, r3
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <BSP_LCD_MspInit+0x1a8>)
 80027c6:	f001 f8f5 	bl	80039b4 <HAL_GPIO_Init>
}
 80027ca:	bf00      	nop
 80027cc:	3738      	adds	r7, #56	; 0x38
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020400 	.word	0x40020400
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40021400 	.word	0x40021400
 80027ec:	40021800 	.word	0x40021800

080027f0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	603a      	str	r2, [r7, #0]
 80027fa:	80fb      	strh	r3, [r7, #6]
 80027fc:	460b      	mov	r3, r1
 80027fe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <BSP_LCD_DrawPixel+0x44>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <BSP_LCD_DrawPixel+0x48>)
 8002806:	2134      	movs	r1, #52	; 0x34
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	681c      	ldr	r4, [r3, #0]
 8002812:	88bd      	ldrh	r5, [r7, #4]
 8002814:	f7ff fe22 	bl	800245c <BSP_LCD_GetXSize>
 8002818:	4603      	mov	r3, r0
 800281a:	fb03 f205 	mul.w	r2, r3, r5
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4423      	add	r3, r4
 8002826:	461a      	mov	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bdb0      	pop	{r4, r5, r7, pc}
 8002834:	20000144 	.word	0x20000144
 8002838:	2000059c 	.word	0x2000059c

0800283c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800284a:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <FillBuffer+0x68>)
 800284c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002850:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <FillBuffer+0x68>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002858:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <FillBuffer+0x68>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <FillBuffer+0x68>)
 8002860:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <FillBuffer+0x6c>)
 8002862:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002864:	480f      	ldr	r0, [pc, #60]	; (80028a4 <FillBuffer+0x68>)
 8002866:	f000 fd09 	bl	800327c <HAL_DMA2D_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d115      	bne.n	800289c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <FillBuffer+0x68>)
 8002874:	f000 ff70 	bl	8003758 <HAL_DMA2D_ConfigLayer>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10e      	bne.n	800289c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69f9      	ldr	r1, [r7, #28]
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <FillBuffer+0x68>)
 800288a:	f000 fd40 	bl	800330e <HAL_DMA2D_Start>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d103      	bne.n	800289c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002894:	210a      	movs	r1, #10
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <FillBuffer+0x68>)
 8002898:	f000 fd64 	bl	8003364 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200000d4 	.word	0x200000d4
 80028a8:	4002b000 	.word	0x4002b000

080028ac <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <BSP_SDRAM_Init+0xac>)
 80028b2:	4a2a      	ldr	r2, [pc, #168]	; (800295c <BSP_SDRAM_Init+0xb0>)
 80028b4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028b8:	2202      	movs	r2, #2
 80028ba:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80028bc:	4b28      	ldr	r3, [pc, #160]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028be:	2207      	movs	r2, #7
 80028c0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80028c2:	4b27      	ldr	r3, [pc, #156]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028c4:	2204      	movs	r2, #4
 80028c6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028ca:	2207      	movs	r2, #7
 80028cc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028d0:	2202      	movs	r2, #2
 80028d2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80028d4:	4b22      	ldr	r3, [pc, #136]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028d6:	2202      	movs	r2, #2
 80028d8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 80028dc:	2202      	movs	r2, #2
 80028de:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <BSP_SDRAM_Init+0xac>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <BSP_SDRAM_Init+0xac>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <BSP_SDRAM_Init+0xac>)
 80028ee:	2204      	movs	r2, #4
 80028f0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <BSP_SDRAM_Init+0xac>)
 80028f4:	2210      	movs	r2, #16
 80028f6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <BSP_SDRAM_Init+0xac>)
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80028fe:	4b16      	ldr	r3, [pc, #88]	; (8002958 <BSP_SDRAM_Init+0xac>)
 8002900:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002904:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <BSP_SDRAM_Init+0xac>)
 8002908:	2200      	movs	r2, #0
 800290a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <BSP_SDRAM_Init+0xac>)
 800290e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002912:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <BSP_SDRAM_Init+0xac>)
 8002916:	2200      	movs	r2, #0
 8002918:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <BSP_SDRAM_Init+0xac>)
 800291c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002922:	2100      	movs	r1, #0
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <BSP_SDRAM_Init+0xac>)
 8002926:	f000 f87f 	bl	8002a28 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800292a:	490d      	ldr	r1, [pc, #52]	; (8002960 <BSP_SDRAM_Init+0xb4>)
 800292c:	480a      	ldr	r0, [pc, #40]	; (8002958 <BSP_SDRAM_Init+0xac>)
 800292e:	f004 f891 	bl	8006a54 <HAL_SDRAM_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <BSP_SDRAM_Init+0xb8>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	e002      	b.n	8002946 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <BSP_SDRAM_Init+0xb8>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002946:	f240 506a 	movw	r0, #1386	; 0x56a
 800294a:	f000 f80d 	bl	8002968 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <BSP_SDRAM_Init+0xb8>)
 8002950:	781b      	ldrb	r3, [r3, #0]
}
 8002952:	4618      	mov	r0, r3
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000160 	.word	0x20000160
 800295c:	a0000140 	.word	0xa0000140
 8002960:	20000194 	.word	0x20000194
 8002964:	20000048 	.word	0x20000048

08002968 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800297a:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800297c:	2208      	movs	r2, #8
 800297e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002982:	2201      	movs	r2, #1
 8002984:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800298c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002990:	4923      	ldr	r1, [pc, #140]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002992:	4824      	ldr	r0, [pc, #144]	; (8002a24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002994:	f004 f892 	bl	8006abc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002998:	2001      	movs	r0, #1
 800299a:	f000 f993 	bl	8002cc4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029a0:	2202      	movs	r2, #2
 80029a2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029a4:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029a6:	2208      	movs	r2, #8
 80029a8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80029b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ba:	4919      	ldr	r1, [pc, #100]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029bc:	4819      	ldr	r0, [pc, #100]	; (8002a24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029be:	f004 f87d 	bl	8006abc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c4:	2203      	movs	r2, #3
 80029c6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ca:	2208      	movs	r2, #8
 80029cc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029d0:	2204      	movs	r2, #4
 80029d2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80029da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029de:	4910      	ldr	r1, [pc, #64]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029e0:	4810      	ldr	r0, [pc, #64]	; (8002a24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029e2:	f004 f86b 	bl	8006abc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80029e6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80029ea:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ee:	2204      	movs	r2, #4
 80029f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f4:	2208      	movs	r2, #8
 80029f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a02:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a08:	4905      	ldr	r1, [pc, #20]	; (8002a20 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a0a:	4806      	ldr	r0, [pc, #24]	; (8002a24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a0c:	f004 f856 	bl	8006abc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a14:	f004 f87d 	bl	8006b12 <HAL_SDRAM_ProgramRefreshRate>
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	200001b0 	.word	0x200001b0
 8002a24:	20000160 	.word	0x20000160

08002a28 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b090      	sub	sp, #64	; 0x40
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80ec 	beq.w	8002c12 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3e:	4b77      	ldr	r3, [pc, #476]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4a76      	ldr	r2, [pc, #472]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6393      	str	r3, [r2, #56]	; 0x38
 8002a4a:	4b74      	ldr	r3, [pc, #464]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a6f      	ldr	r2, [pc, #444]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	4b69      	ldr	r3, [pc, #420]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a68      	ldr	r2, [pc, #416]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a61      	ldr	r2, [pc, #388]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a5a      	ldr	r2, [pc, #360]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002ab4:	f043 0308 	orr.w	r3, r3, #8
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b58      	ldr	r3, [pc, #352]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002ad0:	f043 0310 	orr.w	r3, r3, #16
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b4d      	ldr	r3, [pc, #308]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a4c      	ldr	r2, [pc, #304]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002aec:	f043 0320 	orr.w	r3, r3, #32
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a45      	ldr	r2, [pc, #276]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <BSP_SDRAM_MspInit+0x1f4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002b26:	230c      	movs	r3, #12
 8002b28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002b2a:	2360      	movs	r3, #96	; 0x60
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b32:	4619      	mov	r1, r3
 8002b34:	483a      	ldr	r0, [pc, #232]	; (8002c20 <BSP_SDRAM_MspInit+0x1f8>)
 8002b36:	f000 ff3d 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b42:	4619      	mov	r1, r3
 8002b44:	4837      	ldr	r0, [pc, #220]	; (8002c24 <BSP_SDRAM_MspInit+0x1fc>)
 8002b46:	f000 ff35 	bl	80039b4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002b4a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b54:	4619      	mov	r1, r3
 8002b56:	4834      	ldr	r0, [pc, #208]	; (8002c28 <BSP_SDRAM_MspInit+0x200>)
 8002b58:	f000 ff2c 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002b5c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b66:	4619      	mov	r1, r3
 8002b68:	4830      	ldr	r0, [pc, #192]	; (8002c2c <BSP_SDRAM_MspInit+0x204>)
 8002b6a:	f000 ff23 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002b6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b78:	4619      	mov	r1, r3
 8002b7a:	482d      	ldr	r0, [pc, #180]	; (8002c30 <BSP_SDRAM_MspInit+0x208>)
 8002b7c:	f000 ff1a 	bl	80039b4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002b80:	f248 1333 	movw	r3, #33075	; 0x8133
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4829      	ldr	r0, [pc, #164]	; (8002c34 <BSP_SDRAM_MspInit+0x20c>)
 8002b8e:	f000 ff11 	bl	80039b4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002b92:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002b98:	4b27      	ldr	r3, [pc, #156]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002ba6:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002ba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bac:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bb4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002bbc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bca:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002bd2:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002bd8:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002bde:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <BSP_SDRAM_MspInit+0x214>)
 8002be8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf0:	4a11      	ldr	r2, [pc, #68]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002bf6:	4810      	ldr	r0, [pc, #64]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bf8:	f000 fa32 	bl	8003060 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002bfc:	480e      	ldr	r0, [pc, #56]	; (8002c38 <BSP_SDRAM_MspInit+0x210>)
 8002bfe:	f000 f981 	bl	8002f04 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002c02:	2200      	movs	r2, #0
 8002c04:	210f      	movs	r1, #15
 8002c06:	2038      	movs	r0, #56	; 0x38
 8002c08:	f000 f936 	bl	8002e78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002c0c:	2038      	movs	r0, #56	; 0x38
 8002c0e:	f000 f94f 	bl	8002eb0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002c12:	bf00      	nop
 8002c14:	3740      	adds	r7, #64	; 0x40
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020400 	.word	0x40020400
 8002c24:	40020800 	.word	0x40020800
 8002c28:	40020c00 	.word	0x40020c00
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40021400 	.word	0x40021400
 8002c34:	40021800 	.word	0x40021800
 8002c38:	200001c0 	.word	0x200001c0
 8002c3c:	40026410 	.word	0x40026410

08002c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_Init+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_Init+0x40>)
 8002c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_Init+0x40>)
 8002c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_Init+0x40>)
 8002c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c68:	2003      	movs	r0, #3
 8002c6a:	f000 f8fa 	bl	8002e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fe fe70 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c74:	f7fe fe42 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00

08002c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000050 	.word	0x20000050
 8002ca8:	20000648 	.word	0x20000648

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_GetTick+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000648 	.word	0x20000648

08002cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff ffee 	bl	8002cac <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d005      	beq.n	8002cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_Delay+0x40>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cea:	bf00      	nop
 8002cec:	f7ff ffde 	bl	8002cac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f7      	bhi.n	8002cec <HAL_Delay+0x28>
  {
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000050 	.word	0x20000050

08002d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d24:	4013      	ands	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <__NVIC_SetPriorityGrouping+0x44>)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	60d3      	str	r3, [r2, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <__NVIC_GetPriorityGrouping+0x18>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	f003 0307 	and.w	r3, r3, #7
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	db0b      	blt.n	8002d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	4907      	ldr	r1, [pc, #28]	; (8002da4 <__NVIC_EnableIRQ+0x38>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff4c 	bl	8002d08 <__NVIC_SetPriorityGrouping>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8a:	f7ff ff61 	bl	8002d50 <__NVIC_GetPriorityGrouping>
 8002e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f7ff ffb1 	bl	8002dfc <NVIC_EncodePriority>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff80 	bl	8002da8 <__NVIC_SetPriority>
}
 8002ea8:	bf00      	nop
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff ff54 	bl	8002d6c <__NVIC_EnableIRQ>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e00e      	b.n	8002efc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	795b      	ldrb	r3, [r3, #5]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fd fe9e 	bl	8000c30 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff fecc 	bl	8002cac <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e099      	b.n	8003054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f40:	e00f      	b.n	8002f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f42:	f7ff feb3 	bl	8002cac <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d908      	bls.n	8002f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e078      	b.n	8003054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e8      	bne.n	8002f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_DMA_Init+0x158>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0307 	bic.w	r3, r3, #7
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d117      	bne.n	8003026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f8bd 	bl	8003188 <DMA_CheckFifoParam>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003022:	2301      	movs	r3, #1
 8003024:	e016      	b.n	8003054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f874 	bl	800311c <DMA_CalcBaseAndBitshift>
 8003034:	4603      	mov	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	223f      	movs	r2, #63	; 0x3f
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	f010803f 	.word	0xf010803f

08003060 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e050      	b.n	8003114 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d101      	bne.n	8003082 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800307e:	2302      	movs	r3, #2
 8003080:	e048      	b.n	8003114 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2221      	movs	r2, #33	; 0x21
 80030c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f82a 	bl	800311c <DMA_CalcBaseAndBitshift>
 80030c8:	4603      	mov	r3, r0
 80030ca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	223f      	movs	r2, #63	; 0x3f
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	3b10      	subs	r3, #16
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <DMA_CalcBaseAndBitshift+0x64>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <DMA_CalcBaseAndBitshift+0x68>)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d909      	bls.n	800315e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003152:	f023 0303 	bic.w	r3, r3, #3
 8003156:	1d1a      	adds	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	659a      	str	r2, [r3, #88]	; 0x58
 800315c:	e007      	b.n	800316e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	aaaaaaab 	.word	0xaaaaaaab
 8003184:	0800bc7c 	.word	0x0800bc7c

08003188 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d11f      	bne.n	80031e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d855      	bhi.n	8003254 <DMA_CheckFifoParam+0xcc>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <DMA_CheckFifoParam+0x28>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031c1 	.word	0x080031c1
 80031b4:	080031d3 	.word	0x080031d3
 80031b8:	080031c1 	.word	0x080031c1
 80031bc:	08003255 	.word	0x08003255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d045      	beq.n	8003258 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d0:	e042      	b.n	8003258 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031da:	d13f      	bne.n	800325c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e0:	e03c      	b.n	800325c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ea:	d121      	bne.n	8003230 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d836      	bhi.n	8003260 <DMA_CheckFifoParam+0xd8>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <DMA_CheckFifoParam+0x70>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	08003209 	.word	0x08003209
 80031fc:	0800320f 	.word	0x0800320f
 8003200:	08003209 	.word	0x08003209
 8003204:	08003221 	.word	0x08003221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
      break;
 800320c:	e02f      	b.n	800326e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321e:	e021      	b.n	8003264 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003228:	d11e      	bne.n	8003268 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800322e:	e01b      	b.n	8003268 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <DMA_CheckFifoParam+0xb4>
 8003236:	2b03      	cmp	r3, #3
 8003238:	d003      	beq.n	8003242 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800323a:	e018      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      break;
 8003240:	e015      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
      break;
 8003252:	e00b      	b.n	800326c <DMA_CheckFifoParam+0xe4>
      break;
 8003254:	bf00      	nop
 8003256:	e00a      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      break;
 8003258:	bf00      	nop
 800325a:	e008      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      break;
 800325c:	bf00      	nop
 800325e:	e006      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      break;
 8003260:	bf00      	nop
 8003262:	e004      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      break;
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      break;   
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <DMA_CheckFifoParam+0xe6>
      break;
 800326c:	bf00      	nop
    }
  } 
  
  return status; 
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e03b      	b.n	8003306 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fd18 	bl	8000cd8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032cc:	f023 0107 	bic.w	r1, r3, #7
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68d1      	ldr	r1, [r2, #12]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	430b      	orrs	r3, r1
 80032f4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af02      	add	r7, sp, #8
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_DMA2D_Start+0x1c>
 8003326:	2302      	movs	r3, #2
 8003328:	e018      	b.n	800335c <HAL_DMA2D_Start+0x4e>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fa99 	bl	800387c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d056      	beq.n	800342e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003380:	f7ff fc94 	bl	8002cac <HAL_GetTick>
 8003384:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003386:	e04b      	b.n	8003420 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003396:	2b00      	cmp	r3, #0
 8003398:	d023      	beq.n	80033e2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d005      	beq.n	80033b0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	f043 0202 	orr.w	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2221      	movs	r2, #33	; 0x21
 80033cc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2204      	movs	r2, #4
 80033d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0a5      	b.n	800352e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d01a      	beq.n	8003420 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80033ea:	f7ff fc5f 	bl	8002cac <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <HAL_DMA2D_PollForTransfer+0x9c>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10f      	bne.n	8003420 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2203      	movs	r2, #3
 8003410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e086      	b.n	800352e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ac      	beq.n	8003388 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d061      	beq.n	8003514 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003450:	f7ff fc2c 	bl	8002cac <HAL_GetTick>
 8003454:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003456:	e056      	b.n	8003506 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003466:	2b00      	cmp	r3, #0
 8003468:	d02e      	beq.n	80034c8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	f043 0202 	orr.w	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2229      	movs	r2, #41	; 0x29
 80034b2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2204      	movs	r2, #4
 80034b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e032      	b.n	800352e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ce:	d01a      	beq.n	8003506 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80034d0:	f7ff fbec 	bl	8002cac <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d302      	bcc.n	80034e6 <HAL_DMA2D_PollForTransfer+0x182>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e013      	b.n	800352e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0a1      	beq.n	8003458 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2212      	movs	r2, #18
 800351a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d026      	beq.n	80035a6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d021      	beq.n	80035a6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003570:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	f043 0201 	orr.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2201      	movs	r2, #1
 8003584:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d026      	beq.n	80035fe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d021      	beq.n	80035fe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035c8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2220      	movs	r2, #32
 80035d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	f043 0202 	orr.w	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2204      	movs	r2, #4
 80035e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0308 	and.w	r3, r3, #8
 8003604:	2b00      	cmp	r3, #0
 8003606:	d026      	beq.n	8003656 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800360e:	2b00      	cmp	r3, #0
 8003610:	d021      	beq.n	8003656 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003620:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	f043 0204 	orr.w	r2, r3, #4
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2204      	movs	r2, #4
 800363a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003678:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f853 	bl	800372e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d024      	beq.n	80036dc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01f      	beq.n	80036dc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2202      	movs	r2, #2
 80036b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d01f      	beq.n	8003726 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01a      	beq.n	8003726 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036fe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2210      	movs	r2, #16
 8003706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f80e 	bl	8003742 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_DMA2D_ConfigLayer+0x20>
 8003774:	2302      	movs	r3, #2
 8003776:	e079      	b.n	800386c <HAL_DMA2D_ConfigLayer+0x114>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	3318      	adds	r3, #24
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80037a2:	4b35      	ldr	r3, [pc, #212]	; (8003878 <HAL_DMA2D_ConfigLayer+0x120>)
 80037a4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b0a      	cmp	r3, #10
 80037ac:	d003      	beq.n	80037b6 <HAL_DMA2D_ConfigLayer+0x5e>
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b09      	cmp	r3, #9
 80037b4:	d107      	bne.n	80037c6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e005      	b.n	80037d2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	061b      	lsls	r3, r3, #24
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d120      	bne.n	800381a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	ea02 0103 	and.w	r1, r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b0a      	cmp	r3, #10
 8003800:	d003      	beq.n	800380a <HAL_DMA2D_ConfigLayer+0xb2>
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b09      	cmp	r3, #9
 8003808:	d127      	bne.n	800385a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
 8003818:	e01f      	b.n	800385a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	43db      	mvns	r3, r3
 8003824:	ea02 0103 	and.w	r1, r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	430a      	orrs	r2, r1
 8003830:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b0a      	cmp	r3, #10
 8003842:	d003      	beq.n	800384c <HAL_DMA2D_ConfigLayer+0xf4>
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b09      	cmp	r3, #9
 800384a:	d106      	bne.n	800385a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003858:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	ff03000f 	.word	0xff03000f

0800387c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800387c:	b480      	push	{r7}
 800387e:	b08b      	sub	sp, #44	; 0x2c
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	041a      	lsls	r2, r3, #16
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	431a      	orrs	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b4:	d174      	bne.n	80039a0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80038bc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038c4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038cc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d108      	bne.n	80038ee <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	e053      	b.n	8003996 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d106      	bne.n	8003904 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
 8003902:	e048      	b.n	8003996 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d111      	bne.n	8003930 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	0cdb      	lsrs	r3, r3, #19
 8003910:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	0a9b      	lsrs	r3, r3, #10
 8003916:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	02db      	lsls	r3, r3, #11
 8003926:	4313      	orrs	r3, r2
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	e032      	b.n	8003996 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d117      	bne.n	8003968 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	0fdb      	lsrs	r3, r3, #31
 800393c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	0cdb      	lsrs	r3, r3, #19
 8003942:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	0adb      	lsrs	r3, r3, #11
 8003948:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	029b      	lsls	r3, r3, #10
 8003958:	431a      	orrs	r2, r3
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	03db      	lsls	r3, r3, #15
 800395e:	4313      	orrs	r3, r2
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	4313      	orrs	r3, r2
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	e016      	b.n	8003996 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	0f1b      	lsrs	r3, r3, #28
 800396c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	0d1b      	lsrs	r3, r3, #20
 8003972:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	0b1b      	lsrs	r3, r3, #12
 8003978:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	011a      	lsls	r2, r3, #4
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	021b      	lsls	r3, r3, #8
 8003988:	431a      	orrs	r2, r3
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	031b      	lsls	r3, r3, #12
 800398e:	4313      	orrs	r3, r2
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4313      	orrs	r3, r2
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800399e:	e003      	b.n	80039a8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	60da      	str	r2, [r3, #12]
}
 80039a8:	bf00      	nop
 80039aa:	372c      	adds	r7, #44	; 0x2c
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	; 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	e177      	b.n	8003cc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039d0:	2201      	movs	r2, #1
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	f040 8166 	bne.w	8003cba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d00b      	beq.n	8003a0e <HAL_GPIO_Init+0x5a>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a02:	2b11      	cmp	r3, #17
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b12      	cmp	r3, #18
 8003a0c:	d130      	bne.n	8003a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	2203      	movs	r2, #3
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a44:	2201      	movs	r2, #1
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 0201 	and.w	r2, r3, #1
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0xfc>
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b12      	cmp	r3, #18
 8003aae:	d123      	bne.n	8003af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	08da      	lsrs	r2, r3, #3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3208      	adds	r2, #8
 8003ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	220f      	movs	r2, #15
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	08da      	lsrs	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3208      	adds	r2, #8
 8003af2:	69b9      	ldr	r1, [r7, #24]
 8003af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	2203      	movs	r2, #3
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0203 	and.w	r2, r3, #3
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80c0 	beq.w	8003cba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	4b65      	ldr	r3, [pc, #404]	; (8003cd4 <HAL_GPIO_Init+0x320>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4a64      	ldr	r2, [pc, #400]	; (8003cd4 <HAL_GPIO_Init+0x320>)
 8003b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4a:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_GPIO_Init+0x320>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b56:	4a60      	ldr	r2, [pc, #384]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	3302      	adds	r3, #2
 8003b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	220f      	movs	r2, #15
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a57      	ldr	r2, [pc, #348]	; (8003cdc <HAL_GPIO_Init+0x328>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d037      	beq.n	8003bf2 <HAL_GPIO_Init+0x23e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a56      	ldr	r2, [pc, #344]	; (8003ce0 <HAL_GPIO_Init+0x32c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d031      	beq.n	8003bee <HAL_GPIO_Init+0x23a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a55      	ldr	r2, [pc, #340]	; (8003ce4 <HAL_GPIO_Init+0x330>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d02b      	beq.n	8003bea <HAL_GPIO_Init+0x236>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a54      	ldr	r2, [pc, #336]	; (8003ce8 <HAL_GPIO_Init+0x334>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d025      	beq.n	8003be6 <HAL_GPIO_Init+0x232>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a53      	ldr	r2, [pc, #332]	; (8003cec <HAL_GPIO_Init+0x338>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01f      	beq.n	8003be2 <HAL_GPIO_Init+0x22e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_GPIO_Init+0x33c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d019      	beq.n	8003bde <HAL_GPIO_Init+0x22a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a51      	ldr	r2, [pc, #324]	; (8003cf4 <HAL_GPIO_Init+0x340>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_GPIO_Init+0x226>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a50      	ldr	r2, [pc, #320]	; (8003cf8 <HAL_GPIO_Init+0x344>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00d      	beq.n	8003bd6 <HAL_GPIO_Init+0x222>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4f      	ldr	r2, [pc, #316]	; (8003cfc <HAL_GPIO_Init+0x348>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d007      	beq.n	8003bd2 <HAL_GPIO_Init+0x21e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4e      	ldr	r2, [pc, #312]	; (8003d00 <HAL_GPIO_Init+0x34c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_GPIO_Init+0x21a>
 8003bca:	2309      	movs	r3, #9
 8003bcc:	e012      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bce:	230a      	movs	r3, #10
 8003bd0:	e010      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	e00e      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bd6:	2307      	movs	r3, #7
 8003bd8:	e00c      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bda:	2306      	movs	r3, #6
 8003bdc:	e00a      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bde:	2305      	movs	r3, #5
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003be2:	2304      	movs	r3, #4
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x240>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c04:	4934      	ldr	r1, [pc, #208]	; (8003cd8 <HAL_GPIO_Init+0x324>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c36:	4a33      	ldr	r2, [pc, #204]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c3c:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c60:	4a28      	ldr	r2, [pc, #160]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c90:	4b1c      	ldr	r3, [pc, #112]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb4:	4a13      	ldr	r2, [pc, #76]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	f67f ae84 	bls.w	80039d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3724      	adds	r7, #36	; 0x24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40021400 	.word	0x40021400
 8003cf4:	40021800 	.word	0x40021800
 8003cf8:	40021c00 	.word	0x40021c00
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	40022400 	.word	0x40022400
 8003d04:	40013c00 	.word	0x40013c00

08003d08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e0d9      	b.n	8003ed8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d24:	2201      	movs	r2, #1
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	f040 80c9 	bne.w	8003ed2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003d40:	4a6a      	ldr	r2, [pc, #424]	; (8003eec <HAL_GPIO_DeInit+0x1e4>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a62      	ldr	r2, [pc, #392]	; (8003ef0 <HAL_GPIO_DeInit+0x1e8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d037      	beq.n	8003dda <HAL_GPIO_DeInit+0xd2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a61      	ldr	r2, [pc, #388]	; (8003ef4 <HAL_GPIO_DeInit+0x1ec>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d031      	beq.n	8003dd6 <HAL_GPIO_DeInit+0xce>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a60      	ldr	r2, [pc, #384]	; (8003ef8 <HAL_GPIO_DeInit+0x1f0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <HAL_GPIO_DeInit+0xca>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a5f      	ldr	r2, [pc, #380]	; (8003efc <HAL_GPIO_DeInit+0x1f4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d025      	beq.n	8003dce <HAL_GPIO_DeInit+0xc6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a5e      	ldr	r2, [pc, #376]	; (8003f00 <HAL_GPIO_DeInit+0x1f8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01f      	beq.n	8003dca <HAL_GPIO_DeInit+0xc2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <HAL_GPIO_DeInit+0x1fc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d019      	beq.n	8003dc6 <HAL_GPIO_DeInit+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a5c      	ldr	r2, [pc, #368]	; (8003f08 <HAL_GPIO_DeInit+0x200>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_GPIO_DeInit+0xba>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a5b      	ldr	r2, [pc, #364]	; (8003f0c <HAL_GPIO_DeInit+0x204>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00d      	beq.n	8003dbe <HAL_GPIO_DeInit+0xb6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a5a      	ldr	r2, [pc, #360]	; (8003f10 <HAL_GPIO_DeInit+0x208>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <HAL_GPIO_DeInit+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a59      	ldr	r2, [pc, #356]	; (8003f14 <HAL_GPIO_DeInit+0x20c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d101      	bne.n	8003db6 <HAL_GPIO_DeInit+0xae>
 8003db2:	2309      	movs	r3, #9
 8003db4:	e012      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003db6:	230a      	movs	r3, #10
 8003db8:	e010      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	e00e      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	e00c      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	e00a      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	e008      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	e006      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e004      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e002      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <HAL_GPIO_DeInit+0xd4>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	f002 0203 	and.w	r2, r2, #3
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4093      	lsls	r3, r2
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d132      	bne.n	8003e52 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003dec:	4b4a      	ldr	r3, [pc, #296]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	4948      	ldr	r1, [pc, #288]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003dfa:	4b47      	ldr	r3, [pc, #284]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	4945      	ldr	r1, [pc, #276]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003e08:	4b43      	ldr	r3, [pc, #268]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	4941      	ldr	r1, [pc, #260]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003e16:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	493e      	ldr	r1, [pc, #248]	; (8003f18 <HAL_GPIO_DeInit+0x210>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003e34:	4a2d      	ldr	r2, [pc, #180]	; (8003eec <HAL_GPIO_DeInit+0x1e4>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	4829      	ldr	r0, [pc, #164]	; (8003eec <HAL_GPIO_DeInit+0x1e4>)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2103      	movs	r1, #3
 8003e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	401a      	ands	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	08da      	lsrs	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3208      	adds	r2, #8
 8003e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	220f      	movs	r2, #15
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	08d2      	lsrs	r2, r2, #3
 8003e88:	4019      	ands	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	401a      	ands	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	2101      	movs	r1, #1
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	401a      	ands	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f af22 	bls.w	8003d24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40020000 	.word	0x40020000
 8003ef4:	40020400 	.word	0x40020400
 8003ef8:	40020800 	.word	0x40020800
 8003efc:	40020c00 	.word	0x40020c00
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40021400 	.word	0x40021400
 8003f08:	40021800 	.word	0x40021800
 8003f0c:	40021c00 	.word	0x40021c00
 8003f10:	40022000 	.word	0x40022000
 8003f14:	40022400 	.word	0x40022400
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f2c:	787b      	ldrb	r3, [r7, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f38:	e003      	b.n	8003f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	041a      	lsls	r2, r3, #16
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	619a      	str	r2, [r3, #24]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f004 fd31 	bl	80089cc <USB_GetMode>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f040 80ef 	bne.w	8004150 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fd15 	bl	80089a6 <USB_ReadInterrupts>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80e5 	beq.w	800414e <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f004 fd0c 	bl	80089a6 <USB_ReadInterrupts>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f98:	d104      	bne.n	8003fa4 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003fa2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fcfc 	bl	80089a6 <USB_ReadInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb8:	d104      	bne.n	8003fc4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fc2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f004 fcec 	bl	80089a6 <USB_ReadInterrupts>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd8:	d104      	bne.n	8003fe4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fe2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f004 fcdc 	bl	80089a6 <USB_ReadInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d103      	bne.n	8004000 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fcce 	bl	80089a6 <USB_ReadInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004014:	d115      	bne.n	8004042 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800401e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d108      	bne.n	8004042 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f005 fff3 	bl	800a01c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f004 fcd3 	bl	80089e8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f004 fcad 	bl	80089a6 <USB_ReadInterrupts>
 800404c:	4603      	mov	r3, r0
 800404e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004052:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004056:	d102      	bne.n	800405e <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f001 f8ef 	bl	800523c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f004 fc9f 	bl	80089a6 <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b08      	cmp	r3, #8
 8004070:	d106      	bne.n	8004080 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f005 ffb6 	bl	8009fe4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2208      	movs	r2, #8
 800407e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f004 fc8e 	bl	80089a6 <USB_ReadInterrupts>
 800408a:	4603      	mov	r3, r0
 800408c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004094:	d138      	bne.n	8004108 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fcde 	bl	8008a5c <USB_HC_ReadInterrupt>
 80040a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
 80040a6:	e025      	b.n	80040f4 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d018      	beq.n	80040ee <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d106      	bne.n	80040e2 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f858 	bl	8004190 <HCD_HC_IN_IRQHandler>
 80040e0:	e005      	b.n	80040ee <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4619      	mov	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fc86 	bl	80049fa <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	3301      	adds	r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3d4      	bcc.n	80040a8 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f004 fc4a 	bl	80089a6 <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	2b10      	cmp	r3, #16
 800411a:	d101      	bne.n	8004120 <HAL_HCD_IRQHandler+0x1d2>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <HAL_HCD_IRQHandler+0x1d4>
 8004120:	2300      	movs	r3, #0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d014      	beq.n	8004150 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0210 	bic.w	r2, r2, #16
 8004134:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 ffd4 	bl	80050e4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0210 	orr.w	r2, r2, #16
 800414a:	619a      	str	r2, [r3, #24]
 800414c:	e000      	b.n	8004150 <HAL_HCD_IRQHandler+0x202>
      return;
 800414e:	bf00      	nop
    }
  }
}
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_HCD_Stop+0x16>
 8004168:	2302      	movs	r3, #2
 800416a:	e00d      	b.n	8004188 <HAL_HCD_Stop+0x32>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f004 fd7f 	bl	8008c7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d119      	bne.n	80041f4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	2304      	movs	r3, #4
 80041d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ec:	f043 0302 	orr.w	r3, r3, #2
 80041f0:	60d3      	str	r3, [r2, #12]
 80041f2:	e0ce      	b.n	8004392 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d12c      	bne.n	8004266 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	461a      	mov	r2, r3
 800421a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800421e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	335d      	adds	r3, #93	; 0x5d
 8004230:	2207      	movs	r2, #7
 8004232:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	440a      	add	r2, r1
 800424a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800424e:	f043 0302 	orr.w	r3, r3, #2
 8004252:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f004 fc0d 	bl	8008a7e <USB_HC_Halt>
 8004264:	e095      	b.n	8004392 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4413      	add	r3, r2
 800426e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b20      	cmp	r3, #32
 800427a:	d109      	bne.n	8004290 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4413      	add	r3, r2
 8004284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004288:	461a      	mov	r2, r3
 800428a:	2320      	movs	r3, #32
 800428c:	6093      	str	r3, [r2, #8]
 800428e:	e080      	b.n	8004392 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d134      	bne.n	8004310 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	0151      	lsls	r1, r2, #5
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	440a      	add	r2, r1
 80042bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	440b      	add	r3, r1
 80042d4:	335d      	adds	r3, #93	; 0x5d
 80042d6:	2205      	movs	r2, #5
 80042d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	461a      	mov	r2, r3
 80042e8:	2310      	movs	r3, #16
 80042ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	461a      	mov	r2, r3
 80042fa:	2308      	movs	r3, #8
 80042fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fbb8 	bl	8008a7e <USB_HC_Halt>
 800430e:	e040      	b.n	8004392 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	d134      	bne.n	8004392 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	0151      	lsls	r1, r2, #5
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	440a      	add	r2, r1
 800433e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004342:	f043 0302 	orr.w	r3, r3, #2
 8004346:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f004 fb93 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	461a      	mov	r2, r3
 8004366:	2310      	movs	r3, #16
 8004368:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	335d      	adds	r3, #93	; 0x5d
 800437a:	2208      	movs	r2, #8
 800437c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4413      	add	r3, r2
 8004386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438a:	461a      	mov	r2, r3
 800438c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004390:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d122      	bne.n	80043f0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	0151      	lsls	r1, r2, #5
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	440a      	add	r2, r1
 80043c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043c4:	f043 0302 	orr.w	r3, r3, #2
 80043c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f004 fb52 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e6:	461a      	mov	r2, r3
 80043e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043ec:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80043ee:	e300      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 80fd 	bne.w	8004602 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01b      	beq.n	8004448 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	440b      	add	r3, r1
 800441e:	3348      	adds	r3, #72	; 0x48
 8004420:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	0159      	lsls	r1, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	440b      	add	r3, r1
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004434:	1ad1      	subs	r1, r2, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4403      	add	r3, r0
 8004444:	334c      	adds	r3, #76	; 0x4c
 8004446:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	335d      	adds	r3, #93	; 0x5d
 8004458:	2201      	movs	r2, #1
 800445a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4613      	mov	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	440b      	add	r3, r1
 800446a:	3358      	adds	r3, #88	; 0x58
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	461a      	mov	r2, r3
 800447e:	2301      	movs	r3, #1
 8004480:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	440b      	add	r3, r1
 8004490:	333f      	adds	r3, #63	; 0x3f
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	440b      	add	r3, r1
 80044a6:	333f      	adds	r3, #63	; 0x3f
 80044a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d121      	bne.n	80044f2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044c8:	f043 0302 	orr.w	r3, r3, #2
 80044cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f004 fad0 	bl	8008a7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ea:	461a      	mov	r2, r3
 80044ec:	2310      	movs	r3, #16
 80044ee:	6093      	str	r3, [r2, #8]
 80044f0:	e070      	b.n	80045d4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	333f      	adds	r3, #63	; 0x3f
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d12a      	bne.n	800455e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	440a      	add	r2, r1
 800451e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004526:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	335c      	adds	r3, #92	; 0x5c
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	b2d8      	uxtb	r0, r3
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4601      	mov	r1, r0
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f005 fd6e 	bl	800a038 <HAL_HCD_HC_NotifyURBChange_Callback>
 800455c:	e03a      	b.n	80045d4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	333f      	adds	r3, #63	; 0x3f
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d12f      	bne.n	80045d4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	440b      	add	r3, r1
 8004582:	335c      	adds	r3, #92	; 0x5c
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	440b      	add	r3, r1
 8004596:	3350      	adds	r3, #80	; 0x50
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f083 0301 	eor.w	r3, r3, #1
 800459e:	b2d8      	uxtb	r0, r3
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	440b      	add	r3, r1
 80045ae:	3350      	adds	r3, #80	; 0x50
 80045b0:	4602      	mov	r2, r0
 80045b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	b2d8      	uxtb	r0, r3
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	440b      	add	r3, r1
 80045c6:	335c      	adds	r3, #92	; 0x5c
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	4601      	mov	r1, r0
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f005 fd32 	bl	800a038 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	440b      	add	r3, r1
 80045e2:	3350      	adds	r3, #80	; 0x50
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	f083 0301 	eor.w	r3, r3, #1
 80045ea:	b2d8      	uxtb	r0, r3
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	3350      	adds	r3, #80	; 0x50
 80045fc:	4602      	mov	r2, r0
 80045fe:	701a      	strb	r2, [r3, #0]
}
 8004600:	e1f7      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b02      	cmp	r3, #2
 8004616:	f040 811a 	bne.w	800484e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	440a      	add	r2, r1
 8004630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004634:	f023 0302 	bic.w	r3, r3, #2
 8004638:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	335d      	adds	r3, #93	; 0x5d
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10a      	bne.n	8004666 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	335c      	adds	r3, #92	; 0x5c
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e0d9      	b.n	800481a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	440b      	add	r3, r1
 8004674:	335d      	adds	r3, #93	; 0x5d
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b05      	cmp	r3, #5
 800467a:	d10a      	bne.n	8004692 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	440b      	add	r3, r1
 800468a:	335c      	adds	r3, #92	; 0x5c
 800468c:	2205      	movs	r2, #5
 800468e:	701a      	strb	r2, [r3, #0]
 8004690:	e0c3      	b.n	800481a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	440b      	add	r3, r1
 80046a0:	335d      	adds	r3, #93	; 0x5d
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b06      	cmp	r3, #6
 80046a6:	d00a      	beq.n	80046be <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	440b      	add	r3, r1
 80046b6:	335d      	adds	r3, #93	; 0x5d
 80046b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d156      	bne.n	800476c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4613      	mov	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	4413      	add	r3, r2
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	440b      	add	r3, r1
 80046cc:	3358      	adds	r3, #88	; 0x58
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	1c59      	adds	r1, r3, #1
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4403      	add	r3, r0
 80046e0:	3358      	adds	r3, #88	; 0x58
 80046e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	440b      	add	r3, r1
 80046f2:	3358      	adds	r3, #88	; 0x58
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d914      	bls.n	8004724 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	440b      	add	r3, r1
 8004708:	3358      	adds	r3, #88	; 0x58
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	335c      	adds	r3, #92	; 0x5c
 800471e:	2204      	movs	r2, #4
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e009      	b.n	8004738 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	335c      	adds	r3, #92	; 0x5c
 8004734:	2202      	movs	r2, #2
 8004736:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800474e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004756:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e056      	b.n	800481a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	440b      	add	r3, r1
 800477a:	335d      	adds	r3, #93	; 0x5d
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d123      	bne.n	80047ca <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4613      	mov	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	440b      	add	r3, r1
 8004790:	335c      	adds	r3, #92	; 0x5c
 8004792:	2202      	movs	r2, #2
 8004794:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047ac:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	e027      	b.n	800481a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	440b      	add	r3, r1
 80047d8:	335d      	adds	r3, #93	; 0x5d
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b07      	cmp	r3, #7
 80047de:	d11c      	bne.n	800481a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	3358      	adds	r3, #88	; 0x58
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4403      	add	r3, r0
 8004802:	3358      	adds	r3, #88	; 0x58
 8004804:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	335c      	adds	r3, #92	; 0x5c
 8004816:	2204      	movs	r2, #4
 8004818:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4413      	add	r3, r2
 8004822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004826:	461a      	mov	r2, r3
 8004828:	2302      	movs	r3, #2
 800482a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	b2d8      	uxtb	r0, r3
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	440b      	add	r3, r1
 800483e:	335c      	adds	r3, #92	; 0x5c
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	4601      	mov	r1, r0
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f005 fbf6 	bl	800a038 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800484c:	e0d1      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	2b80      	cmp	r3, #128	; 0x80
 8004862:	d13e      	bne.n	80048e2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	0151      	lsls	r1, r2, #5
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	440a      	add	r2, r1
 800487a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800487e:	f043 0302 	orr.w	r3, r3, #2
 8004882:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	3358      	adds	r3, #88	; 0x58
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4403      	add	r3, r0
 80048a6:	3358      	adds	r3, #88	; 0x58
 80048a8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	335d      	adds	r3, #93	; 0x5d
 80048ba:	2206      	movs	r2, #6
 80048bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	4611      	mov	r1, r2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f004 f8d8 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048da:	461a      	mov	r2, r3
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	6093      	str	r3, [r2, #8]
}
 80048e0:	e087      	b.n	80049f2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d17c      	bne.n	80049f2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	440b      	add	r3, r1
 8004906:	333f      	adds	r3, #63	; 0x3f
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b03      	cmp	r3, #3
 800490c:	d122      	bne.n	8004954 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	440b      	add	r3, r1
 800491c:	3358      	adds	r3, #88	; 0x58
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800493c:	f043 0302 	orr.w	r3, r3, #2
 8004940:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f004 f896 	bl	8008a7e <USB_HC_Halt>
 8004952:	e045      	b.n	80049e0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4613      	mov	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4413      	add	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	440b      	add	r3, r1
 8004962:	333f      	adds	r3, #63	; 0x3f
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	440b      	add	r3, r1
 8004978:	333f      	adds	r3, #63	; 0x3f
 800497a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800497c:	2b02      	cmp	r3, #2
 800497e:	d12f      	bne.n	80049e0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	440b      	add	r3, r1
 800498e:	3358      	adds	r3, #88	; 0x58
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d121      	bne.n	80049e0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	440b      	add	r3, r1
 80049aa:	335d      	adds	r3, #93	; 0x5d
 80049ac:	2203      	movs	r2, #3
 80049ae:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ca:	f043 0302 	orr.w	r3, r3, #2
 80049ce:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 f84f 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	461a      	mov	r2, r3
 80049ee:	2310      	movs	r3, #16
 80049f0:	6093      	str	r3, [r2, #8]
}
 80049f2:	bf00      	nop
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d119      	bne.n	8004a5e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a36:	461a      	mov	r2, r3
 8004a38:	2304      	movs	r3, #4
 8004a3a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a56:	f043 0302 	orr.w	r3, r3, #2
 8004a5a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8004a5c:	e33e      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d141      	bne.n	8004af8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a80:	461a      	mov	r2, r3
 8004a82:	2320      	movs	r3, #32
 8004a84:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	440b      	add	r3, r1
 8004a94:	333d      	adds	r3, #61	; 0x3d
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	f040 831f 	bne.w	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	440b      	add	r3, r1
 8004aac:	333d      	adds	r3, #61	; 0x3d
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	440b      	add	r3, r1
 8004ac0:	335c      	adds	r3, #92	; 0x5c
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae0:	f043 0302 	orr.w	r3, r3, #2
 8004ae4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 ffc4 	bl	8008a7e <USB_HC_Halt>
}
 8004af6:	e2f1      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b40      	cmp	r3, #64	; 0x40
 8004b0c:	d13f      	bne.n	8004b8e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	440b      	add	r3, r1
 8004b1c:	335d      	adds	r3, #93	; 0x5d
 8004b1e:	2204      	movs	r2, #4
 8004b20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	333d      	adds	r3, #61	; 0x3d
 8004b32:	2201      	movs	r2, #1
 8004b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	440b      	add	r3, r1
 8004b44:	3358      	adds	r3, #88	; 0x58
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b64:	f043 0302 	orr.w	r3, r3, #2
 8004b68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f003 ff82 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	6093      	str	r3, [r2, #8]
}
 8004b8c:	e2a6      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba4:	d122      	bne.n	8004bec <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f003 ff54 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be2:	461a      	mov	r2, r3
 8004be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be8:	6093      	str	r3, [r2, #8]
}
 8004bea:	e277      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d135      	bne.n	8004c6e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	440b      	add	r3, r1
 8004c10:	3358      	adds	r3, #88	; 0x58
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c30:	f043 0302 	orr.w	r3, r3, #2
 8004c34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f003 ff1c 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c52:	461a      	mov	r2, r3
 8004c54:	2301      	movs	r3, #1
 8004c56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	440b      	add	r3, r1
 8004c66:	335d      	adds	r3, #93	; 0x5d
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
}
 8004c6c:	e236      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d12b      	bne.n	8004cdc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	461a      	mov	r2, r3
 8004c92:	2308      	movs	r3, #8
 8004c94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb0:	f043 0302 	orr.w	r3, r3, #2
 8004cb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f003 fedc 	bl	8008a7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	440b      	add	r3, r1
 8004cd4:	335d      	adds	r3, #93	; 0x5d
 8004cd6:	2205      	movs	r2, #5
 8004cd8:	701a      	strb	r2, [r3, #0]
}
 8004cda:	e1ff      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b10      	cmp	r3, #16
 8004cf0:	d155      	bne.n	8004d9e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	440b      	add	r3, r1
 8004d00:	3358      	adds	r3, #88	; 0x58
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	440b      	add	r3, r1
 8004d14:	335d      	adds	r3, #93	; 0x5d
 8004d16:	2203      	movs	r2, #3
 8004d18:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	440b      	add	r3, r1
 8004d28:	333d      	adds	r3, #61	; 0x3d
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d114      	bne.n	8004d5a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	440b      	add	r3, r1
 8004d3e:	333c      	adds	r3, #60	; 0x3c
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	440b      	add	r3, r1
 8004d54:	333d      	adds	r3, #61	; 0x3d
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d74:	f043 0302 	orr.w	r3, r3, #2
 8004d78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f003 fe7a 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d96:	461a      	mov	r2, r3
 8004d98:	2310      	movs	r3, #16
 8004d9a:	6093      	str	r3, [r2, #8]
}
 8004d9c:	e19e      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db0:	2b80      	cmp	r3, #128	; 0x80
 8004db2:	d12b      	bne.n	8004e0c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f003 fe4d 	bl	8008a7e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	440b      	add	r3, r1
 8004df2:	335d      	adds	r3, #93	; 0x5d
 8004df4:	2206      	movs	r2, #6
 8004df6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e04:	461a      	mov	r2, r3
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	6093      	str	r3, [r2, #8]
}
 8004e0a:	e167      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e22:	d135      	bne.n	8004e90 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e3e:	f043 0302 	orr.w	r3, r3, #2
 8004e42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 fe15 	bl	8008a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e60:	461a      	mov	r2, r3
 8004e62:	2310      	movs	r3, #16
 8004e64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e72:	461a      	mov	r2, r3
 8004e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	440b      	add	r3, r1
 8004e88:	335d      	adds	r3, #93	; 0x5d
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	701a      	strb	r2, [r3, #0]
}
 8004e8e:	e125      	b.n	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	f040 811a 	bne.w	80050dc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	0151      	lsls	r1, r2, #5
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ec2:	f023 0302 	bic.w	r3, r3, #2
 8004ec6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	440b      	add	r3, r1
 8004ed6:	335d      	adds	r3, #93	; 0x5d
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d137      	bne.n	8004f4e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	440b      	add	r3, r1
 8004eec:	335c      	adds	r3, #92	; 0x5c
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	440b      	add	r3, r1
 8004f00:	333f      	adds	r3, #63	; 0x3f
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d00b      	beq.n	8004f20 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	440b      	add	r3, r1
 8004f16:	333f      	adds	r3, #63	; 0x3f
 8004f18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	f040 80c5 	bne.w	80050aa <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	440b      	add	r3, r1
 8004f2e:	3351      	adds	r3, #81	; 0x51
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	f083 0301 	eor.w	r3, r3, #1
 8004f36:	b2d8      	uxtb	r0, r3
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	3351      	adds	r3, #81	; 0x51
 8004f48:	4602      	mov	r2, r0
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e0ad      	b.n	80050aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	335d      	adds	r3, #93	; 0x5d
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d10a      	bne.n	8004f7a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	440b      	add	r3, r1
 8004f72:	335c      	adds	r3, #92	; 0x5c
 8004f74:	2202      	movs	r2, #2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e097      	b.n	80050aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	440b      	add	r3, r1
 8004f88:	335d      	adds	r3, #93	; 0x5d
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d10a      	bne.n	8004fa6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	335c      	adds	r3, #92	; 0x5c
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e081      	b.n	80050aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	440b      	add	r3, r1
 8004fb4:	335d      	adds	r3, #93	; 0x5d
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d10a      	bne.n	8004fd2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	440b      	add	r3, r1
 8004fca:	335c      	adds	r3, #92	; 0x5c
 8004fcc:	2205      	movs	r2, #5
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e06b      	b.n	80050aa <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	440b      	add	r3, r1
 8004fe0:	335d      	adds	r3, #93	; 0x5d
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d00a      	beq.n	8004ffe <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	440b      	add	r3, r1
 8004ff6:	335d      	adds	r3, #93	; 0x5d
 8004ff8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d155      	bne.n	80050aa <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	440b      	add	r3, r1
 800500c:	3358      	adds	r3, #88	; 0x58
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1c59      	adds	r1, r3, #1
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4403      	add	r3, r0
 8005020:	3358      	adds	r3, #88	; 0x58
 8005022:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	440b      	add	r3, r1
 8005032:	3358      	adds	r3, #88	; 0x58
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b03      	cmp	r3, #3
 8005038:	d914      	bls.n	8005064 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	440b      	add	r3, r1
 8005048:	3358      	adds	r3, #88	; 0x58
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	440b      	add	r3, r1
 800505c:	335c      	adds	r3, #92	; 0x5c
 800505e:	2204      	movs	r2, #4
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e009      	b.n	8005078 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	440b      	add	r3, r1
 8005072:	335c      	adds	r3, #92	; 0x5c
 8005074:	2202      	movs	r2, #2
 8005076:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800508e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005096:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050a4:	461a      	mov	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b6:	461a      	mov	r2, r3
 80050b8:	2302      	movs	r3, #2
 80050ba:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	b2d8      	uxtb	r0, r3
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	440b      	add	r3, r1
 80050ce:	335c      	adds	r3, #92	; 0x5c
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	4601      	mov	r1, r0
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f004 ffae 	bl	800a038 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80050dc:	bf00      	nop
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	0c5b      	lsrs	r3, r3, #17
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	091b      	lsrs	r3, r3, #4
 8005114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005118:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d003      	beq.n	8005128 <HCD_RXQLVL_IRQHandler+0x44>
 8005120:	2b05      	cmp	r3, #5
 8005122:	f000 8082 	beq.w	800522a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005126:	e083      	b.n	8005230 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d07f      	beq.n	800522e <HCD_RXQLVL_IRQHandler+0x14a>
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	440b      	add	r3, r1
 800513c:	3344      	adds	r3, #68	; 0x44
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d074      	beq.n	800522e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	440b      	add	r3, r1
 8005156:	3344      	adds	r3, #68	; 0x44
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	b292      	uxth	r2, r2
 800515e:	4619      	mov	r1, r3
 8005160:	f003 fbf8 	bl	8008954 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	440b      	add	r3, r1
 8005172:	3344      	adds	r3, #68	; 0x44
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	18d1      	adds	r1, r2, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4403      	add	r3, r0
 8005188:	3344      	adds	r3, #68	; 0x44
 800518a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	440b      	add	r3, r1
 800519a:	334c      	adds	r3, #76	; 0x4c
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	18d1      	adds	r1, r2, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4403      	add	r3, r0
 80051b0:	334c      	adds	r3, #76	; 0x4c
 80051b2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HCD_RXQLVL_IRQHandler+0x154>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d031      	beq.n	800522e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051e0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051e8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	461a      	mov	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	440b      	add	r3, r1
 800520a:	3350      	adds	r3, #80	; 0x50
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	f083 0301 	eor.w	r3, r3, #1
 8005212:	b2d8      	uxtb	r0, r3
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	440b      	add	r3, r1
 8005222:	3350      	adds	r3, #80	; 0x50
 8005224:	4602      	mov	r2, r0
 8005226:	701a      	strb	r2, [r3, #0]
      break;
 8005228:	e001      	b.n	800522e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800522e:	bf00      	nop
  }
}
 8005230:	bf00      	nop
 8005232:	3728      	adds	r7, #40	; 0x28
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	1ff80000 	.word	0x1ff80000

0800523c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005268:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b02      	cmp	r3, #2
 8005272:	d10b      	bne.n	800528c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d102      	bne.n	8005284 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f004 febe 	bl	800a000 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f043 0302 	orr.w	r3, r3, #2
 800528a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d132      	bne.n	80052fc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f043 0308 	orr.w	r3, r3, #8
 800529c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d126      	bne.n	80052f6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d113      	bne.n	80052d8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80052b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052ba:	d106      	bne.n	80052ca <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2102      	movs	r1, #2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f003 fb90 	bl	80089e8 <USB_InitFSLSPClkSel>
 80052c8:	e011      	b.n	80052ee <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	4618      	mov	r0, r3
 80052d2:	f003 fb89 	bl	80089e8 <USB_InitFSLSPClkSel>
 80052d6:	e00a      	b.n	80052ee <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d106      	bne.n	80052ee <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e6:	461a      	mov	r2, r3
 80052e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80052ec:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f004 feb4 	bl	800a05c <HAL_HCD_PortEnabled_Callback>
 80052f4:	e002      	b.n	80052fc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f004 febe 	bl	800a078 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b20      	cmp	r3, #32
 8005304:	d103      	bne.n	800530e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 0320 	orr.w	r3, r3, #32
 800530c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005314:	461a      	mov	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6013      	str	r3, [r2, #0]
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e11f      	b.n	8005576 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb ff34 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005388:	f001 f94c 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 800538c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4a7b      	ldr	r2, [pc, #492]	; (8005580 <HAL_I2C_Init+0x25c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d807      	bhi.n	80053a8 <HAL_I2C_Init+0x84>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a7a      	ldr	r2, [pc, #488]	; (8005584 <HAL_I2C_Init+0x260>)
 800539c:	4293      	cmp	r3, r2
 800539e:	bf94      	ite	ls
 80053a0:	2301      	movls	r3, #1
 80053a2:	2300      	movhi	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e006      	b.n	80053b6 <HAL_I2C_Init+0x92>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a77      	ldr	r2, [pc, #476]	; (8005588 <HAL_I2C_Init+0x264>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	bf94      	ite	ls
 80053b0:	2301      	movls	r3, #1
 80053b2:	2300      	movhi	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0db      	b.n	8005576 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a72      	ldr	r2, [pc, #456]	; (800558c <HAL_I2C_Init+0x268>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	0c9b      	lsrs	r3, r3, #18
 80053c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a64      	ldr	r2, [pc, #400]	; (8005580 <HAL_I2C_Init+0x25c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d802      	bhi.n	80053f8 <HAL_I2C_Init+0xd4>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3301      	adds	r3, #1
 80053f6:	e009      	b.n	800540c <HAL_I2C_Init+0xe8>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	4a63      	ldr	r2, [pc, #396]	; (8005590 <HAL_I2C_Init+0x26c>)
 8005404:	fba2 2303 	umull	r2, r3, r2, r3
 8005408:	099b      	lsrs	r3, r3, #6
 800540a:	3301      	adds	r3, #1
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	430b      	orrs	r3, r1
 8005412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800541e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4956      	ldr	r1, [pc, #344]	; (8005580 <HAL_I2C_Init+0x25c>)
 8005428:	428b      	cmp	r3, r1
 800542a:	d80d      	bhi.n	8005448 <HAL_I2C_Init+0x124>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1e59      	subs	r1, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	fbb1 f3f3 	udiv	r3, r1, r3
 800543a:	3301      	adds	r3, #1
 800543c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005440:	2b04      	cmp	r3, #4
 8005442:	bf38      	it	cc
 8005444:	2304      	movcc	r3, #4
 8005446:	e04f      	b.n	80054e8 <HAL_I2C_Init+0x1c4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d111      	bne.n	8005474 <HAL_I2C_Init+0x150>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	1e58      	subs	r0, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e012      	b.n	800549a <HAL_I2C_Init+0x176>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1e58      	subs	r0, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	0099      	lsls	r1, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	fbb0 f3f3 	udiv	r3, r0, r3
 800548a:	3301      	adds	r3, #1
 800548c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Init+0x17e>
 800549e:	2301      	movs	r3, #1
 80054a0:	e022      	b.n	80054e8 <HAL_I2C_Init+0x1c4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10e      	bne.n	80054c8 <HAL_I2C_Init+0x1a4>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1e58      	subs	r0, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	440b      	add	r3, r1
 80054b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80054bc:	3301      	adds	r3, #1
 80054be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	e00f      	b.n	80054e8 <HAL_I2C_Init+0x1c4>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	0099      	lsls	r1, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	fbb0 f3f3 	udiv	r3, r0, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	6809      	ldr	r1, [r1, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6911      	ldr	r1, [r2, #16]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68d2      	ldr	r2, [r2, #12]
 8005522:	4311      	orrs	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	430b      	orrs	r3, r1
 800552a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	000186a0 	.word	0x000186a0
 8005584:	001e847f 	.word	0x001e847f
 8005588:	003d08ff 	.word	0x003d08ff
 800558c:	431bde83 	.word	0x431bde83
 8005590:	10624dd3 	.word	0x10624dd3

08005594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b20      	cmp	r3, #32
 80055a8:	d129      	bne.n	80055fe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2224      	movs	r2, #36	; 0x24
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0210 	bic.w	r2, r2, #16
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	d12a      	bne.n	800567c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2224      	movs	r2, #36	; 0x24
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	f023 030f 	bic.w	r3, r3, #15
 800564c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	89fb      	ldrh	r3, [r7, #14]
 8005654:	4313      	orrs	r3, r2
 8005656:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	89fa      	ldrh	r2, [r7, #14]
 800565e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e0bf      	b.n	800581e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb fe9e 	bl	80013f4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80056ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6999      	ldr	r1, [r3, #24]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b4a      	ldr	r3, [pc, #296]	; (8005828 <HAL_LTDC_Init+0x19c>)
 8005700:	400b      	ands	r3, r1
 8005702:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6899      	ldr	r1, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699a      	ldr	r2, [r3, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68d9      	ldr	r1, [r3, #12]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <HAL_LTDC_Init+0x19c>)
 800572e:	400b      	ands	r3, r1
 8005730:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	041b      	lsls	r3, r3, #16
 8005738:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68d9      	ldr	r1, [r3, #12]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1a      	ldr	r2, [r3, #32]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6919      	ldr	r1, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b33      	ldr	r3, [pc, #204]	; (8005828 <HAL_LTDC_Init+0x19c>)
 800575c:	400b      	ands	r3, r1
 800575e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	041b      	lsls	r3, r3, #16
 8005766:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6919      	ldr	r1, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	430a      	orrs	r2, r1
 800577c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6959      	ldr	r1, [r3, #20]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <HAL_LTDC_Init+0x19c>)
 800578a:	400b      	ands	r3, r1
 800578c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	041b      	lsls	r3, r3, #16
 8005794:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6959      	ldr	r1, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80057ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0206 	orr.w	r2, r2, #6
 80057fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	f000f800 	.word	0xf000f800

0800582c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d023      	beq.n	8005896 <HAL_LTDC_IRQHandler+0x6a>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01e      	beq.n	8005896 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0204 	bic.w	r2, r2, #4
 8005866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2204      	movs	r2, #4
 800586e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2204      	movs	r2, #4
 8005884:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f86f 	bl	8005974 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d023      	beq.n	80058e8 <HAL_LTDC_IRQHandler+0xbc>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01e      	beq.n	80058e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0202 	bic.w	r2, r2, #2
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2202      	movs	r2, #2
 80058c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058c8:	f043 0202 	orr.w	r2, r3, #2
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2204      	movs	r2, #4
 80058d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f846 	bl	8005974 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01b      	beq.n	800592a <HAL_LTDC_IRQHandler+0xfe>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d016      	beq.n	800592a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0201 	bic.w	r2, r2, #1
 800590a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f82f 	bl	8005988 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f003 0308 	and.w	r3, r3, #8
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01b      	beq.n	800596c <HAL_LTDC_IRQHandler+0x140>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0208 	bic.w	r2, r2, #8
 800594c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2208      	movs	r2, #8
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f818 	bl	800599c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80059b0:	b5b0      	push	{r4, r5, r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_LTDC_ConfigLayer+0x1a>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e02c      	b.n	8005a24 <HAL_LTDC_ConfigLayer+0x74>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2134      	movs	r1, #52	; 0x34
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	4413      	add	r3, r2
 80059e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4614      	mov	r4, r2
 80059ee:	461d      	mov	r5, r3
 80059f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f83b 	bl	8005a80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bdb0      	pop	{r4, r5, r7, pc}

08005a2c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d101      	bne.n	8005a42 <HAL_LTDC_EnableDither+0x16>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e016      	b.n	8005a70 <HAL_LTDC_EnableDither+0x44>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <HAL_LTDC_EnableDither+0x50>)
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <HAL_LTDC_EnableDither+0x50>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	40016800 	.word	0x40016800

08005a80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	; 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a9c:	4413      	add	r3, r2
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	01db      	lsls	r3, r3, #7
 8005aac:	4413      	add	r3, r2
 8005aae:	3384      	adds	r3, #132	; 0x84
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	01d2      	lsls	r2, r2, #7
 8005abc:	440a      	add	r2, r1
 8005abe:	3284      	adds	r2, #132	; 0x84
 8005ac0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ac4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ad6:	4413      	add	r3, r2
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	01db      	lsls	r3, r3, #7
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3384      	adds	r3, #132	; 0x84
 8005ae8:	4619      	mov	r1, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005afe:	4413      	add	r3, r2
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	01db      	lsls	r3, r3, #7
 8005b0e:	4413      	add	r3, r2
 8005b10:	3384      	adds	r3, #132	; 0x84
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	4611      	mov	r1, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	01d2      	lsls	r2, r2, #7
 8005b1e:	440a      	add	r2, r1
 8005b20:	3284      	adds	r2, #132	; 0x84
 8005b22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b36:	4413      	add	r3, r2
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	01db      	lsls	r3, r3, #7
 8005b44:	440b      	add	r3, r1
 8005b46:	3384      	adds	r3, #132	; 0x84
 8005b48:	4619      	mov	r1, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	01db      	lsls	r3, r3, #7
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3384      	adds	r3, #132	; 0x84
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	4611      	mov	r1, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	01d2      	lsls	r2, r2, #7
 8005b6a:	440a      	add	r2, r1
 8005b6c:	3284      	adds	r2, #132	; 0x84
 8005b6e:	f023 0307 	bic.w	r3, r3, #7
 8005b72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	4413      	add	r3, r2
 8005b80:	3384      	adds	r3, #132	; 0x84
 8005b82:	461a      	mov	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	061b      	lsls	r3, r3, #24
 8005ba4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	01db      	lsls	r3, r3, #7
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3384      	adds	r3, #132	; 0x84
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	01db      	lsls	r3, r3, #7
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3384      	adds	r3, #132	; 0x84
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	01db      	lsls	r3, r3, #7
 8005be4:	440b      	add	r3, r1
 8005be6:	3384      	adds	r3, #132	; 0x84
 8005be8:	4619      	mov	r1, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	01db      	lsls	r3, r3, #7
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3384      	adds	r3, #132	; 0x84
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	4611      	mov	r1, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	01d2      	lsls	r2, r2, #7
 8005c0a:	440a      	add	r2, r1
 8005c0c:	3284      	adds	r2, #132	; 0x84
 8005c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c12:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	01db      	lsls	r3, r3, #7
 8005c1e:	4413      	add	r3, r2
 8005c20:	3384      	adds	r3, #132	; 0x84
 8005c22:	461a      	mov	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	01db      	lsls	r3, r3, #7
 8005c34:	4413      	add	r3, r2
 8005c36:	3384      	adds	r3, #132	; 0x84
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	4611      	mov	r1, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	01d2      	lsls	r2, r2, #7
 8005c44:	440a      	add	r2, r1
 8005c46:	3284      	adds	r2, #132	; 0x84
 8005c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c4c:	f023 0307 	bic.w	r3, r3, #7
 8005c50:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	69da      	ldr	r2, [r3, #28]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	6809      	ldr	r1, [r1, #0]
 8005c5e:	4608      	mov	r0, r1
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	01c9      	lsls	r1, r1, #7
 8005c64:	4401      	add	r1, r0
 8005c66:	3184      	adds	r1, #132	; 0x84
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	01db      	lsls	r3, r3, #7
 8005c76:	4413      	add	r3, r2
 8005c78:	3384      	adds	r3, #132	; 0x84
 8005c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	01db      	lsls	r3, r3, #7
 8005c86:	4413      	add	r3, r2
 8005c88:	3384      	adds	r3, #132	; 0x84
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	01db      	lsls	r3, r3, #7
 8005c9a:	4413      	add	r3, r2
 8005c9c:	3384      	adds	r3, #132	; 0x84
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005cae:	2304      	movs	r3, #4
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e01b      	b.n	8005cec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d102      	bne.n	8005cc2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e014      	b.n	8005cec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d00b      	beq.n	8005ce2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d007      	beq.n	8005ce2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d003      	beq.n	8005ce2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005cde:	2b07      	cmp	r3, #7
 8005ce0:	d102      	bne.n	8005ce8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e001      	b.n	8005cec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	01db      	lsls	r3, r3, #7
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3384      	adds	r3, #132	; 0x84
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	4611      	mov	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	01d2      	lsls	r2, r2, #7
 8005d06:	440a      	add	r2, r1
 8005d08:	3284      	adds	r2, #132	; 0x84
 8005d0a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	041a      	lsls	r2, r3, #16
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	1acb      	subs	r3, r1, r3
 8005d26:	69f9      	ldr	r1, [r7, #28]
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	3303      	adds	r3, #3
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	6809      	ldr	r1, [r1, #0]
 8005d32:	4608      	mov	r0, r1
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	01c9      	lsls	r1, r1, #7
 8005d38:	4401      	add	r1, r0
 8005d3a:	3184      	adds	r1, #132	; 0x84
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	461a      	mov	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	01db      	lsls	r3, r3, #7
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3384      	adds	r3, #132	; 0x84
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	6812      	ldr	r2, [r2, #0]
 8005d54:	4611      	mov	r1, r2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	01d2      	lsls	r2, r2, #7
 8005d5a:	440a      	add	r2, r1
 8005d5c:	3284      	adds	r2, #132	; 0x84
 8005d5e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d62:	f023 0307 	bic.w	r3, r3, #7
 8005d66:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	01db      	lsls	r3, r3, #7
 8005d72:	4413      	add	r3, r2
 8005d74:	3384      	adds	r3, #132	; 0x84
 8005d76:	461a      	mov	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	01db      	lsls	r3, r3, #7
 8005d88:	4413      	add	r3, r2
 8005d8a:	3384      	adds	r3, #132	; 0x84
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	4611      	mov	r1, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	01d2      	lsls	r2, r2, #7
 8005d98:	440a      	add	r2, r1
 8005d9a:	3284      	adds	r2, #132	; 0x84
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6013      	str	r3, [r2, #0]
}
 8005da2:	bf00      	nop
 8005da4:	3724      	adds	r7, #36	; 0x24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e25b      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d075      	beq.n	8005eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dce:	4ba3      	ldr	r3, [pc, #652]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d00c      	beq.n	8005df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dda:	4ba0      	ldr	r3, [pc, #640]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d112      	bne.n	8005e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de6:	4b9d      	ldr	r3, [pc, #628]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005df2:	d10b      	bne.n	8005e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df4:	4b99      	ldr	r3, [pc, #612]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d05b      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x108>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d157      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e236      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e14:	d106      	bne.n	8005e24 <HAL_RCC_OscConfig+0x74>
 8005e16:	4b91      	ldr	r3, [pc, #580]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a90      	ldr	r2, [pc, #576]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e01d      	b.n	8005e60 <HAL_RCC_OscConfig+0xb0>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCC_OscConfig+0x98>
 8005e2e:	4b8b      	ldr	r3, [pc, #556]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a8a      	ldr	r2, [pc, #552]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	4b88      	ldr	r3, [pc, #544]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a87      	ldr	r2, [pc, #540]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	e00b      	b.n	8005e60 <HAL_RCC_OscConfig+0xb0>
 8005e48:	4b84      	ldr	r3, [pc, #528]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a83      	ldr	r2, [pc, #524]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	4b81      	ldr	r3, [pc, #516]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a80      	ldr	r2, [pc, #512]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d013      	beq.n	8005e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e68:	f7fc ff20 	bl	8002cac <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e70:	f7fc ff1c 	bl	8002cac <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	; 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e1fb      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e82:	4b76      	ldr	r3, [pc, #472]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCC_OscConfig+0xc0>
 8005e8e:	e014      	b.n	8005eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fc ff0c 	bl	8002cac <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fc ff08 	bl	8002cac <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1e7      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eaa:	4b6c      	ldr	r3, [pc, #432]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0xe8>
 8005eb6:	e000      	b.n	8005eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d063      	beq.n	8005f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ec6:	4b65      	ldr	r3, [pc, #404]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00b      	beq.n	8005eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ed2:	4b62      	ldr	r3, [pc, #392]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d11c      	bne.n	8005f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ede:	4b5f      	ldr	r3, [pc, #380]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d116      	bne.n	8005f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eea:	4b5c      	ldr	r3, [pc, #368]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <HAL_RCC_OscConfig+0x152>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e1bb      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f02:	4b56      	ldr	r3, [pc, #344]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4952      	ldr	r1, [pc, #328]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f16:	e03a      	b.n	8005f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d020      	beq.n	8005f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f20:	4b4f      	ldr	r3, [pc, #316]	; (8006060 <HAL_RCC_OscConfig+0x2b0>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f26:	f7fc fec1 	bl	8002cac <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f2e:	f7fc febd 	bl	8002cac <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e19c      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f40:	4b46      	ldr	r3, [pc, #280]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0f0      	beq.n	8005f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f4c:	4b43      	ldr	r3, [pc, #268]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4940      	ldr	r1, [pc, #256]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	600b      	str	r3, [r1, #0]
 8005f60:	e015      	b.n	8005f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f62:	4b3f      	ldr	r3, [pc, #252]	; (8006060 <HAL_RCC_OscConfig+0x2b0>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fc fea0 	bl	8002cac <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f70:	f7fc fe9c 	bl	8002cac <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e17b      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f82:	4b36      	ldr	r3, [pc, #216]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0308 	and.w	r3, r3, #8
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d030      	beq.n	8005ffc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d016      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa2:	4b30      	ldr	r3, [pc, #192]	; (8006064 <HAL_RCC_OscConfig+0x2b4>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa8:	f7fc fe80 	bl	8002cac <HAL_GetTick>
 8005fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fae:	e008      	b.n	8005fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fb0:	f7fc fe7c 	bl	8002cac <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e15b      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x200>
 8005fce:	e015      	b.n	8005ffc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd0:	4b24      	ldr	r3, [pc, #144]	; (8006064 <HAL_RCC_OscConfig+0x2b4>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd6:	f7fc fe69 	bl	8002cac <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fdc:	e008      	b.n	8005ff0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fde:	f7fc fe65 	bl	8002cac <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e144      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8005ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f0      	bne.n	8005fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80a0 	beq.w	800614a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10f      	bne.n	800603a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	60bb      	str	r3, [r7, #8]
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	4a0e      	ldr	r2, [pc, #56]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6413      	str	r3, [r2, #64]	; 0x40
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCC_OscConfig+0x2ac>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800603a:	4b0b      	ldr	r3, [pc, #44]	; (8006068 <HAL_RCC_OscConfig+0x2b8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006042:	2b00      	cmp	r3, #0
 8006044:	d121      	bne.n	800608a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006046:	4b08      	ldr	r3, [pc, #32]	; (8006068 <HAL_RCC_OscConfig+0x2b8>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a07      	ldr	r2, [pc, #28]	; (8006068 <HAL_RCC_OscConfig+0x2b8>)
 800604c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006052:	f7fc fe2b 	bl	8002cac <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006058:	e011      	b.n	800607e <HAL_RCC_OscConfig+0x2ce>
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	42470000 	.word	0x42470000
 8006064:	42470e80 	.word	0x42470e80
 8006068:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606c:	f7fc fe1e 	bl	8002cac <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0fd      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	4b81      	ldr	r3, [pc, #516]	; (8006284 <HAL_RCC_OscConfig+0x4d4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f0      	beq.n	800606c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d106      	bne.n	80060a0 <HAL_RCC_OscConfig+0x2f0>
 8006092:	4b7d      	ldr	r3, [pc, #500]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006096:	4a7c      	ldr	r2, [pc, #496]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	6713      	str	r3, [r2, #112]	; 0x70
 800609e:	e01c      	b.n	80060da <HAL_RCC_OscConfig+0x32a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d10c      	bne.n	80060c2 <HAL_RCC_OscConfig+0x312>
 80060a8:	4b77      	ldr	r3, [pc, #476]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ac:	4a76      	ldr	r2, [pc, #472]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060ae:	f043 0304 	orr.w	r3, r3, #4
 80060b2:	6713      	str	r3, [r2, #112]	; 0x70
 80060b4:	4b74      	ldr	r3, [pc, #464]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	4a73      	ldr	r2, [pc, #460]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	6713      	str	r3, [r2, #112]	; 0x70
 80060c0:	e00b      	b.n	80060da <HAL_RCC_OscConfig+0x32a>
 80060c2:	4b71      	ldr	r3, [pc, #452]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a70      	ldr	r2, [pc, #448]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
 80060ce:	4b6e      	ldr	r3, [pc, #440]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a6d      	ldr	r2, [pc, #436]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80060d4:	f023 0304 	bic.w	r3, r3, #4
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d015      	beq.n	800610e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e2:	f7fc fde3 	bl	8002cac <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fc fddf 	bl	8002cac <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e0bc      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006100:	4b61      	ldr	r3, [pc, #388]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ee      	beq.n	80060ea <HAL_RCC_OscConfig+0x33a>
 800610c:	e014      	b.n	8006138 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800610e:	f7fc fdcd 	bl	8002cac <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006114:	e00a      	b.n	800612c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006116:	f7fc fdc9 	bl	8002cac <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	f241 3288 	movw	r2, #5000	; 0x1388
 8006124:	4293      	cmp	r3, r2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0a6      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612c:	4b56      	ldr	r3, [pc, #344]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1ee      	bne.n	8006116 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d105      	bne.n	800614a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800613e:	4b52      	ldr	r3, [pc, #328]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4a51      	ldr	r2, [pc, #324]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8092 	beq.w	8006278 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006154:	4b4c      	ldr	r3, [pc, #304]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b08      	cmp	r3, #8
 800615e:	d05c      	beq.n	800621a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d141      	bne.n	80061ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006168:	4b48      	ldr	r3, [pc, #288]	; (800628c <HAL_RCC_OscConfig+0x4dc>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616e:	f7fc fd9d 	bl	8002cac <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006176:	f7fc fd99 	bl	8002cac <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e078      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006188:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f0      	bne.n	8006176 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	019b      	lsls	r3, r3, #6
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	3b01      	subs	r3, #1
 80061ae:	041b      	lsls	r3, r3, #16
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	061b      	lsls	r3, r3, #24
 80061b8:	4933      	ldr	r1, [pc, #204]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061be:	4b33      	ldr	r3, [pc, #204]	; (800628c <HAL_RCC_OscConfig+0x4dc>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fc fd72 	bl	8002cac <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061cc:	f7fc fd6e 	bl	8002cac <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e04d      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061de:	4b2a      	ldr	r3, [pc, #168]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f0      	beq.n	80061cc <HAL_RCC_OscConfig+0x41c>
 80061ea:	e045      	b.n	8006278 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ec:	4b27      	ldr	r3, [pc, #156]	; (800628c <HAL_RCC_OscConfig+0x4dc>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fc fd5b 	bl	8002cac <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fc fd57 	bl	8002cac <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e036      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f0      	bne.n	80061fa <HAL_RCC_OscConfig+0x44a>
 8006218:	e02e      	b.n	8006278 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e029      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006226:	4b18      	ldr	r3, [pc, #96]	; (8006288 <HAL_RCC_OscConfig+0x4d8>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	429a      	cmp	r2, r3
 8006238:	d11c      	bne.n	8006274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d115      	bne.n	8006274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800624e:	4013      	ands	r3, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006254:	4293      	cmp	r3, r2
 8006256:	d10d      	bne.n	8006274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d106      	bne.n	8006274 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40007000 	.word	0x40007000
 8006288:	40023800 	.word	0x40023800
 800628c:	42470060 	.word	0x42470060

08006290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0cc      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062a4:	4b68      	ldr	r3, [pc, #416]	; (8006448 <HAL_RCC_ClockConfig+0x1b8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d90c      	bls.n	80062cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b2:	4b65      	ldr	r3, [pc, #404]	; (8006448 <HAL_RCC_ClockConfig+0x1b8>)
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b63      	ldr	r3, [pc, #396]	; (8006448 <HAL_RCC_ClockConfig+0x1b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d001      	beq.n	80062cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0b8      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d020      	beq.n	800631a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062e4:	4b59      	ldr	r3, [pc, #356]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	4a58      	ldr	r2, [pc, #352]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062fc:	4b53      	ldr	r3, [pc, #332]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4a52      	ldr	r2, [pc, #328]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006308:	4b50      	ldr	r3, [pc, #320]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	494d      	ldr	r1, [pc, #308]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d044      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d107      	bne.n	800633e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632e:	4b47      	ldr	r3, [pc, #284]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d119      	bne.n	800636e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e07f      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d003      	beq.n	800634e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800634a:	2b03      	cmp	r3, #3
 800634c:	d107      	bne.n	800635e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800634e:	4b3f      	ldr	r3, [pc, #252]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e06f      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800635e:	4b3b      	ldr	r3, [pc, #236]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e067      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800636e:	4b37      	ldr	r3, [pc, #220]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 0203 	bic.w	r2, r3, #3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	4934      	ldr	r1, [pc, #208]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	4313      	orrs	r3, r2
 800637e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006380:	f7fc fc94 	bl	8002cac <HAL_GetTick>
 8006384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006386:	e00a      	b.n	800639e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006388:	f7fc fc90 	bl	8002cac <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f241 3288 	movw	r2, #5000	; 0x1388
 8006396:	4293      	cmp	r3, r2
 8006398:	d901      	bls.n	800639e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e04f      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639e:	4b2b      	ldr	r3, [pc, #172]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 020c 	and.w	r2, r3, #12
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d1eb      	bne.n	8006388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063b0:	4b25      	ldr	r3, [pc, #148]	; (8006448 <HAL_RCC_ClockConfig+0x1b8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d20c      	bcs.n	80063d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063be:	4b22      	ldr	r3, [pc, #136]	; (8006448 <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063c6:	4b20      	ldr	r3, [pc, #128]	; (8006448 <HAL_RCC_ClockConfig+0x1b8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d001      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e032      	b.n	800643e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d008      	beq.n	80063f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063e4:	4b19      	ldr	r3, [pc, #100]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4916      	ldr	r1, [pc, #88]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d009      	beq.n	8006416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006402:	4b12      	ldr	r3, [pc, #72]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	490e      	ldr	r1, [pc, #56]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	4313      	orrs	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006416:	f000 f821 	bl	800645c <HAL_RCC_GetSysClockFreq>
 800641a:	4601      	mov	r1, r0
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	091b      	lsrs	r3, r3, #4
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <HAL_RCC_ClockConfig+0x1c0>)
 8006428:	5cd3      	ldrb	r3, [r2, r3]
 800642a:	fa21 f303 	lsr.w	r3, r1, r3
 800642e:	4a09      	ldr	r2, [pc, #36]	; (8006454 <HAL_RCC_ClockConfig+0x1c4>)
 8006430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fb fa8c 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40023c00 	.word	0x40023c00
 800644c:	40023800 	.word	0x40023800
 8006450:	0800a1ac 	.word	0x0800a1ac
 8006454:	20000000 	.word	0x20000000
 8006458:	2000004c 	.word	0x2000004c

0800645c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800645c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	2300      	movs	r3, #0
 800646c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006472:	4b63      	ldr	r3, [pc, #396]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	2b04      	cmp	r3, #4
 800647c:	d007      	beq.n	800648e <HAL_RCC_GetSysClockFreq+0x32>
 800647e:	2b08      	cmp	r3, #8
 8006480:	d008      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0x38>
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 80b4 	bne.w	80065f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006488:	4b5e      	ldr	r3, [pc, #376]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800648a:	60bb      	str	r3, [r7, #8]
       break;
 800648c:	e0b3      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800648e:	4b5e      	ldr	r3, [pc, #376]	; (8006608 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006490:	60bb      	str	r3, [r7, #8]
      break;
 8006492:	e0b0      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006494:	4b5a      	ldr	r3, [pc, #360]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800649e:	4b58      	ldr	r3, [pc, #352]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d04a      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064aa:	4b55      	ldr	r3, [pc, #340]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	ea03 0501 	and.w	r5, r3, r1
 80064c0:	ea04 0602 	and.w	r6, r4, r2
 80064c4:	4629      	mov	r1, r5
 80064c6:	4632      	mov	r2, r6
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	f04f 0400 	mov.w	r4, #0
 80064d0:	0154      	lsls	r4, r2, #5
 80064d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064d6:	014b      	lsls	r3, r1, #5
 80064d8:	4619      	mov	r1, r3
 80064da:	4622      	mov	r2, r4
 80064dc:	1b49      	subs	r1, r1, r5
 80064de:	eb62 0206 	sbc.w	r2, r2, r6
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	f04f 0400 	mov.w	r4, #0
 80064ea:	0194      	lsls	r4, r2, #6
 80064ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064f0:	018b      	lsls	r3, r1, #6
 80064f2:	1a5b      	subs	r3, r3, r1
 80064f4:	eb64 0402 	sbc.w	r4, r4, r2
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	00e2      	lsls	r2, r4, #3
 8006502:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006506:	00d9      	lsls	r1, r3, #3
 8006508:	460b      	mov	r3, r1
 800650a:	4614      	mov	r4, r2
 800650c:	195b      	adds	r3, r3, r5
 800650e:	eb44 0406 	adc.w	r4, r4, r6
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	0262      	lsls	r2, r4, #9
 800651c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006520:	0259      	lsls	r1, r3, #9
 8006522:	460b      	mov	r3, r1
 8006524:	4614      	mov	r4, r2
 8006526:	4618      	mov	r0, r3
 8006528:	4621      	mov	r1, r4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f04f 0400 	mov.w	r4, #0
 8006530:	461a      	mov	r2, r3
 8006532:	4623      	mov	r3, r4
 8006534:	f7f9 fe5c 	bl	80001f0 <__aeabi_uldivmod>
 8006538:	4603      	mov	r3, r0
 800653a:	460c      	mov	r4, r1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	e049      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006540:	4b2f      	ldr	r3, [pc, #188]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	f04f 0400 	mov.w	r4, #0
 800654a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	ea03 0501 	and.w	r5, r3, r1
 8006556:	ea04 0602 	and.w	r6, r4, r2
 800655a:	4629      	mov	r1, r5
 800655c:	4632      	mov	r2, r6
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	f04f 0400 	mov.w	r4, #0
 8006566:	0154      	lsls	r4, r2, #5
 8006568:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800656c:	014b      	lsls	r3, r1, #5
 800656e:	4619      	mov	r1, r3
 8006570:	4622      	mov	r2, r4
 8006572:	1b49      	subs	r1, r1, r5
 8006574:	eb62 0206 	sbc.w	r2, r2, r6
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	f04f 0400 	mov.w	r4, #0
 8006580:	0194      	lsls	r4, r2, #6
 8006582:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006586:	018b      	lsls	r3, r1, #6
 8006588:	1a5b      	subs	r3, r3, r1
 800658a:	eb64 0402 	sbc.w	r4, r4, r2
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	f04f 0200 	mov.w	r2, #0
 8006596:	00e2      	lsls	r2, r4, #3
 8006598:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800659c:	00d9      	lsls	r1, r3, #3
 800659e:	460b      	mov	r3, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	195b      	adds	r3, r3, r5
 80065a4:	eb44 0406 	adc.w	r4, r4, r6
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	02a2      	lsls	r2, r4, #10
 80065b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80065b6:	0299      	lsls	r1, r3, #10
 80065b8:	460b      	mov	r3, r1
 80065ba:	4614      	mov	r4, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	4621      	mov	r1, r4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f04f 0400 	mov.w	r4, #0
 80065c6:	461a      	mov	r2, r3
 80065c8:	4623      	mov	r3, r4
 80065ca:	f7f9 fe11 	bl	80001f0 <__aeabi_uldivmod>
 80065ce:	4603      	mov	r3, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065d4:	4b0a      	ldr	r3, [pc, #40]	; (8006600 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	3301      	adds	r3, #1
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	60bb      	str	r3, [r7, #8]
      break;
 80065ee:	e002      	b.n	80065f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80065f2:	60bb      	str	r3, [r7, #8]
      break;
 80065f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f6:	68bb      	ldr	r3, [r7, #8]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006600:	40023800 	.word	0x40023800
 8006604:	00f42400 	.word	0x00f42400
 8006608:	007a1200 	.word	0x007a1200

0800660c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006610:	4b03      	ldr	r3, [pc, #12]	; (8006620 <HAL_RCC_GetHCLKFreq+0x14>)
 8006612:	681b      	ldr	r3, [r3, #0]
}
 8006614:	4618      	mov	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000000 	.word	0x20000000

08006624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006628:	f7ff fff0 	bl	800660c <HAL_RCC_GetHCLKFreq>
 800662c:	4601      	mov	r1, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0a9b      	lsrs	r3, r3, #10
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4a03      	ldr	r2, [pc, #12]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800663a:	5cd3      	ldrb	r3, [r2, r3]
 800663c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800a1bc 	.word	0x0800a1bc

0800664c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006650:	f7ff ffdc 	bl	800660c <HAL_RCC_GetHCLKFreq>
 8006654:	4601      	mov	r1, r0
 8006656:	4b05      	ldr	r3, [pc, #20]	; (800666c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0b5b      	lsrs	r3, r3, #13
 800665c:	f003 0307 	and.w	r3, r3, #7
 8006660:	4a03      	ldr	r2, [pc, #12]	; (8006670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006662:	5cd3      	ldrb	r3, [r2, r3]
 8006664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40023800 	.word	0x40023800
 8006670:	0800a1bc 	.word	0x0800a1bc

08006674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	220f      	movs	r2, #15
 8006682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0203 	and.w	r2, r3, #3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006690:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800669c:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	08db      	lsrs	r3, r3, #3
 80066ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <HAL_RCC_GetClockConfig+0x60>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	601a      	str	r2, [r3, #0]
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40023800 	.word	0x40023800
 80066d4:	40023c00 	.word	0x40023c00

080066d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10b      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006708:	2b00      	cmp	r3, #0
 800670a:	d075      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800670c:	4bad      	ldr	r3, [pc, #692]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006712:	f7fc facb 	bl	8002cac <HAL_GetTick>
 8006716:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006718:	e008      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800671a:	f7fc fac7 	bl	8002cac <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e18b      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800672c:	4ba6      	ldr	r3, [pc, #664]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1f0      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d009      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	019a      	lsls	r2, r3, #6
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	071b      	lsls	r3, r3, #28
 8006750:	499d      	ldr	r1, [pc, #628]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01f      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006764:	4b98      	ldr	r3, [pc, #608]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676a:	0f1b      	lsrs	r3, r3, #28
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	019a      	lsls	r2, r3, #6
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	061b      	lsls	r3, r3, #24
 800677e:	431a      	orrs	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	071b      	lsls	r3, r3, #28
 8006784:	4990      	ldr	r1, [pc, #576]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800678c:	4b8e      	ldr	r3, [pc, #568]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800678e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006792:	f023 021f 	bic.w	r2, r3, #31
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	3b01      	subs	r3, #1
 800679c:	498a      	ldr	r1, [pc, #552]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00d      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	019a      	lsls	r2, r3, #6
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	061b      	lsls	r3, r3, #24
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	071b      	lsls	r3, r3, #28
 80067c4:	4980      	ldr	r1, [pc, #512]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067cc:	4b7d      	ldr	r3, [pc, #500]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067d2:	f7fc fa6b 	bl	8002cac <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067da:	f7fc fa67 	bl	8002cac <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e12b      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067ec:	4b76      	ldr	r3, [pc, #472]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	2b00      	cmp	r3, #0
 8006802:	d105      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800680c:	2b00      	cmp	r3, #0
 800680e:	d079      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006810:	4b6e      	ldr	r3, [pc, #440]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006812:	2200      	movs	r2, #0
 8006814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006816:	f7fc fa49 	bl	8002cac <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800681c:	e008      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800681e:	f7fc fa45 	bl	8002cac <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e109      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006830:	4b65      	ldr	r3, [pc, #404]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800683c:	d0ef      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d020      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800684a:	4b5f      	ldr	r3, [pc, #380]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006850:	0f1b      	lsrs	r3, r3, #28
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	019a      	lsls	r2, r3, #6
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	061b      	lsls	r3, r3, #24
 8006864:	431a      	orrs	r2, r3
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	071b      	lsls	r3, r3, #28
 800686a:	4957      	ldr	r1, [pc, #348]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006872:	4b55      	ldr	r3, [pc, #340]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	3b01      	subs	r3, #1
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	4950      	ldr	r1, [pc, #320]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01e      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006898:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	019a      	lsls	r2, r3, #6
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	071b      	lsls	r3, r3, #28
 80068b8:	4943      	ldr	r1, [pc, #268]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80068c0:	4b41      	ldr	r3, [pc, #260]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	493e      	ldr	r1, [pc, #248]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80068d6:	4b3d      	ldr	r3, [pc, #244]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80068d8:	2201      	movs	r2, #1
 80068da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068dc:	f7fc f9e6 	bl	8002cac <HAL_GetTick>
 80068e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068e2:	e008      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068e4:	f7fc f9e2 	bl	8002cac <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e0a6      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80068f6:	4b34      	ldr	r3, [pc, #208]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006902:	d1ef      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 808d 	beq.w	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4b2c      	ldr	r3, [pc, #176]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	4a2b      	ldr	r2, [pc, #172]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800691c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006920:	6413      	str	r3, [r2, #64]	; 0x40
 8006922:	4b29      	ldr	r3, [pc, #164]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800692e:	4b28      	ldr	r3, [pc, #160]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a27      	ldr	r2, [pc, #156]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006938:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800693a:	f7fc f9b7 	bl	8002cac <HAL_GetTick>
 800693e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006942:	f7fc f9b3 	bl	8002cac <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d901      	bls.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e077      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006954:	4b1e      	ldr	r3, [pc, #120]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d0f0      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006960:	4b19      	ldr	r3, [pc, #100]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006968:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d039      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	429a      	cmp	r2, r3
 800697c:	d032      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800697e:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006986:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006988:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006994:	4a0c      	ldr	r2, [pc, #48]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d11e      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80069a6:	f7fc f981 	bl	8002cac <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ac:	e014      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f7fc f97d 	bl	8002cac <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069bc:	4293      	cmp	r3, r2
 80069be:	d90b      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e03f      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80069c4:	42470068 	.word	0x42470068
 80069c8:	40023800 	.word	0x40023800
 80069cc:	42470070 	.word	0x42470070
 80069d0:	40007000 	.word	0x40007000
 80069d4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0e4      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x336>
 80069f2:	4b16      	ldr	r3, [pc, #88]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a06:	4911      	ldr	r1, [pc, #68]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	608b      	str	r3, [r1, #8]
 8006a0c:	e005      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006a0e:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a26:	4909      	ldr	r1, [pc, #36]	; (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	424711e0 	.word	0x424711e0

08006a54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e025      	b.n	8006ab4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fa fa35 	bl	8000eec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f001 fdb1 	bl	80085fc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	f001 fe1c 	bl	80086e2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d101      	bne.n	8006ad8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e018      	b.n	8006b0a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f001 fe79 	bl	80087e0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d104      	bne.n	8006b00 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2205      	movs	r2, #5
 8006afa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006afe:	e003      	b.n	8006b08 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d101      	bne.n	8006b2c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e00e      	b.n	8006b4a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 fe8c 	bl	8008858 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e056      	b.n	8006c12 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fa fe56 	bl	8001830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	431a      	orrs	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	ea42 0103 	orr.w	r1, r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	f003 0104 	and.w	r1, r3, #4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e01a      	b.n	8006c62 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c42:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fa fe3b 	bl	80018c0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b088      	sub	sp, #32
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d101      	bne.n	8006c8c <HAL_SPI_Transmit+0x22>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	e11e      	b.n	8006eca <HAL_SPI_Transmit+0x260>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c94:	f7fc f80a 	bl	8002cac <HAL_GetTick>
 8006c98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d002      	beq.n	8006cb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
 8006cac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cae:	e103      	b.n	8006eb8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_SPI_Transmit+0x52>
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cc0:	e0fa      	b.n	8006eb8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	88fa      	ldrh	r2, [r7, #6]
 8006cda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	88fa      	ldrh	r2, [r7, #6]
 8006ce0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d08:	d107      	bne.n	8006d1a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d007      	beq.n	8006d38 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d40:	d14b      	bne.n	8006dda <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <HAL_SPI_Transmit+0xe6>
 8006d4a:	8afb      	ldrh	r3, [r7, #22]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d13e      	bne.n	8006dce <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	1c9a      	adds	r2, r3, #2
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d74:	e02b      	b.n	8006dce <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d112      	bne.n	8006daa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	881a      	ldrh	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006da8:	e011      	b.n	8006dce <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006daa:	f7fb ff7f 	bl	8002cac <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d803      	bhi.n	8006dc2 <HAL_SPI_Transmit+0x158>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d102      	bne.n	8006dc8 <HAL_SPI_Transmit+0x15e>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dcc:	e074      	b.n	8006eb8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ce      	bne.n	8006d76 <HAL_SPI_Transmit+0x10c>
 8006dd8:	e04c      	b.n	8006e74 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <HAL_SPI_Transmit+0x17e>
 8006de2:	8afb      	ldrh	r3, [r7, #22]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d140      	bne.n	8006e6a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	1c5a      	adds	r2, r3, #1
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e0e:	e02c      	b.n	8006e6a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d113      	bne.n	8006e46 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	330c      	adds	r3, #12
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e44:	e011      	b.n	8006e6a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e46:	f7fb ff31 	bl	8002cac <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d803      	bhi.n	8006e5e <HAL_SPI_Transmit+0x1f4>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d102      	bne.n	8006e64 <HAL_SPI_Transmit+0x1fa>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e68:	e026      	b.n	8006eb8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1cd      	bne.n	8006e10 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fbb3 	bl	80075e4 <SPI_EndRxTxTransaction>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e000      	b.n	8006eb8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006eb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af02      	add	r7, sp, #8
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	60b9      	str	r1, [r7, #8]
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eee:	d112      	bne.n	8006f16 <HAL_SPI_Receive+0x44>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10e      	bne.n	8006f16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2204      	movs	r2, #4
 8006efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f00:	88fa      	ldrh	r2, [r7, #6]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4613      	mov	r3, r2
 8006f08:	68ba      	ldr	r2, [r7, #8]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f8e9 	bl	80070e4 <HAL_SPI_TransmitReceive>
 8006f12:	4603      	mov	r3, r0
 8006f14:	e0e2      	b.n	80070dc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d101      	bne.n	8006f24 <HAL_SPI_Receive+0x52>
 8006f20:	2302      	movs	r3, #2
 8006f22:	e0db      	b.n	80070dc <HAL_SPI_Receive+0x20a>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f2c:	f7fb febe 	bl	8002cac <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d002      	beq.n	8006f44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f3e:	2302      	movs	r3, #2
 8006f40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f42:	e0c2      	b.n	80070ca <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_SPI_Receive+0x7e>
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f54:	e0b9      	b.n	80070ca <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f9c:	d107      	bne.n	8006fae <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb8:	2b40      	cmp	r3, #64	; 0x40
 8006fba:	d007      	beq.n	8006fcc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d162      	bne.n	800709a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006fd4:	e02e      	b.n	8007034 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d115      	bne.n	8007010 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f103 020c 	add.w	r2, r3, #12
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	7812      	ldrb	r2, [r2, #0]
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800700e:	e011      	b.n	8007034 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007010:	f7fb fe4c 	bl	8002cac <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d803      	bhi.n	8007028 <HAL_SPI_Receive+0x156>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007026:	d102      	bne.n	800702e <HAL_SPI_Receive+0x15c>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007032:	e04a      	b.n	80070ca <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1cb      	bne.n	8006fd6 <HAL_SPI_Receive+0x104>
 800703e:	e031      	b.n	80070a4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	d113      	bne.n	8007076 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	b292      	uxth	r2, r2
 800705a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	1c9a      	adds	r2, r3, #2
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007074:	e011      	b.n	800709a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007076:	f7fb fe19 	bl	8002cac <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d803      	bhi.n	800708e <HAL_SPI_Receive+0x1bc>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d102      	bne.n	8007094 <HAL_SPI_Receive+0x1c2>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007098:	e017      	b.n	80070ca <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1cd      	bne.n	8007040 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fa35 	bl	8007518 <SPI_EndRxTransaction>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	75fb      	strb	r3, [r7, #23]
 80070c6:	e000      	b.n	80070ca <HAL_SPI_Receive+0x1f8>
  }

error :
 80070c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08c      	sub	sp, #48	; 0x30
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070f2:	2301      	movs	r3, #1
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_SPI_TransmitReceive+0x26>
 8007106:	2302      	movs	r3, #2
 8007108:	e18a      	b.n	8007420 <HAL_SPI_TransmitReceive+0x33c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007112:	f7fb fdcb 	bl	8002cac <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007128:	887b      	ldrh	r3, [r7, #2]
 800712a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800712c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007130:	2b01      	cmp	r3, #1
 8007132:	d00f      	beq.n	8007154 <HAL_SPI_TransmitReceive+0x70>
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800713a:	d107      	bne.n	800714c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <HAL_SPI_TransmitReceive+0x68>
 8007144:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007148:	2b04      	cmp	r3, #4
 800714a:	d003      	beq.n	8007154 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800714c:	2302      	movs	r3, #2
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007152:	e15b      	b.n	800740c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x82>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_SPI_TransmitReceive+0x82>
 8007160:	887b      	ldrh	r3, [r7, #2]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800716c:	e14e      	b.n	800740c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b04      	cmp	r3, #4
 8007178:	d003      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2205      	movs	r2, #5
 800717e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	887a      	ldrh	r2, [r7, #2]
 8007192:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	887a      	ldrh	r2, [r7, #2]
 8007198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	887a      	ldrh	r2, [r7, #2]
 80071a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	887a      	ldrh	r2, [r7, #2]
 80071aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d007      	beq.n	80071d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071de:	d178      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x10a>
 80071e8:	8b7b      	ldrh	r3, [r7, #26]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d166      	bne.n	80072bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	881a      	ldrh	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	1c9a      	adds	r2, r3, #2
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29a      	uxth	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007212:	e053      	b.n	80072bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d11b      	bne.n	800725a <HAL_SPI_TransmitReceive+0x176>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d016      	beq.n	800725a <HAL_SPI_TransmitReceive+0x176>
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2b01      	cmp	r3, #1
 8007230:	d113      	bne.n	800725a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	881a      	ldrh	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	1c9a      	adds	r2, r3, #2
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724c:	b29b      	uxth	r3, r3
 800724e:	3b01      	subs	r3, #1
 8007250:	b29a      	uxth	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d119      	bne.n	800729c <HAL_SPI_TransmitReceive+0x1b8>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d014      	beq.n	800729c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	b292      	uxth	r2, r2
 800727e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007298:	2301      	movs	r3, #1
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800729c:	f7fb fd06 	bl	8002cac <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d807      	bhi.n	80072bc <HAL_SPI_TransmitReceive+0x1d8>
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d003      	beq.n	80072bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072ba:	e0a7      	b.n	800740c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1a6      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x130>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1a1      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x130>
 80072d0:	e07c      	b.n	80073cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_SPI_TransmitReceive+0x1fc>
 80072da:	8b7b      	ldrh	r3, [r7, #26]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d16b      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007306:	e057      	b.n	80073b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b02      	cmp	r3, #2
 8007314:	d11c      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x26c>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d017      	beq.n	8007350 <HAL_SPI_TransmitReceive+0x26c>
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d114      	bne.n	8007350 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	330c      	adds	r3, #12
 8007330:	7812      	ldrb	r2, [r2, #0]
 8007332:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	d119      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x2ae>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007362:	b29b      	uxth	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d014      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68da      	ldr	r2, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800738e:	2301      	movs	r3, #1
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007392:	f7fb fc8b 	bl	8002cac <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800739e:	429a      	cmp	r2, r3
 80073a0:	d803      	bhi.n	80073aa <HAL_SPI_TransmitReceive+0x2c6>
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d102      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x2cc>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d103      	bne.n	80073b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073b6:	e029      	b.n	800740c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1a2      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x224>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d19d      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 f907 	bl	80075e4 <SPI_EndRxTxTransaction>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d006      	beq.n	80073ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80073e8:	e010      	b.n	800740c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	e000      	b.n	800740c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800740a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800741c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007420:	4618      	mov	r0, r3
 8007422:	3730      	adds	r7, #48	; 0x30
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007436:	b2db      	uxtb	r3, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	4613      	mov	r3, r2
 8007452:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007454:	e04c      	b.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d048      	beq.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800745e:	f7fb fc25 	bl	8002cac <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d902      	bls.n	8007474 <SPI_WaitFlagStateUntilTimeout+0x30>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d13d      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800748c:	d111      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007496:	d004      	beq.n	80074a2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074a0:	d107      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ba:	d10f      	bne.n	80074dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e00f      	b.n	8007510 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4013      	ands	r3, r2
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	429a      	cmp	r2, r3
 800750c:	d1a3      	bne.n	8007456 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752c:	d111      	bne.n	8007552 <SPI_EndRxTransaction+0x3a>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	d004      	beq.n	8007542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007540:	d107      	bne.n	8007552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800755a:	d12a      	bne.n	80075b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007564:	d012      	beq.n	800758c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2200      	movs	r2, #0
 800756e:	2180      	movs	r1, #128	; 0x80
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f7ff ff67 	bl	8007444 <SPI_WaitFlagStateUntilTimeout>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	f043 0220 	orr.w	r2, r3, #32
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e026      	b.n	80075da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	2101      	movs	r1, #1
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff ff54 	bl	8007444 <SPI_WaitFlagStateUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01a      	beq.n	80075d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a6:	f043 0220 	orr.w	r2, r3, #32
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e013      	b.n	80075da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	2101      	movs	r1, #1
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ff41 	bl	8007444 <SPI_WaitFlagStateUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d007      	beq.n	80075d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	f043 0220 	orr.w	r2, r3, #32
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e000      	b.n	80075da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
	...

080075e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80075f0:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <SPI_EndRxTxTransaction+0x7c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1b      	ldr	r2, [pc, #108]	; (8007664 <SPI_EndRxTxTransaction+0x80>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	0d5b      	lsrs	r3, r3, #21
 80075fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007600:	fb02 f303 	mul.w	r3, r2, r3
 8007604:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800760e:	d112      	bne.n	8007636 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff ff12 	bl	8007444 <SPI_WaitFlagStateUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d016      	beq.n	8007654 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f043 0220 	orr.w	r2, r3, #32
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e00f      	b.n	8007656 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	3b01      	subs	r3, #1
 8007640:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d0f2      	beq.n	8007636 <SPI_EndRxTxTransaction+0x52>
 8007650:	e000      	b.n	8007654 <SPI_EndRxTxTransaction+0x70>
        break;
 8007652:	bf00      	nop
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000000 	.word	0x20000000
 8007664:	165e9f81 	.word	0x165e9f81

08007668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e01d      	b.n	80076b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d106      	bne.n	8007694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fa fa62 	bl	8001b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f000 fa14 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b06      	cmp	r3, #6
 80076e6:	d007      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0201 	orr.w	r2, r2, #1
 80076f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b02      	cmp	r3, #2
 800771a:	d122      	bne.n	8007762 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d11b      	bne.n	8007762 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f06f 0202 	mvn.w	r2, #2
 8007732:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f9a5 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 800774e:	e005      	b.n	800775c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f997 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9a8 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b04      	cmp	r3, #4
 800776e:	d122      	bne.n	80077b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b04      	cmp	r3, #4
 800777c:	d11b      	bne.n	80077b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f06f 0204 	mvn.w	r2, #4
 8007786:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f97b 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80077a2:	e005      	b.n	80077b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f96d 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f97e 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d122      	bne.n	800780a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d11b      	bne.n	800780a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f06f 0208 	mvn.w	r2, #8
 80077da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2204      	movs	r2, #4
 80077e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f951 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80077f6:	e005      	b.n	8007804 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f943 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f954 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f003 0310 	and.w	r3, r3, #16
 8007814:	2b10      	cmp	r3, #16
 8007816:	d122      	bne.n	800785e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b10      	cmp	r3, #16
 8007824:	d11b      	bne.n	800785e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0210 	mvn.w	r2, #16
 800782e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2208      	movs	r2, #8
 8007834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007840:	2b00      	cmp	r3, #0
 8007842:	d003      	beq.n	800784c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f927 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 800784a:	e005      	b.n	8007858 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f919 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f92a 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b01      	cmp	r3, #1
 800786a:	d10e      	bne.n	800788a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b01      	cmp	r3, #1
 8007878:	d107      	bne.n	800788a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f06f 0201 	mvn.w	r2, #1
 8007882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7f9 ff81 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d10e      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d107      	bne.n	80078b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 facf 	bl	8007e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d10e      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d107      	bne.n	80078e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8ef 	bl	8007ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d10e      	bne.n	800790e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d107      	bne.n	800790e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0220 	mvn.w	r2, #32
 8007906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fa99 	bl	8007e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_TIM_ConfigClockSource+0x18>
 800792a:	2302      	movs	r3, #2
 800792c:	e0a6      	b.n	8007a7c <HAL_TIM_ConfigClockSource+0x166>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800794c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007954:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d067      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x120>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d80b      	bhi.n	8007982 <HAL_TIM_ConfigClockSource+0x6c>
 800796a:	2b10      	cmp	r3, #16
 800796c:	d073      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x140>
 800796e:	2b10      	cmp	r3, #16
 8007970:	d802      	bhi.n	8007978 <HAL_TIM_ConfigClockSource+0x62>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d06f      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007976:	e078      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007978:	2b20      	cmp	r3, #32
 800797a:	d06c      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x140>
 800797c:	2b30      	cmp	r3, #48	; 0x30
 800797e:	d06a      	beq.n	8007a56 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007980:	e073      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007982:	2b70      	cmp	r3, #112	; 0x70
 8007984:	d00d      	beq.n	80079a2 <HAL_TIM_ConfigClockSource+0x8c>
 8007986:	2b70      	cmp	r3, #112	; 0x70
 8007988:	d804      	bhi.n	8007994 <HAL_TIM_ConfigClockSource+0x7e>
 800798a:	2b50      	cmp	r3, #80	; 0x50
 800798c:	d033      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0xe0>
 800798e:	2b60      	cmp	r3, #96	; 0x60
 8007990:	d041      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007992:	e06a      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007998:	d066      	beq.n	8007a68 <HAL_TIM_ConfigClockSource+0x152>
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799e:	d017      	beq.n	80079d0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80079a0:	e063      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6899      	ldr	r1, [r3, #8]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f000 f9a9 	bl	8007d08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	609a      	str	r2, [r3, #8]
      break;
 80079ce:	e04c      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6899      	ldr	r1, [r3, #8]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f000 f992 	bl	8007d08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f2:	609a      	str	r2, [r3, #8]
      break;
 80079f4:	e039      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 f906 	bl	8007c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2150      	movs	r1, #80	; 0x50
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 f95f 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a14:	e029      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 f925 	bl	8007c72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2160      	movs	r1, #96	; 0x60
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f94f 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a34:	e019      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	6859      	ldr	r1, [r3, #4]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f000 f8e6 	bl	8007c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2140      	movs	r1, #64	; 0x40
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f93f 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a54:	e009      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f000 f936 	bl	8007cd2 <TIM_ITRx_SetConfig>
      break;
 8007a66:	e000      	b.n	8007a6a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007a68:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a40      	ldr	r2, [pc, #256]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af2:	d00f      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a3d      	ldr	r2, [pc, #244]	; (8007bec <TIM_Base_SetConfig+0x118>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a3c      	ldr	r2, [pc, #240]	; (8007bf0 <TIM_Base_SetConfig+0x11c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a3b      	ldr	r2, [pc, #236]	; (8007bf4 <TIM_Base_SetConfig+0x120>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a3a      	ldr	r2, [pc, #232]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2f      	ldr	r2, [pc, #188]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b34:	d027      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	; (8007bec <TIM_Base_SetConfig+0x118>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d023      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	; (8007bf0 <TIM_Base_SetConfig+0x11c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2a      	ldr	r2, [pc, #168]	; (8007bf4 <TIM_Base_SetConfig+0x120>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d01b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d017      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a28      	ldr	r2, [pc, #160]	; (8007bfc <TIM_Base_SetConfig+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <TIM_Base_SetConfig+0x12c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <TIM_Base_SetConfig+0x130>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a25      	ldr	r2, [pc, #148]	; (8007c08 <TIM_Base_SetConfig+0x134>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <TIM_Base_SetConfig+0x138>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a23      	ldr	r2, [pc, #140]	; (8007c10 <TIM_Base_SetConfig+0x13c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d108      	bne.n	8007b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <TIM_Base_SetConfig+0x114>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0xf8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <TIM_Base_SetConfig+0x124>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d103      	bne.n	8007bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	615a      	str	r2, [r3, #20]
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40010000 	.word	0x40010000
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40010400 	.word	0x40010400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	40001800 	.word	0x40001800
 8007c0c:	40001c00 	.word	0x40001c00
 8007c10:	40002000 	.word	0x40002000

08007c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a1b      	ldr	r3, [r3, #32]
 8007c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f023 0201 	bic.w	r2, r3, #1
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f023 030a 	bic.w	r3, r3, #10
 8007c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	621a      	str	r2, [r3, #32]
}
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b087      	sub	sp, #28
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0210 	bic.w	r2, r3, #16
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	031b      	lsls	r3, r3, #12
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	697a      	ldr	r2, [r7, #20]
 8007cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f043 0307 	orr.w	r3, r3, #7
 8007cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	609a      	str	r2, [r3, #8]
}
 8007cfc:	bf00      	nop
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	021a      	lsls	r2, r3, #8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	609a      	str	r2, [r3, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e05a      	b.n	8007e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dac:	d01d      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10c      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40001800 	.word	0x40001800

08007e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e03f      	b.n	8007efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7f9 feae 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2224      	movs	r2, #36	; 0x24
 8007e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f829 	bl	8007f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3708      	adds	r7, #8
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
	...

08007f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689a      	ldr	r2, [r3, #8]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007f46:	f023 030c 	bic.w	r3, r3, #12
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	68f9      	ldr	r1, [r7, #12]
 8007f50:	430b      	orrs	r3, r1
 8007f52:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f72:	f040 818b 	bne.w	800828c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4ac1      	ldr	r2, [pc, #772]	; (8008280 <UART_SetConfig+0x37c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d005      	beq.n	8007f8c <UART_SetConfig+0x88>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4abf      	ldr	r2, [pc, #764]	; (8008284 <UART_SetConfig+0x380>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	f040 80bd 	bne.w	8008106 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f8c:	f7fe fb5e 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 8007f90:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	461d      	mov	r5, r3
 8007f96:	f04f 0600 	mov.w	r6, #0
 8007f9a:	46a8      	mov	r8, r5
 8007f9c:	46b1      	mov	r9, r6
 8007f9e:	eb18 0308 	adds.w	r3, r8, r8
 8007fa2:	eb49 0409 	adc.w	r4, r9, r9
 8007fa6:	4698      	mov	r8, r3
 8007fa8:	46a1      	mov	r9, r4
 8007faa:	eb18 0805 	adds.w	r8, r8, r5
 8007fae:	eb49 0906 	adc.w	r9, r9, r6
 8007fb2:	f04f 0100 	mov.w	r1, #0
 8007fb6:	f04f 0200 	mov.w	r2, #0
 8007fba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007fbe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007fc2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007fc6:	4688      	mov	r8, r1
 8007fc8:	4691      	mov	r9, r2
 8007fca:	eb18 0005 	adds.w	r0, r8, r5
 8007fce:	eb49 0106 	adc.w	r1, r9, r6
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	f04f 0600 	mov.w	r6, #0
 8007fdc:	196b      	adds	r3, r5, r5
 8007fde:	eb46 0406 	adc.w	r4, r6, r6
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	4623      	mov	r3, r4
 8007fe6:	f7f8 f903 	bl	80001f0 <__aeabi_uldivmod>
 8007fea:	4603      	mov	r3, r0
 8007fec:	460c      	mov	r4, r1
 8007fee:	461a      	mov	r2, r3
 8007ff0:	4ba5      	ldr	r3, [pc, #660]	; (8008288 <UART_SetConfig+0x384>)
 8007ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ff6:	095b      	lsrs	r3, r3, #5
 8007ff8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	461d      	mov	r5, r3
 8008000:	f04f 0600 	mov.w	r6, #0
 8008004:	46a9      	mov	r9, r5
 8008006:	46b2      	mov	sl, r6
 8008008:	eb19 0309 	adds.w	r3, r9, r9
 800800c:	eb4a 040a 	adc.w	r4, sl, sl
 8008010:	4699      	mov	r9, r3
 8008012:	46a2      	mov	sl, r4
 8008014:	eb19 0905 	adds.w	r9, r9, r5
 8008018:	eb4a 0a06 	adc.w	sl, sl, r6
 800801c:	f04f 0100 	mov.w	r1, #0
 8008020:	f04f 0200 	mov.w	r2, #0
 8008024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800802c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008030:	4689      	mov	r9, r1
 8008032:	4692      	mov	sl, r2
 8008034:	eb19 0005 	adds.w	r0, r9, r5
 8008038:	eb4a 0106 	adc.w	r1, sl, r6
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	461d      	mov	r5, r3
 8008042:	f04f 0600 	mov.w	r6, #0
 8008046:	196b      	adds	r3, r5, r5
 8008048:	eb46 0406 	adc.w	r4, r6, r6
 800804c:	461a      	mov	r2, r3
 800804e:	4623      	mov	r3, r4
 8008050:	f7f8 f8ce 	bl	80001f0 <__aeabi_uldivmod>
 8008054:	4603      	mov	r3, r0
 8008056:	460c      	mov	r4, r1
 8008058:	461a      	mov	r2, r3
 800805a:	4b8b      	ldr	r3, [pc, #556]	; (8008288 <UART_SetConfig+0x384>)
 800805c:	fba3 1302 	umull	r1, r3, r3, r2
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	2164      	movs	r1, #100	; 0x64
 8008064:	fb01 f303 	mul.w	r3, r1, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	3332      	adds	r3, #50	; 0x32
 800806e:	4a86      	ldr	r2, [pc, #536]	; (8008288 <UART_SetConfig+0x384>)
 8008070:	fba2 2303 	umull	r2, r3, r2, r3
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	005b      	lsls	r3, r3, #1
 8008078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800807c:	4498      	add	r8, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	461d      	mov	r5, r3
 8008082:	f04f 0600 	mov.w	r6, #0
 8008086:	46a9      	mov	r9, r5
 8008088:	46b2      	mov	sl, r6
 800808a:	eb19 0309 	adds.w	r3, r9, r9
 800808e:	eb4a 040a 	adc.w	r4, sl, sl
 8008092:	4699      	mov	r9, r3
 8008094:	46a2      	mov	sl, r4
 8008096:	eb19 0905 	adds.w	r9, r9, r5
 800809a:	eb4a 0a06 	adc.w	sl, sl, r6
 800809e:	f04f 0100 	mov.w	r1, #0
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080b2:	4689      	mov	r9, r1
 80080b4:	4692      	mov	sl, r2
 80080b6:	eb19 0005 	adds.w	r0, r9, r5
 80080ba:	eb4a 0106 	adc.w	r1, sl, r6
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	461d      	mov	r5, r3
 80080c4:	f04f 0600 	mov.w	r6, #0
 80080c8:	196b      	adds	r3, r5, r5
 80080ca:	eb46 0406 	adc.w	r4, r6, r6
 80080ce:	461a      	mov	r2, r3
 80080d0:	4623      	mov	r3, r4
 80080d2:	f7f8 f88d 	bl	80001f0 <__aeabi_uldivmod>
 80080d6:	4603      	mov	r3, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	461a      	mov	r2, r3
 80080dc:	4b6a      	ldr	r3, [pc, #424]	; (8008288 <UART_SetConfig+0x384>)
 80080de:	fba3 1302 	umull	r1, r3, r3, r2
 80080e2:	095b      	lsrs	r3, r3, #5
 80080e4:	2164      	movs	r1, #100	; 0x64
 80080e6:	fb01 f303 	mul.w	r3, r1, r3
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	00db      	lsls	r3, r3, #3
 80080ee:	3332      	adds	r3, #50	; 0x32
 80080f0:	4a65      	ldr	r2, [pc, #404]	; (8008288 <UART_SetConfig+0x384>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	f003 0207 	and.w	r2, r3, #7
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4442      	add	r2, r8
 8008102:	609a      	str	r2, [r3, #8]
 8008104:	e26f      	b.n	80085e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008106:	f7fe fa8d 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 800810a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	461d      	mov	r5, r3
 8008110:	f04f 0600 	mov.w	r6, #0
 8008114:	46a8      	mov	r8, r5
 8008116:	46b1      	mov	r9, r6
 8008118:	eb18 0308 	adds.w	r3, r8, r8
 800811c:	eb49 0409 	adc.w	r4, r9, r9
 8008120:	4698      	mov	r8, r3
 8008122:	46a1      	mov	r9, r4
 8008124:	eb18 0805 	adds.w	r8, r8, r5
 8008128:	eb49 0906 	adc.w	r9, r9, r6
 800812c:	f04f 0100 	mov.w	r1, #0
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008138:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800813c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008140:	4688      	mov	r8, r1
 8008142:	4691      	mov	r9, r2
 8008144:	eb18 0005 	adds.w	r0, r8, r5
 8008148:	eb49 0106 	adc.w	r1, r9, r6
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	461d      	mov	r5, r3
 8008152:	f04f 0600 	mov.w	r6, #0
 8008156:	196b      	adds	r3, r5, r5
 8008158:	eb46 0406 	adc.w	r4, r6, r6
 800815c:	461a      	mov	r2, r3
 800815e:	4623      	mov	r3, r4
 8008160:	f7f8 f846 	bl	80001f0 <__aeabi_uldivmod>
 8008164:	4603      	mov	r3, r0
 8008166:	460c      	mov	r4, r1
 8008168:	461a      	mov	r2, r3
 800816a:	4b47      	ldr	r3, [pc, #284]	; (8008288 <UART_SetConfig+0x384>)
 800816c:	fba3 2302 	umull	r2, r3, r3, r2
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	461d      	mov	r5, r3
 800817a:	f04f 0600 	mov.w	r6, #0
 800817e:	46a9      	mov	r9, r5
 8008180:	46b2      	mov	sl, r6
 8008182:	eb19 0309 	adds.w	r3, r9, r9
 8008186:	eb4a 040a 	adc.w	r4, sl, sl
 800818a:	4699      	mov	r9, r3
 800818c:	46a2      	mov	sl, r4
 800818e:	eb19 0905 	adds.w	r9, r9, r5
 8008192:	eb4a 0a06 	adc.w	sl, sl, r6
 8008196:	f04f 0100 	mov.w	r1, #0
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081aa:	4689      	mov	r9, r1
 80081ac:	4692      	mov	sl, r2
 80081ae:	eb19 0005 	adds.w	r0, r9, r5
 80081b2:	eb4a 0106 	adc.w	r1, sl, r6
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	461d      	mov	r5, r3
 80081bc:	f04f 0600 	mov.w	r6, #0
 80081c0:	196b      	adds	r3, r5, r5
 80081c2:	eb46 0406 	adc.w	r4, r6, r6
 80081c6:	461a      	mov	r2, r3
 80081c8:	4623      	mov	r3, r4
 80081ca:	f7f8 f811 	bl	80001f0 <__aeabi_uldivmod>
 80081ce:	4603      	mov	r3, r0
 80081d0:	460c      	mov	r4, r1
 80081d2:	461a      	mov	r2, r3
 80081d4:	4b2c      	ldr	r3, [pc, #176]	; (8008288 <UART_SetConfig+0x384>)
 80081d6:	fba3 1302 	umull	r1, r3, r3, r2
 80081da:	095b      	lsrs	r3, r3, #5
 80081dc:	2164      	movs	r1, #100	; 0x64
 80081de:	fb01 f303 	mul.w	r3, r1, r3
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	3332      	adds	r3, #50	; 0x32
 80081e8:	4a27      	ldr	r2, [pc, #156]	; (8008288 <UART_SetConfig+0x384>)
 80081ea:	fba2 2303 	umull	r2, r3, r2, r3
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081f6:	4498      	add	r8, r3
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	461d      	mov	r5, r3
 80081fc:	f04f 0600 	mov.w	r6, #0
 8008200:	46a9      	mov	r9, r5
 8008202:	46b2      	mov	sl, r6
 8008204:	eb19 0309 	adds.w	r3, r9, r9
 8008208:	eb4a 040a 	adc.w	r4, sl, sl
 800820c:	4699      	mov	r9, r3
 800820e:	46a2      	mov	sl, r4
 8008210:	eb19 0905 	adds.w	r9, r9, r5
 8008214:	eb4a 0a06 	adc.w	sl, sl, r6
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008224:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008228:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800822c:	4689      	mov	r9, r1
 800822e:	4692      	mov	sl, r2
 8008230:	eb19 0005 	adds.w	r0, r9, r5
 8008234:	eb4a 0106 	adc.w	r1, sl, r6
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	461d      	mov	r5, r3
 800823e:	f04f 0600 	mov.w	r6, #0
 8008242:	196b      	adds	r3, r5, r5
 8008244:	eb46 0406 	adc.w	r4, r6, r6
 8008248:	461a      	mov	r2, r3
 800824a:	4623      	mov	r3, r4
 800824c:	f7f7 ffd0 	bl	80001f0 <__aeabi_uldivmod>
 8008250:	4603      	mov	r3, r0
 8008252:	460c      	mov	r4, r1
 8008254:	461a      	mov	r2, r3
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <UART_SetConfig+0x384>)
 8008258:	fba3 1302 	umull	r1, r3, r3, r2
 800825c:	095b      	lsrs	r3, r3, #5
 800825e:	2164      	movs	r1, #100	; 0x64
 8008260:	fb01 f303 	mul.w	r3, r1, r3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	3332      	adds	r3, #50	; 0x32
 800826a:	4a07      	ldr	r2, [pc, #28]	; (8008288 <UART_SetConfig+0x384>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	f003 0207 	and.w	r2, r3, #7
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4442      	add	r2, r8
 800827c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800827e:	e1b2      	b.n	80085e6 <UART_SetConfig+0x6e2>
 8008280:	40011000 	.word	0x40011000
 8008284:	40011400 	.word	0x40011400
 8008288:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4ad7      	ldr	r2, [pc, #860]	; (80085f0 <UART_SetConfig+0x6ec>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d005      	beq.n	80082a2 <UART_SetConfig+0x39e>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4ad6      	ldr	r2, [pc, #856]	; (80085f4 <UART_SetConfig+0x6f0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	f040 80d1 	bne.w	8008444 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80082a2:	f7fe f9d3 	bl	800664c <HAL_RCC_GetPCLK2Freq>
 80082a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	469a      	mov	sl, r3
 80082ac:	f04f 0b00 	mov.w	fp, #0
 80082b0:	46d0      	mov	r8, sl
 80082b2:	46d9      	mov	r9, fp
 80082b4:	eb18 0308 	adds.w	r3, r8, r8
 80082b8:	eb49 0409 	adc.w	r4, r9, r9
 80082bc:	4698      	mov	r8, r3
 80082be:	46a1      	mov	r9, r4
 80082c0:	eb18 080a 	adds.w	r8, r8, sl
 80082c4:	eb49 090b 	adc.w	r9, r9, fp
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082dc:	4688      	mov	r8, r1
 80082de:	4691      	mov	r9, r2
 80082e0:	eb1a 0508 	adds.w	r5, sl, r8
 80082e4:	eb4b 0609 	adc.w	r6, fp, r9
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4619      	mov	r1, r3
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	f04f 0400 	mov.w	r4, #0
 80082fa:	0094      	lsls	r4, r2, #2
 80082fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008300:	008b      	lsls	r3, r1, #2
 8008302:	461a      	mov	r2, r3
 8008304:	4623      	mov	r3, r4
 8008306:	4628      	mov	r0, r5
 8008308:	4631      	mov	r1, r6
 800830a:	f7f7 ff71 	bl	80001f0 <__aeabi_uldivmod>
 800830e:	4603      	mov	r3, r0
 8008310:	460c      	mov	r4, r1
 8008312:	461a      	mov	r2, r3
 8008314:	4bb8      	ldr	r3, [pc, #736]	; (80085f8 <UART_SetConfig+0x6f4>)
 8008316:	fba3 2302 	umull	r2, r3, r3, r2
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	469b      	mov	fp, r3
 8008324:	f04f 0c00 	mov.w	ip, #0
 8008328:	46d9      	mov	r9, fp
 800832a:	46e2      	mov	sl, ip
 800832c:	eb19 0309 	adds.w	r3, r9, r9
 8008330:	eb4a 040a 	adc.w	r4, sl, sl
 8008334:	4699      	mov	r9, r3
 8008336:	46a2      	mov	sl, r4
 8008338:	eb19 090b 	adds.w	r9, r9, fp
 800833c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008340:	f04f 0100 	mov.w	r1, #0
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800834c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008354:	4689      	mov	r9, r1
 8008356:	4692      	mov	sl, r2
 8008358:	eb1b 0509 	adds.w	r5, fp, r9
 800835c:	eb4c 060a 	adc.w	r6, ip, sl
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4619      	mov	r1, r3
 8008366:	f04f 0200 	mov.w	r2, #0
 800836a:	f04f 0300 	mov.w	r3, #0
 800836e:	f04f 0400 	mov.w	r4, #0
 8008372:	0094      	lsls	r4, r2, #2
 8008374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008378:	008b      	lsls	r3, r1, #2
 800837a:	461a      	mov	r2, r3
 800837c:	4623      	mov	r3, r4
 800837e:	4628      	mov	r0, r5
 8008380:	4631      	mov	r1, r6
 8008382:	f7f7 ff35 	bl	80001f0 <__aeabi_uldivmod>
 8008386:	4603      	mov	r3, r0
 8008388:	460c      	mov	r4, r1
 800838a:	461a      	mov	r2, r3
 800838c:	4b9a      	ldr	r3, [pc, #616]	; (80085f8 <UART_SetConfig+0x6f4>)
 800838e:	fba3 1302 	umull	r1, r3, r3, r2
 8008392:	095b      	lsrs	r3, r3, #5
 8008394:	2164      	movs	r1, #100	; 0x64
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	3332      	adds	r3, #50	; 0x32
 80083a0:	4a95      	ldr	r2, [pc, #596]	; (80085f8 <UART_SetConfig+0x6f4>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ac:	4498      	add	r8, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	469b      	mov	fp, r3
 80083b2:	f04f 0c00 	mov.w	ip, #0
 80083b6:	46d9      	mov	r9, fp
 80083b8:	46e2      	mov	sl, ip
 80083ba:	eb19 0309 	adds.w	r3, r9, r9
 80083be:	eb4a 040a 	adc.w	r4, sl, sl
 80083c2:	4699      	mov	r9, r3
 80083c4:	46a2      	mov	sl, r4
 80083c6:	eb19 090b 	adds.w	r9, r9, fp
 80083ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083ce:	f04f 0100 	mov.w	r1, #0
 80083d2:	f04f 0200 	mov.w	r2, #0
 80083d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083e2:	4689      	mov	r9, r1
 80083e4:	4692      	mov	sl, r2
 80083e6:	eb1b 0509 	adds.w	r5, fp, r9
 80083ea:	eb4c 060a 	adc.w	r6, ip, sl
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	4619      	mov	r1, r3
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	f04f 0400 	mov.w	r4, #0
 8008400:	0094      	lsls	r4, r2, #2
 8008402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008406:	008b      	lsls	r3, r1, #2
 8008408:	461a      	mov	r2, r3
 800840a:	4623      	mov	r3, r4
 800840c:	4628      	mov	r0, r5
 800840e:	4631      	mov	r1, r6
 8008410:	f7f7 feee 	bl	80001f0 <__aeabi_uldivmod>
 8008414:	4603      	mov	r3, r0
 8008416:	460c      	mov	r4, r1
 8008418:	461a      	mov	r2, r3
 800841a:	4b77      	ldr	r3, [pc, #476]	; (80085f8 <UART_SetConfig+0x6f4>)
 800841c:	fba3 1302 	umull	r1, r3, r3, r2
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	2164      	movs	r1, #100	; 0x64
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	3332      	adds	r3, #50	; 0x32
 800842e:	4a72      	ldr	r2, [pc, #456]	; (80085f8 <UART_SetConfig+0x6f4>)
 8008430:	fba2 2303 	umull	r2, r3, r2, r3
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	f003 020f 	and.w	r2, r3, #15
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4442      	add	r2, r8
 8008440:	609a      	str	r2, [r3, #8]
 8008442:	e0d0      	b.n	80085e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008444:	f7fe f8ee 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 8008448:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	469a      	mov	sl, r3
 800844e:	f04f 0b00 	mov.w	fp, #0
 8008452:	46d0      	mov	r8, sl
 8008454:	46d9      	mov	r9, fp
 8008456:	eb18 0308 	adds.w	r3, r8, r8
 800845a:	eb49 0409 	adc.w	r4, r9, r9
 800845e:	4698      	mov	r8, r3
 8008460:	46a1      	mov	r9, r4
 8008462:	eb18 080a 	adds.w	r8, r8, sl
 8008466:	eb49 090b 	adc.w	r9, r9, fp
 800846a:	f04f 0100 	mov.w	r1, #0
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008476:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800847a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800847e:	4688      	mov	r8, r1
 8008480:	4691      	mov	r9, r2
 8008482:	eb1a 0508 	adds.w	r5, sl, r8
 8008486:	eb4b 0609 	adc.w	r6, fp, r9
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4619      	mov	r1, r3
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	f04f 0400 	mov.w	r4, #0
 800849c:	0094      	lsls	r4, r2, #2
 800849e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084a2:	008b      	lsls	r3, r1, #2
 80084a4:	461a      	mov	r2, r3
 80084a6:	4623      	mov	r3, r4
 80084a8:	4628      	mov	r0, r5
 80084aa:	4631      	mov	r1, r6
 80084ac:	f7f7 fea0 	bl	80001f0 <__aeabi_uldivmod>
 80084b0:	4603      	mov	r3, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b50      	ldr	r3, [pc, #320]	; (80085f8 <UART_SetConfig+0x6f4>)
 80084b8:	fba3 2302 	umull	r2, r3, r3, r2
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	469b      	mov	fp, r3
 80084c6:	f04f 0c00 	mov.w	ip, #0
 80084ca:	46d9      	mov	r9, fp
 80084cc:	46e2      	mov	sl, ip
 80084ce:	eb19 0309 	adds.w	r3, r9, r9
 80084d2:	eb4a 040a 	adc.w	r4, sl, sl
 80084d6:	4699      	mov	r9, r3
 80084d8:	46a2      	mov	sl, r4
 80084da:	eb19 090b 	adds.w	r9, r9, fp
 80084de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084e2:	f04f 0100 	mov.w	r1, #0
 80084e6:	f04f 0200 	mov.w	r2, #0
 80084ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084f6:	4689      	mov	r9, r1
 80084f8:	4692      	mov	sl, r2
 80084fa:	eb1b 0509 	adds.w	r5, fp, r9
 80084fe:	eb4c 060a 	adc.w	r6, ip, sl
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	4619      	mov	r1, r3
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	f04f 0400 	mov.w	r4, #0
 8008514:	0094      	lsls	r4, r2, #2
 8008516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800851a:	008b      	lsls	r3, r1, #2
 800851c:	461a      	mov	r2, r3
 800851e:	4623      	mov	r3, r4
 8008520:	4628      	mov	r0, r5
 8008522:	4631      	mov	r1, r6
 8008524:	f7f7 fe64 	bl	80001f0 <__aeabi_uldivmod>
 8008528:	4603      	mov	r3, r0
 800852a:	460c      	mov	r4, r1
 800852c:	461a      	mov	r2, r3
 800852e:	4b32      	ldr	r3, [pc, #200]	; (80085f8 <UART_SetConfig+0x6f4>)
 8008530:	fba3 1302 	umull	r1, r3, r3, r2
 8008534:	095b      	lsrs	r3, r3, #5
 8008536:	2164      	movs	r1, #100	; 0x64
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	3332      	adds	r3, #50	; 0x32
 8008542:	4a2d      	ldr	r2, [pc, #180]	; (80085f8 <UART_SetConfig+0x6f4>)
 8008544:	fba2 2303 	umull	r2, r3, r2, r3
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800854e:	4498      	add	r8, r3
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	469b      	mov	fp, r3
 8008554:	f04f 0c00 	mov.w	ip, #0
 8008558:	46d9      	mov	r9, fp
 800855a:	46e2      	mov	sl, ip
 800855c:	eb19 0309 	adds.w	r3, r9, r9
 8008560:	eb4a 040a 	adc.w	r4, sl, sl
 8008564:	4699      	mov	r9, r3
 8008566:	46a2      	mov	sl, r4
 8008568:	eb19 090b 	adds.w	r9, r9, fp
 800856c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008570:	f04f 0100 	mov.w	r1, #0
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800857c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008580:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008584:	4689      	mov	r9, r1
 8008586:	4692      	mov	sl, r2
 8008588:	eb1b 0509 	adds.w	r5, fp, r9
 800858c:	eb4c 060a 	adc.w	r6, ip, sl
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4619      	mov	r1, r3
 8008596:	f04f 0200 	mov.w	r2, #0
 800859a:	f04f 0300 	mov.w	r3, #0
 800859e:	f04f 0400 	mov.w	r4, #0
 80085a2:	0094      	lsls	r4, r2, #2
 80085a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085a8:	008b      	lsls	r3, r1, #2
 80085aa:	461a      	mov	r2, r3
 80085ac:	4623      	mov	r3, r4
 80085ae:	4628      	mov	r0, r5
 80085b0:	4631      	mov	r1, r6
 80085b2:	f7f7 fe1d 	bl	80001f0 <__aeabi_uldivmod>
 80085b6:	4603      	mov	r3, r0
 80085b8:	460c      	mov	r4, r1
 80085ba:	461a      	mov	r2, r3
 80085bc:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <UART_SetConfig+0x6f4>)
 80085be:	fba3 1302 	umull	r1, r3, r3, r2
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	2164      	movs	r1, #100	; 0x64
 80085c6:	fb01 f303 	mul.w	r3, r1, r3
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	3332      	adds	r3, #50	; 0x32
 80085d0:	4a09      	ldr	r2, [pc, #36]	; (80085f8 <UART_SetConfig+0x6f4>)
 80085d2:	fba2 2303 	umull	r2, r3, r2, r3
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	f003 020f 	and.w	r2, r3, #15
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4442      	add	r2, r8
 80085e2:	609a      	str	r2, [r3, #8]
}
 80085e4:	e7ff      	b.n	80085e6 <UART_SetConfig+0x6e2>
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	40011000 	.word	0x40011000
 80085f4:	40011400 	.word	0x40011400
 80085f8:	51eb851f 	.word	0x51eb851f

080085fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d029      	beq.n	800866a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008626:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008630:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008636:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800863c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008642:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008648:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800864e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008654:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800865a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	e034      	b.n	80086d4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008676:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008680:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008686:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800869a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800869e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086a8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80086ae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80086b4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80086ba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80086c0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b087      	sub	sp, #28
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	60b9      	str	r1, [r7, #8]
 80086ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d02e      	beq.n	800875a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008708:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	3b01      	subs	r3, #1
 8008716:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008718:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	3b01      	subs	r3, #1
 8008720:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008722:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	3b01      	subs	r3, #1
 800872a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800872c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	3b01      	subs	r3, #1
 8008734:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008736:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	3b01      	subs	r3, #1
 800873e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008740:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	3b01      	subs	r3, #1
 8008748:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800874a:	4313      	orrs	r3, r2
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	609a      	str	r2, [r3, #8]
 8008758:	e03b      	b.n	80087d2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008766:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800876a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	3b01      	subs	r3, #1
 8008772:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	3b01      	subs	r3, #1
 800877a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800877c:	4313      	orrs	r3, r2
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	4313      	orrs	r3, r2
 8008782:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008790:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	3b01      	subs	r3, #1
 800879e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80087a0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80087aa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80087b4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80087be:	4313      	orrs	r3, r2
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	371c      	adds	r7, #28
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80087fc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	3b01      	subs	r3, #1
 8008804:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008806:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800880e:	4313      	orrs	r3, r2
 8008810:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008818:	f7fa fa48 	bl	8002cac <HAL_GetTick>
 800881c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800881e:	e010      	b.n	8008842 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	d00c      	beq.n	8008842 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d007      	beq.n	800883e <FMC_SDRAM_SendCommand+0x5e>
 800882e:	f7fa fa3d 	bl	8002cac <HAL_GetTick>
 8008832:	4602      	mov	r2, r0
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d201      	bcs.n	8008842 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e006      	b.n	8008850 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f003 0320 	and.w	r3, r3, #32
 800884a:	2b20      	cmp	r3, #32
 800884c:	d0e8      	beq.n	8008820 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695a      	ldr	r2, [r3, #20]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	005b      	lsls	r3, r3, #1
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f043 0201 	orr.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f023 0201 	bic.w	r2, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
	...

080088c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	019b      	lsls	r3, r3, #6
 80088d6:	f043 0220 	orr.w	r2, r3, #32
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a09      	ldr	r2, [pc, #36]	; (800890c <USB_FlushTxFifo+0x48>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d901      	bls.n	80088f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e006      	b.n	80088fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d0f0      	beq.n	80088de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	00030d40 	.word	0x00030d40

08008910 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2210      	movs	r2, #16
 8008920:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3301      	adds	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a09      	ldr	r2, [pc, #36]	; (8008950 <USB_FlushRxFifo+0x40>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d901      	bls.n	8008934 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e006      	b.n	8008942 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b10      	cmp	r3, #16
 800893e:	d0f0      	beq.n	8008922 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr
 800894e:	bf00      	nop
 8008950:	00030d40 	.word	0x00030d40

08008954 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008954:	b480      	push	{r7}
 8008956:	b089      	sub	sp, #36	; 0x24
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800896a:	88fb      	ldrh	r3, [r7, #6]
 800896c:	3303      	adds	r3, #3
 800896e:	089b      	lsrs	r3, r3, #2
 8008970:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008972:	2300      	movs	r3, #0
 8008974:	61bb      	str	r3, [r7, #24]
 8008976:	e00b      	b.n	8008990 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	601a      	str	r2, [r3, #0]
    pDest++;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	3304      	adds	r3, #4
 8008988:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	3301      	adds	r3, #1
 800898e:	61bb      	str	r3, [r7, #24]
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	429a      	cmp	r2, r3
 8008996:	d3ef      	bcc.n	8008978 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008998:	69fb      	ldr	r3, [r7, #28]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3724      	adds	r7, #36	; 0x24
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	4013      	ands	r3, r2
 80089bc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089be:	68fb      	ldr	r3, [r7, #12]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	f003 0301 	and.w	r3, r3, #1
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	f003 0303 	and.w	r3, r3, #3
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008a20:	4313      	orrs	r3, r2
 8008a22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d107      	bne.n	8008a3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a30:	461a      	mov	r2, r3
 8008a32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008a36:	6053      	str	r3, [r2, #4]
 8008a38:	e009      	b.n	8008a4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008a3a:	78fb      	ldrb	r3, [r7, #3]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d106      	bne.n	8008a4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a46:	461a      	mov	r2, r3
 8008a48:	f241 7370 	movw	r3, #6000	; 0x1770
 8008a4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	b29b      	uxth	r3, r3
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	0c9b      	lsrs	r3, r3, #18
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <USB_HC_Halt+0x3a>
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d16c      	bne.n	8008b92 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	015a      	lsls	r2, r3, #5
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	0151      	lsls	r1, r2, #5
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	440a      	add	r2, r1
 8008ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d143      	bne.n	8008b6c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	0151      	lsls	r1, r2, #5
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	440a      	add	r2, r1
 8008afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b42:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	3301      	adds	r3, #1
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b50:	d81d      	bhi.n	8008b8e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b68:	d0ec      	beq.n	8008b44 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b6a:	e080      	b.n	8008c6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b8a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b8c:	e06f      	b.n	8008c6e <USB_HC_Halt+0x1f0>
          break;
 8008b8e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b90:	e06d      	b.n	8008c6e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	0151      	lsls	r1, r2, #5
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	440a      	add	r2, r1
 8008ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d143      	bne.n	8008c4a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	0151      	lsls	r1, r2, #5
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	440a      	add	r2, r1
 8008bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	0151      	lsls	r1, r2, #5
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	440a      	add	r2, r1
 8008bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c00:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	015a      	lsls	r2, r3, #5
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4413      	add	r3, r2
 8008c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	0151      	lsls	r1, r2, #5
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	440a      	add	r2, r1
 8008c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c20:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	3301      	adds	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c2e:	d81d      	bhi.n	8008c6c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c46:	d0ec      	beq.n	8008c22 <USB_HC_Halt+0x1a4>
 8008c48:	e011      	b.n	8008c6e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	0151      	lsls	r1, r2, #5
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	440a      	add	r2, r1
 8008c60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	e000      	b.n	8008c6e <USB_HC_Halt+0x1f0>
          break;
 8008c6c:	bf00      	nop
    }
  }

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff fe07 	bl	80088a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008c92:	2110      	movs	r1, #16
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff fe15 	bl	80088c4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff fe38 	bl	8008910 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	e01f      	b.n	8008ce6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cc4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ccc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cda:	461a      	mov	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b0f      	cmp	r3, #15
 8008cea:	d9dc      	bls.n	8008ca6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008cec:	2300      	movs	r3, #0
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	e034      	b.n	8008d5c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d08:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d10:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d18:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d26:	461a      	mov	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d38:	d80c      	bhi.n	8008d54 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d50:	d0ec      	beq.n	8008d2c <USB_StopHost+0xb0>
 8008d52:	e000      	b.n	8008d56 <USB_StopHost+0xda>
        break;
 8008d54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	613b      	str	r3, [r7, #16]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	2b0f      	cmp	r3, #15
 8008d60:	d9c7      	bls.n	8008cf2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d68:	461a      	mov	r2, r3
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f04f 32ff 	mov.w	r2, #4294967295
 8008d76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff fd80 	bl	800887e <USB_EnableGlobalInt>

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f804 	bl	8008dac <USBH_HandleSof>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b0b      	cmp	r3, #11
 8008dbc:	d10a      	bne.n	8008dd4 <USBH_HandleSof+0x28>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e00:	2200      	movs	r2, #0
 8008e02:	4619      	mov	r1, r3
 8008e04:	f000 f8ae 	bl	8008f64 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008e08:	bf00      	nop
}
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e20:	bf00      	nop
}
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e60:	2200      	movs	r2, #0
 8008e62:	4619      	mov	r1, r3
 8008e64:	f000 f87e 	bl	8008f64 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f001 f8fe 	bl	800a094 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	791b      	ldrb	r3, [r3, #4]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f830 	bl	8008f04 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	795b      	ldrb	r3, [r3, #5]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f82a 	bl	8008f04 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f000 f84c 	bl	8008f64 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	f000 f835 	bl	8008f64 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	2b0a      	cmp	r3, #10
 8008f14:	d80d      	bhi.n	8008f32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	33e0      	adds	r3, #224	; 0xe0
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	685a      	ldr	r2, [r3, #4]
 8008f22:	78fb      	ldrb	r3, [r7, #3]
 8008f24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008f28:	6879      	ldr	r1, [r7, #4]
 8008f2a:	33e0      	adds	r3, #224	; 0xe0
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f46:	f3ef 8305 	mrs	r3, IPSR
 8008f4a:	607b      	str	r3, [r7, #4]
  return(result);
 8008f4c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf14      	ite	ne
 8008f52:	2301      	movne	r3, #1
 8008f54:	2300      	moveq	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <osMessagePut+0x1e>
    ticks = 1;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008f82:	f7ff ffdd 	bl	8008f40 <inHandlerMode>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d018      	beq.n	8008fbe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008f8c:	f107 0210 	add.w	r2, r7, #16
 8008f90:	f107 0108 	add.w	r1, r7, #8
 8008f94:	2300      	movs	r3, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f9a6 	bl	80092e8 <xQueueGenericSendFromISR>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d001      	beq.n	8008fa6 <osMessagePut+0x42>
      return osErrorOS;
 8008fa2:	23ff      	movs	r3, #255	; 0xff
 8008fa4:	e018      	b.n	8008fd8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d014      	beq.n	8008fd6 <osMessagePut+0x72>
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <osMessagePut+0x7c>)
 8008fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb2:	601a      	str	r2, [r3, #0]
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	e00b      	b.n	8008fd6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008fbe:	f107 0108 	add.w	r1, r7, #8
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 f894 	bl	80090f4 <xQueueGenericSend>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d001      	beq.n	8008fd6 <osMessagePut+0x72>
      return osErrorOS;
 8008fd2:	23ff      	movs	r3, #255	; 0xff
 8008fd4:	e000      	b.n	8008fd8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	1c5a      	adds	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
}
 8009020:	bf00      	nop
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d103      	bne.n	800904c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	e00c      	b.n	8009066 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3308      	adds	r3, #8
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	e002      	b.n	800905a <vListInsert+0x2e>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	429a      	cmp	r2, r3
 8009064:	d2f6      	bcs.n	8009054 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	601a      	str	r2, [r3, #0]
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	6892      	ldr	r2, [r2, #8]
 80090b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	6852      	ldr	r2, [r2, #4]
 80090be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d103      	bne.n	80090d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	1e5a      	subs	r2, r3, #1
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
	...

080090f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08e      	sub	sp, #56	; 0x38
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009102:	2300      	movs	r3, #0
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	2b00      	cmp	r3, #0
 800910e:	d109      	bne.n	8009124 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	62bb      	str	r3, [r7, #40]	; 0x28
 8009122:	e7fe      	b.n	8009122 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <xQueueGenericSend+0x3e>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <xQueueGenericSend+0x42>
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <xQueueGenericSend+0x44>
 8009136:	2300      	movs	r3, #0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <xQueueGenericSend+0x5c>
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	627b      	str	r3, [r7, #36]	; 0x24
 800914e:	e7fe      	b.n	800914e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d103      	bne.n	800915e <xQueueGenericSend+0x6a>
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	2b01      	cmp	r3, #1
 800915c:	d101      	bne.n	8009162 <xQueueGenericSend+0x6e>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <xQueueGenericSend+0x70>
 8009162:	2300      	movs	r3, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d109      	bne.n	800917c <xQueueGenericSend+0x88>
 8009168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916c:	f383 8811 	msr	BASEPRI, r3
 8009170:	f3bf 8f6f 	isb	sy
 8009174:	f3bf 8f4f 	dsb	sy
 8009178:	623b      	str	r3, [r7, #32]
 800917a:	e7fe      	b.n	800917a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800917c:	f000 fd26 	bl	8009bcc <xTaskGetSchedulerState>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <xQueueGenericSend+0x98>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <xQueueGenericSend+0x9c>
 800918c:	2301      	movs	r3, #1
 800918e:	e000      	b.n	8009192 <xQueueGenericSend+0x9e>
 8009190:	2300      	movs	r3, #0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <xQueueGenericSend+0xb6>
 8009196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919a:	f383 8811 	msr	BASEPRI, r3
 800919e:	f3bf 8f6f 	isb	sy
 80091a2:	f3bf 8f4f 	dsb	sy
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e7fe      	b.n	80091a8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80091aa:	f000 fe2d 	bl	8009e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d302      	bcc.n	80091c0 <xQueueGenericSend+0xcc>
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d129      	bne.n	8009214 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c6:	f000 f923 	bl	8009410 <prvCopyDataToQueue>
 80091ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d010      	beq.n	80091f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	3324      	adds	r3, #36	; 0x24
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fbf3 	bl	80099c4 <xTaskRemoveFromEventList>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d013      	beq.n	800920c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091e4:	4b3f      	ldr	r3, [pc, #252]	; (80092e4 <xQueueGenericSend+0x1f0>)
 80091e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	e00a      	b.n	800920c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091fc:	4b39      	ldr	r3, [pc, #228]	; (80092e4 <xQueueGenericSend+0x1f0>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800920c:	f000 fe2a 	bl	8009e64 <vPortExitCritical>
				return pdPASS;
 8009210:	2301      	movs	r3, #1
 8009212:	e063      	b.n	80092dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800921a:	f000 fe23 	bl	8009e64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800921e:	2300      	movs	r3, #0
 8009220:	e05c      	b.n	80092dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009224:	2b00      	cmp	r3, #0
 8009226:	d106      	bne.n	8009236 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009228:	f107 0314 	add.w	r3, r7, #20
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fc2b 	bl	8009a88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009232:	2301      	movs	r3, #1
 8009234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009236:	f000 fe15 	bl	8009e64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800923a:	f000 f9bd 	bl	80095b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800923e:	f000 fde3 	bl	8009e08 <vPortEnterCritical>
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009248:	b25b      	sxtb	r3, r3
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d103      	bne.n	8009258 <xQueueGenericSend+0x164>
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800925e:	b25b      	sxtb	r3, r3
 8009260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009264:	d103      	bne.n	800926e <xQueueGenericSend+0x17a>
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800926e:	f000 fdf9 	bl	8009e64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009272:	1d3a      	adds	r2, r7, #4
 8009274:	f107 0314 	add.w	r3, r7, #20
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fc1a 	bl	8009ab4 <xTaskCheckForTimeOut>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d124      	bne.n	80092d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009288:	f000 f97e 	bl	8009588 <prvIsQueueFull>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d018      	beq.n	80092c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	3310      	adds	r3, #16
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4611      	mov	r1, r2
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fb6e 	bl	800997c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80092a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092a2:	f000 f91f 	bl	80094e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80092a6:	f000 f995 	bl	80095d4 <xTaskResumeAll>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f47f af7c 	bne.w	80091aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80092b2:	4b0c      	ldr	r3, [pc, #48]	; (80092e4 <xQueueGenericSend+0x1f0>)
 80092b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	e772      	b.n	80091aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80092c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092c6:	f000 f90d 	bl	80094e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80092ca:	f000 f983 	bl	80095d4 <xTaskResumeAll>
 80092ce:	e76c      	b.n	80091aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80092d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092d2:	f000 f907 	bl	80094e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80092d6:	f000 f97d 	bl	80095d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80092da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3738      	adds	r7, #56	; 0x38
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	e000ed04 	.word	0xe000ed04

080092e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08e      	sub	sp, #56	; 0x38
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
 80092f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <xQueueGenericSendFromISR+0x2c>
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
 8009312:	e7fe      	b.n	8009312 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d103      	bne.n	8009322 <xQueueGenericSendFromISR+0x3a>
 800931a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <xQueueGenericSendFromISR+0x3e>
 8009322:	2301      	movs	r3, #1
 8009324:	e000      	b.n	8009328 <xQueueGenericSendFromISR+0x40>
 8009326:	2300      	movs	r3, #0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d109      	bne.n	8009340 <xQueueGenericSendFromISR+0x58>
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	623b      	str	r3, [r7, #32]
 800933e:	e7fe      	b.n	800933e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d103      	bne.n	800934e <xQueueGenericSendFromISR+0x66>
 8009346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800934a:	2b01      	cmp	r3, #1
 800934c:	d101      	bne.n	8009352 <xQueueGenericSendFromISR+0x6a>
 800934e:	2301      	movs	r3, #1
 8009350:	e000      	b.n	8009354 <xQueueGenericSendFromISR+0x6c>
 8009352:	2300      	movs	r3, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <xQueueGenericSendFromISR+0x84>
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	e7fe      	b.n	800936a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800936c:	f000 fdfc 	bl	8009f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009370:	f3ef 8211 	mrs	r2, BASEPRI
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	61ba      	str	r2, [r7, #24]
 8009386:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009388:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800938a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <xQueueGenericSendFromISR+0xb6>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b02      	cmp	r3, #2
 800939c:	d12c      	bne.n	80093f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800939e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	68b9      	ldr	r1, [r7, #8]
 80093ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ae:	f000 f82f 	bl	8009410 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80093b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80093b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ba:	d112      	bne.n	80093e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d016      	beq.n	80093f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	3324      	adds	r3, #36	; 0x24
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fafb 	bl	80099c4 <xTaskRemoveFromEventList>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00e      	beq.n	80093f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00b      	beq.n	80093f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e007      	b.n	80093f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093e6:	3301      	adds	r3, #1
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	b25a      	sxtb	r2, r3
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093f2:	2301      	movs	r3, #1
 80093f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80093f6:	e001      	b.n	80093fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009408:	4618      	mov	r0, r3
 800940a:	3738      	adds	r7, #56	; 0x38
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800941c:	2300      	movs	r3, #0
 800941e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10d      	bne.n	800944a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d14d      	bne.n	80094d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fbe4 	bl	8009c08 <xTaskPriorityDisinherit>
 8009440:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	609a      	str	r2, [r3, #8]
 8009448:	e043      	b.n	80094d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d119      	bne.n	8009484 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6858      	ldr	r0, [r3, #4]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009458:	461a      	mov	r2, r3
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	f000 fe86 	bl	800a16c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009468:	441a      	add	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685a      	ldr	r2, [r3, #4]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	429a      	cmp	r2, r3
 8009478:	d32b      	bcc.n	80094d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	605a      	str	r2, [r3, #4]
 8009482:	e026      	b.n	80094d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	68d8      	ldr	r0, [r3, #12]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	461a      	mov	r2, r3
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	f000 fe6c 	bl	800a16c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	68da      	ldr	r2, [r3, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949c:	425b      	negs	r3, r3
 800949e:	441a      	add	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d207      	bcs.n	80094c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b8:	425b      	negs	r3, r3
 80094ba:	441a      	add	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	d105      	bne.n	80094d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80094da:	697b      	ldr	r3, [r7, #20]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094ec:	f000 fc8c 	bl	8009e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094f8:	e011      	b.n	800951e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d012      	beq.n	8009528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3324      	adds	r3, #36	; 0x24
 8009506:	4618      	mov	r0, r3
 8009508:	f000 fa5c 	bl	80099c4 <xTaskRemoveFromEventList>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009512:	f000 fb2f 	bl	8009b74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	3b01      	subs	r3, #1
 800951a:	b2db      	uxtb	r3, r3
 800951c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800951e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009522:	2b00      	cmp	r3, #0
 8009524:	dce9      	bgt.n	80094fa <prvUnlockQueue+0x16>
 8009526:	e000      	b.n	800952a <prvUnlockQueue+0x46>
					break;
 8009528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	22ff      	movs	r2, #255	; 0xff
 800952e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009532:	f000 fc97 	bl	8009e64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009536:	f000 fc67 	bl	8009e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009542:	e011      	b.n	8009568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d012      	beq.n	8009572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3310      	adds	r3, #16
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fa37 	bl	80099c4 <xTaskRemoveFromEventList>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800955c:	f000 fb0a 	bl	8009b74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009560:	7bbb      	ldrb	r3, [r7, #14]
 8009562:	3b01      	subs	r3, #1
 8009564:	b2db      	uxtb	r3, r3
 8009566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dce9      	bgt.n	8009544 <prvUnlockQueue+0x60>
 8009570:	e000      	b.n	8009574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	22ff      	movs	r2, #255	; 0xff
 8009578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800957c:	f000 fc72 	bl	8009e64 <vPortExitCritical>
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009590:	f000 fc3a 	bl	8009e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959c:	429a      	cmp	r2, r3
 800959e:	d102      	bne.n	80095a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e001      	b.n	80095aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095aa:	f000 fc5b 	bl	8009e64 <vPortExitCritical>

	return xReturn;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095bc:	4b04      	ldr	r3, [pc, #16]	; (80095d0 <vTaskSuspendAll+0x18>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	4a03      	ldr	r2, [pc, #12]	; (80095d0 <vTaskSuspendAll+0x18>)
 80095c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20000300 	.word	0x20000300

080095d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095de:	2300      	movs	r3, #0
 80095e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095e2:	4b41      	ldr	r3, [pc, #260]	; (80096e8 <xTaskResumeAll+0x114>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d109      	bne.n	80095fe <xTaskResumeAll+0x2a>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	e7fe      	b.n	80095fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095fe:	f000 fc03 	bl	8009e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009602:	4b39      	ldr	r3, [pc, #228]	; (80096e8 <xTaskResumeAll+0x114>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	3b01      	subs	r3, #1
 8009608:	4a37      	ldr	r2, [pc, #220]	; (80096e8 <xTaskResumeAll+0x114>)
 800960a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800960c:	4b36      	ldr	r3, [pc, #216]	; (80096e8 <xTaskResumeAll+0x114>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d161      	bne.n	80096d8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009614:	4b35      	ldr	r3, [pc, #212]	; (80096ec <xTaskResumeAll+0x118>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d05d      	beq.n	80096d8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800961c:	e02e      	b.n	800967c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961e:	4b34      	ldr	r3, [pc, #208]	; (80096f0 <xTaskResumeAll+0x11c>)
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3318      	adds	r3, #24
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff fd37 	bl	800909e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3304      	adds	r3, #4
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fd32 	bl	800909e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963e:	2201      	movs	r2, #1
 8009640:	409a      	lsls	r2, r3
 8009642:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <xTaskResumeAll+0x120>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4313      	orrs	r3, r2
 8009648:	4a2a      	ldr	r2, [pc, #168]	; (80096f4 <xTaskResumeAll+0x120>)
 800964a:	6013      	str	r3, [r2, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4a27      	ldr	r2, [pc, #156]	; (80096f8 <xTaskResumeAll+0x124>)
 800965a:	441a      	add	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3304      	adds	r3, #4
 8009660:	4619      	mov	r1, r3
 8009662:	4610      	mov	r0, r2
 8009664:	f7ff fcbe 	bl	8008fe4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966c:	4b23      	ldr	r3, [pc, #140]	; (80096fc <xTaskResumeAll+0x128>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009672:	429a      	cmp	r2, r3
 8009674:	d302      	bcc.n	800967c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009676:	4b22      	ldr	r3, [pc, #136]	; (8009700 <xTaskResumeAll+0x12c>)
 8009678:	2201      	movs	r2, #1
 800967a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800967c:	4b1c      	ldr	r3, [pc, #112]	; (80096f0 <xTaskResumeAll+0x11c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1cc      	bne.n	800961e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800968a:	f000 fa7f 	bl	8009b8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800968e:	4b1d      	ldr	r3, [pc, #116]	; (8009704 <xTaskResumeAll+0x130>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d010      	beq.n	80096bc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800969a:	f000 f837 	bl	800970c <xTaskIncrementTick>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80096a4:	4b16      	ldr	r3, [pc, #88]	; (8009700 <xTaskResumeAll+0x12c>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d1f1      	bne.n	800969a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80096b6:	4b13      	ldr	r3, [pc, #76]	; (8009704 <xTaskResumeAll+0x130>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096bc:	4b10      	ldr	r3, [pc, #64]	; (8009700 <xTaskResumeAll+0x12c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d009      	beq.n	80096d8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096c4:	2301      	movs	r3, #1
 80096c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096c8:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <xTaskResumeAll+0x134>)
 80096ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d8:	f000 fbc4 	bl	8009e64 <vPortExitCritical>

	return xAlreadyYielded;
 80096dc:	68bb      	ldr	r3, [r7, #8]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	20000300 	.word	0x20000300
 80096ec:	200002e0 	.word	0x200002e0
 80096f0:	200002b8 	.word	0x200002b8
 80096f4:	200002e8 	.word	0x200002e8
 80096f8:	20000224 	.word	0x20000224
 80096fc:	20000220 	.word	0x20000220
 8009700:	200002f4 	.word	0x200002f4
 8009704:	200002f0 	.word	0x200002f0
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b086      	sub	sp, #24
 8009710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009716:	4b4e      	ldr	r3, [pc, #312]	; (8009850 <xTaskIncrementTick+0x144>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f040 8087 	bne.w	800982e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009720:	4b4c      	ldr	r3, [pc, #304]	; (8009854 <xTaskIncrementTick+0x148>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009728:	4a4a      	ldr	r2, [pc, #296]	; (8009854 <xTaskIncrementTick+0x148>)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d11f      	bne.n	8009774 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009734:	4b48      	ldr	r3, [pc, #288]	; (8009858 <xTaskIncrementTick+0x14c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <xTaskIncrementTick+0x46>
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	e7fe      	b.n	8009750 <xTaskIncrementTick+0x44>
 8009752:	4b41      	ldr	r3, [pc, #260]	; (8009858 <xTaskIncrementTick+0x14c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]
 8009758:	4b40      	ldr	r3, [pc, #256]	; (800985c <xTaskIncrementTick+0x150>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a3e      	ldr	r2, [pc, #248]	; (8009858 <xTaskIncrementTick+0x14c>)
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	4a3e      	ldr	r2, [pc, #248]	; (800985c <xTaskIncrementTick+0x150>)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	4b3e      	ldr	r3, [pc, #248]	; (8009860 <xTaskIncrementTick+0x154>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3301      	adds	r3, #1
 800976c:	4a3c      	ldr	r2, [pc, #240]	; (8009860 <xTaskIncrementTick+0x154>)
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	f000 fa0c 	bl	8009b8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009774:	4b3b      	ldr	r3, [pc, #236]	; (8009864 <xTaskIncrementTick+0x158>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	429a      	cmp	r2, r3
 800977c:	d348      	bcc.n	8009810 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800977e:	4b36      	ldr	r3, [pc, #216]	; (8009858 <xTaskIncrementTick+0x14c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d104      	bne.n	8009792 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009788:	4b36      	ldr	r3, [pc, #216]	; (8009864 <xTaskIncrementTick+0x158>)
 800978a:	f04f 32ff 	mov.w	r2, #4294967295
 800978e:	601a      	str	r2, [r3, #0]
					break;
 8009790:	e03e      	b.n	8009810 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009792:	4b31      	ldr	r3, [pc, #196]	; (8009858 <xTaskIncrementTick+0x14c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d203      	bcs.n	80097b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097aa:	4a2e      	ldr	r2, [pc, #184]	; (8009864 <xTaskIncrementTick+0x158>)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097b0:	e02e      	b.n	8009810 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fc71 	bl	800909e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d004      	beq.n	80097ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3318      	adds	r3, #24
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fc68 	bl	800909e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	2201      	movs	r2, #1
 80097d4:	409a      	lsls	r2, r3
 80097d6:	4b24      	ldr	r3, [pc, #144]	; (8009868 <xTaskIncrementTick+0x15c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4313      	orrs	r3, r2
 80097dc:	4a22      	ldr	r2, [pc, #136]	; (8009868 <xTaskIncrementTick+0x15c>)
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4a1f      	ldr	r2, [pc, #124]	; (800986c <xTaskIncrementTick+0x160>)
 80097ee:	441a      	add	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	3304      	adds	r3, #4
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f7ff fbf4 	bl	8008fe4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009800:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <xTaskIncrementTick+0x164>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009806:	429a      	cmp	r2, r3
 8009808:	d3b9      	bcc.n	800977e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800980a:	2301      	movs	r3, #1
 800980c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800980e:	e7b6      	b.n	800977e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009810:	4b17      	ldr	r3, [pc, #92]	; (8009870 <xTaskIncrementTick+0x164>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009816:	4915      	ldr	r1, [pc, #84]	; (800986c <xTaskIncrementTick+0x160>)
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	440b      	add	r3, r1
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d907      	bls.n	8009838 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009828:	2301      	movs	r3, #1
 800982a:	617b      	str	r3, [r7, #20]
 800982c:	e004      	b.n	8009838 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <xTaskIncrementTick+0x168>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	4a0f      	ldr	r2, [pc, #60]	; (8009874 <xTaskIncrementTick+0x168>)
 8009836:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009838:	4b0f      	ldr	r3, [pc, #60]	; (8009878 <xTaskIncrementTick+0x16c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009840:	2301      	movs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009844:	697b      	ldr	r3, [r7, #20]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000300 	.word	0x20000300
 8009854:	200002e4 	.word	0x200002e4
 8009858:	200002b0 	.word	0x200002b0
 800985c:	200002b4 	.word	0x200002b4
 8009860:	200002f8 	.word	0x200002f8
 8009864:	200002fc 	.word	0x200002fc
 8009868:	200002e8 	.word	0x200002e8
 800986c:	20000224 	.word	0x20000224
 8009870:	20000220 	.word	0x20000220
 8009874:	200002f0 	.word	0x200002f0
 8009878:	200002f4 	.word	0x200002f4

0800987c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009882:	4b39      	ldr	r3, [pc, #228]	; (8009968 <vTaskSwitchContext+0xec>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800988a:	4b38      	ldr	r3, [pc, #224]	; (800996c <vTaskSwitchContext+0xf0>)
 800988c:	2201      	movs	r2, #1
 800988e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009890:	e065      	b.n	800995e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009892:	4b36      	ldr	r3, [pc, #216]	; (800996c <vTaskSwitchContext+0xf0>)
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009898:	4b35      	ldr	r3, [pc, #212]	; (8009970 <vTaskSwitchContext+0xf4>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69ba      	ldr	r2, [r7, #24]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d111      	bne.n	80098d4 <vTaskSwitchContext+0x58>
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	3304      	adds	r3, #4
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d10b      	bne.n	80098d4 <vTaskSwitchContext+0x58>
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	3308      	adds	r3, #8
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d105      	bne.n	80098d4 <vTaskSwitchContext+0x58>
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	330c      	adds	r3, #12
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	69ba      	ldr	r2, [r7, #24]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d008      	beq.n	80098e6 <vTaskSwitchContext+0x6a>
 80098d4:	4b26      	ldr	r3, [pc, #152]	; (8009970 <vTaskSwitchContext+0xf4>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	4b25      	ldr	r3, [pc, #148]	; (8009970 <vTaskSwitchContext+0xf4>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3334      	adds	r3, #52	; 0x34
 80098de:	4619      	mov	r1, r3
 80098e0:	4610      	mov	r0, r2
 80098e2:	f7f7 fb0d 	bl	8000f00 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e6:	4b23      	ldr	r3, [pc, #140]	; (8009974 <vTaskSwitchContext+0xf8>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	fab3 f383 	clz	r3, r3
 80098f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80098f4:	7afb      	ldrb	r3, [r7, #11]
 80098f6:	f1c3 031f 	rsb	r3, r3, #31
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	491e      	ldr	r1, [pc, #120]	; (8009978 <vTaskSwitchContext+0xfc>)
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	440b      	add	r3, r1
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d109      	bne.n	8009924 <vTaskSwitchContext+0xa8>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	607b      	str	r3, [r7, #4]
 8009922:	e7fe      	b.n	8009922 <vTaskSwitchContext+0xa6>
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4a12      	ldr	r2, [pc, #72]	; (8009978 <vTaskSwitchContext+0xfc>)
 8009930:	4413      	add	r3, r2
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	685a      	ldr	r2, [r3, #4]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	605a      	str	r2, [r3, #4]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	3308      	adds	r3, #8
 8009946:	429a      	cmp	r2, r3
 8009948:	d104      	bne.n	8009954 <vTaskSwitchContext+0xd8>
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	605a      	str	r2, [r3, #4]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	4a05      	ldr	r2, [pc, #20]	; (8009970 <vTaskSwitchContext+0xf4>)
 800995c:	6013      	str	r3, [r2, #0]
}
 800995e:	bf00      	nop
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000300 	.word	0x20000300
 800996c:	200002f4 	.word	0x200002f4
 8009970:	20000220 	.word	0x20000220
 8009974:	200002e8 	.word	0x200002e8
 8009978:	20000224 	.word	0x20000224

0800997c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d109      	bne.n	80099a0 <vTaskPlaceOnEventList+0x24>
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	60fb      	str	r3, [r7, #12]
 800999e:	e7fe      	b.n	800999e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099a0:	4b07      	ldr	r3, [pc, #28]	; (80099c0 <vTaskPlaceOnEventList+0x44>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3318      	adds	r3, #24
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff fb3f 	bl	800902c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ae:	2101      	movs	r1, #1
 80099b0:	6838      	ldr	r0, [r7, #0]
 80099b2:	f000 f9ad 	bl	8009d10 <prvAddCurrentTaskToDelayedList>
}
 80099b6:	bf00      	nop
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000220 	.word	0x20000220

080099c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <xTaskRemoveFromEventList+0x2a>
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e7fe      	b.n	80099ec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3318      	adds	r3, #24
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7ff fb53 	bl	800909e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099f8:	4b1d      	ldr	r3, [pc, #116]	; (8009a70 <xTaskRemoveFromEventList+0xac>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d11c      	bne.n	8009a3a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff fb4a 	bl	800909e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	2201      	movs	r2, #1
 8009a10:	409a      	lsls	r2, r3
 8009a12:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <xTaskRemoveFromEventList+0xb0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	4a16      	ldr	r2, [pc, #88]	; (8009a74 <xTaskRemoveFromEventList+0xb0>)
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a20:	4613      	mov	r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4a13      	ldr	r2, [pc, #76]	; (8009a78 <xTaskRemoveFromEventList+0xb4>)
 8009a2a:	441a      	add	r2, r3
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	4619      	mov	r1, r3
 8009a32:	4610      	mov	r0, r2
 8009a34:	f7ff fad6 	bl	8008fe4 <vListInsertEnd>
 8009a38:	e005      	b.n	8009a46 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	3318      	adds	r3, #24
 8009a3e:	4619      	mov	r1, r3
 8009a40:	480e      	ldr	r0, [pc, #56]	; (8009a7c <xTaskRemoveFromEventList+0xb8>)
 8009a42:	f7ff facf 	bl	8008fe4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	; (8009a80 <xTaskRemoveFromEventList+0xbc>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d905      	bls.n	8009a60 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <xTaskRemoveFromEventList+0xc0>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	e001      	b.n	8009a64 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a64:	697b      	ldr	r3, [r7, #20]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000300 	.word	0x20000300
 8009a74:	200002e8 	.word	0x200002e8
 8009a78:	20000224 	.word	0x20000224
 8009a7c:	200002b8 	.word	0x200002b8
 8009a80:	20000220 	.word	0x20000220
 8009a84:	200002f4 	.word	0x200002f4

08009a88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a90:	4b06      	ldr	r3, [pc, #24]	; (8009aac <vTaskInternalSetTimeOutState+0x24>)
 8009a92:	681a      	ldr	r2, [r3, #0]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <vTaskInternalSetTimeOutState+0x28>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	605a      	str	r2, [r3, #4]
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	200002f8 	.word	0x200002f8
 8009ab0:	200002e4 	.word	0x200002e4

08009ab4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d109      	bne.n	8009ad8 <xTaskCheckForTimeOut+0x24>
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	e7fe      	b.n	8009ad6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <xTaskCheckForTimeOut+0x3e>
 8009ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e7fe      	b.n	8009af0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009af2:	f000 f989 	bl	8009e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009af6:	4b1d      	ldr	r3, [pc, #116]	; (8009b6c <xTaskCheckForTimeOut+0xb8>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d102      	bne.n	8009b16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b10:	2300      	movs	r3, #0
 8009b12:	61fb      	str	r3, [r7, #28]
 8009b14:	e023      	b.n	8009b5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <xTaskCheckForTimeOut+0xbc>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d007      	beq.n	8009b32 <xTaskCheckForTimeOut+0x7e>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	61fb      	str	r3, [r7, #28]
 8009b30:	e015      	b.n	8009b5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d20b      	bcs.n	8009b54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	1ad2      	subs	r2, r2, r3
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff ff9d 	bl	8009a88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	61fb      	str	r3, [r7, #28]
 8009b52:	e004      	b.n	8009b5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b5e:	f000 f981 	bl	8009e64 <vPortExitCritical>

	return xReturn;
 8009b62:	69fb      	ldr	r3, [r7, #28]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3720      	adds	r7, #32
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	200002e4 	.word	0x200002e4
 8009b70:	200002f8 	.word	0x200002f8

08009b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b78:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <vTaskMissedYield+0x14>)
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
}
 8009b7e:	bf00      	nop
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	200002f4 	.word	0x200002f4

08009b8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b92:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <prvResetNextTaskUnblockTime+0x38>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d104      	bne.n	8009ba6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8009b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ba4:	e008      	b.n	8009bb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba6:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <prvResetNextTaskUnblockTime+0x38>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <prvResetNextTaskUnblockTime+0x3c>)
 8009bb6:	6013      	str	r3, [r2, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	200002b0 	.word	0x200002b0
 8009bc8:	200002fc 	.word	0x200002fc

08009bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009bd2:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <xTaskGetSchedulerState+0x34>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d102      	bne.n	8009be0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	607b      	str	r3, [r7, #4]
 8009bde:	e008      	b.n	8009bf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009be0:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <xTaskGetSchedulerState+0x38>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009be8:	2302      	movs	r3, #2
 8009bea:	607b      	str	r3, [r7, #4]
 8009bec:	e001      	b.n	8009bf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bf2:	687b      	ldr	r3, [r7, #4]
	}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	200002ec 	.word	0x200002ec
 8009c04:	20000300 	.word	0x20000300

08009c08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009c14:	2300      	movs	r3, #0
 8009c16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d06c      	beq.n	8009cf8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009c1e:	4b39      	ldr	r3, [pc, #228]	; (8009d04 <xTaskPriorityDisinherit+0xfc>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d009      	beq.n	8009c3c <xTaskPriorityDisinherit+0x34>
 8009c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e7fe      	b.n	8009c3a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d109      	bne.n	8009c58 <xTaskPriorityDisinherit+0x50>
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	60bb      	str	r3, [r7, #8]
 8009c56:	e7fe      	b.n	8009c56 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c5c:	1e5a      	subs	r2, r3, #1
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d044      	beq.n	8009cf8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d140      	bne.n	8009cf8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3304      	adds	r3, #4
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff fa0f 	bl	800909e <uxListRemove>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d115      	bne.n	8009cb2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8a:	491f      	ldr	r1, [pc, #124]	; (8009d08 <xTaskPriorityDisinherit+0x100>)
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	440b      	add	r3, r1
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10a      	bne.n	8009cb2 <xTaskPriorityDisinherit+0xaa>
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	4b18      	ldr	r3, [pc, #96]	; (8009d0c <xTaskPriorityDisinherit+0x104>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4013      	ands	r3, r2
 8009cae:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <xTaskPriorityDisinherit+0x104>)
 8009cb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbe:	f1c3 0207 	rsb	r2, r3, #7
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cca:	2201      	movs	r2, #1
 8009ccc:	409a      	lsls	r2, r3
 8009cce:	4b0f      	ldr	r3, [pc, #60]	; (8009d0c <xTaskPriorityDisinherit+0x104>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	4a0d      	ldr	r2, [pc, #52]	; (8009d0c <xTaskPriorityDisinherit+0x104>)
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cdc:	4613      	mov	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4a08      	ldr	r2, [pc, #32]	; (8009d08 <xTaskPriorityDisinherit+0x100>)
 8009ce6:	441a      	add	r2, r3
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	3304      	adds	r3, #4
 8009cec:	4619      	mov	r1, r3
 8009cee:	4610      	mov	r0, r2
 8009cf0:	f7ff f978 	bl	8008fe4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cf8:	697b      	ldr	r3, [r7, #20]
	}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3718      	adds	r7, #24
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000220 	.word	0x20000220
 8009d08:	20000224 	.word	0x20000224
 8009d0c:	200002e8 	.word	0x200002e8

08009d10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d1a:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d20:	4b28      	ldr	r3, [pc, #160]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3304      	adds	r3, #4
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff f9b9 	bl	800909e <uxListRemove>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d10b      	bne.n	8009d4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009d32:	4b24      	ldr	r3, [pc, #144]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	2201      	movs	r2, #1
 8009d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3e:	43da      	mvns	r2, r3
 8009d40:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4013      	ands	r3, r2
 8009d46:	4a20      	ldr	r2, [pc, #128]	; (8009dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009d48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d50:	d10a      	bne.n	8009d68 <prvAddCurrentTaskToDelayedList+0x58>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d58:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	4619      	mov	r1, r3
 8009d60:	481a      	ldr	r0, [pc, #104]	; (8009dcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009d62:	f7ff f93f 	bl	8008fe4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009d66:	e026      	b.n	8009db6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d70:	4b14      	ldr	r3, [pc, #80]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d209      	bcs.n	8009d94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d80:	4b13      	ldr	r3, [pc, #76]	; (8009dd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7ff f94d 	bl	800902c <vListInsert>
}
 8009d92:	e010      	b.n	8009db6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d94:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7ff f943 	bl	800902c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d202      	bcs.n	8009db6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009db0:	4a09      	ldr	r2, [pc, #36]	; (8009dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	6013      	str	r3, [r2, #0]
}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	200002e4 	.word	0x200002e4
 8009dc4:	20000220 	.word	0x20000220
 8009dc8:	200002e8 	.word	0x200002e8
 8009dcc:	200002cc 	.word	0x200002cc
 8009dd0:	200002b4 	.word	0x200002b4
 8009dd4:	200002b0 	.word	0x200002b0
 8009dd8:	200002fc 	.word	0x200002fc
 8009ddc:	00000000 	.word	0x00000000

08009de0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009de0:	4b07      	ldr	r3, [pc, #28]	; (8009e00 <pxCurrentTCBConst2>)
 8009de2:	6819      	ldr	r1, [r3, #0]
 8009de4:	6808      	ldr	r0, [r1, #0]
 8009de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dea:	f380 8809 	msr	PSP, r0
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f04f 0000 	mov.w	r0, #0
 8009df6:	f380 8811 	msr	BASEPRI, r0
 8009dfa:	4770      	bx	lr
 8009dfc:	f3af 8000 	nop.w

08009e00 <pxCurrentTCBConst2>:
 8009e00:	20000220 	.word	0x20000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop

08009e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <vPortEnterCritical+0x54>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	4a0d      	ldr	r2, [pc, #52]	; (8009e5c <vPortEnterCritical+0x54>)
 8009e28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <vPortEnterCritical+0x54>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d10e      	bne.n	8009e50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e32:	4b0b      	ldr	r3, [pc, #44]	; (8009e60 <vPortEnterCritical+0x58>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <vPortEnterCritical+0x48>
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	603b      	str	r3, [r7, #0]
 8009e4e:	e7fe      	b.n	8009e4e <vPortEnterCritical+0x46>
	}
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	20000054 	.word	0x20000054
 8009e60:	e000ed04 	.word	0xe000ed04

08009e64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e6a:	4b11      	ldr	r3, [pc, #68]	; (8009eb0 <vPortExitCritical+0x4c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d109      	bne.n	8009e86 <vPortExitCritical+0x22>
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	607b      	str	r3, [r7, #4]
 8009e84:	e7fe      	b.n	8009e84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009e86:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <vPortExitCritical+0x4c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	4a08      	ldr	r2, [pc, #32]	; (8009eb0 <vPortExitCritical+0x4c>)
 8009e8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e90:	4b07      	ldr	r3, [pc, #28]	; (8009eb0 <vPortExitCritical+0x4c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <vPortExitCritical+0x3e>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20000054 	.word	0x20000054
	...

08009ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ec0:	f3ef 8009 	mrs	r0, PSP
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <pxCurrentTCBConst>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	f01e 0f10 	tst.w	lr, #16
 8009ed0:	bf08      	it	eq
 8009ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eda:	6010      	str	r0, [r2, #0]
 8009edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ee4:	f380 8811 	msr	BASEPRI, r0
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f7ff fcc4 	bl	800987c <vTaskSwitchContext>
 8009ef4:	f04f 0000 	mov.w	r0, #0
 8009ef8:	f380 8811 	msr	BASEPRI, r0
 8009efc:	bc09      	pop	{r0, r3}
 8009efe:	6819      	ldr	r1, [r3, #0]
 8009f00:	6808      	ldr	r0, [r1, #0]
 8009f02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f06:	f01e 0f10 	tst.w	lr, #16
 8009f0a:	bf08      	it	eq
 8009f0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f10:	f380 8809 	msr	PSP, r0
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	f3af 8000 	nop.w

08009f20 <pxCurrentTCBConst>:
 8009f20:	20000220 	.word	0x20000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f24:	bf00      	nop
 8009f26:	bf00      	nop

08009f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f32:	f383 8811 	msr	BASEPRI, r3
 8009f36:	f3bf 8f6f 	isb	sy
 8009f3a:	f3bf 8f4f 	dsb	sy
 8009f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f40:	f7ff fbe4 	bl	800970c <xTaskIncrementTick>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f4a:	4b06      	ldr	r3, [pc, #24]	; (8009f64 <SysTick_Handler+0x3c>)
 8009f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f50:	601a      	str	r2, [r3, #0]
 8009f52:	2300      	movs	r3, #0
 8009f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f6e:	f3ef 8305 	mrs	r3, IPSR
 8009f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b0f      	cmp	r3, #15
 8009f78:	d913      	bls.n	8009fa2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f7a:	4a16      	ldr	r2, [pc, #88]	; (8009fd4 <vPortValidateInterruptPriority+0x6c>)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f84:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <vPortValidateInterruptPriority+0x70>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	7afa      	ldrb	r2, [r7, #11]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d209      	bcs.n	8009fa2 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
 8009fa0:	e7fe      	b.n	8009fa0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <vPortValidateInterruptPriority+0x74>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009faa:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <vPortValidateInterruptPriority+0x78>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d909      	bls.n	8009fc6 <vPortValidateInterruptPriority+0x5e>
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	e7fe      	b.n	8009fc4 <vPortValidateInterruptPriority+0x5c>
	}
 8009fc6:	bf00      	nop
 8009fc8:	3714      	adds	r7, #20
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	e000e3f0 	.word	0xe000e3f0
 8009fd8:	20000304 	.word	0x20000304
 8009fdc:	e000ed0c 	.word	0xe000ed0c
 8009fe0:	20000308 	.word	0x20000308

08009fe4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe fec8 	bl	8008d88 <USBH_LL_IncTimer>
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fe ff0c 	bl	8008e2c <USBH_LL_Connect>
}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fe ff21 	bl	8008e72 <USBH_LL_Disconnect>
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
 800a044:	4613      	mov	r3, r2
 800a046:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe ff41 	bl	8008ed6 <USBH_LL_NotifyURBChange>
#endif
}
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe feb6 	bl	8008ddc <USBH_LL_PortEnabled>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe fec2 	bl	8008e10 <USBH_LL_PortDisabled>
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fa f853 	bl	8004156 <HAL_HCD_Stop>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f808 	bl	800a0cc <USBH_Get_USB_Status>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0da:	79fb      	ldrb	r3, [r7, #7]
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d817      	bhi.n	800a110 <USBH_Get_USB_Status+0x44>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <USBH_Get_USB_Status+0x1c>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a0f9 	.word	0x0800a0f9
 800a0ec:	0800a0ff 	.word	0x0800a0ff
 800a0f0:	0800a105 	.word	0x0800a105
 800a0f4:	0800a10b 	.word	0x0800a10b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a0fc:	e00b      	b.n	800a116 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a0fe:	2302      	movs	r3, #2
 800a100:	73fb      	strb	r3, [r7, #15]
    break;
 800a102:	e008      	b.n	800a116 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a104:	2301      	movs	r3, #1
 800a106:	73fb      	strb	r3, [r7, #15]
    break;
 800a108:	e005      	b.n	800a116 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a10a:	2302      	movs	r3, #2
 800a10c:	73fb      	strb	r3, [r7, #15]
    break;
 800a10e:	e002      	b.n	800a116 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a110:	2302      	movs	r3, #2
 800a112:	73fb      	strb	r3, [r7, #15]
    break;
 800a114:	bf00      	nop
  }
  return usb_status;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <__libc_init_array>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	4e0d      	ldr	r6, [pc, #52]	; (800a15c <__libc_init_array+0x38>)
 800a128:	4c0d      	ldr	r4, [pc, #52]	; (800a160 <__libc_init_array+0x3c>)
 800a12a:	1ba4      	subs	r4, r4, r6
 800a12c:	10a4      	asrs	r4, r4, #2
 800a12e:	2500      	movs	r5, #0
 800a130:	42a5      	cmp	r5, r4
 800a132:	d109      	bne.n	800a148 <__libc_init_array+0x24>
 800a134:	4e0b      	ldr	r6, [pc, #44]	; (800a164 <__libc_init_array+0x40>)
 800a136:	4c0c      	ldr	r4, [pc, #48]	; (800a168 <__libc_init_array+0x44>)
 800a138:	f000 f82c 	bl	800a194 <_init>
 800a13c:	1ba4      	subs	r4, r4, r6
 800a13e:	10a4      	asrs	r4, r4, #2
 800a140:	2500      	movs	r5, #0
 800a142:	42a5      	cmp	r5, r4
 800a144:	d105      	bne.n	800a152 <__libc_init_array+0x2e>
 800a146:	bd70      	pop	{r4, r5, r6, pc}
 800a148:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a14c:	4798      	blx	r3
 800a14e:	3501      	adds	r5, #1
 800a150:	e7ee      	b.n	800a130 <__libc_init_array+0xc>
 800a152:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a156:	4798      	blx	r3
 800a158:	3501      	adds	r5, #1
 800a15a:	e7f2      	b.n	800a142 <__libc_init_array+0x1e>
 800a15c:	0800bc8c 	.word	0x0800bc8c
 800a160:	0800bc8c 	.word	0x0800bc8c
 800a164:	0800bc8c 	.word	0x0800bc8c
 800a168:	0800bc90 	.word	0x0800bc90

0800a16c <memcpy>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	1e43      	subs	r3, r0, #1
 800a170:	440a      	add	r2, r1
 800a172:	4291      	cmp	r1, r2
 800a174:	d100      	bne.n	800a178 <memcpy+0xc>
 800a176:	bd10      	pop	{r4, pc}
 800a178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a17c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a180:	e7f7      	b.n	800a172 <memcpy+0x6>

0800a182 <memset>:
 800a182:	4402      	add	r2, r0
 800a184:	4603      	mov	r3, r0
 800a186:	4293      	cmp	r3, r2
 800a188:	d100      	bne.n	800a18c <memset+0xa>
 800a18a:	4770      	bx	lr
 800a18c:	f803 1b01 	strb.w	r1, [r3], #1
 800a190:	e7f9      	b.n	800a186 <memset+0x4>
	...

0800a194 <_init>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	bf00      	nop
 800a198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19a:	bc08      	pop	{r3}
 800a19c:	469e      	mov	lr, r3
 800a19e:	4770      	bx	lr

0800a1a0 <_fini>:
 800a1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a2:	bf00      	nop
 800a1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a6:	bc08      	pop	{r3}
 800a1a8:	469e      	mov	lr, r3
 800a1aa:	4770      	bx	lr
