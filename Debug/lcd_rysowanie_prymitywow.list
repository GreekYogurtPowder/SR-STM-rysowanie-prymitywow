
lcd_rysowanie_prymitywow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e49c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b44  0800e64c  0800e64c  0001e64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010190  08010190  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010190  08010190  00020190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010198  08010198  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010198  08010198  00020198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801019c  0801019c  0002019c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080101a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f70  200000dc  0801027c  000300dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000904c  0801027c  0003904c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034e27  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006e46  00000000  00000000  00064f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002700  00000000  00000000  0006bd80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023d0  00000000  00000000  0006e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b6c8  00000000  00000000  00070850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a024  00000000  00000000  0007bf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f63e9  00000000  00000000  000a5f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019c325  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a308  00000000  00000000  0019c3a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e634 	.word	0x0800e634

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	0800e634 	.word	0x0800e634

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_CRC_Init+0x20>)
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_CRC_Init+0x24>)
 80004f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_CRC_Init+0x20>)
 80004fc:	f002 f9a4 	bl	8002848 <HAL_CRC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000506:	f000 fe17 	bl	8001138 <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	2000865c 	.word	0x2000865c
 8000514:	40023000 	.word	0x40023000

08000518 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_CRC_MspInit+0x3c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10d      	bne.n	8000546 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_CRC_MspInit+0x40>)
 8000534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <HAL_CRC_MspInit+0x40>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023000 	.word	0x40023000
 8000558:	40023800 	.word	0x40023800

0800055c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000562:	4a16      	ldr	r2, [pc, #88]	; (80005bc <MX_DMA2D_Init+0x60>)
 8000564:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000580:	2200      	movs	r2, #0
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000586:	2200      	movs	r2, #0
 8000588:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 800058c:	2200      	movs	r2, #0
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 8000592:	f002 fb31 	bl	8002bf8 <HAL_DMA2D_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800059c:	f000 fdcc 	bl	8001138 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005a0:	2101      	movs	r1, #1
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_DMA2D_Init+0x5c>)
 80005a4:	f002 fd96 	bl	80030d4 <HAL_DMA2D_ConfigLayer>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005ae:	f000 fdc3 	bl	8001138 <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20008664 	.word	0x20008664
 80005bc:	4002b000 	.word	0x4002b000

080005c0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_DMA2D_MspInit+0x48>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d115      	bne.n	80005fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_DMA2D_MspInit+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	205a      	movs	r0, #90	; 0x5a
 80005f4:	f002 f8fe 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005f8:	205a      	movs	r0, #90	; 0x5a
 80005fa:	f002 f917 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	4002b000 	.word	0x4002b000
 800060c:	40023800 	.word	0x40023800

08000610 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_FMC_Init+0x98>)
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <MX_FMC_Init+0x9c>)
 800062c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_FMC_Init+0x98>)
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_FMC_Init+0x98>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_FMC_Init+0x98>)
 800063c:	2204      	movs	r2, #4
 800063e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_FMC_Init+0x98>)
 8000642:	2210      	movs	r2, #16
 8000644:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_FMC_Init+0x98>)
 8000648:	2240      	movs	r2, #64	; 0x40
 800064a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_FMC_Init+0x98>)
 800064e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000652:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_FMC_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_FMC_Init+0x98>)
 800065c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000660:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_FMC_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_FMC_Init+0x98>)
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000680:	2303      	movs	r3, #3
 8000682:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_FMC_Init+0x98>)
 8000692:	f006 f9a3 	bl	80069dc <HAL_SDRAM_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800069c:	f000 fd4c 	bl	8001138 <Error_Handler>
  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200086a4 	.word	0x200086a4
 80006ac:	a0000140 	.word	0xa0000140

080006b0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006c4:	4b3b      	ldr	r3, [pc, #236]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d16f      	bne.n	80007ac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006cc:	4b39      	ldr	r3, [pc, #228]	; (80007b4 <HAL_FMC_MspInit+0x104>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b38      	ldr	r3, [pc, #224]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	4a37      	ldr	r2, [pc, #220]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_FMC_MspInit+0x108>)
 80006e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <HAL_FMC_MspInit+0x10c>)
 800070a:	f002 fe11 	bl	8003330 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800071e:	230c      	movs	r3, #12
 8000720:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	4619      	mov	r1, r3
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <HAL_FMC_MspInit+0x110>)
 8000728:	f002 fe02 	bl	8003330 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800072c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000730:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800073e:	230c      	movs	r3, #12
 8000740:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <HAL_FMC_MspInit+0x114>)
 8000748:	f002 fdf2 	bl	8003330 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800074c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000750:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800075e:	230c      	movs	r3, #12
 8000760:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <HAL_FMC_MspInit+0x118>)
 8000768:	f002 fde2 	bl	8003330 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800076c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000770:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800077e:	230c      	movs	r3, #12
 8000780:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <HAL_FMC_MspInit+0x11c>)
 8000788:	f002 fdd2 	bl	8003330 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800078c:	2360      	movs	r3, #96	; 0x60
 800078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480a      	ldr	r0, [pc, #40]	; (80007d0 <HAL_FMC_MspInit+0x120>)
 80007a6:	f002 fdc3 	bl	8003330 <HAL_GPIO_Init>
 80007aa:	e000      	b.n	80007ae <HAL_FMC_MspInit+0xfe>
    return;
 80007ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200000f8 	.word	0x200000f8
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40021400 	.word	0x40021400
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40021800 	.word	0x40021800
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40020c00 	.word	0x40020c00
 80007d0:	40020400 	.word	0x40020400

080007d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007dc:	f7ff ff68 	bl	80006b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4a07      	ldr	r2, [pc, #28]	; (8000848 <vApplicationGetIdleTaskMemory+0x2c>)
 800082c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <vApplicationGetIdleTaskMemory+0x30>)
 8000832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200000fc 	.word	0x200000fc
 800084c:	20000154 	.word	0x20000154

08000850 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000850:	b5b0      	push	{r4, r5, r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_FREERTOS_Init+0x30>)
 8000858:	1d3c      	adds	r4, r7, #4
 800085a:	461d      	mov	r5, r3
 800085c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000860:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000864:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f00b f89e 	bl	800b9ae <osThreadCreate>
 8000872:	4602      	mov	r2, r0
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <MX_FREERTOS_Init+0x34>)
 8000876:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bdb0      	pop	{r4, r5, r7, pc}
 8000880:	0800e658 	.word	0x0800e658
 8000884:	200086d8 	.word	0x200086d8

08000888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000890:	f00d fac0 	bl	800de14 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f00b f8d6 	bl	800ba46 <osDelay>
 800089a:	e7fb      	b.n	8000894 <StartDefaultTask+0xc>

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08e      	sub	sp, #56	; 0x38
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a79      	ldr	r2, [pc, #484]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	623b      	str	r3, [r7, #32]
 80008cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
 80008d2:	4b73      	ldr	r3, [pc, #460]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a72      	ldr	r2, [pc, #456]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008d8:	f043 0320 	orr.w	r3, r3, #32
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b70      	ldr	r3, [pc, #448]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0320 	and.w	r3, r3, #32
 80008e6:	61fb      	str	r3, [r7, #28]
 80008e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a6b      	ldr	r2, [pc, #428]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b69      	ldr	r3, [pc, #420]	; (8000aa0 <MX_GPIO_Init+0x204>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a64      	ldr	r2, [pc, #400]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b5e      	ldr	r3, [pc, #376]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a5d      	ldr	r2, [pc, #372]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b5b      	ldr	r3, [pc, #364]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b57      	ldr	r3, [pc, #348]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b54      	ldr	r3, [pc, #336]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b50      	ldr	r3, [pc, #320]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0310 	and.w	r3, r3, #16
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x204>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a48      	ldr	r2, [pc, #288]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x204>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2116      	movs	r1, #22
 8000996:	4843      	ldr	r0, [pc, #268]	; (8000aa4 <MX_GPIO_Init+0x208>)
 8000998:	f002 ff7e 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	4841      	ldr	r0, [pc, #260]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 80009a2:	f002 ff79 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009ac:	483f      	ldr	r0, [pc, #252]	; (8000aac <MX_GPIO_Init+0x210>)
 80009ae:	f002 ff73 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009b8:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x214>)
 80009ba:	f002 ff6d 	bl	8003898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009be:	2316      	movs	r3, #22
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4833      	ldr	r0, [pc, #204]	; (8000aa4 <MX_GPIO_Init+0x208>)
 80009d6:	f002 fcab 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009da:	f248 0307 	movw	r3, #32775	; 0x8007
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x218>)
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 80009f0:	f002 fc9e 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <MX_GPIO_Init+0x20c>)
 8000a0c:	f002 fc90 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a10:	2320      	movs	r3, #32
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x218>)
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_GPIO_Init+0x208>)
 8000a24:	f002 fc84 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	481f      	ldr	r0, [pc, #124]	; (8000ab8 <MX_GPIO_Init+0x21c>)
 8000a3c:	f002 fc78 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_GPIO_Init+0x210>)
 8000a56:	f002 fc6b 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x210>)
 8000a74:	f002 fc5c 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a78:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_GPIO_Init+0x214>)
 8000a92:	f002 fc4d 	bl	8003330 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	10120000 	.word	0x10120000
 8000ab8:	40020400 	.word	0x40020400

08000abc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_I2C3_Init+0x78>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <MX_I2C3_Init+0x7c>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000afa:	f004 fbd7 	bl	80052ac <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 fb18 	bl	8001138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4809      	ldr	r0, [pc, #36]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000b0c:	f004 fd06 	bl	800551c <HAL_I2CEx_ConfigAnalogFilter>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b16:	f000 fb0f 	bl	8001138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_I2C3_Init+0x74>)
 8000b1e:	f004 fd39 	bl	8005594 <HAL_I2CEx_ConfigDigitalFilter>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 fb06 	bl	8001138 <Error_Handler>
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200086dc 	.word	0x200086dc
 8000b34:	40005c00 	.word	0x40005c00
 8000b38:	000186a0 	.word	0x000186a0

08000b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a29      	ldr	r2, [pc, #164]	; (8000c00 <HAL_I2C_MspInit+0xc4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d14b      	bne.n	8000bf6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9c:	2312      	movs	r3, #18
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4815      	ldr	r0, [pc, #84]	; (8000c08 <HAL_I2C_MspInit+0xcc>)
 8000bb4:	f002 fbbc 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <HAL_I2C_MspInit+0xd0>)
 8000bd6:	f002 fbab 	bl	8003330 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_I2C_MspInit+0xc8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40005c00 	.word	0x40005c00
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09a      	sub	sp, #104	; 0x68
 8000c14:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c1a:	2234      	movs	r2, #52	; 0x34
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f00d fc45 	bl	800e4ae <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2234      	movs	r2, #52	; 0x34
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f00d fc3f 	bl	800e4ae <memset>

  hltdc.Instance = LTDC;
 8000c30:	4b4f      	ldr	r3, [pc, #316]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c32:	4a50      	ldr	r2, [pc, #320]	; (8000d74 <MX_LTDC_Init+0x164>)
 8000c34:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c36:	4b4e      	ldr	r3, [pc, #312]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c3c:	4b4c      	ldr	r3, [pc, #304]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c42:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c48:	4b49      	ldr	r3, [pc, #292]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c4e:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c50:	2209      	movs	r2, #9
 8000c52:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c54:	4b46      	ldr	r3, [pc, #280]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c5c:	221d      	movs	r2, #29
 8000c5e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c62:	2203      	movs	r2, #3
 8000c64:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c66:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c68:	f240 120d 	movw	r2, #269	; 0x10d
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c70:	f240 1243 	movw	r2, #323	; 0x143
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c76:	4b3e      	ldr	r3, [pc, #248]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c78:	f240 1217 	movw	r2, #279	; 0x117
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c7e:	4b3c      	ldr	r3, [pc, #240]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c80:	f240 1247 	movw	r2, #327	; 0x147
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c86:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c96:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c9e:	4834      	ldr	r0, [pc, #208]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000ca0:	f004 fcb8 	bl	8005614 <HAL_LTDC_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000caa:	f000 fa45 	bl	8001138 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 240;
 8000cb2:	23f0      	movs	r3, #240	; 0xf0
 8000cb4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 320;
 8000cba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cbe:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000cc4:	23ff      	movs	r3, #255	; 0xff
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ccc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cd0:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000cd6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000cda:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 240;
 8000cdc:	23f0      	movs	r3, #240	; 0xf0
 8000cde:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 320;
 8000ce0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ce4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cf8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481b      	ldr	r0, [pc, #108]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000d02:	f004 fe19 	bl	8005938 <HAL_LTDC_ConfigLayer>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_LTDC_Init+0x100>
  {
    Error_Handler();
 8000d0c:	f000 fa14 	bl	8001138 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2201      	movs	r2, #1
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_LTDC_Init+0x160>)
 8000d58:	f004 fdee 	bl	8005938 <HAL_LTDC_ConfigLayer>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_LTDC_Init+0x156>
  {
    Error_Handler();
 8000d62:	f000 f9e9 	bl	8001138 <Error_Handler>
  }

}
 8000d66:	bf00      	nop
 8000d68:	3768      	adds	r7, #104	; 0x68
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20008730 	.word	0x20008730
 8000d74:	40016800 	.word	0x40016800

08000d78 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a7b      	ldr	r2, [pc, #492]	; (8000f84 <HAL_LTDC_MspInit+0x20c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	f040 80f0 	bne.w	8000f7c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
 8000da0:	4b79      	ldr	r3, [pc, #484]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	4a78      	ldr	r2, [pc, #480]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000da6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000daa:	6453      	str	r3, [r2, #68]	; 0x44
 8000dac:	4b76      	ldr	r3, [pc, #472]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000db4:	623b      	str	r3, [r7, #32]
 8000db6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	4b72      	ldr	r3, [pc, #456]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	4a71      	ldr	r2, [pc, #452]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dc2:	f043 0320 	orr.w	r3, r3, #32
 8000dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc8:	4b6f      	ldr	r3, [pc, #444]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a6a      	ldr	r2, [pc, #424]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
 8000de4:	4b68      	ldr	r3, [pc, #416]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
 8000dee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	4b64      	ldr	r3, [pc, #400]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a63      	ldr	r2, [pc, #396]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b61      	ldr	r3, [pc, #388]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	4b5d      	ldr	r3, [pc, #372]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a5c      	ldr	r2, [pc, #368]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b5a      	ldr	r3, [pc, #360]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	4b56      	ldr	r3, [pc, #344]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	4a55      	ldr	r2, [pc, #340]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6313      	str	r3, [r2, #48]	; 0x30
 8000e38:	4b53      	ldr	r3, [pc, #332]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b4c      	ldr	r3, [pc, #304]	; (8000f88 <HAL_LTDC_MspInit+0x210>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e72:	230e      	movs	r3, #14
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4843      	ldr	r0, [pc, #268]	; (8000f8c <HAL_LTDC_MspInit+0x214>)
 8000e7e:	f002 fa57 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e82:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e94:	230e      	movs	r3, #14
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	483c      	ldr	r0, [pc, #240]	; (8000f90 <HAL_LTDC_MspInit+0x218>)
 8000ea0:	f002 fa46 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eb4:	2309      	movs	r3, #9
 8000eb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4835      	ldr	r0, [pc, #212]	; (8000f94 <HAL_LTDC_MspInit+0x21c>)
 8000ec0:	f002 fa36 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ec4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	482c      	ldr	r0, [pc, #176]	; (8000f94 <HAL_LTDC_MspInit+0x21c>)
 8000ee2:	f002 fa25 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ee6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ef8:	230e      	movs	r3, #14
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4825      	ldr	r0, [pc, #148]	; (8000f98 <HAL_LTDC_MspInit+0x220>)
 8000f04:	f002 fa14 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f08:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f1a:	230e      	movs	r3, #14
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <HAL_LTDC_MspInit+0x224>)
 8000f26:	f002 fa03 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f2a:	2348      	movs	r3, #72	; 0x48
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f3a:	230e      	movs	r3, #14
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <HAL_LTDC_MspInit+0x228>)
 8000f46:	f002 f9f3 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f5c:	2309      	movs	r3, #9
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_LTDC_MspInit+0x220>)
 8000f68:	f002 f9e2 	bl	8003330 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2105      	movs	r1, #5
 8000f70:	2058      	movs	r0, #88	; 0x58
 8000f72:	f001 fc3f 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f76:	2058      	movs	r0, #88	; 0x58
 8000f78:	f001 fc58 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40016800 	.word	0x40016800
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021400 	.word	0x40021400
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40020400 	.word	0x40020400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	40020c00 	.word	0x40020c00

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f001 fb08 	bl	80025bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f82e 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff fc74 	bl	800089c <MX_GPIO_Init>
  MX_CRC_Init();
 8000fb4:	f7ff fa9c 	bl	80004f0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000fb8:	f7ff fad0 	bl	800055c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fbc:	f7ff fb28 	bl	8000610 <MX_FMC_Init>
  MX_I2C3_Init();
 8000fc0:	f7ff fd7c 	bl	8000abc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fc4:	f7ff fe24 	bl	8000c10 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fc8:	f000 f8be 	bl	8001148 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000fcc:	f000 fa6e 	bl	80014ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000fd0:	f000 fade 	bl	8001590 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();                                                     //Wlaczenie biblioteki
 8000fd4:	f000 fed2 	bl	8001d7c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie pierwszej warstw
 8000fd8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 ff4f 	bl	8001e80 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie drugiej warstwy
 8000fe2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f000 ff4a 	bl	8001e80 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);                          //Wybranie warstwy aktywnej
 8000fec:	2001      	movs	r0, #1
 8000fee:	f000 ffab 	bl	8001f48 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();                                                //Wlaczenie podswietlania
 8000ff2:	f000 fffb 	bl	8001fec <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);                                     //Kolor Tla
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <main+0x64>)
 8000ff8:	f000 ffd0 	bl	8001f9c <BSP_LCD_Clear>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000ffc:	f7ff fc28 	bl	8000850 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001000:	f00a fcce 	bl	800b9a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0x60>
 8001006:	bf00      	nop
 8001008:	ff0000ff 	.word	0xff0000ff

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0a0      	sub	sp, #128	; 0x80
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001016:	2230      	movs	r2, #48	; 0x30
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00d fa47 	bl	800e4ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2230      	movs	r2, #48	; 0x30
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00d fa38 	bl	800e4ae <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <SystemClock_Config+0x100>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <SystemClock_Config+0x100>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <SystemClock_Config+0x100>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <SystemClock_Config+0x104>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <SystemClock_Config+0x104>)
 8001064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <SystemClock_Config+0x104>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001076:	2301      	movs	r3, #1
 8001078:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800107a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001088:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800108a:	2308      	movs	r3, #8
 800108c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 800108e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001092:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001094:	2302      	movs	r3, #2
 8001096:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001098:	2307      	movs	r3, #7
 800109a:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 fe49 	bl	8005d38 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010ac:	f000 f844 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b4:	2302      	movs	r3, #2
 80010b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010cc:	2105      	movs	r1, #5
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 f8a2 	bl	8006218 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010da:	f000 f82d 	bl	8001138 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010de:	2308      	movs	r3, #8
 80010e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 80010e2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010e6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fab3 	bl	8006660 <HAL_RCCEx_PeriphCLKConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001100:	f000 f81a 	bl	8001138 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3780      	adds	r7, #128	; 0x80
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001126:	f001 fa6b 	bl	8002600 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40001000 	.word	0x40001000

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_SPI5_Init+0x68>)
 800114e:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <MX_SPI5_Init+0x6c>)
 8001150:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001154:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001158:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_SPI5_Init+0x68>)
 800115c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001160:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI5_Init+0x68>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI5_Init+0x68>)
 800117e:	2218      	movs	r2, #24
 8001180:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI5_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI5_Init+0x68>)
 8001196:	220a      	movs	r2, #10
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_SPI5_Init+0x68>)
 800119c:	f005 fc9d 	bl	8006ada <HAL_SPI_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 80011a6:	f7ff ffc7 	bl	8001138 <Error_Handler>
  }

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200087d8 	.word	0x200087d8
 80011b4:	40015000 	.word	0x40015000

080011b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_SPI_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12c      	bne.n	8001234 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_SPI_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a10      	ldr	r2, [pc, #64]	; (8001240 <HAL_SPI_MspInit+0x88>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_SPI_MspInit+0x88>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001212:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001224:	2305      	movs	r3, #5
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <HAL_SPI_MspInit+0x8c>)
 8001230:	f002 f87e 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40015000 	.word	0x40015000
 8001240:	40023800 	.word	0x40023800
 8001244:	40021400 	.word	0x40021400

08001248 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a08      	ldr	r2, [pc, #32]	; (8001278 <HAL_SPI_MspDeInit+0x30>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d10a      	bne.n	8001270 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_SPI_MspDeInit+0x34>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <HAL_SPI_MspDeInit+0x34>)
 8001260:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001266:	f44f 7160 	mov.w	r1, #896	; 0x380
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <HAL_SPI_MspDeInit+0x38>)
 800126c:	f002 fa0a 	bl	8003684 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40015000 	.word	0x40015000
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_MspInit+0x54>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_MspInit+0x54>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_MspInit+0x54>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_MspInit+0x54>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_MspInit+0x54>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_MspInit+0x54>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	210f      	movs	r1, #15
 80012c6:	f06f 0001 	mvn.w	r0, #1
 80012ca:	f001 fa93 	bl	80027f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	; 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2036      	movs	r0, #54	; 0x36
 80012f2:	f001 fa7f 	bl	80027f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f6:	2036      	movs	r0, #54	; 0x36
 80012f8:	f001 fa98 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_InitTick+0xa4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <HAL_InitTick+0xa4>)
 8001306:	f043 0310 	orr.w	r3, r3, #16
 800130a:	6413      	str	r3, [r2, #64]	; 0x40
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_InitTick+0xa4>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001318:	f107 0210 	add.w	r2, r7, #16
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f005 f96a 	bl	80065fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001328:	f005 f940 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 800132c:	4603      	mov	r3, r0
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_InitTick+0xa8>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9b      	lsrs	r3, r3, #18
 800133c:	3b01      	subs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_InitTick+0xac>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <HAL_InitTick+0xb0>)
 8001344:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_InitTick+0xac>)
 8001348:	f240 32e7 	movw	r2, #999	; 0x3e7
 800134c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_InitTick+0xac>)
 8001350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001352:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_InitTick+0xac>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_InitTick+0xac>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <HAL_InitTick+0xac>)
 8001362:	f006 f945 	bl	80075f0 <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d104      	bne.n	8001376 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800136c:	4806      	ldr	r0, [pc, #24]	; (8001388 <HAL_InitTick+0xac>)
 800136e:	f006 f96a 	bl	8007646 <HAL_TIM_Base_Start_IT>
 8001372:	4603      	mov	r3, r0
 8001374:	e000      	b.n	8001378 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3730      	adds	r7, #48	; 0x30
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	431bde83 	.word	0x431bde83
 8001388:	20008830 	.word	0x20008830
 800138c:	40001000 	.word	0x40001000

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <TIM6_DAC_IRQHandler+0x10>)
 80013ca:	f006 f960 	bl	800768e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20008830 	.word	0x20008830

080013d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <OTG_HS_IRQHandler+0x10>)
 80013de:	f002 fd03 	bl	8003de8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20008d84 	.word	0x20008d84

080013ec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <LTDC_IRQHandler+0x10>)
 80013f2:	f004 f9df 	bl	80057b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20008730 	.word	0x20008730

08001400 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <DMA2D_IRQHandler+0x10>)
 8001406:	f001 fd54 	bl	8002eb2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20008664 	.word	0x20008664

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f00c ffee 	bl	800e424 <__errno>
 8001448:	4602      	mov	r2, r0
 800144a:	230c      	movs	r3, #12
 800144c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20030000 	.word	0x20030000
 8001474:	00000400 	.word	0x00000400
 8001478:	20000354 	.word	0x20000354
 800147c:	20009050 	.word	0x20009050

08001480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <SystemInit+0x28>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <SystemInit+0x28>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <SystemInit+0x28>)
 8001496:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149a:	609a      	str	r2, [r3, #8]
#endif
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ca:	4a1f      	ldr	r2, [pc, #124]	; (8001548 <MX_TIM1_Init+0x9c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MX_TIM1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_TIM1_Init+0x98>)
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_TIM1_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_TIM1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f4:	4813      	ldr	r0, [pc, #76]	; (8001544 <MX_TIM1_Init+0x98>)
 80014f6:	f006 f87b 	bl	80075f0 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001500:	f7ff fe1a 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM1_Init+0x98>)
 8001512:	f006 f9c4 	bl	800789e <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800151c:	f7ff fe0c 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_TIM1_Init+0x98>)
 800152e:	f006 fbcf 	bl	8007cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001538:	f7ff fdfe 	bl	8001138 <Error_Handler>
  }

}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20008870 	.word	0x20008870
 8001548:	40010000 	.word	0x40010000

0800154c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_TIM_Base_MspInit+0x3c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10d      	bne.n	800157a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_TIM_Base_MspInit+0x40>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_TIM_Base_MspInit+0x40>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_TIM_Base_MspInit+0x40>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40010000 	.word	0x40010000
 800158c:	40023800 	.word	0x40023800

08001590 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_USART1_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_USART1_UART_Init+0x4c>)
 80015c8:	f006 fc12 	bl	8007df0 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f7ff fdb1 	bl	8001138 <Error_Handler>
  }

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200088b0 	.word	0x200088b0
 80015e0:	40011000 	.word	0x40011000

080015e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a19      	ldr	r2, [pc, #100]	; (8001668 <HAL_UART_MspInit+0x84>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d12c      	bne.n	8001660 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x88>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x88>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0x88>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_UART_MspInit+0x88>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_UART_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800163e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001650:	2307      	movs	r3, #7
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_MspInit+0x8c>)
 800165c:	f001 fe68 	bl	8003330 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	; 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40011000 	.word	0x40011000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800167a:	e003      	b.n	8001684 <LoopCopyDataInit>

0800167c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800167e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001682:	3104      	adds	r1, #4

08001684 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800168a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800168c:	d3f6      	bcc.n	800167c <CopyDataInit>
  ldr  r2, =_sbss
 800168e:	4a0b      	ldr	r2, [pc, #44]	; (80016bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001690:	e002      	b.n	8001698 <LoopFillZerobss>

08001692 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001694:	f842 3b04 	str.w	r3, [r2], #4

08001698 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800169c:	d3f9      	bcc.n	8001692 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800169e:	f7ff feef 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f00c fec5 	bl	800e430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7ff fc7d 	bl	8000fa4 <main>
  bx  lr    
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80016b0:	080101a0 	.word	0x080101a0
  ldr  r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016b8:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 80016bc:	200000dc 	.word	0x200000dc
  ldr  r3, = _ebss
 80016c0:	2000904c 	.word	0x2000904c

080016c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC_IRQHandler>

080016c6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016ca:	f000 fa5d 	bl	8001b88 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016ce:	20ca      	movs	r0, #202	; 0xca
 80016d0:	f000 f95d 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016d4:	20c3      	movs	r0, #195	; 0xc3
 80016d6:	f000 f967 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016da:	2008      	movs	r0, #8
 80016dc:	f000 f964 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80016e0:	2050      	movs	r0, #80	; 0x50
 80016e2:	f000 f961 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80016e6:	20cf      	movs	r0, #207	; 0xcf
 80016e8:	f000 f951 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f000 f95b 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80016f2:	20c1      	movs	r0, #193	; 0xc1
 80016f4:	f000 f958 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80016f8:	2030      	movs	r0, #48	; 0x30
 80016fa:	f000 f955 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80016fe:	20ed      	movs	r0, #237	; 0xed
 8001700:	f000 f945 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001704:	2064      	movs	r0, #100	; 0x64
 8001706:	f000 f94f 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f94c 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001710:	2012      	movs	r0, #18
 8001712:	f000 f949 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001716:	2081      	movs	r0, #129	; 0x81
 8001718:	f000 f946 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800171c:	20e8      	movs	r0, #232	; 0xe8
 800171e:	f000 f936 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001722:	2085      	movs	r0, #133	; 0x85
 8001724:	f000 f940 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001728:	2000      	movs	r0, #0
 800172a:	f000 f93d 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 f93a 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001734:	20cb      	movs	r0, #203	; 0xcb
 8001736:	f000 f92a 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800173a:	2039      	movs	r0, #57	; 0x39
 800173c:	f000 f934 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001740:	202c      	movs	r0, #44	; 0x2c
 8001742:	f000 f931 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f92e 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800174c:	2034      	movs	r0, #52	; 0x34
 800174e:	f000 f92b 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001752:	2002      	movs	r0, #2
 8001754:	f000 f928 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001758:	20f7      	movs	r0, #247	; 0xf7
 800175a:	f000 f918 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800175e:	2020      	movs	r0, #32
 8001760:	f000 f922 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001764:	20ea      	movs	r0, #234	; 0xea
 8001766:	f000 f912 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f91c 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001770:	2000      	movs	r0, #0
 8001772:	f000 f919 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001776:	20b1      	movs	r0, #177	; 0xb1
 8001778:	f000 f909 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800177c:	2000      	movs	r0, #0
 800177e:	f000 f913 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001782:	201b      	movs	r0, #27
 8001784:	f000 f910 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001788:	20b6      	movs	r0, #182	; 0xb6
 800178a:	f000 f900 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800178e:	200a      	movs	r0, #10
 8001790:	f000 f90a 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001794:	20a2      	movs	r0, #162	; 0xa2
 8001796:	f000 f907 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800179a:	20c0      	movs	r0, #192	; 0xc0
 800179c:	f000 f8f7 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017a0:	2010      	movs	r0, #16
 80017a2:	f000 f901 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80017a6:	20c1      	movs	r0, #193	; 0xc1
 80017a8:	f000 f8f1 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017ac:	2010      	movs	r0, #16
 80017ae:	f000 f8fb 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80017b2:	20c5      	movs	r0, #197	; 0xc5
 80017b4:	f000 f8eb 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80017b8:	2045      	movs	r0, #69	; 0x45
 80017ba:	f000 f8f5 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80017be:	2015      	movs	r0, #21
 80017c0:	f000 f8f2 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80017c4:	20c7      	movs	r0, #199	; 0xc7
 80017c6:	f000 f8e2 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017ca:	2090      	movs	r0, #144	; 0x90
 80017cc:	f000 f8ec 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017d0:	2036      	movs	r0, #54	; 0x36
 80017d2:	f000 f8dc 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017d6:	20c8      	movs	r0, #200	; 0xc8
 80017d8:	f000 f8e6 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80017dc:	20f2      	movs	r0, #242	; 0xf2
 80017de:	f000 f8d6 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f8e0 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80017e8:	20b0      	movs	r0, #176	; 0xb0
 80017ea:	f000 f8d0 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80017ee:	20c2      	movs	r0, #194	; 0xc2
 80017f0:	f000 f8da 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017f4:	20b6      	movs	r0, #182	; 0xb6
 80017f6:	f000 f8ca 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017fa:	200a      	movs	r0, #10
 80017fc:	f000 f8d4 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001800:	20a7      	movs	r0, #167	; 0xa7
 8001802:	f000 f8d1 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001806:	2027      	movs	r0, #39	; 0x27
 8001808:	f000 f8ce 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800180c:	2004      	movs	r0, #4
 800180e:	f000 f8cb 	bl	80019a8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001812:	202a      	movs	r0, #42	; 0x2a
 8001814:	f000 f8bb 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f000 f8c5 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800181e:	2000      	movs	r0, #0
 8001820:	f000 f8c2 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f8bf 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800182a:	20ef      	movs	r0, #239	; 0xef
 800182c:	f000 f8bc 	bl	80019a8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001830:	202b      	movs	r0, #43	; 0x2b
 8001832:	f000 f8ac 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f8b6 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f8b3 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001842:	2001      	movs	r0, #1
 8001844:	f000 f8b0 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001848:	203f      	movs	r0, #63	; 0x3f
 800184a:	f000 f8ad 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800184e:	20f6      	movs	r0, #246	; 0xf6
 8001850:	f000 f89d 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 f8a7 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f8a4 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001860:	2006      	movs	r0, #6
 8001862:	f000 f8a1 	bl	80019a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001866:	202c      	movs	r0, #44	; 0x2c
 8001868:	f000 f891 	bl	800198e <ili9341_WriteReg>
  LCD_Delay(200);
 800186c:	20c8      	movs	r0, #200	; 0xc8
 800186e:	f000 fa79 	bl	8001d64 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001872:	2026      	movs	r0, #38	; 0x26
 8001874:	f000 f88b 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 f895 	bl	80019a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800187e:	20e0      	movs	r0, #224	; 0xe0
 8001880:	f000 f885 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001884:	200f      	movs	r0, #15
 8001886:	f000 f88f 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800188a:	2029      	movs	r0, #41	; 0x29
 800188c:	f000 f88c 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001890:	2024      	movs	r0, #36	; 0x24
 8001892:	f000 f889 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001896:	200c      	movs	r0, #12
 8001898:	f000 f886 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800189c:	200e      	movs	r0, #14
 800189e:	f000 f883 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018a2:	2009      	movs	r0, #9
 80018a4:	f000 f880 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80018a8:	204e      	movs	r0, #78	; 0x4e
 80018aa:	f000 f87d 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80018ae:	2078      	movs	r0, #120	; 0x78
 80018b0:	f000 f87a 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80018b4:	203c      	movs	r0, #60	; 0x3c
 80018b6:	f000 f877 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018ba:	2009      	movs	r0, #9
 80018bc:	f000 f874 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80018c0:	2013      	movs	r0, #19
 80018c2:	f000 f871 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018c6:	2005      	movs	r0, #5
 80018c8:	f000 f86e 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018cc:	2017      	movs	r0, #23
 80018ce:	f000 f86b 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018d2:	2011      	movs	r0, #17
 80018d4:	f000 f868 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 f865 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80018de:	20e1      	movs	r0, #225	; 0xe1
 80018e0:	f000 f855 	bl	800198e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 f85f 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80018ea:	2016      	movs	r0, #22
 80018ec:	f000 f85c 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80018f0:	201b      	movs	r0, #27
 80018f2:	f000 f859 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018f6:	2004      	movs	r0, #4
 80018f8:	f000 f856 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018fc:	2011      	movs	r0, #17
 80018fe:	f000 f853 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001902:	2007      	movs	r0, #7
 8001904:	f000 f850 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001908:	2031      	movs	r0, #49	; 0x31
 800190a:	f000 f84d 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800190e:	2033      	movs	r0, #51	; 0x33
 8001910:	f000 f84a 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001914:	2042      	movs	r0, #66	; 0x42
 8001916:	f000 f847 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800191a:	2005      	movs	r0, #5
 800191c:	f000 f844 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001920:	200c      	movs	r0, #12
 8001922:	f000 f841 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001926:	200a      	movs	r0, #10
 8001928:	f000 f83e 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800192c:	2028      	movs	r0, #40	; 0x28
 800192e:	f000 f83b 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001932:	202f      	movs	r0, #47	; 0x2f
 8001934:	f000 f838 	bl	80019a8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001938:	200f      	movs	r0, #15
 800193a:	f000 f835 	bl	80019a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800193e:	2011      	movs	r0, #17
 8001940:	f000 f825 	bl	800198e <ili9341_WriteReg>
  LCD_Delay(200);
 8001944:	20c8      	movs	r0, #200	; 0xc8
 8001946:	f000 fa0d 	bl	8001d64 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800194a:	2029      	movs	r0, #41	; 0x29
 800194c:	f000 f81f 	bl	800198e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001950:	202c      	movs	r0, #44	; 0x2c
 8001952:	f000 f81c 	bl	800198e <ili9341_WriteReg>
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}

0800195a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800195e:	f000 f913 	bl	8001b88 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001962:	2103      	movs	r1, #3
 8001964:	20d3      	movs	r0, #211	; 0xd3
 8001966:	f000 f82c 	bl	80019c2 <ili9341_ReadData>
 800196a:	4603      	mov	r3, r0
 800196c:	b29b      	uxth	r3, r3
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}

08001972 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001976:	2029      	movs	r0, #41	; 0x29
 8001978:	f000 f809 	bl	800198e <ili9341_WriteReg>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001984:	2028      	movs	r0, #40	; 0x28
 8001986:	f000 f802 	bl	800198e <ili9341_WriteReg>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}

0800198e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f98e 	bl	8001cbc <LCD_IO_WriteReg>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f95f 	bl	8001c78 <LCD_IO_WriteData>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	460a      	mov	r2, r1
 80019cc:	80fb      	strh	r3, [r7, #6]
 80019ce:	4613      	mov	r3, r2
 80019d0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80019d2:	797a      	ldrb	r2, [r7, #5]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 f991 	bl	8001d00 <LCD_IO_ReadData>
 80019de:	4603      	mov	r3, r0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80019ec:	23f0      	movs	r3, #240	; 0xf0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80019fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a10:	4819      	ldr	r0, [pc, #100]	; (8001a78 <SPIx_Init+0x6c>)
 8001a12:	f005 fccd 	bl	80073b0 <HAL_SPI_GetState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d12b      	bne.n	8001a74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <SPIx_Init+0x6c>)
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <SPIx_Init+0x70>)
 8001a20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <SPIx_Init+0x6c>)
 8001a24:	2218      	movs	r2, #24
 8001a26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <SPIx_Init+0x6c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <SPIx_Init+0x6c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <SPIx_Init+0x6c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <SPIx_Init+0x6c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <SPIx_Init+0x6c>)
 8001a42:	2207      	movs	r2, #7
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <SPIx_Init+0x6c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <SPIx_Init+0x6c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <SPIx_Init+0x6c>)
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001a5a:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <SPIx_Init+0x6c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <SPIx_Init+0x6c>)
 8001a62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001a68:	4803      	ldr	r0, [pc, #12]	; (8001a78 <SPIx_Init+0x6c>)
 8001a6a:	f000 f853 	bl	8001b14 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001a6e:	4802      	ldr	r0, [pc, #8]	; (8001a78 <SPIx_Init+0x6c>)
 8001a70:	f005 f833 	bl	8006ada <HAL_SPI_Init>
  } 
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000358 	.word	0x20000358
 8001a7c:	40015000 	.word	0x40015000

08001a80 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <SPIx_Read+0x38>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f107 0108 	add.w	r1, r7, #8
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <SPIx_Read+0x3c>)
 8001a9c:	f005 f9dd 	bl	8006e5a <HAL_SPI_Receive>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001aaa:	f000 f827 	bl	8001afc <SPIx_Error>
  }
  
  return readvalue;
 8001aae:	68bb      	ldr	r3, [r7, #8]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000003c 	.word	0x2000003c
 8001abc:	20000358 	.word	0x20000358

08001ac0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <SPIx_Write+0x34>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1db9      	adds	r1, r7, #6
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <SPIx_Write+0x38>)
 8001ad8:	f005 f88b 	bl	8006bf2 <HAL_SPI_Transmit>
 8001adc:	4603      	mov	r3, r0
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001ae6:	f000 f809 	bl	8001afc <SPIx_Error>
  }
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000003c 	.word	0x2000003c
 8001af8:	20000358 	.word	0x20000358

08001afc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <SPIx_Error+0x14>)
 8001b02:	f005 f84e 	bl	8006ba2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001b06:	f7ff ff81 	bl	8001a0c <SPIx_Init>
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000358 	.word	0x20000358

08001b14 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <SPIx_MspInit+0x6c>)
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <SPIx_MspInit+0x6c>)
 8001b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <SPIx_MspInit+0x6c>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <SPIx_MspInit+0x6c>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <SPIx_MspInit+0x6c>)
 8001b42:	f043 0320 	orr.w	r3, r3, #32
 8001b46:	6313      	str	r3, [r2, #48]	; 0x30
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <SPIx_MspInit+0x6c>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001b54:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001b62:	2301      	movs	r3, #1
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001b66:	2305      	movs	r3, #5
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <SPIx_MspInit+0x70>)
 8001b72:	f001 fbdd 	bl	8003330 <HAL_GPIO_Init>
}
 8001b76:	bf00      	nop
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40021400 	.word	0x40021400

08001b88 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <LCD_IO_Init+0xe0>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d164      	bne.n	8001c60 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001b96:	4b34      	ldr	r3, [pc, #208]	; (8001c68 <LCD_IO_Init+0xe0>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bac:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4827      	ldr	r0, [pc, #156]	; (8001c70 <LCD_IO_Init+0xe8>)
 8001bd2:	f001 fbad 	bl	8003330 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a23      	ldr	r2, [pc, #140]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001be0:	f043 0308 	orr.w	r3, r3, #8
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <LCD_IO_Init+0xe8>)
 8001c0c:	f001 fb90 	bl	8003330 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <LCD_IO_Init+0xe4>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <LCD_IO_Init+0xec>)
 8001c44:	f001 fb74 	bl	8003330 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4809      	ldr	r0, [pc, #36]	; (8001c74 <LCD_IO_Init+0xec>)
 8001c4e:	f001 fe23 	bl	8003898 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001c52:	2201      	movs	r2, #1
 8001c54:	2104      	movs	r1, #4
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <LCD_IO_Init+0xec>)
 8001c58:	f001 fe1e 	bl	8003898 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001c5c:	f7ff fed6 	bl	8001a0c <SPIx_Init>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200003b0 	.word	0x200003b0
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40020800 	.word	0x40020800

08001c78 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <LCD_IO_WriteData+0x3c>)
 8001c8a:	f001 fe05 	bl	8003898 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2104      	movs	r1, #4
 8001c92:	4809      	ldr	r0, [pc, #36]	; (8001cb8 <LCD_IO_WriteData+0x40>)
 8001c94:	f001 fe00 	bl	8003898 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff10 	bl	8001ac0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <LCD_IO_WriteData+0x40>)
 8001ca6:	f001 fdf7 	bl	8003898 <HAL_GPIO_WritePin>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40020800 	.word	0x40020800

08001cbc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ccc:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <LCD_IO_WriteReg+0x3c>)
 8001cce:	f001 fde3 	bl	8003898 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	4809      	ldr	r0, [pc, #36]	; (8001cfc <LCD_IO_WriteReg+0x40>)
 8001cd8:	f001 fdde 	bl	8003898 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff feed 	bl	8001ac0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <LCD_IO_WriteReg+0x40>)
 8001cec:	f001 fdd4 	bl	8003898 <HAL_GPIO_WritePin>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40020800 	.word	0x40020800

08001d00 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001d14:	2200      	movs	r2, #0
 8001d16:	2104      	movs	r1, #4
 8001d18:	4810      	ldr	r0, [pc, #64]	; (8001d5c <LCD_IO_ReadData+0x5c>)
 8001d1a:	f001 fdbd 	bl	8003898 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <LCD_IO_ReadData+0x60>)
 8001d26:	f001 fdb7 	bl	8003898 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fec7 	bl	8001ac0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fea3 	bl	8001a80 <SPIx_Read>
 8001d3a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d42:	4807      	ldr	r0, [pc, #28]	; (8001d60 <LCD_IO_ReadData+0x60>)
 8001d44:	f001 fda8 	bl	8003898 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <LCD_IO_ReadData+0x5c>)
 8001d4e:	f001 fda3 	bl	8003898 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40020800 	.word	0x40020800
 8001d60:	40020c00 	.word	0x40020c00

08001d64 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fc67 	bl	8002640 <HAL_Delay>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <BSP_LCD_Init+0xc0>)
 8001d84:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001d86:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001d88:	2209      	movs	r2, #9
 8001d8a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001d94:	221d      	movs	r2, #29
 8001d96:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001d98:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001da0:	f240 120d 	movw	r2, #269	; 0x10d
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001da8:	f240 1243 	movw	r2, #323	; 0x143
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001db0:	f240 1217 	movw	r2, #279	; 0x117
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001db8:	f240 1247 	movw	r2, #327	; 0x147
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001dc6:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <BSP_LCD_Init+0xc4>)
 8001dd8:	2208      	movs	r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <BSP_LCD_Init+0xc4>)
 8001dde:	22c0      	movs	r2, #192	; 0xc0
 8001de0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <BSP_LCD_Init+0xc4>)
 8001de4:	2204      	movs	r2, #4
 8001de6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <BSP_LCD_Init+0xc4>)
 8001dea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <BSP_LCD_Init+0xc4>)
 8001df2:	f004 fc35 	bl	8006660 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e02:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001e0e:	f000 f8fd 	bl	800200c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <BSP_LCD_Init+0xbc>)
 8001e14:	f003 fbfe 	bl	8005614 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <BSP_LCD_Init+0xc8>)
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <BSP_LCD_Init+0xcc>)
 8001e1c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <BSP_LCD_Init+0xc8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001e26:	f000 f9ff 	bl	8002228 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001e2a:	4808      	ldr	r0, [pc, #32]	; (8001e4c <BSP_LCD_Init+0xd0>)
 8001e2c:	f000 f89c 	bl	8001f68 <BSP_LCD_SetFont>

  return LCD_OK;
 8001e30:	2300      	movs	r3, #0
}  
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200088f0 	.word	0x200088f0
 8001e3c:	40016800 	.word	0x40016800
 8001e40:	200003f4 	.word	0x200003f4
 8001e44:	20008998 	.word	0x20008998
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	20000040 	.word	0x20000040

08001e50 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <BSP_LCD_GetXSize+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	4798      	blx	r3
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20008998 	.word	0x20008998

08001e68 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <BSP_LCD_GetYSize+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	4798      	blx	r3
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20008998 	.word	0x20008998

08001e80 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b090      	sub	sp, #64	; 0x40
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001e90:	f7ff ffde 	bl	8001e50 <BSP_LCD_GetXSize>
 8001e94:	4603      	mov	r3, r0
 8001e96:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001e9c:	f7ff ffe4 	bl	8001e68 <BSP_LCD_GetYSize>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001eac:	23ff      	movs	r3, #255	; 0xff
 8001eae:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001ec6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001ed0:	f7ff ffbe 	bl	8001e50 <BSP_LCD_GetXSize>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001ed8:	f7ff ffc6 	bl	8001e68 <BSP_LCD_GetYSize>
 8001edc:	4603      	mov	r3, r0
 8001ede:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001ee0:	88fa      	ldrh	r2, [r7, #6]
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4814      	ldr	r0, [pc, #80]	; (8001f3c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001eea:	f003 fd25 	bl	8005938 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	4913      	ldr	r1, [pc, #76]	; (8001f40 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	3304      	adds	r3, #4
 8001efe:	f04f 32ff 	mov.w	r2, #4294967295
 8001f02:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001f04:	88fa      	ldrh	r2, [r7, #6]
 8001f06:	490e      	ldr	r1, [pc, #56]	; (8001f40 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3308      	adds	r3, #8
 8001f14:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001f16:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001f18:	88fa      	ldrh	r2, [r7, #6]
 8001f1a:	4909      	ldr	r1, [pc, #36]	; (8001f40 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <BSP_LCD_LayerDefaultInit+0xbc>)
 8001f2e:	f003 fd41 	bl	80059b4 <HAL_LTDC_EnableDither>
}
 8001f32:	bf00      	nop
 8001f34:	3740      	adds	r7, #64	; 0x40
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200088f0 	.word	0x200088f0
 8001f40:	20000428 	.word	0x20000428
 8001f44:	20000040 	.word	0x20000040

08001f48 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <BSP_LCD_SelectLayer+0x1c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000424 	.word	0x20000424

08001f68 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <BSP_LCD_SetFont+0x2c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4908      	ldr	r1, [pc, #32]	; (8001f98 <BSP_LCD_SetFont+0x30>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3308      	adds	r3, #8
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000424 	.word	0x20000424
 8001f98:	20000428 	.word	0x20000428

08001f9c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <BSP_LCD_Clear+0x48>)
 8001fa6:	681c      	ldr	r4, [r3, #0]
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <BSP_LCD_Clear+0x48>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <BSP_LCD_Clear+0x4c>)
 8001fae:	2134      	movs	r1, #52	; 0x34
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	335c      	adds	r3, #92	; 0x5c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461d      	mov	r5, r3
 8001fbc:	f7ff ff48 	bl	8001e50 <BSP_LCD_GetXSize>
 8001fc0:	4606      	mov	r6, r0
 8001fc2:	f7ff ff51 	bl	8001e68 <BSP_LCD_GetYSize>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	4632      	mov	r2, r6
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	f000 f8ee 	bl	80021b8 <FillBuffer>
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe4:	20000424 	.word	0x20000424
 8001fe8:	200088f0 	.word	0x200088f0

08001fec <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <BSP_LCD_DisplayOn+0x1c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <BSP_LCD_DisplayOn+0x1c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4798      	blx	r3
  }
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20008998 	.word	0x20008998

0800200c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	4b61      	ldr	r3, [pc, #388]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a60      	ldr	r2, [pc, #384]	; (800219c <BSP_LCD_MspInit+0x190>)
 800201c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b5e      	ldr	r3, [pc, #376]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800202a:	623b      	str	r3, [r7, #32]
 800202c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	4b5a      	ldr	r3, [pc, #360]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a59      	ldr	r2, [pc, #356]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002038:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b57      	ldr	r3, [pc, #348]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002046:	61fb      	str	r3, [r7, #28]
 8002048:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	4b53      	ldr	r3, [pc, #332]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a52      	ldr	r2, [pc, #328]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b50      	ldr	r3, [pc, #320]	; (800219c <BSP_LCD_MspInit+0x190>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	4b4c      	ldr	r3, [pc, #304]	; (800219c <BSP_LCD_MspInit+0x190>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a4b      	ldr	r2, [pc, #300]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b49      	ldr	r3, [pc, #292]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b45      	ldr	r3, [pc, #276]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a44      	ldr	r2, [pc, #272]	; (800219c <BSP_LCD_MspInit+0x190>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b42      	ldr	r3, [pc, #264]	; (800219c <BSP_LCD_MspInit+0x190>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a3d      	ldr	r2, [pc, #244]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b37      	ldr	r3, [pc, #220]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a36      	ldr	r2, [pc, #216]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b34      	ldr	r3, [pc, #208]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a2f      	ldr	r2, [pc, #188]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <BSP_LCD_MspInit+0x190>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80020f2:	f641 0358 	movw	r3, #6232	; 0x1858
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002100:	2302      	movs	r3, #2
 8002102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002104:	230e      	movs	r3, #14
 8002106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4824      	ldr	r0, [pc, #144]	; (80021a0 <BSP_LCD_MspInit+0x194>)
 8002110:	f001 f90e 	bl	8003330 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002114:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	4820      	ldr	r0, [pc, #128]	; (80021a4 <BSP_LCD_MspInit+0x198>)
 8002122:	f001 f905 	bl	8003330 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002126:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	481d      	ldr	r0, [pc, #116]	; (80021a8 <BSP_LCD_MspInit+0x19c>)
 8002134:	f001 f8fc 	bl	8003330 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002138:	2348      	movs	r3, #72	; 0x48
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	4619      	mov	r1, r3
 8002142:	481a      	ldr	r0, [pc, #104]	; (80021ac <BSP_LCD_MspInit+0x1a0>)
 8002144:	f001 f8f4 	bl	8003330 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	4816      	ldr	r0, [pc, #88]	; (80021b0 <BSP_LCD_MspInit+0x1a4>)
 8002156:	f001 f8eb 	bl	8003330 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800215a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	4619      	mov	r1, r3
 8002166:	4813      	ldr	r0, [pc, #76]	; (80021b4 <BSP_LCD_MspInit+0x1a8>)
 8002168:	f001 f8e2 	bl	8003330 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800216c:	2303      	movs	r3, #3
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002170:	2309      	movs	r3, #9
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002178:	4619      	mov	r1, r3
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <BSP_LCD_MspInit+0x198>)
 800217c:	f001 f8d8 	bl	8003330 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002180:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <BSP_LCD_MspInit+0x1a8>)
 800218e:	f001 f8cf 	bl	8003330 <HAL_GPIO_Init>
}
 8002192:	bf00      	nop
 8002194:	3738      	adds	r7, #56	; 0x38
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020000 	.word	0x40020000
 80021a4:	40020400 	.word	0x40020400
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	40021400 	.word	0x40021400
 80021b4:	40021800 	.word	0x40021800

080021b8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <FillBuffer+0x68>)
 80021c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021cc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <FillBuffer+0x68>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80021d4:	4a12      	ldr	r2, [pc, #72]	; (8002220 <FillBuffer+0x68>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <FillBuffer+0x68>)
 80021dc:	4a11      	ldr	r2, [pc, #68]	; (8002224 <FillBuffer+0x6c>)
 80021de:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80021e0:	480f      	ldr	r0, [pc, #60]	; (8002220 <FillBuffer+0x68>)
 80021e2:	f000 fd09 	bl	8002bf8 <HAL_DMA2D_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d115      	bne.n	8002218 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	480c      	ldr	r0, [pc, #48]	; (8002220 <FillBuffer+0x68>)
 80021f0:	f000 ff70 	bl	80030d4 <HAL_DMA2D_ConfigLayer>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69f9      	ldr	r1, [r7, #28]
 8002204:	4806      	ldr	r0, [pc, #24]	; (8002220 <FillBuffer+0x68>)
 8002206:	f000 fd40 	bl	8002c8a <HAL_DMA2D_Start>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d103      	bne.n	8002218 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002210:	210a      	movs	r1, #10
 8002212:	4803      	ldr	r0, [pc, #12]	; (8002220 <FillBuffer+0x68>)
 8002214:	f000 fd64 	bl	8002ce0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	200003b4 	.word	0x200003b4
 8002224:	4002b000 	.word	0x4002b000

08002228 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 800222e:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <BSP_SDRAM_Init+0xb0>)
 8002230:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 800223a:	2207      	movs	r2, #7
 800223c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800223e:	4b27      	ldr	r3, [pc, #156]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 8002240:	2204      	movs	r2, #4
 8002242:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002244:	4b25      	ldr	r3, [pc, #148]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 8002246:	2207      	movs	r2, #7
 8002248:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 800224c:	2202      	movs	r2, #2
 800224e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 8002252:	2202      	movs	r2, #2
 8002254:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002256:	4b21      	ldr	r3, [pc, #132]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 8002258:	2202      	movs	r2, #2
 800225a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800225c:	4b1d      	ldr	r3, [pc, #116]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 800225e:	2201      	movs	r2, #1
 8002260:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 800226a:	2204      	movs	r2, #4
 800226c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 8002270:	2210      	movs	r2, #16
 8002272:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 8002276:	2240      	movs	r2, #64	; 0x40
 8002278:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800227a:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 800227c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002280:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002282:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 800228a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 8002298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800229e:	2100      	movs	r1, #0
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 80022a2:	f000 f87f 	bl	80023a4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <BSP_SDRAM_Init+0xb4>)
 80022a8:	480a      	ldr	r0, [pc, #40]	; (80022d4 <BSP_SDRAM_Init+0xac>)
 80022aa:	f004 fb97 	bl	80069dc <HAL_SDRAM_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <BSP_SDRAM_Init+0xb8>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
 80022ba:	e002      	b.n	80022c2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <BSP_SDRAM_Init+0xb8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022c2:	f240 506a 	movw	r0, #1386	; 0x56a
 80022c6:	f000 f80d 	bl	80022e4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <BSP_SDRAM_Init+0xb8>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000440 	.word	0x20000440
 80022d8:	a0000140 	.word	0xa0000140
 80022dc:	20000474 	.word	0x20000474
 80022e0:	20000048 	.word	0x20000048

080022e4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f8:	2208      	movs	r2, #8
 80022fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fe:	2201      	movs	r2, #1
 8002300:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230c:	4923      	ldr	r1, [pc, #140]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230e:	4824      	ldr	r0, [pc, #144]	; (80023a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002310:	f004 fb98 	bl	8006a44 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002314:	2001      	movs	r0, #1
 8002316:	f000 f993 	bl	8002640 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002322:	2208      	movs	r2, #8
 8002324:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002328:	2201      	movs	r2, #1
 800232a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800232c:	4b1b      	ldr	r3, [pc, #108]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002336:	4919      	ldr	r1, [pc, #100]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002338:	4819      	ldr	r0, [pc, #100]	; (80023a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800233a:	f004 fb83 	bl	8006a44 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002340:	2203      	movs	r2, #3
 8002342:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002346:	2208      	movs	r2, #8
 8002348:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800234a:	4b14      	ldr	r3, [pc, #80]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234c:	2204      	movs	r2, #4
 800234e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235a:	4910      	ldr	r1, [pc, #64]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800235c:	4810      	ldr	r0, [pc, #64]	; (80023a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800235e:	f004 fb71 	bl	8006a44 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002362:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002366:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236a:	2204      	movs	r2, #4
 800236c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002370:	2208      	movs	r2, #8
 8002372:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002376:	2201      	movs	r2, #1
 8002378:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002384:	4905      	ldr	r1, [pc, #20]	; (800239c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002388:	f004 fb5c 	bl	8006a44 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4804      	ldr	r0, [pc, #16]	; (80023a0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002390:	f004 fb83 	bl	8006a9a <HAL_SDRAM_ProgramRefreshRate>
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000490 	.word	0x20000490
 80023a0:	20000440 	.word	0x20000440

080023a4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b090      	sub	sp, #64	; 0x40
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80ec 	beq.w	800258e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ba:	4b77      	ldr	r3, [pc, #476]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	4a76      	ldr	r2, [pc, #472]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6393      	str	r3, [r2, #56]	; 0x38
 80023c6:	4b74      	ldr	r3, [pc, #464]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	4b70      	ldr	r3, [pc, #448]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a6f      	ldr	r2, [pc, #444]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
 80023f2:	4b69      	ldr	r3, [pc, #420]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a68      	ldr	r2, [pc, #416]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b66      	ldr	r3, [pc, #408]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	4b62      	ldr	r3, [pc, #392]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a61      	ldr	r2, [pc, #388]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a5a      	ldr	r2, [pc, #360]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b58      	ldr	r3, [pc, #352]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	4b54      	ldr	r3, [pc, #336]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a53      	ldr	r2, [pc, #332]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 800244c:	f043 0310 	orr.w	r3, r3, #16
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	4a4c      	ldr	r2, [pc, #304]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002468:	f043 0320 	orr.w	r3, r3, #32
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b46      	ldr	r3, [pc, #280]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	4a45      	ldr	r2, [pc, #276]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 8002484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b43      	ldr	r3, [pc, #268]	; (8002598 <BSP_SDRAM_MspInit+0x1f4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800249a:	2302      	movs	r3, #2
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80024a2:	230c      	movs	r3, #12
 80024a4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80024a6:	2360      	movs	r3, #96	; 0x60
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80024aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	483a      	ldr	r0, [pc, #232]	; (800259c <BSP_SDRAM_MspInit+0x1f8>)
 80024b2:	f000 ff3d 	bl	8003330 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	4837      	ldr	r0, [pc, #220]	; (80025a0 <BSP_SDRAM_MspInit+0x1fc>)
 80024c2:	f000 ff35 	bl	8003330 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80024c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d0:	4619      	mov	r1, r3
 80024d2:	4834      	ldr	r0, [pc, #208]	; (80025a4 <BSP_SDRAM_MspInit+0x200>)
 80024d4:	f000 ff2c 	bl	8003330 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80024d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80024de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e2:	4619      	mov	r1, r3
 80024e4:	4830      	ldr	r0, [pc, #192]	; (80025a8 <BSP_SDRAM_MspInit+0x204>)
 80024e6:	f000 ff23 	bl	8003330 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80024ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80024f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f4:	4619      	mov	r1, r3
 80024f6:	482d      	ldr	r0, [pc, #180]	; (80025ac <BSP_SDRAM_MspInit+0x208>)
 80024f8:	f000 ff1a 	bl	8003330 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80024fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002506:	4619      	mov	r1, r3
 8002508:	4829      	ldr	r0, [pc, #164]	; (80025b0 <BSP_SDRAM_MspInit+0x20c>)
 800250a:	f000 ff11 	bl	8003330 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002528:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800252c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002530:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002534:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002538:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002540:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002546:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002550:	2203      	movs	r2, #3
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002554:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002556:	2200      	movs	r2, #0
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002562:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <BSP_SDRAM_MspInit+0x214>)
 8002564:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
 800256c:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002572:	4810      	ldr	r0, [pc, #64]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 8002574:	f000 fa32 	bl	80029dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <BSP_SDRAM_MspInit+0x210>)
 800257a:	f000 f981 	bl	8002880 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	210f      	movs	r1, #15
 8002582:	2038      	movs	r0, #56	; 0x38
 8002584:	f000 f936 	bl	80027f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002588:	2038      	movs	r0, #56	; 0x38
 800258a:	f000 f94f 	bl	800282c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800258e:	bf00      	nop
 8002590:	3740      	adds	r7, #64	; 0x40
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40020400 	.word	0x40020400
 80025a0:	40020800 	.word	0x40020800
 80025a4:	40020c00 	.word	0x40020c00
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40021400 	.word	0x40021400
 80025b0:	40021800 	.word	0x40021800
 80025b4:	200004a0 	.word	0x200004a0
 80025b8:	40026410 	.word	0x40026410

080025bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c0:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_Init+0x40>)
 80025c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <HAL_Init+0x40>)
 80025d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_Init+0x40>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f8fa 	bl	80027de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fe76 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f0:	f7fe fe48 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c00 	.word	0x40023c00

08002600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_IncTick+0x20>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_IncTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_IncTick+0x24>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000050 	.word	0x20000050
 8002624:	2000899c 	.word	0x2000899c

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	2000899c 	.word	0x2000899c

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff ffee 	bl	8002628 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_Delay+0x40>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffde 	bl	8002628 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000050 	.word	0x20000050

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db0b      	blt.n	8002712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4907      	ldr	r1, [pc, #28]	; (8002720 <__NVIC_EnableIRQ+0x38>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2001      	movs	r0, #1
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000e100 	.word	0xe000e100

08002724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	6039      	str	r1, [r7, #0]
 800272e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	2b00      	cmp	r3, #0
 8002736:	db0a      	blt.n	800274e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	490c      	ldr	r1, [pc, #48]	; (8002770 <__NVIC_SetPriority+0x4c>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	0112      	lsls	r2, r2, #4
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	440b      	add	r3, r1
 8002748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800274c:	e00a      	b.n	8002764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4908      	ldr	r1, [pc, #32]	; (8002774 <__NVIC_SetPriority+0x50>)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	3b04      	subs	r3, #4
 800275c:	0112      	lsls	r2, r2, #4
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	440b      	add	r3, r1
 8002762:	761a      	strb	r2, [r3, #24]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000e100 	.word	0xe000e100
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	f1c3 0307 	rsb	r3, r3, #7
 8002792:	2b04      	cmp	r3, #4
 8002794:	bf28      	it	cs
 8002796:	2304      	movcs	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3304      	adds	r3, #4
 800279e:	2b06      	cmp	r3, #6
 80027a0:	d902      	bls.n	80027a8 <NVIC_EncodePriority+0x30>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	3b03      	subs	r3, #3
 80027a6:	e000      	b.n	80027aa <NVIC_EncodePriority+0x32>
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43da      	mvns	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	401a      	ands	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c0:	f04f 31ff 	mov.w	r1, #4294967295
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d0:	4313      	orrs	r3, r2
         );
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ff4c 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002806:	f7ff ff61 	bl	80026cc <__NVIC_GetPriorityGrouping>
 800280a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	6978      	ldr	r0, [r7, #20]
 8002812:	f7ff ffb1 	bl	8002778 <NVIC_EncodePriority>
 8002816:	4602      	mov	r2, r0
 8002818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff80 	bl	8002724 <__NVIC_SetPriority>
}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff54 	bl	80026e8 <__NVIC_EnableIRQ>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	795b      	ldrb	r3, [r3, #5]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fd fe54 	bl	8000518 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff fecc 	bl	8002628 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e099      	b.n	80029d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028bc:	e00f      	b.n	80028de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028be:	f7ff feb3 	bl	8002628 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d908      	bls.n	80028de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e078      	b.n	80029d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e8      	bne.n	80028be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_DMA_Init+0x158>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b04      	cmp	r3, #4
 8002970:	d117      	bne.n	80029a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8bd 	bl	8002b04 <DMA_CheckFifoParam>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800299e:	2301      	movs	r3, #1
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f874 	bl	8002a98 <DMA_CalcBaseAndBitshift>
 80029b0:	4603      	mov	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	f010803f 	.word	0xf010803f

080029dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e050      	b.n	8002a90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e048      	b.n	8002a90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2221      	movs	r2, #33	; 0x21
 8002a3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f82a 	bl	8002a98 <DMA_CalcBaseAndBitshift>
 8002a44:	4603      	mov	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	223f      	movs	r2, #63	; 0x3f
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	3b10      	subs	r3, #16
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <DMA_CalcBaseAndBitshift+0x64>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d909      	bls.n	8002ada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad8:	e007      	b.n	8002aea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	aaaaaaab 	.word	0xaaaaaaab
 8002b00:	08010188 	.word	0x08010188

08002b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11f      	bne.n	8002b5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d855      	bhi.n	8002bd0 <DMA_CheckFifoParam+0xcc>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <DMA_CheckFifoParam+0x28>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b4f 	.word	0x08002b4f
 8002b34:	08002b3d 	.word	0x08002b3d
 8002b38:	08002bd1 	.word	0x08002bd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d045      	beq.n	8002bd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4c:	e042      	b.n	8002bd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b56:	d13f      	bne.n	8002bd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e03c      	b.n	8002bd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d121      	bne.n	8002bac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d836      	bhi.n	8002bdc <DMA_CheckFifoParam+0xd8>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <DMA_CheckFifoParam+0x70>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b8b 	.word	0x08002b8b
 8002b7c:	08002b85 	.word	0x08002b85
 8002b80:	08002b9d 	.word	0x08002b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e02f      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d024      	beq.n	8002be0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9a:	e021      	b.n	8002be0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba4:	d11e      	bne.n	8002be4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002baa:	e01b      	b.n	8002be4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <DMA_CheckFifoParam+0xb4>
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d003      	beq.n	8002bbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb6:	e018      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e015      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bce:	e00b      	b.n	8002be8 <DMA_CheckFifoParam+0xe4>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e00a      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e008      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e006      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bdc:	bf00      	nop
 8002bde:	e004      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002be0:	bf00      	nop
 8002be2:	e002      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;   
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002be8:	bf00      	nop
    }
  } 
  
  return status; 
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e03b      	b.n	8002c82 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fd fcce 	bl	80005c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	f023 0107 	bic.w	r1, r3, #7
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d1      	ldr	r1, [r2, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMA2D_Start+0x1c>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e018      	b.n	8002cd8 <HAL_DMA2D_Start+0x4e>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa99 	bl	80031f8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d056      	beq.n	8002daa <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002cfc:	f7ff fc94 	bl	8002628 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d02:	e04b      	b.n	8002d9c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f043 0202 	orr.w	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0a5      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d01a      	beq.n	8002d9c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002d66:	f7ff fc5f 	bl	8002628 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <HAL_DMA2D_PollForTransfer+0x9c>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e086      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ac      	beq.n	8002d04 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d061      	beq.n	8002e90 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7ff fc2c 	bl	8002628 <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002dd2:	e056      	b.n	8002e82 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2229      	movs	r2, #41	; 0x29
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d01a      	beq.n	8002e82 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002e4c:	f7ff fbec 	bl	8002628 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <HAL_DMA2D_PollForTransfer+0x182>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e013      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0a1      	beq.n	8002dd4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2212      	movs	r2, #18
 8002e96:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d026      	beq.n	8002f22 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d021      	beq.n	8002f22 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eec:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2204      	movs	r2, #4
 8002f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d026      	beq.n	8002f7a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f44:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d026      	beq.n	8002fd2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	f043 0204 	orr.w	r2, r3, #4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f853 	bl	80030aa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d024      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01f      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2202      	movs	r2, #2
 800302e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01f      	beq.n	80030a2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01a      	beq.n	80030a2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800307a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f80e 	bl	80030be <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_DMA2D_ConfigLayer+0x20>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e079      	b.n	80031e8 <HAL_DMA2D_ConfigLayer+0x114>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3318      	adds	r3, #24
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003120:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b0a      	cmp	r3, #10
 8003128:	d003      	beq.n	8003132 <HAL_DMA2D_ConfigLayer+0x5e>
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b09      	cmp	r3, #9
 8003130:	d107      	bne.n	8003142 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e005      	b.n	800314e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d120      	bne.n	8003196 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	43db      	mvns	r3, r3
 800315e:	ea02 0103 	and.w	r1, r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	430a      	orrs	r2, r1
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b0a      	cmp	r3, #10
 800317c:	d003      	beq.n	8003186 <HAL_DMA2D_ConfigLayer+0xb2>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b09      	cmp	r3, #9
 8003184:	d127      	bne.n	80031d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
 8003194:	e01f      	b.n	80031d6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	ea02 0103 	and.w	r1, r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b0a      	cmp	r3, #10
 80031be:	d003      	beq.n	80031c8 <HAL_DMA2D_ConfigLayer+0xf4>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b09      	cmp	r3, #9
 80031c6:	d106      	bne.n	80031d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031d4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	ff03000f 	.word	0xff03000f

080031f8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b08b      	sub	sp, #44	; 0x2c
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	041a      	lsls	r2, r3, #16
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003230:	d174      	bne.n	800331c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003238:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003240:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003248:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	431a      	orrs	r2, r3
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	4313      	orrs	r3, r2
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	e053      	b.n	8003312 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d106      	bne.n	8003280 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	4313      	orrs	r3, r2
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
 800327e:	e048      	b.n	8003312 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d111      	bne.n	80032ac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	0cdb      	lsrs	r3, r3, #19
 800328c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	0a9b      	lsrs	r3, r3, #10
 8003292:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	08db      	lsrs	r3, r3, #3
 8003298:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	02db      	lsls	r3, r3, #11
 80032a2:	4313      	orrs	r3, r2
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
 80032aa:	e032      	b.n	8003312 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d117      	bne.n	80032e4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	0fdb      	lsrs	r3, r3, #31
 80032b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	0cdb      	lsrs	r3, r3, #19
 80032be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	0adb      	lsrs	r3, r3, #11
 80032c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	029b      	lsls	r3, r3, #10
 80032d4:	431a      	orrs	r2, r3
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	03db      	lsls	r3, r3, #15
 80032da:	4313      	orrs	r3, r2
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e016      	b.n	8003312 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	0f1b      	lsrs	r3, r3, #28
 80032e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	0d1b      	lsrs	r3, r3, #20
 80032ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	0b1b      	lsrs	r3, r3, #12
 80032f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	011a      	lsls	r2, r3, #4
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	431a      	orrs	r2, r3
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	031b      	lsls	r3, r3, #12
 800330a:	4313      	orrs	r3, r2
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800331a:	e003      	b.n	8003324 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	60da      	str	r2, [r3, #12]
}
 8003324:	bf00      	nop
 8003326:	372c      	adds	r7, #44	; 0x2c
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e177      	b.n	800363c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	429a      	cmp	r2, r3
 8003366:	f040 8166 	bne.w	8003636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d00b      	beq.n	800338a <HAL_GPIO_Init+0x5a>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d007      	beq.n	800338a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800337e:	2b11      	cmp	r3, #17
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b12      	cmp	r3, #18
 8003388:	d130      	bne.n	80033ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 0201 	and.w	r2, r3, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0xfc>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b12      	cmp	r3, #18
 800342a:	d123      	bne.n	8003474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	08da      	lsrs	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3208      	adds	r2, #8
 8003434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	220f      	movs	r2, #15
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	08da      	lsrs	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3208      	adds	r2, #8
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0203 	and.w	r2, r3, #3
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80c0 	beq.w	8003636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b65      	ldr	r3, [pc, #404]	; (8003650 <HAL_GPIO_Init+0x320>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	4a64      	ldr	r2, [pc, #400]	; (8003650 <HAL_GPIO_Init+0x320>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6453      	str	r3, [r2, #68]	; 0x44
 80034c6:	4b62      	ldr	r3, [pc, #392]	; (8003650 <HAL_GPIO_Init+0x320>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d2:	4a60      	ldr	r2, [pc, #384]	; (8003654 <HAL_GPIO_Init+0x324>)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	3302      	adds	r3, #2
 80034da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a57      	ldr	r2, [pc, #348]	; (8003658 <HAL_GPIO_Init+0x328>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d037      	beq.n	800356e <HAL_GPIO_Init+0x23e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_GPIO_Init+0x32c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d031      	beq.n	800356a <HAL_GPIO_Init+0x23a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a55      	ldr	r2, [pc, #340]	; (8003660 <HAL_GPIO_Init+0x330>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <HAL_GPIO_Init+0x236>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <HAL_GPIO_Init+0x334>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_Init+0x232>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a53      	ldr	r2, [pc, #332]	; (8003668 <HAL_GPIO_Init+0x338>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a52      	ldr	r2, [pc, #328]	; (800366c <HAL_GPIO_Init+0x33c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_Init+0x22a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_GPIO_Init+0x340>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_Init+0x226>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a50      	ldr	r2, [pc, #320]	; (8003674 <HAL_GPIO_Init+0x344>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_Init+0x222>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4f      	ldr	r2, [pc, #316]	; (8003678 <HAL_GPIO_Init+0x348>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x21e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4e      	ldr	r2, [pc, #312]	; (800367c <HAL_GPIO_Init+0x34c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_Init+0x21a>
 8003546:	2309      	movs	r3, #9
 8003548:	e012      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354a:	230a      	movs	r3, #10
 800354c:	e010      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800354e:	2308      	movs	r3, #8
 8003550:	e00e      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003552:	2307      	movs	r3, #7
 8003554:	e00c      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003556:	2306      	movs	r3, #6
 8003558:	e00a      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355a:	2305      	movs	r3, #5
 800355c:	e008      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800355e:	2304      	movs	r3, #4
 8003560:	e006      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003562:	2303      	movs	r3, #3
 8003564:	e004      	b.n	8003570 <HAL_GPIO_Init+0x240>
 8003566:	2302      	movs	r3, #2
 8003568:	e002      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356a:	2301      	movs	r3, #1
 800356c:	e000      	b.n	8003570 <HAL_GPIO_Init+0x240>
 800356e:	2300      	movs	r3, #0
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	f002 0203 	and.w	r2, r2, #3
 8003576:	0092      	lsls	r2, r2, #2
 8003578:	4093      	lsls	r3, r2
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003580:	4934      	ldr	r1, [pc, #208]	; (8003654 <HAL_GPIO_Init+0x324>)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358e:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	43db      	mvns	r3, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4013      	ands	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035b2:	4a33      	ldr	r2, [pc, #204]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b8:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035dc:	4a28      	ldr	r2, [pc, #160]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035e2:	4b27      	ldr	r3, [pc, #156]	; (8003680 <HAL_GPIO_Init+0x350>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003606:	4a1e      	ldr	r2, [pc, #120]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800360c:	4b1c      	ldr	r3, [pc, #112]	; (8003680 <HAL_GPIO_Init+0x350>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_GPIO_Init+0x350>)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	2b0f      	cmp	r3, #15
 8003640:	f67f ae84 	bls.w	800334c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003644:	bf00      	nop
 8003646:	3724      	adds	r7, #36	; 0x24
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40021400 	.word	0x40021400
 8003670:	40021800 	.word	0x40021800
 8003674:	40021c00 	.word	0x40021c00
 8003678:	40022000 	.word	0x40022000
 800367c:	40022400 	.word	0x40022400
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e0d9      	b.n	8003854 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036a0:	2201      	movs	r2, #1
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	f040 80c9 	bne.w	800384e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036bc:	4a6a      	ldr	r2, [pc, #424]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a62      	ldr	r2, [pc, #392]	; (800386c <HAL_GPIO_DeInit+0x1e8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d037      	beq.n	8003756 <HAL_GPIO_DeInit+0xd2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a61      	ldr	r2, [pc, #388]	; (8003870 <HAL_GPIO_DeInit+0x1ec>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d031      	beq.n	8003752 <HAL_GPIO_DeInit+0xce>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a60      	ldr	r2, [pc, #384]	; (8003874 <HAL_GPIO_DeInit+0x1f0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <HAL_GPIO_DeInit+0xca>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a5f      	ldr	r2, [pc, #380]	; (8003878 <HAL_GPIO_DeInit+0x1f4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d025      	beq.n	800374a <HAL_GPIO_DeInit+0xc6>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a5e      	ldr	r2, [pc, #376]	; (800387c <HAL_GPIO_DeInit+0x1f8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_GPIO_DeInit+0xc2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <HAL_GPIO_DeInit+0x1fc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d019      	beq.n	8003742 <HAL_GPIO_DeInit+0xbe>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a5c      	ldr	r2, [pc, #368]	; (8003884 <HAL_GPIO_DeInit+0x200>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d013      	beq.n	800373e <HAL_GPIO_DeInit+0xba>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a5b      	ldr	r2, [pc, #364]	; (8003888 <HAL_GPIO_DeInit+0x204>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_GPIO_DeInit+0xb6>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a5a      	ldr	r2, [pc, #360]	; (800388c <HAL_GPIO_DeInit+0x208>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <HAL_GPIO_DeInit+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a59      	ldr	r2, [pc, #356]	; (8003890 <HAL_GPIO_DeInit+0x20c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_GPIO_DeInit+0xae>
 800372e:	2309      	movs	r3, #9
 8003730:	e012      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 8003732:	230a      	movs	r3, #10
 8003734:	e010      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 8003736:	2308      	movs	r3, #8
 8003738:	e00e      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 800373a:	2307      	movs	r3, #7
 800373c:	e00c      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 800373e:	2306      	movs	r3, #6
 8003740:	e00a      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 8003742:	2305      	movs	r3, #5
 8003744:	e008      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 8003746:	2304      	movs	r3, #4
 8003748:	e006      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 800374a:	2303      	movs	r3, #3
 800374c:	e004      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 800374e:	2302      	movs	r3, #2
 8003750:	e002      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_GPIO_DeInit+0xd4>
 8003756:	2300      	movs	r3, #0
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	f002 0203 	and.w	r2, r2, #3
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	4093      	lsls	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d132      	bne.n	80037ce <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003768:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43db      	mvns	r3, r3
 8003770:	4948      	ldr	r1, [pc, #288]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 8003772:	4013      	ands	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	43db      	mvns	r3, r3
 800377e:	4945      	ldr	r1, [pc, #276]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 8003780:	4013      	ands	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003784:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	4941      	ldr	r1, [pc, #260]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 800378e:	4013      	ands	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003792:	4b40      	ldr	r3, [pc, #256]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	493e      	ldr	r1, [pc, #248]	; (8003894 <HAL_GPIO_DeInit+0x210>)
 800379c:	4013      	ands	r3, r2
 800379e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	220f      	movs	r2, #15
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80037b0:	4a2d      	ldr	r2, [pc, #180]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	089b      	lsrs	r3, r3, #2
 80037b6:	3302      	adds	r3, #2
 80037b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	43da      	mvns	r2, r3
 80037c0:	4829      	ldr	r0, [pc, #164]	; (8003868 <HAL_GPIO_DeInit+0x1e4>)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	400a      	ands	r2, r1
 80037c8:	3302      	adds	r3, #2
 80037ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2103      	movs	r1, #3
 80037d8:	fa01 f303 	lsl.w	r3, r1, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	220f      	movs	r2, #15
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43db      	mvns	r3, r3
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	08d2      	lsrs	r2, r2, #3
 8003804:	4019      	ands	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3208      	adds	r2, #8
 800380a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2103      	movs	r1, #3
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	2101      	movs	r1, #1
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2103      	movs	r1, #3
 8003842:	fa01 f303 	lsl.w	r3, r1, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	401a      	ands	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	3301      	adds	r3, #1
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	f67f af22 	bls.w	80036a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800385c:	bf00      	nop
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40013800 	.word	0x40013800
 800386c:	40020000 	.word	0x40020000
 8003870:	40020400 	.word	0x40020400
 8003874:	40020800 	.word	0x40020800
 8003878:	40020c00 	.word	0x40020c00
 800387c:	40021000 	.word	0x40021000
 8003880:	40021400 	.word	0x40021400
 8003884:	40021800 	.word	0x40021800
 8003888:	40021c00 	.word	0x40021c00
 800388c:	40022000 	.word	0x40022000
 8003890:	40022400 	.word	0x40022400
 8003894:	40013c00 	.word	0x40013c00

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b4:	e003      	b.n	80038be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80038ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038cc:	b08f      	sub	sp, #60	; 0x3c
 80038ce:	af0a      	add	r7, sp, #40	; 0x28
 80038d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e054      	b.n	8003986 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f00a fae0 	bl	800debc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2203      	movs	r2, #3
 8003900:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f004 ffe5 	bl	80088ea <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	687e      	ldr	r6, [r7, #4]
 8003928:	466d      	mov	r5, sp
 800392a:	f106 0410 	add.w	r4, r6, #16
 800392e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800393a:	e885 0003 	stmia.w	r5, {r0, r1}
 800393e:	1d33      	adds	r3, r6, #4
 8003940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	f004 ff5f 	bl	8008806 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	4618      	mov	r0, r3
 8003950:	f004 ffdc 	bl	800890c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	687e      	ldr	r6, [r7, #4]
 800395c:	466d      	mov	r5, sp
 800395e:	f106 0410 	add.w	r4, r6, #16
 8003962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800396a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800396e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003972:	1d33      	adds	r3, r6, #4
 8003974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003976:	6838      	ldr	r0, [r7, #0]
 8003978:	f005 f8ee 	bl	8008b58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800398e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800398e:	b590      	push	{r4, r7, lr}
 8003990:	b089      	sub	sp, #36	; 0x24
 8003992:	af04      	add	r7, sp, #16
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	4608      	mov	r0, r1
 8003998:	4611      	mov	r1, r2
 800399a:	461a      	mov	r2, r3
 800399c:	4603      	mov	r3, r0
 800399e:	70fb      	strb	r3, [r7, #3]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70bb      	strb	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_HCD_HC_Init+0x28>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e07f      	b.n	8003ab6 <HAL_HCD_HC_Init+0x128>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	440b      	add	r3, r1
 80039cc:	333d      	adds	r3, #61	; 0x3d
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	440b      	add	r3, r1
 80039e0:	3338      	adds	r3, #56	; 0x38
 80039e2:	787a      	ldrb	r2, [r7, #1]
 80039e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	440b      	add	r3, r1
 80039f4:	3340      	adds	r3, #64	; 0x40
 80039f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039f8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	440b      	add	r3, r1
 8003a08:	3339      	adds	r3, #57	; 0x39
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	440b      	add	r3, r1
 8003a1c:	333f      	adds	r3, #63	; 0x3f
 8003a1e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	78bb      	ldrb	r3, [r7, #2]
 8003a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a2c:	b2d8      	uxtb	r0, r3
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	333a      	adds	r3, #58	; 0x3a
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003a40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da0a      	bge.n	8003a5e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	333b      	adds	r3, #59	; 0x3b
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e009      	b.n	8003a72 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	440b      	add	r3, r1
 8003a6c:	333b      	adds	r3, #59	; 0x3b
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	440b      	add	r3, r1
 8003a80:	333c      	adds	r3, #60	; 0x3c
 8003a82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a86:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	787c      	ldrb	r4, [r7, #1]
 8003a8e:	78ba      	ldrb	r2, [r7, #2]
 8003a90:	78f9      	ldrb	r1, [r7, #3]
 8003a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a94:	9302      	str	r3, [sp, #8]
 8003a96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f005 f9da 	bl	8008e5c <USB_HC_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd90      	pop	{r4, r7, pc}

08003abe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_HCD_HC_Halt+0x1e>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e00f      	b.n	8003afc <HAL_HCD_HC_Halt+0x3e>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f005 fc16 	bl	800931e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	461a      	mov	r2, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	70fb      	strb	r3, [r7, #3]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70bb      	strb	r3, [r7, #2]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	333b      	adds	r3, #59	; 0x3b
 8003b2e:	78ba      	ldrb	r2, [r7, #2]
 8003b30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	333f      	adds	r3, #63	; 0x3f
 8003b42:	787a      	ldrb	r2, [r7, #1]
 8003b44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b46:	7c3b      	ldrb	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d114      	bne.n	8003b76 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	440b      	add	r3, r1
 8003b5a:	3342      	adds	r3, #66	; 0x42
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	440b      	add	r3, r1
 8003b6e:	333d      	adds	r3, #61	; 0x3d
 8003b70:	7f3a      	ldrb	r2, [r7, #28]
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e009      	b.n	8003b8a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	3342      	adds	r3, #66	; 0x42
 8003b86:	2202      	movs	r2, #2
 8003b88:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b8a:	787b      	ldrb	r3, [r7, #1]
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	f200 80d6 	bhi.w	8003d3e <HAL_HCD_HC_SubmitRequest+0x23a>
 8003b92:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003d29 	.word	0x08003d29
 8003ba0:	08003c15 	.word	0x08003c15
 8003ba4:	08003c9f 	.word	0x08003c9f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003ba8:	7c3b      	ldrb	r3, [r7, #16]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	f040 80c9 	bne.w	8003d42 <HAL_HCD_HC_SubmitRequest+0x23e>
 8003bb0:	78bb      	ldrb	r3, [r7, #2]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f040 80c5 	bne.w	8003d42 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003bb8:	8b3b      	ldrh	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	3351      	adds	r3, #81	; 0x51
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3351      	adds	r3, #81	; 0x51
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3342      	adds	r3, #66	; 0x42
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bfc:	e0a1      	b.n	8003d42 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3342      	adds	r3, #66	; 0x42
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
      break;
 8003c12:	e096      	b.n	8003d42 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003c14:	78bb      	ldrb	r3, [r7, #2]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d120      	bne.n	8003c5c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	440b      	add	r3, r1
 8003c28:	3351      	adds	r3, #81	; 0x51
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	440b      	add	r3, r1
 8003c3e:	3342      	adds	r3, #66	; 0x42
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c44:	e07e      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	440b      	add	r3, r1
 8003c54:	3342      	adds	r3, #66	; 0x42
 8003c56:	2202      	movs	r2, #2
 8003c58:	701a      	strb	r2, [r3, #0]
      break;
 8003c5a:	e073      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	440b      	add	r3, r1
 8003c6a:	3350      	adds	r3, #80	; 0x50
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	3342      	adds	r3, #66	; 0x42
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
      break;
 8003c86:	e05d      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	440b      	add	r3, r1
 8003c96:	3342      	adds	r3, #66	; 0x42
 8003c98:	2202      	movs	r2, #2
 8003c9a:	701a      	strb	r2, [r3, #0]
      break;
 8003c9c:	e052      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c9e:	78bb      	ldrb	r3, [r7, #2]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d120      	bne.n	8003ce6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3351      	adds	r3, #81	; 0x51
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3342      	adds	r3, #66	; 0x42
 8003cca:	2200      	movs	r2, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003cce:	e039      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	440b      	add	r3, r1
 8003cde:	3342      	adds	r3, #66	; 0x42
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	701a      	strb	r2, [r3, #0]
      break;
 8003ce4:	e02e      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3350      	adds	r3, #80	; 0x50
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	440b      	add	r3, r1
 8003d0a:	3342      	adds	r3, #66	; 0x42
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
      break;
 8003d10:	e018      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	3342      	adds	r3, #66	; 0x42
 8003d22:	2202      	movs	r2, #2
 8003d24:	701a      	strb	r2, [r3, #0]
      break;
 8003d26:	e00d      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	440b      	add	r3, r1
 8003d36:	3342      	adds	r3, #66	; 0x42
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
      break;
 8003d3c:	e002      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003d3e:	bf00      	nop
 8003d40:	e000      	b.n	8003d44 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003d42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	440b      	add	r3, r1
 8003d52:	3344      	adds	r3, #68	; 0x44
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	8b39      	ldrh	r1, [r7, #24]
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4403      	add	r3, r0
 8003d68:	3348      	adds	r3, #72	; 0x48
 8003d6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	335c      	adds	r3, #92	; 0x5c
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	440b      	add	r3, r1
 8003d8e:	334c      	adds	r3, #76	; 0x4c
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d94:	78fa      	ldrb	r2, [r7, #3]
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	440b      	add	r3, r1
 8003da2:	3339      	adds	r3, #57	; 0x39
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	335d      	adds	r3, #93	; 0x5d
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	3338      	adds	r3, #56	; 0x38
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	18d1      	adds	r1, r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f005 f94a 	bl	8009070 <USB_HC_StartXfer>
 8003ddc:	4603      	mov	r3, r0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop

08003de8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 fe67 	bl	8008ad2 <USB_GetMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	f040 80ef 	bne.w	8003fea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 fe4b 	bl	8008aac <USB_ReadInterrupts>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80e5 	beq.w	8003fe8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 fe42 	bl	8008aac <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e32:	d104      	bne.n	8003e3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 fe32 	bl	8008aac <USB_ReadInterrupts>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e52:	d104      	bne.n	8003e5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fe22 	bl	8008aac <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e72:	d104      	bne.n	8003e7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 fe12 	bl	8008aac <USB_ReadInterrupts>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d103      	bne.n	8003e9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2202      	movs	r2, #2
 8003e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f004 fe04 	bl	8008aac <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eae:	d115      	bne.n	8003edc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003eb8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f00a f870 	bl	800dfb0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f004 fefa 	bl	8008cd0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f004 fde3 	bl	8008aac <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ef0:	d102      	bne.n	8003ef8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f001 f966 	bl	80051c4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fdd5 	bl	8008aac <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d106      	bne.n	8003f1a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f00a f833 	bl	800df78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2208      	movs	r2, #8
 8003f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f004 fdc4 	bl	8008aac <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f2e:	d138      	bne.n	8003fa2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f005 f9e1 	bl	80092fc <USB_HC_ReadInterrupt>
 8003f3a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e025      	b.n	8003f8e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d106      	bne.n	8003f7c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8cf 	bl	8004118 <HCD_HC_IN_IRQHandler>
 8003f7a:	e005      	b.n	8003f88 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fcfd 	bl	8004982 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3d4      	bcc.n	8003f42 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fd80 	bl	8008aac <USB_ReadInterrupts>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d101      	bne.n	8003fba <HAL_HCD_IRQHandler+0x1d2>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_HCD_IRQHandler+0x1d4>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d014      	beq.n	8003fea <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0210 	bic.w	r2, r2, #16
 8003fce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f001 f84b 	bl	800506c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0210 	orr.w	r2, r2, #16
 8003fe4:	619a      	str	r2, [r3, #24]
 8003fe6:	e000      	b.n	8003fea <HAL_HCD_IRQHandler+0x202>
      return;
 8003fe8:	bf00      	nop
    }
  }
}
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_HCD_Start+0x16>
 8004002:	2302      	movs	r3, #2
 8004004:	e013      	b.n	800402e <HAL_HCD_Start+0x3e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fc58 	bl	80088c8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f004 feba 	bl	8008d98 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_HCD_Stop+0x16>
 8004048:	2302      	movs	r3, #2
 800404a:	e00d      	b.n	8004068 <HAL_HCD_Stop+0x32>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f005 fa9b 	bl	8009594 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f004 fe61 	bl	8008d44 <USB_ResetPort>
 8004082:	4603      	mov	r3, r0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	460b      	mov	r3, r1
 8004096:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	335c      	adds	r3, #92	; 0x5c
 80040a8:	781b      	ldrb	r3, [r3, #0]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	334c      	adds	r3, #76	; 0x4c
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f004 fea3 	bl	8008e38 <USB_GetCurrentFrame>
 80040f2:	4603      	mov	r3, r0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f004 fe7e 	bl	8008e0a <USB_GetHostSpeed>
 800410e:	4603      	mov	r3, r0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b04      	cmp	r3, #4
 8004146:	d119      	bne.n	800417c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004154:	461a      	mov	r2, r3
 8004156:	2304      	movs	r3, #4
 8004158:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	0151      	lsls	r1, r2, #5
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	440a      	add	r2, r1
 8004170:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	60d3      	str	r3, [r2, #12]
 800417a:	e0ce      	b.n	800431a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004192:	d12c      	bne.n	80041ee <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	461a      	mov	r2, r3
 80041a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	440b      	add	r3, r1
 80041b6:	335d      	adds	r3, #93	; 0x5d
 80041b8:	2207      	movs	r2, #7
 80041ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d6:	f043 0302 	orr.w	r3, r3, #2
 80041da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	4611      	mov	r1, r2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f005 f899 	bl	800931e <USB_HC_Halt>
 80041ec:	e095      	b.n	800431a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b20      	cmp	r3, #32
 8004202:	d109      	bne.n	8004218 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	4413      	add	r3, r2
 800420c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004210:	461a      	mov	r2, r3
 8004212:	2320      	movs	r3, #32
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	e080      	b.n	800431a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d134      	bne.n	8004298 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	0151      	lsls	r1, r2, #5
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	440a      	add	r2, r1
 8004244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004248:	f043 0302 	orr.w	r3, r3, #2
 800424c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	335d      	adds	r3, #93	; 0x5d
 800425e:	2205      	movs	r2, #5
 8004260:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	2310      	movs	r3, #16
 8004272:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004280:	461a      	mov	r2, r3
 8004282:	2308      	movs	r3, #8
 8004284:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f005 f844 	bl	800931e <USB_HC_Halt>
 8004296:	e040      	b.n	800431a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d134      	bne.n	800431a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f005 f81f 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	2310      	movs	r3, #16
 80042f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	335d      	adds	r3, #93	; 0x5d
 8004302:	2208      	movs	r2, #8
 8004304:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	461a      	mov	r2, r3
 8004314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004318:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004330:	d122      	bne.n	8004378 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	4413      	add	r3, r2
 800433a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	440a      	add	r2, r1
 8004348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800434c:	f043 0302 	orr.w	r3, r3, #2
 8004350:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f004 ffde 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4413      	add	r3, r2
 800436a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436e:	461a      	mov	r2, r3
 8004370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004374:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004376:	e300      	b.n	800497a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	f040 80fd 	bne.w	800458a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	440b      	add	r3, r1
 80043a6:	3348      	adds	r3, #72	; 0x48
 80043a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	0159      	lsls	r1, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80043bc:	1ad1      	subs	r1, r2, r3
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4403      	add	r3, r0
 80043cc:	334c      	adds	r3, #76	; 0x4c
 80043ce:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	335d      	adds	r3, #93	; 0x5d
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4413      	add	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	440b      	add	r3, r1
 80043f2:	3358      	adds	r3, #88	; 0x58
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004404:	461a      	mov	r2, r3
 8004406:	2301      	movs	r3, #1
 8004408:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	333f      	adds	r3, #63	; 0x3f
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	440b      	add	r3, r1
 800442e:	333f      	adds	r3, #63	; 0x3f
 8004430:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004432:	2b02      	cmp	r3, #2
 8004434:	d121      	bne.n	800447a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	0151      	lsls	r1, r2, #5
 8004448:	693a      	ldr	r2, [r7, #16]
 800444a:	440a      	add	r2, r1
 800444c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	4611      	mov	r1, r2
 8004460:	4618      	mov	r0, r3
 8004462:	f004 ff5c 	bl	800931e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004472:	461a      	mov	r2, r3
 8004474:	2310      	movs	r3, #16
 8004476:	6093      	str	r3, [r2, #8]
 8004478:	e070      	b.n	800455c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	440b      	add	r3, r1
 8004488:	333f      	adds	r3, #63	; 0x3f
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b03      	cmp	r3, #3
 800448e:	d12a      	bne.n	80044e6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	440b      	add	r3, r1
 80044be:	335c      	adds	r3, #92	; 0x5c
 80044c0:	2201      	movs	r2, #1
 80044c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	b2d8      	uxtb	r0, r3
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	335c      	adds	r3, #92	; 0x5c
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	4601      	mov	r1, r0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f009 fd74 	bl	800dfcc <HAL_HCD_HC_NotifyURBChange_Callback>
 80044e4:	e03a      	b.n	800455c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4613      	mov	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	440b      	add	r3, r1
 80044f4:	333f      	adds	r3, #63	; 0x3f
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d12f      	bne.n	800455c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	440b      	add	r3, r1
 800450a:	335c      	adds	r3, #92	; 0x5c
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	440b      	add	r3, r1
 800451e:	3350      	adds	r3, #80	; 0x50
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	f083 0301 	eor.w	r3, r3, #1
 8004526:	b2d8      	uxtb	r0, r3
 8004528:	6879      	ldr	r1, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	440b      	add	r3, r1
 8004536:	3350      	adds	r3, #80	; 0x50
 8004538:	4602      	mov	r2, r0
 800453a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	b2d8      	uxtb	r0, r3
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	440b      	add	r3, r1
 800454e:	335c      	adds	r3, #92	; 0x5c
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4601      	mov	r1, r0
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f009 fd38 	bl	800dfcc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	440b      	add	r3, r1
 800456a:	3350      	adds	r3, #80	; 0x50
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	f083 0301 	eor.w	r3, r3, #1
 8004572:	b2d8      	uxtb	r0, r3
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	440b      	add	r3, r1
 8004582:	3350      	adds	r3, #80	; 0x50
 8004584:	4602      	mov	r2, r0
 8004586:	701a      	strb	r2, [r3, #0]
}
 8004588:	e1f7      	b.n	800497a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	f040 811a 	bne.w	80047d6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045bc:	f023 0302 	bic.w	r3, r3, #2
 80045c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	440b      	add	r3, r1
 80045d0:	335d      	adds	r3, #93	; 0x5d
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10a      	bne.n	80045ee <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	440b      	add	r3, r1
 80045e6:	335c      	adds	r3, #92	; 0x5c
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e0d9      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	440b      	add	r3, r1
 80045fc:	335d      	adds	r3, #93	; 0x5d
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b05      	cmp	r3, #5
 8004602:	d10a      	bne.n	800461a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	440b      	add	r3, r1
 8004612:	335c      	adds	r3, #92	; 0x5c
 8004614:	2205      	movs	r2, #5
 8004616:	701a      	strb	r2, [r3, #0]
 8004618:	e0c3      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	440b      	add	r3, r1
 8004628:	335d      	adds	r3, #93	; 0x5d
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d00a      	beq.n	8004646 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	440b      	add	r3, r1
 800463e:	335d      	adds	r3, #93	; 0x5d
 8004640:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004642:	2b08      	cmp	r3, #8
 8004644:	d156      	bne.n	80046f4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	440b      	add	r3, r1
 8004654:	3358      	adds	r3, #88	; 0x58
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4403      	add	r3, r0
 8004668:	3358      	adds	r3, #88	; 0x58
 800466a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	440b      	add	r3, r1
 800467a:	3358      	adds	r3, #88	; 0x58
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d914      	bls.n	80046ac <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	440b      	add	r3, r1
 8004690:	3358      	adds	r3, #88	; 0x58
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	440b      	add	r3, r1
 80046a4:	335c      	adds	r3, #92	; 0x5c
 80046a6:	2204      	movs	r2, #4
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e009      	b.n	80046c0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	440b      	add	r3, r1
 80046ba:	335c      	adds	r3, #92	; 0x5c
 80046bc:	2202      	movs	r2, #2
 80046be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	461a      	mov	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	6013      	str	r3, [r2, #0]
 80046f2:	e056      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4613      	mov	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	440b      	add	r3, r1
 8004702:	335d      	adds	r3, #93	; 0x5d
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d123      	bne.n	8004752 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	440b      	add	r3, r1
 8004718:	335c      	adds	r3, #92	; 0x5c
 800471a:	2202      	movs	r2, #2
 800471c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004734:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800473c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474a:	461a      	mov	r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e027      	b.n	80047a2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	440b      	add	r3, r1
 8004760:	335d      	adds	r3, #93	; 0x5d
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b07      	cmp	r3, #7
 8004766:	d11c      	bne.n	80047a2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	3358      	adds	r3, #88	; 0x58
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	1c59      	adds	r1, r3, #1
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4403      	add	r3, r0
 800478a:	3358      	adds	r3, #88	; 0x58
 800478c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	335c      	adds	r3, #92	; 0x5c
 800479e:	2204      	movs	r2, #4
 80047a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ae:	461a      	mov	r2, r3
 80047b0:	2302      	movs	r3, #2
 80047b2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	b2d8      	uxtb	r0, r3
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	440b      	add	r3, r1
 80047c6:	335c      	adds	r3, #92	; 0x5c
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	4601      	mov	r1, r0
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f009 fbfc 	bl	800dfcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80047d4:	e0d1      	b.n	800497a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b80      	cmp	r3, #128	; 0x80
 80047ea:	d13e      	bne.n	800486a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	440a      	add	r2, r1
 8004802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004806:	f043 0302 	orr.w	r3, r3, #2
 800480a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	440b      	add	r3, r1
 800481a:	3358      	adds	r3, #88	; 0x58
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4403      	add	r3, r0
 800482e:	3358      	adds	r3, #88	; 0x58
 8004830:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	440b      	add	r3, r1
 8004840:	335d      	adds	r3, #93	; 0x5d
 8004842:	2206      	movs	r2, #6
 8004844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f004 fd64 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004862:	461a      	mov	r2, r3
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	6093      	str	r3, [r2, #8]
}
 8004868:	e087      	b.n	800497a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b10      	cmp	r3, #16
 800487e:	d17c      	bne.n	800497a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	440b      	add	r3, r1
 800488e:	333f      	adds	r3, #63	; 0x3f
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d122      	bne.n	80048dc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4613      	mov	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	440b      	add	r3, r1
 80048a4:	3358      	adds	r3, #88	; 0x58
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f004 fd22 	bl	800931e <USB_HC_Halt>
 80048da:	e045      	b.n	8004968 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	440b      	add	r3, r1
 80048ea:	333f      	adds	r3, #63	; 0x3f
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	440b      	add	r3, r1
 8004900:	333f      	adds	r3, #63	; 0x3f
 8004902:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004904:	2b02      	cmp	r3, #2
 8004906:	d12f      	bne.n	8004968 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	3358      	adds	r3, #88	; 0x58
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d121      	bne.n	8004968 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	440b      	add	r3, r1
 8004932:	335d      	adds	r3, #93	; 0x5d
 8004934:	2203      	movs	r2, #3
 8004936:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	440a      	add	r2, r1
 800494e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004952:	f043 0302 	orr.w	r3, r3, #2
 8004956:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	4611      	mov	r1, r2
 8004962:	4618      	mov	r0, r3
 8004964:	f004 fcdb 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	461a      	mov	r2, r3
 8004976:	2310      	movs	r3, #16
 8004978:	6093      	str	r3, [r2, #8]
}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d119      	bne.n	80049e6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	461a      	mov	r2, r3
 80049c0:	2304      	movs	r3, #4
 80049c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80049e4:	e33e      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d141      	bne.n	8004a80 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	333d      	adds	r3, #61	; 0x3d
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	f040 831f 	bne.w	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	440b      	add	r3, r1
 8004a34:	333d      	adds	r3, #61	; 0x3d
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	335c      	adds	r3, #92	; 0x5c
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a68:	f043 0302 	orr.w	r3, r3, #2
 8004a6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f004 fc50 	bl	800931e <USB_HC_Halt>
}
 8004a7e:	e2f1      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d13f      	bne.n	8004b16 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	440b      	add	r3, r1
 8004aa4:	335d      	adds	r3, #93	; 0x5d
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	333d      	adds	r3, #61	; 0x3d
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	440b      	add	r3, r1
 8004acc:	3358      	adds	r3, #88	; 0x58
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aec:	f043 0302 	orr.w	r3, r3, #2
 8004af0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f004 fc0e 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	6093      	str	r3, [r2, #8]
}
 8004b14:	e2a6      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d122      	bne.n	8004b74 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	0151      	lsls	r1, r2, #5
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	440a      	add	r2, r1
 8004b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b48:	f043 0302 	orr.w	r3, r3, #2
 8004b4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f004 fbe0 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b70:	6093      	str	r3, [r2, #8]
}
 8004b72:	e277      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d135      	bne.n	8004bf6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	440b      	add	r3, r1
 8004b98:	3358      	adds	r3, #88	; 0x58
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	0151      	lsls	r1, r2, #5
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	440a      	add	r2, r1
 8004bb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb8:	f043 0302 	orr.w	r3, r3, #2
 8004bbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f004 fba8 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2301      	movs	r3, #1
 8004bde:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	440b      	add	r3, r1
 8004bee:	335d      	adds	r3, #93	; 0x5d
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
}
 8004bf4:	e236      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d12b      	bne.n	8004c64 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	0151      	lsls	r1, r2, #5
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	440a      	add	r2, r1
 8004c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c38:	f043 0302 	orr.w	r3, r3, #2
 8004c3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f004 fb68 	bl	800931e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	335d      	adds	r3, #93	; 0x5d
 8004c5e:	2205      	movs	r2, #5
 8004c60:	701a      	strb	r2, [r3, #0]
}
 8004c62:	e1ff      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d155      	bne.n	8004d26 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	3358      	adds	r3, #88	; 0x58
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	440b      	add	r3, r1
 8004c9c:	335d      	adds	r3, #93	; 0x5d
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	440b      	add	r3, r1
 8004cb0:	333d      	adds	r3, #61	; 0x3d
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d114      	bne.n	8004ce2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	333c      	adds	r3, #60	; 0x3c
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	440b      	add	r3, r1
 8004cdc:	333d      	adds	r3, #61	; 0x3d
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f004 fb06 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1e:	461a      	mov	r2, r3
 8004d20:	2310      	movs	r3, #16
 8004d22:	6093      	str	r3, [r2, #8]
}
 8004d24:	e19e      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d38:	2b80      	cmp	r3, #128	; 0x80
 8004d3a:	d12b      	bne.n	8004d94 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d56:	f043 0302 	orr.w	r3, r3, #2
 8004d5a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f004 fad9 	bl	800931e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	440b      	add	r3, r1
 8004d7a:	335d      	adds	r3, #93	; 0x5d
 8004d7c:	2206      	movs	r2, #6
 8004d7e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2380      	movs	r3, #128	; 0x80
 8004d90:	6093      	str	r3, [r2, #8]
}
 8004d92:	e167      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d135      	bne.n	8004e18 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f004 faa1 	bl	800931e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	461a      	mov	r2, r3
 8004dea:	2310      	movs	r3, #16
 8004dec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	440b      	add	r3, r1
 8004e10:	335d      	adds	r3, #93	; 0x5d
 8004e12:	2208      	movs	r2, #8
 8004e14:	701a      	strb	r2, [r3, #0]
}
 8004e16:	e125      	b.n	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f040 811a 	bne.w	8005064 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e4a:	f023 0302 	bic.w	r3, r3, #2
 8004e4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	335d      	adds	r3, #93	; 0x5d
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d137      	bne.n	8004ed6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	440b      	add	r3, r1
 8004e74:	335c      	adds	r3, #92	; 0x5c
 8004e76:	2201      	movs	r2, #1
 8004e78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	440b      	add	r3, r1
 8004e88:	333f      	adds	r3, #63	; 0x3f
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d00b      	beq.n	8004ea8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	333f      	adds	r3, #63	; 0x3f
 8004ea0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	f040 80c5 	bne.w	8005032 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3351      	adds	r3, #81	; 0x51
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f083 0301 	eor.w	r3, r3, #1
 8004ebe:	b2d8      	uxtb	r0, r3
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3351      	adds	r3, #81	; 0x51
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e0ad      	b.n	8005032 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	335d      	adds	r3, #93	; 0x5d
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d10a      	bne.n	8004f02 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	335c      	adds	r3, #92	; 0x5c
 8004efc:	2202      	movs	r2, #2
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e097      	b.n	8005032 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	440b      	add	r3, r1
 8004f10:	335d      	adds	r3, #93	; 0x5d
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d10a      	bne.n	8004f2e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	335c      	adds	r3, #92	; 0x5c
 8004f28:	2202      	movs	r2, #2
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e081      	b.n	8005032 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	335d      	adds	r3, #93	; 0x5d
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	2b05      	cmp	r3, #5
 8004f42:	d10a      	bne.n	8004f5a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	440b      	add	r3, r1
 8004f52:	335c      	adds	r3, #92	; 0x5c
 8004f54:	2205      	movs	r2, #5
 8004f56:	701a      	strb	r2, [r3, #0]
 8004f58:	e06b      	b.n	8005032 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	440b      	add	r3, r1
 8004f68:	335d      	adds	r3, #93	; 0x5d
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d00a      	beq.n	8004f86 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	335d      	adds	r3, #93	; 0x5d
 8004f80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d155      	bne.n	8005032 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	3358      	adds	r3, #88	; 0x58
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	1c59      	adds	r1, r3, #1
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4403      	add	r3, r0
 8004fa8:	3358      	adds	r3, #88	; 0x58
 8004faa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	440b      	add	r3, r1
 8004fba:	3358      	adds	r3, #88	; 0x58
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d914      	bls.n	8004fec <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	3358      	adds	r3, #88	; 0x58
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	335c      	adds	r3, #92	; 0x5c
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e009      	b.n	8005000 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	440b      	add	r3, r1
 8004ffa:	335c      	adds	r3, #92	; 0x5c
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005016:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800501e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	4413      	add	r3, r2
 8005028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	4413      	add	r3, r2
 800503a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503e:	461a      	mov	r2, r3
 8005040:	2302      	movs	r3, #2
 8005042:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	b2d8      	uxtb	r0, r3
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	440b      	add	r3, r1
 8005056:	335c      	adds	r3, #92	; 0x5c
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	4601      	mov	r1, r0
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f008 ffb4 	bl	800dfcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	0c5b      	lsrs	r3, r3, #17
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d003      	beq.n	80050b0 <HCD_RXQLVL_IRQHandler+0x44>
 80050a8:	2b05      	cmp	r3, #5
 80050aa:	f000 8082 	beq.w	80051b2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80050ae:	e083      	b.n	80051b8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d07f      	beq.n	80051b6 <HCD_RXQLVL_IRQHandler+0x14a>
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3344      	adds	r3, #68	; 0x44
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d074      	beq.n	80051b6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	440b      	add	r3, r1
 80050de:	3344      	adds	r3, #68	; 0x44
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	b292      	uxth	r2, r2
 80050e6:	4619      	mov	r1, r3
 80050e8:	f003 fcb7 	bl	8008a5a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	440b      	add	r3, r1
 80050fa:	3344      	adds	r3, #68	; 0x44
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	18d1      	adds	r1, r2, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4403      	add	r3, r0
 8005110:	3344      	adds	r3, #68	; 0x44
 8005112:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	440b      	add	r3, r1
 8005122:	334c      	adds	r3, #76	; 0x4c
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	18d1      	adds	r1, r2, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4403      	add	r3, r0
 8005138:	334c      	adds	r3, #76	; 0x4c
 800513a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HCD_RXQLVL_IRQHandler+0x154>)
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d031      	beq.n	80051b6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	4413      	add	r3, r2
 800515a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005168:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005170:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	461a      	mov	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	3350      	adds	r3, #80	; 0x50
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	f083 0301 	eor.w	r3, r3, #1
 800519a:	b2d8      	uxtb	r0, r3
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	440b      	add	r3, r1
 80051aa:	3350      	adds	r3, #80	; 0x50
 80051ac:	4602      	mov	r2, r0
 80051ae:	701a      	strb	r2, [r3, #0]
      break;
 80051b0:	e001      	b.n	80051b6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80051b2:	bf00      	nop
 80051b4:	e000      	b.n	80051b8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80051b6:	bf00      	nop
  }
}
 80051b8:	bf00      	nop
 80051ba:	3728      	adds	r7, #40	; 0x28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	1ff80000 	.word	0x1ff80000

080051c4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051f0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d10b      	bne.n	8005214 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b01      	cmp	r3, #1
 8005204:	d102      	bne.n	800520c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f008 fec4 	bl	800df94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	d132      	bne.n	8005284 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f043 0308 	orr.w	r3, r3, #8
 8005224:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d126      	bne.n	800527e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d113      	bne.n	8005260 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800523e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005242:	d106      	bne.n	8005252 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2102      	movs	r1, #2
 800524a:	4618      	mov	r0, r3
 800524c:	f003 fd40 	bl	8008cd0 <USB_InitFSLSPClkSel>
 8005250:	e011      	b.n	8005276 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2101      	movs	r1, #1
 8005258:	4618      	mov	r0, r3
 800525a:	f003 fd39 	bl	8008cd0 <USB_InitFSLSPClkSel>
 800525e:	e00a      	b.n	8005276 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526e:	461a      	mov	r2, r3
 8005270:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005274:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f008 feba 	bl	800dff0 <HAL_HCD_PortEnabled_Callback>
 800527c:	e002      	b.n	8005284 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f008 fec4 	bl	800e00c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d103      	bne.n	8005296 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f043 0320 	orr.w	r3, r3, #32
 8005294:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800529c:	461a      	mov	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6013      	str	r3, [r2, #0]
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e11f      	b.n	80054fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fc32 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	; 0x24
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800530e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005310:	f001 f94c 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 8005314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4a7b      	ldr	r2, [pc, #492]	; (8005508 <HAL_I2C_Init+0x25c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d807      	bhi.n	8005330 <HAL_I2C_Init+0x84>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a7a      	ldr	r2, [pc, #488]	; (800550c <HAL_I2C_Init+0x260>)
 8005324:	4293      	cmp	r3, r2
 8005326:	bf94      	ite	ls
 8005328:	2301      	movls	r3, #1
 800532a:	2300      	movhi	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e006      	b.n	800533e <HAL_I2C_Init+0x92>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a77      	ldr	r2, [pc, #476]	; (8005510 <HAL_I2C_Init+0x264>)
 8005334:	4293      	cmp	r3, r2
 8005336:	bf94      	ite	ls
 8005338:	2301      	movls	r3, #1
 800533a:	2300      	movhi	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e0db      	b.n	80054fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a72      	ldr	r2, [pc, #456]	; (8005514 <HAL_I2C_Init+0x268>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0c9b      	lsrs	r3, r3, #18
 8005350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a64      	ldr	r2, [pc, #400]	; (8005508 <HAL_I2C_Init+0x25c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d802      	bhi.n	8005380 <HAL_I2C_Init+0xd4>
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	3301      	adds	r3, #1
 800537e:	e009      	b.n	8005394 <HAL_I2C_Init+0xe8>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	4a63      	ldr	r2, [pc, #396]	; (8005518 <HAL_I2C_Init+0x26c>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	099b      	lsrs	r3, r3, #6
 8005392:	3301      	adds	r3, #1
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	430b      	orrs	r3, r1
 800539a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4956      	ldr	r1, [pc, #344]	; (8005508 <HAL_I2C_Init+0x25c>)
 80053b0:	428b      	cmp	r3, r1
 80053b2:	d80d      	bhi.n	80053d0 <HAL_I2C_Init+0x124>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1e59      	subs	r1, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	bf38      	it	cc
 80053cc:	2304      	movcc	r3, #4
 80053ce:	e04f      	b.n	8005470 <HAL_I2C_Init+0x1c4>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d111      	bne.n	80053fc <HAL_I2C_Init+0x150>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	440b      	add	r3, r1
 80053e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ea:	3301      	adds	r3, #1
 80053ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	e012      	b.n	8005422 <HAL_I2C_Init+0x176>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1e58      	subs	r0, r3, #1
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6859      	ldr	r1, [r3, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	0099      	lsls	r1, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005412:	3301      	adds	r3, #1
 8005414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_I2C_Init+0x17e>
 8005426:	2301      	movs	r3, #1
 8005428:	e022      	b.n	8005470 <HAL_I2C_Init+0x1c4>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10e      	bne.n	8005450 <HAL_I2C_Init+0x1a4>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1e58      	subs	r0, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6859      	ldr	r1, [r3, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	440b      	add	r3, r1
 8005440:	fbb0 f3f3 	udiv	r3, r0, r3
 8005444:	3301      	adds	r3, #1
 8005446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	e00f      	b.n	8005470 <HAL_I2C_Init+0x1c4>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	1e58      	subs	r0, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	0099      	lsls	r1, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	fbb0 f3f3 	udiv	r3, r0, r3
 8005466:	3301      	adds	r3, #1
 8005468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	6809      	ldr	r1, [r1, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800549e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6911      	ldr	r1, [r2, #16]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68d2      	ldr	r2, [r2, #12]
 80054aa:	4311      	orrs	r1, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6812      	ldr	r2, [r2, #0]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f042 0201 	orr.w	r2, r2, #1
 80054de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	000186a0 	.word	0x000186a0
 800550c:	001e847f 	.word	0x001e847f
 8005510:	003d08ff 	.word	0x003d08ff
 8005514:	431bde83 	.word	0x431bde83
 8005518:	10624dd3 	.word	0x10624dd3

0800551c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b20      	cmp	r3, #32
 8005530:	d129      	bne.n	8005586 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	; 0x24
 8005536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0210 	bic.w	r2, r2, #16
 8005558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005586:	2302      	movs	r3, #2
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d12a      	bne.n	8005604 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2224      	movs	r2, #36	; 0x24
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80055ce:	89fb      	ldrh	r3, [r7, #14]
 80055d0:	f023 030f 	bic.w	r3, r3, #15
 80055d4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	b29a      	uxth	r2, r3
 80055da:	89fb      	ldrh	r3, [r7, #14]
 80055dc:	4313      	orrs	r3, r2
 80055de:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	89fa      	ldrh	r2, [r7, #14]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0201 	orr.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e0bf      	b.n	80057a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fb9c 	bl	8000d78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005656:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6999      	ldr	r1, [r3, #24]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800566c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6899      	ldr	r1, [r3, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b4a      	ldr	r3, [pc, #296]	; (80057b0 <HAL_LTDC_Init+0x19c>)
 8005688:	400b      	ands	r3, r1
 800568a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6899      	ldr	r1, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68d9      	ldr	r1, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <HAL_LTDC_Init+0x19c>)
 80056b6:	400b      	ands	r3, r1
 80056b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68d9      	ldr	r1, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6919      	ldr	r1, [r3, #16]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <HAL_LTDC_Init+0x19c>)
 80056e4:	400b      	ands	r3, r1
 80056e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6919      	ldr	r1, [r3, #16]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6959      	ldr	r1, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <HAL_LTDC_Init+0x19c>)
 8005712:	400b      	ands	r3, r1
 8005714:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6959      	ldr	r1, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005744:	041b      	lsls	r3, r3, #16
 8005746:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005756:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0206 	orr.w	r2, r2, #6
 8005782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	f000f800 	.word	0xf000f800

080057b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d023      	beq.n	800581e <HAL_LTDC_IRQHandler+0x6a>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01e      	beq.n	800581e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0204 	bic.w	r2, r2, #4
 80057ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2204      	movs	r2, #4
 80057f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2204      	movs	r2, #4
 800580c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f86f 	bl	80058fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d023      	beq.n	8005870 <HAL_LTDC_IRQHandler+0xbc>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01e      	beq.n	8005870 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0202 	bic.w	r2, r2, #2
 8005840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2202      	movs	r2, #2
 8005848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005850:	f043 0202 	orr.w	r2, r3, #2
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f846 	bl	80058fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d01b      	beq.n	80058b2 <HAL_LTDC_IRQHandler+0xfe>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d016      	beq.n	80058b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2201      	movs	r2, #1
 800589a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f82f 	bl	8005910 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01b      	beq.n	80058f4 <HAL_LTDC_IRQHandler+0x140>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0208 	bic.w	r2, r2, #8
 80058d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2208      	movs	r2, #8
 80058dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f818 	bl	8005924 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005938:	b5b0      	push	{r4, r5, r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_LTDC_ConfigLayer+0x1a>
 800594e:	2302      	movs	r3, #2
 8005950:	e02c      	b.n	80059ac <HAL_LTDC_ConfigLayer+0x74>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2134      	movs	r1, #52	; 0x34
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	4413      	add	r3, r2
 800596e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	4614      	mov	r4, r2
 8005976:	461d      	mov	r5, r3
 8005978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800597a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800597c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800597e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f83b 	bl	8005a08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2201      	movs	r2, #1
 8005998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bdb0      	pop	{r4, r5, r7, pc}

080059b4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_LTDC_EnableDither+0x16>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e016      	b.n	80059f8 <HAL_LTDC_EnableDither+0x44>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80059da:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <HAL_LTDC_EnableDither+0x50>)
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <HAL_LTDC_EnableDither+0x50>)
 80059e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40016800 	.word	0x40016800

08005a08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	; 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a24:	4413      	add	r3, r2
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	01db      	lsls	r3, r3, #7
 8005a34:	4413      	add	r3, r2
 8005a36:	3384      	adds	r3, #132	; 0x84
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	4611      	mov	r1, r2
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	01d2      	lsls	r2, r2, #7
 8005a44:	440a      	add	r2, r1
 8005a46:	3284      	adds	r2, #132	; 0x84
 8005a48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5e:	4413      	add	r3, r2
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	01db      	lsls	r3, r3, #7
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3384      	adds	r3, #132	; 0x84
 8005a70:	4619      	mov	r1, r3
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a86:	4413      	add	r3, r2
 8005a88:	041b      	lsls	r3, r3, #16
 8005a8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	01db      	lsls	r3, r3, #7
 8005a96:	4413      	add	r3, r2
 8005a98:	3384      	adds	r3, #132	; 0x84
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	01d2      	lsls	r2, r2, #7
 8005aa6:	440a      	add	r2, r1
 8005aa8:	3284      	adds	r2, #132	; 0x84
 8005aaa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005aae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005abe:	4413      	add	r3, r2
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	01db      	lsls	r3, r3, #7
 8005acc:	440b      	add	r3, r1
 8005ace:	3384      	adds	r3, #132	; 0x84
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	01db      	lsls	r3, r3, #7
 8005ae2:	4413      	add	r3, r2
 8005ae4:	3384      	adds	r3, #132	; 0x84
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	4611      	mov	r1, r2
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	01d2      	lsls	r2, r2, #7
 8005af2:	440a      	add	r2, r1
 8005af4:	3284      	adds	r2, #132	; 0x84
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	01db      	lsls	r3, r3, #7
 8005b06:	4413      	add	r3, r2
 8005b08:	3384      	adds	r3, #132	; 0x84
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	061b      	lsls	r3, r3, #24
 8005b2c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	461a      	mov	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	01db      	lsls	r3, r3, #7
 8005b38:	4413      	add	r3, r2
 8005b3a:	3384      	adds	r3, #132	; 0x84
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	01db      	lsls	r3, r3, #7
 8005b48:	4413      	add	r3, r2
 8005b4a:	3384      	adds	r3, #132	; 0x84
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2300      	movs	r3, #0
 8005b50:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b58:	461a      	mov	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4619      	mov	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	01db      	lsls	r3, r3, #7
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3384      	adds	r3, #132	; 0x84
 8005b70:	4619      	mov	r1, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	01db      	lsls	r3, r3, #7
 8005b82:	4413      	add	r3, r2
 8005b84:	3384      	adds	r3, #132	; 0x84
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6812      	ldr	r2, [r2, #0]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	01d2      	lsls	r2, r2, #7
 8005b92:	440a      	add	r2, r1
 8005b94:	3284      	adds	r2, #132	; 0x84
 8005b96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b9a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	01db      	lsls	r3, r3, #7
 8005ba6:	4413      	add	r3, r2
 8005ba8:	3384      	adds	r3, #132	; 0x84
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	01db      	lsls	r3, r3, #7
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3384      	adds	r3, #132	; 0x84
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	01d2      	lsls	r2, r2, #7
 8005bcc:	440a      	add	r2, r1
 8005bce:	3284      	adds	r2, #132	; 0x84
 8005bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	6809      	ldr	r1, [r1, #0]
 8005be6:	4608      	mov	r0, r1
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	01c9      	lsls	r1, r1, #7
 8005bec:	4401      	add	r1, r0
 8005bee:	3184      	adds	r1, #132	; 0x84
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	01db      	lsls	r3, r3, #7
 8005bfe:	4413      	add	r3, r2
 8005c00:	3384      	adds	r3, #132	; 0x84
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4413      	add	r3, r2
 8005c10:	3384      	adds	r3, #132	; 0x84
 8005c12:	461a      	mov	r2, r3
 8005c14:	2300      	movs	r3, #0
 8005c16:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	01db      	lsls	r3, r3, #7
 8005c22:	4413      	add	r3, r2
 8005c24:	3384      	adds	r3, #132	; 0x84
 8005c26:	461a      	mov	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005c36:	2304      	movs	r3, #4
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e01b      	b.n	8005c74 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d102      	bne.n	8005c4a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005c44:	2303      	movs	r3, #3
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	e014      	b.n	8005c74 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d00b      	beq.n	8005c6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d007      	beq.n	8005c6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d003      	beq.n	8005c6a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005c66:	2b07      	cmp	r3, #7
 8005c68:	d102      	bne.n	8005c70 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	e001      	b.n	8005c74 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005c70:	2301      	movs	r3, #1
 8005c72:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	01db      	lsls	r3, r3, #7
 8005c7e:	4413      	add	r3, r2
 8005c80:	3384      	adds	r3, #132	; 0x84
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	01d2      	lsls	r2, r2, #7
 8005c8e:	440a      	add	r2, r1
 8005c90:	3284      	adds	r2, #132	; 0x84
 8005c92:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ca2:	041a      	lsls	r2, r3, #16
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6859      	ldr	r1, [r3, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	1acb      	subs	r3, r1, r3
 8005cae:	69f9      	ldr	r1, [r7, #28]
 8005cb0:	fb01 f303 	mul.w	r3, r1, r3
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	6809      	ldr	r1, [r1, #0]
 8005cba:	4608      	mov	r0, r1
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	01c9      	lsls	r1, r1, #7
 8005cc0:	4401      	add	r1, r0
 8005cc2:	3184      	adds	r1, #132	; 0x84
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	01db      	lsls	r3, r3, #7
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3384      	adds	r3, #132	; 0x84
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	6812      	ldr	r2, [r2, #0]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	01d2      	lsls	r2, r2, #7
 8005ce2:	440a      	add	r2, r1
 8005ce4:	3284      	adds	r2, #132	; 0x84
 8005ce6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	01db      	lsls	r3, r3, #7
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3384      	adds	r3, #132	; 0x84
 8005cfe:	461a      	mov	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	01db      	lsls	r3, r3, #7
 8005d10:	4413      	add	r3, r2
 8005d12:	3384      	adds	r3, #132	; 0x84
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	01d2      	lsls	r2, r2, #7
 8005d20:	440a      	add	r2, r1
 8005d22:	3284      	adds	r2, #132	; 0x84
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	6013      	str	r3, [r2, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3724      	adds	r7, #36	; 0x24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
	...

08005d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e25b      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d075      	beq.n	8005e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d56:	4ba3      	ldr	r3, [pc, #652]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 030c 	and.w	r3, r3, #12
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d00c      	beq.n	8005d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d62:	4ba0      	ldr	r3, [pc, #640]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d112      	bne.n	8005d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d6e:	4b9d      	ldr	r3, [pc, #628]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7a:	d10b      	bne.n	8005d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7c:	4b99      	ldr	r3, [pc, #612]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d05b      	beq.n	8005e40 <HAL_RCC_OscConfig+0x108>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d157      	bne.n	8005e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e236      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d106      	bne.n	8005dac <HAL_RCC_OscConfig+0x74>
 8005d9e:	4b91      	ldr	r3, [pc, #580]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a90      	ldr	r2, [pc, #576]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	e01d      	b.n	8005de8 <HAL_RCC_OscConfig+0xb0>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x98>
 8005db6:	4b8b      	ldr	r3, [pc, #556]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a8a      	ldr	r2, [pc, #552]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b88      	ldr	r3, [pc, #544]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a87      	ldr	r2, [pc, #540]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	e00b      	b.n	8005de8 <HAL_RCC_OscConfig+0xb0>
 8005dd0:	4b84      	ldr	r3, [pc, #528]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a83      	ldr	r2, [pc, #524]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a80      	ldr	r2, [pc, #512]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d013      	beq.n	8005e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fc fc1a 	bl	8002628 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df8:	f7fc fc16 	bl	8002628 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	; 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e1fb      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e0a:	4b76      	ldr	r3, [pc, #472]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCC_OscConfig+0xc0>
 8005e16:	e014      	b.n	8005e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fc fc06 	bl	8002628 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e20:	f7fc fc02 	bl	8002628 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b64      	cmp	r3, #100	; 0x64
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e1e7      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e32:	4b6c      	ldr	r3, [pc, #432]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0xe8>
 8005e3e:	e000      	b.n	8005e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d063      	beq.n	8005f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e4e:	4b65      	ldr	r3, [pc, #404]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5a:	4b62      	ldr	r3, [pc, #392]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d11c      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e66:	4b5f      	ldr	r3, [pc, #380]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d116      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e72:	4b5c      	ldr	r3, [pc, #368]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_RCC_OscConfig+0x152>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d001      	beq.n	8005e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e1bb      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8a:	4b56      	ldr	r3, [pc, #344]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4952      	ldr	r1, [pc, #328]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9e:	e03a      	b.n	8005f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d020      	beq.n	8005eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ea8:	4b4f      	ldr	r3, [pc, #316]	; (8005fe8 <HAL_RCC_OscConfig+0x2b0>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eae:	f7fc fbbb 	bl	8002628 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb4:	e008      	b.n	8005ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb6:	f7fc fbb7 	bl	8002628 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e19c      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec8:	4b46      	ldr	r3, [pc, #280]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d0f0      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed4:	4b43      	ldr	r3, [pc, #268]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	4940      	ldr	r1, [pc, #256]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	600b      	str	r3, [r1, #0]
 8005ee8:	e015      	b.n	8005f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eea:	4b3f      	ldr	r3, [pc, #252]	; (8005fe8 <HAL_RCC_OscConfig+0x2b0>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fc fb9a 	bl	8002628 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef8:	f7fc fb96 	bl	8002628 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e17b      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f0a:	4b36      	ldr	r3, [pc, #216]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d030      	beq.n	8005f84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d016      	beq.n	8005f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f2a:	4b30      	ldr	r3, [pc, #192]	; (8005fec <HAL_RCC_OscConfig+0x2b4>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f30:	f7fc fb7a 	bl	8002628 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f38:	f7fc fb76 	bl	8002628 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e15b      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f4a:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x200>
 8005f56:	e015      	b.n	8005f84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f58:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCC_OscConfig+0x2b4>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f5e:	f7fc fb63 	bl	8002628 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f66:	f7fc fb5f 	bl	8002628 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e144      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f78:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1f0      	bne.n	8005f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 80a0 	beq.w	80060d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f92:	2300      	movs	r3, #0
 8005f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60bb      	str	r3, [r7, #8]
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4a0e      	ldr	r2, [pc, #56]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_RCC_OscConfig+0x2b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d121      	bne.n	8006012 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <HAL_RCC_OscConfig+0x2b8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a07      	ldr	r2, [pc, #28]	; (8005ff0 <HAL_RCC_OscConfig+0x2b8>)
 8005fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fda:	f7fc fb25 	bl	8002628 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe0:	e011      	b.n	8006006 <HAL_RCC_OscConfig+0x2ce>
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	42470000 	.word	0x42470000
 8005fec:	42470e80 	.word	0x42470e80
 8005ff0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff4:	f7fc fb18 	bl	8002628 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e0fd      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006006:	4b81      	ldr	r3, [pc, #516]	; (800620c <HAL_RCC_OscConfig+0x4d4>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d106      	bne.n	8006028 <HAL_RCC_OscConfig+0x2f0>
 800601a:	4b7d      	ldr	r3, [pc, #500]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	4a7c      	ldr	r2, [pc, #496]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006020:	f043 0301 	orr.w	r3, r3, #1
 8006024:	6713      	str	r3, [r2, #112]	; 0x70
 8006026:	e01c      	b.n	8006062 <HAL_RCC_OscConfig+0x32a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b05      	cmp	r3, #5
 800602e:	d10c      	bne.n	800604a <HAL_RCC_OscConfig+0x312>
 8006030:	4b77      	ldr	r3, [pc, #476]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006034:	4a76      	ldr	r2, [pc, #472]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006036:	f043 0304 	orr.w	r3, r3, #4
 800603a:	6713      	str	r3, [r2, #112]	; 0x70
 800603c:	4b74      	ldr	r3, [pc, #464]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a73      	ldr	r2, [pc, #460]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	e00b      	b.n	8006062 <HAL_RCC_OscConfig+0x32a>
 800604a:	4b71      	ldr	r3, [pc, #452]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	4a70      	ldr	r2, [pc, #448]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006050:	f023 0301 	bic.w	r3, r3, #1
 8006054:	6713      	str	r3, [r2, #112]	; 0x70
 8006056:	4b6e      	ldr	r3, [pc, #440]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	4a6d      	ldr	r2, [pc, #436]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 800605c:	f023 0304 	bic.w	r3, r3, #4
 8006060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d015      	beq.n	8006096 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606a:	f7fc fadd 	bl	8002628 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006070:	e00a      	b.n	8006088 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006072:	f7fc fad9 	bl	8002628 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e0bc      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006088:	4b61      	ldr	r3, [pc, #388]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ee      	beq.n	8006072 <HAL_RCC_OscConfig+0x33a>
 8006094:	e014      	b.n	80060c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006096:	f7fc fac7 	bl	8002628 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800609c:	e00a      	b.n	80060b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800609e:	f7fc fac3 	bl	8002628 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e0a6      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060b4:	4b56      	ldr	r3, [pc, #344]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1ee      	bne.n	800609e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d105      	bne.n	80060d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c6:	4b52      	ldr	r3, [pc, #328]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	4a51      	ldr	r2, [pc, #324]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 80060cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8092 	beq.w	8006200 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060dc:	4b4c      	ldr	r3, [pc, #304]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 030c 	and.w	r3, r3, #12
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d05c      	beq.n	80061a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d141      	bne.n	8006174 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f0:	4b48      	ldr	r3, [pc, #288]	; (8006214 <HAL_RCC_OscConfig+0x4dc>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f6:	f7fc fa97 	bl	8002628 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fe:	f7fc fa93 	bl	8002628 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e078      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006110:	4b3f      	ldr	r3, [pc, #252]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1f0      	bne.n	80060fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	019b      	lsls	r3, r3, #6
 800612c:	431a      	orrs	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	3b01      	subs	r3, #1
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	061b      	lsls	r3, r3, #24
 8006140:	4933      	ldr	r1, [pc, #204]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006142:	4313      	orrs	r3, r2
 8006144:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006146:	4b33      	ldr	r3, [pc, #204]	; (8006214 <HAL_RCC_OscConfig+0x4dc>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614c:	f7fc fa6c 	bl	8002628 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006154:	f7fc fa68 	bl	8002628 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e04d      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006166:	4b2a      	ldr	r3, [pc, #168]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x41c>
 8006172:	e045      	b.n	8006200 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006174:	4b27      	ldr	r3, [pc, #156]	; (8006214 <HAL_RCC_OscConfig+0x4dc>)
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617a:	f7fc fa55 	bl	8002628 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006182:	f7fc fa51 	bl	8002628 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e036      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006194:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f0      	bne.n	8006182 <HAL_RCC_OscConfig+0x44a>
 80061a0:	e02e      	b.n	8006200 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e029      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061ae:	4b18      	ldr	r3, [pc, #96]	; (8006210 <HAL_RCC_OscConfig+0x4d8>)
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d11c      	bne.n	80061fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d115      	bne.n	80061fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061d6:	4013      	ands	r3, r2
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10d      	bne.n	80061fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d106      	bne.n	80061fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d001      	beq.n	8006200 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40007000 	.word	0x40007000
 8006210:	40023800 	.word	0x40023800
 8006214:	42470060 	.word	0x42470060

08006218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0cc      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800622c:	4b68      	ldr	r3, [pc, #416]	; (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d90c      	bls.n	8006254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623a:	4b65      	ldr	r3, [pc, #404]	; (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006242:	4b63      	ldr	r3, [pc, #396]	; (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d001      	beq.n	8006254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0b8      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d020      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800626c:	4b59      	ldr	r3, [pc, #356]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	4a58      	ldr	r2, [pc, #352]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006284:	4b53      	ldr	r3, [pc, #332]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	4a52      	ldr	r2, [pc, #328]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800628e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006290:	4b50      	ldr	r3, [pc, #320]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	494d      	ldr	r1, [pc, #308]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d044      	beq.n	8006338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b6:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d119      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e07f      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d003      	beq.n	80062d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d107      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d6:	4b3f      	ldr	r3, [pc, #252]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d109      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e06f      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e6:	4b3b      	ldr	r3, [pc, #236]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e067      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062f6:	4b37      	ldr	r3, [pc, #220]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f023 0203 	bic.w	r2, r3, #3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4934      	ldr	r1, [pc, #208]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	4313      	orrs	r3, r2
 8006306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006308:	f7fc f98e 	bl	8002628 <HAL_GetTick>
 800630c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630e:	e00a      	b.n	8006326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006310:	f7fc f98a 	bl	8002628 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	f241 3288 	movw	r2, #5000	; 0x1388
 800631e:	4293      	cmp	r3, r2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e04f      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006326:	4b2b      	ldr	r3, [pc, #172]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 020c 	and.w	r2, r3, #12
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	429a      	cmp	r2, r3
 8006336:	d1eb      	bne.n	8006310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006338:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d20c      	bcs.n	8006360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006346:	4b22      	ldr	r3, [pc, #136]	; (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b20      	ldr	r3, [pc, #128]	; (80063d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d001      	beq.n	8006360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e032      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800636c:	4b19      	ldr	r3, [pc, #100]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4916      	ldr	r1, [pc, #88]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	490e      	ldr	r1, [pc, #56]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	4313      	orrs	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800639e:	f000 f821 	bl	80063e4 <HAL_RCC_GetSysClockFreq>
 80063a2:	4601      	mov	r1, r0
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	091b      	lsrs	r3, r3, #4
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <HAL_RCC_ClockConfig+0x1c0>)
 80063b0:	5cd3      	ldrb	r3, [r2, r3]
 80063b2:	fa21 f303 	lsr.w	r3, r1, r3
 80063b6:	4a09      	ldr	r2, [pc, #36]	; (80063dc <HAL_RCC_ClockConfig+0x1c4>)
 80063b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <HAL_RCC_ClockConfig+0x1c8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fa ff8c 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40023c00 	.word	0x40023c00
 80063d4:	40023800 	.word	0x40023800
 80063d8:	0800e6b8 	.word	0x0800e6b8
 80063dc:	20000000 	.word	0x20000000
 80063e0:	2000004c 	.word	0x2000004c

080063e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	2300      	movs	r3, #0
 80063f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063fa:	4b63      	ldr	r3, [pc, #396]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b04      	cmp	r3, #4
 8006404:	d007      	beq.n	8006416 <HAL_RCC_GetSysClockFreq+0x32>
 8006406:	2b08      	cmp	r3, #8
 8006408:	d008      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x38>
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 80b4 	bne.w	8006578 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006410:	4b5e      	ldr	r3, [pc, #376]	; (800658c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006412:	60bb      	str	r3, [r7, #8]
       break;
 8006414:	e0b3      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006416:	4b5e      	ldr	r3, [pc, #376]	; (8006590 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006418:	60bb      	str	r3, [r7, #8]
      break;
 800641a:	e0b0      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800641c:	4b5a      	ldr	r3, [pc, #360]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006424:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006426:	4b58      	ldr	r3, [pc, #352]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04a      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006432:	4b55      	ldr	r3, [pc, #340]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	f04f 0400 	mov.w	r4, #0
 800643c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	ea03 0501 	and.w	r5, r3, r1
 8006448:	ea04 0602 	and.w	r6, r4, r2
 800644c:	4629      	mov	r1, r5
 800644e:	4632      	mov	r2, r6
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	f04f 0400 	mov.w	r4, #0
 8006458:	0154      	lsls	r4, r2, #5
 800645a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800645e:	014b      	lsls	r3, r1, #5
 8006460:	4619      	mov	r1, r3
 8006462:	4622      	mov	r2, r4
 8006464:	1b49      	subs	r1, r1, r5
 8006466:	eb62 0206 	sbc.w	r2, r2, r6
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	f04f 0400 	mov.w	r4, #0
 8006472:	0194      	lsls	r4, r2, #6
 8006474:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006478:	018b      	lsls	r3, r1, #6
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	eb64 0402 	sbc.w	r4, r4, r2
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	00e2      	lsls	r2, r4, #3
 800648a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800648e:	00d9      	lsls	r1, r3, #3
 8006490:	460b      	mov	r3, r1
 8006492:	4614      	mov	r4, r2
 8006494:	195b      	adds	r3, r3, r5
 8006496:	eb44 0406 	adc.w	r4, r4, r6
 800649a:	f04f 0100 	mov.w	r1, #0
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	0262      	lsls	r2, r4, #9
 80064a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80064a8:	0259      	lsls	r1, r3, #9
 80064aa:	460b      	mov	r3, r1
 80064ac:	4614      	mov	r4, r2
 80064ae:	4618      	mov	r0, r3
 80064b0:	4621      	mov	r1, r4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f04f 0400 	mov.w	r4, #0
 80064b8:	461a      	mov	r2, r3
 80064ba:	4623      	mov	r3, r4
 80064bc:	f7f9 fe98 	bl	80001f0 <__aeabi_uldivmod>
 80064c0:	4603      	mov	r3, r0
 80064c2:	460c      	mov	r4, r1
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e049      	b.n	800655c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c8:	4b2f      	ldr	r3, [pc, #188]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	099b      	lsrs	r3, r3, #6
 80064ce:	f04f 0400 	mov.w	r4, #0
 80064d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	ea03 0501 	and.w	r5, r3, r1
 80064de:	ea04 0602 	and.w	r6, r4, r2
 80064e2:	4629      	mov	r1, r5
 80064e4:	4632      	mov	r2, r6
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	f04f 0400 	mov.w	r4, #0
 80064ee:	0154      	lsls	r4, r2, #5
 80064f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064f4:	014b      	lsls	r3, r1, #5
 80064f6:	4619      	mov	r1, r3
 80064f8:	4622      	mov	r2, r4
 80064fa:	1b49      	subs	r1, r1, r5
 80064fc:	eb62 0206 	sbc.w	r2, r2, r6
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	f04f 0400 	mov.w	r4, #0
 8006508:	0194      	lsls	r4, r2, #6
 800650a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800650e:	018b      	lsls	r3, r1, #6
 8006510:	1a5b      	subs	r3, r3, r1
 8006512:	eb64 0402 	sbc.w	r4, r4, r2
 8006516:	f04f 0100 	mov.w	r1, #0
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	00e2      	lsls	r2, r4, #3
 8006520:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006524:	00d9      	lsls	r1, r3, #3
 8006526:	460b      	mov	r3, r1
 8006528:	4614      	mov	r4, r2
 800652a:	195b      	adds	r3, r3, r5
 800652c:	eb44 0406 	adc.w	r4, r4, r6
 8006530:	f04f 0100 	mov.w	r1, #0
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	02a2      	lsls	r2, r4, #10
 800653a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800653e:	0299      	lsls	r1, r3, #10
 8006540:	460b      	mov	r3, r1
 8006542:	4614      	mov	r4, r2
 8006544:	4618      	mov	r0, r3
 8006546:	4621      	mov	r1, r4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f04f 0400 	mov.w	r4, #0
 800654e:	461a      	mov	r2, r3
 8006550:	4623      	mov	r3, r4
 8006552:	f7f9 fe4d 	bl	80001f0 <__aeabi_uldivmod>
 8006556:	4603      	mov	r3, r0
 8006558:	460c      	mov	r4, r1
 800655a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800655c:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	3301      	adds	r3, #1
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	fbb2 f3f3 	udiv	r3, r2, r3
 8006574:	60bb      	str	r3, [r7, #8]
      break;
 8006576:	e002      	b.n	800657e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800657a:	60bb      	str	r3, [r7, #8]
      break;
 800657c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800657e:	68bb      	ldr	r3, [r7, #8]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006588:	40023800 	.word	0x40023800
 800658c:	00f42400 	.word	0x00f42400
 8006590:	007a1200 	.word	0x007a1200

08006594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006598:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800659a:	681b      	ldr	r3, [r3, #0]
}
 800659c:	4618      	mov	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000000 	.word	0x20000000

080065ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065b0:	f7ff fff0 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065b4:	4601      	mov	r1, r0
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	0a9b      	lsrs	r3, r3, #10
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4a03      	ldr	r2, [pc, #12]	; (80065d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065c2:	5cd3      	ldrb	r3, [r2, r3]
 80065c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40023800 	.word	0x40023800
 80065d0:	0800e6c8 	.word	0x0800e6c8

080065d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065d8:	f7ff ffdc 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065dc:	4601      	mov	r1, r0
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	0b5b      	lsrs	r3, r3, #13
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	4a03      	ldr	r2, [pc, #12]	; (80065f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ea:	5cd3      	ldrb	r3, [r2, r3]
 80065ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40023800 	.word	0x40023800
 80065f8:	0800e6c8 	.word	0x0800e6c8

080065fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	220f      	movs	r2, #15
 800660a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <HAL_RCC_GetClockConfig+0x5c>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0203 	and.w	r2, r3, #3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <HAL_RCC_GetClockConfig+0x5c>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <HAL_RCC_GetClockConfig+0x5c>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <HAL_RCC_GetClockConfig+0x5c>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	08db      	lsrs	r3, r3, #3
 8006636:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <HAL_RCC_GetClockConfig+0x60>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 020f 	and.w	r2, r3, #15
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	601a      	str	r2, [r3, #0]
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40023800 	.word	0x40023800
 800665c:	40023c00 	.word	0x40023c00

08006660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10b      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006684:	2b00      	cmp	r3, #0
 8006686:	d105      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006690:	2b00      	cmp	r3, #0
 8006692:	d075      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006694:	4bad      	ldr	r3, [pc, #692]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800669a:	f7fb ffc5 	bl	8002628 <HAL_GetTick>
 800669e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066a0:	e008      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066a2:	f7fb ffc1 	bl	8002628 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e18b      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b4:	4ba6      	ldr	r3, [pc, #664]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f0      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	019a      	lsls	r2, r3, #6
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	071b      	lsls	r3, r3, #28
 80066d8:	499d      	ldr	r1, [pc, #628]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01f      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066ec:	4b98      	ldr	r3, [pc, #608]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f2:	0f1b      	lsrs	r3, r3, #28
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	019a      	lsls	r2, r3, #6
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	431a      	orrs	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	071b      	lsls	r3, r3, #28
 800670c:	4990      	ldr	r1, [pc, #576]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006714:	4b8e      	ldr	r3, [pc, #568]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006716:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671a:	f023 021f 	bic.w	r2, r3, #31
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	3b01      	subs	r3, #1
 8006724:	498a      	ldr	r1, [pc, #552]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00d      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	019a      	lsls	r2, r3, #6
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	061b      	lsls	r3, r3, #24
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	071b      	lsls	r3, r3, #28
 800674c:	4980      	ldr	r1, [pc, #512]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800674e:	4313      	orrs	r3, r2
 8006750:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006754:	4b7d      	ldr	r3, [pc, #500]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800675a:	f7fb ff65 	bl	8002628 <HAL_GetTick>
 800675e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006760:	e008      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006762:	f7fb ff61 	bl	8002628 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e12b      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006774:	4b76      	ldr	r3, [pc, #472]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0304 	and.w	r3, r3, #4
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006794:	2b00      	cmp	r3, #0
 8006796:	d079      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006798:	4b6e      	ldr	r3, [pc, #440]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800679e:	f7fb ff43 	bl	8002628 <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067a6:	f7fb ff3f 	bl	8002628 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e109      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067b8:	4b65      	ldr	r3, [pc, #404]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c4:	d0ef      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d020      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067d2:	4b5f      	ldr	r3, [pc, #380]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d8:	0f1b      	lsrs	r3, r3, #28
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	019a      	lsls	r2, r3, #6
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	061b      	lsls	r3, r3, #24
 80067ec:	431a      	orrs	r2, r3
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	071b      	lsls	r3, r3, #28
 80067f2:	4957      	ldr	r1, [pc, #348]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067fa:	4b55      	ldr	r3, [pc, #340]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006800:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	3b01      	subs	r3, #1
 800680a:	021b      	lsls	r3, r3, #8
 800680c:	4950      	ldr	r1, [pc, #320]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d01e      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006820:	4b4b      	ldr	r3, [pc, #300]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	0e1b      	lsrs	r3, r3, #24
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	019a      	lsls	r2, r3, #6
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	061b      	lsls	r3, r3, #24
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	071b      	lsls	r3, r3, #28
 8006840:	4943      	ldr	r1, [pc, #268]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006848:	4b41      	ldr	r3, [pc, #260]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800684a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800684e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	493e      	ldr	r1, [pc, #248]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006858:	4313      	orrs	r3, r2
 800685a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800685e:	4b3d      	ldr	r3, [pc, #244]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006864:	f7fb fee0 	bl	8002628 <HAL_GetTick>
 8006868:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800686c:	f7fb fedc 	bl	8002628 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e0a6      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800687e:	4b34      	ldr	r3, [pc, #208]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688a:	d1ef      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 808d 	beq.w	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	4a2b      	ldr	r2, [pc, #172]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068a8:	6413      	str	r3, [r2, #64]	; 0x40
 80068aa:	4b29      	ldr	r3, [pc, #164]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068b6:	4b28      	ldr	r3, [pc, #160]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a27      	ldr	r2, [pc, #156]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068c2:	f7fb feb1 	bl	8002628 <HAL_GetTick>
 80068c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068c8:	e008      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068ca:	f7fb fead 	bl	8002628 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e077      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068dc:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d039      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	429a      	cmp	r2, r3
 8006904:	d032      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006906:	4b12      	ldr	r3, [pc, #72]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006910:	4b12      	ldr	r3, [pc, #72]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800691c:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006922:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d11e      	bne.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800692e:	f7fb fe7b 	bl	8002628 <HAL_GetTick>
 8006932:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006934:	e014      	b.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006936:	f7fb fe77 	bl	8002628 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	f241 3288 	movw	r2, #5000	; 0x1388
 8006944:	4293      	cmp	r3, r2
 8006946:	d90b      	bls.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e03f      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800694c:	42470068 	.word	0x42470068
 8006950:	40023800 	.word	0x40023800
 8006954:	42470070 	.word	0x42470070
 8006958:	40007000 	.word	0x40007000
 800695c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006960:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0e4      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006978:	d10d      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800697a:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	4911      	ldr	r1, [pc, #68]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006990:	4313      	orrs	r3, r2
 8006992:	608b      	str	r3, [r1, #8]
 8006994:	e005      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006996:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800699c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069a0:	6093      	str	r3, [r2, #8]
 80069a2:	4b0c      	ldr	r3, [pc, #48]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ae:	4909      	ldr	r1, [pc, #36]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069c6:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40023800 	.word	0x40023800
 80069d8:	424711e0 	.word	0x424711e0

080069dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e025      	b.n	8006a3c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7f9 fee5 	bl	80007d4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	f001 fdb1 	bl	8008584 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	f001 fe1c 	bl	800866a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d101      	bne.n	8006a60 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e018      	b.n	8006a92 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 fe79 	bl	8008768 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d104      	bne.n	8006a88 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2205      	movs	r2, #5
 8006a82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006a86:	e003      	b.n	8006a90 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d101      	bne.n	8006ab4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e00e      	b.n	8006ad2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 fe8c 	bl	80087e0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e056      	b.n	8006b9a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fa fb56 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	ea42 0103 	orr.w	r1, r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0104 	and.w	r1, r3, #4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69da      	ldr	r2, [r3, #28]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e01a      	b.n	8006bea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fa fb3b 	bl	8001248 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b088      	sub	sp, #32
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_SPI_Transmit+0x22>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e11e      	b.n	8006e52 <HAL_SPI_Transmit+0x260>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c1c:	f7fb fd04 	bl	8002628 <HAL_GetTick>
 8006c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c22:	88fb      	ldrh	r3, [r7, #6]
 8006c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c36:	e103      	b.n	8006e40 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_SPI_Transmit+0x52>
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d102      	bne.n	8006c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c48:	e0fa      	b.n	8006e40 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	88fa      	ldrh	r2, [r7, #6]
 8006c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c90:	d107      	bne.n	8006ca2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d007      	beq.n	8006cc0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc8:	d14b      	bne.n	8006d62 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HAL_SPI_Transmit+0xe6>
 8006cd2:	8afb      	ldrh	r3, [r7, #22]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d13e      	bne.n	8006d56 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	1c9a      	adds	r2, r3, #2
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cfc:	e02b      	b.n	8006d56 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d112      	bne.n	8006d32 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	881a      	ldrh	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	1c9a      	adds	r2, r3, #2
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d30:	e011      	b.n	8006d56 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d32:	f7fb fc79 	bl	8002628 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d803      	bhi.n	8006d4a <HAL_SPI_Transmit+0x158>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d102      	bne.n	8006d50 <HAL_SPI_Transmit+0x15e>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d54:	e074      	b.n	8006e40 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1ce      	bne.n	8006cfe <HAL_SPI_Transmit+0x10c>
 8006d60:	e04c      	b.n	8006dfc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d002      	beq.n	8006d70 <HAL_SPI_Transmit+0x17e>
 8006d6a:	8afb      	ldrh	r3, [r7, #22]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d140      	bne.n	8006df2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d96:	e02c      	b.n	8006df2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d113      	bne.n	8006dce <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	330c      	adds	r3, #12
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dcc:	e011      	b.n	8006df2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dce:	f7fb fc2b 	bl	8002628 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d803      	bhi.n	8006de6 <HAL_SPI_Transmit+0x1f4>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d102      	bne.n	8006dec <HAL_SPI_Transmit+0x1fa>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006df0:	e026      	b.n	8006e40 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1cd      	bne.n	8006d98 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fbb3 	bl	800756c <SPI_EndRxTxTransaction>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	77fb      	strb	r3, [r7, #31]
 8006e3c:	e000      	b.n	8006e40 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b088      	sub	sp, #32
 8006e5e:	af02      	add	r7, sp, #8
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	603b      	str	r3, [r7, #0]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e76:	d112      	bne.n	8006e9e <HAL_SPI_Receive+0x44>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10e      	bne.n	8006e9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2204      	movs	r2, #4
 8006e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e88:	88fa      	ldrh	r2, [r7, #6]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 f8e9 	bl	800706c <HAL_SPI_TransmitReceive>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	e0e2      	b.n	8007064 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_SPI_Receive+0x52>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e0db      	b.n	8007064 <HAL_SPI_Receive+0x20a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb4:	f7fb fbb8 	bl	8002628 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d002      	beq.n	8006ecc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eca:	e0c2      	b.n	8007052 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_SPI_Receive+0x7e>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006edc:	e0b9      	b.n	8007052 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	88fa      	ldrh	r2, [r7, #6]
 8006ef6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f24:	d107      	bne.n	8006f36 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	d007      	beq.n	8006f54 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d162      	bne.n	8007022 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f5c:	e02e      	b.n	8006fbc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d115      	bne.n	8006f98 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f103 020c 	add.w	r2, r3, #12
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	7812      	ldrb	r2, [r2, #0]
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f96:	e011      	b.n	8006fbc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f98:	f7fb fb46 	bl	8002628 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d803      	bhi.n	8006fb0 <HAL_SPI_Receive+0x156>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fae:	d102      	bne.n	8006fb6 <HAL_SPI_Receive+0x15c>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d102      	bne.n	8006fbc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fba:	e04a      	b.n	8007052 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1cb      	bne.n	8006f5e <HAL_SPI_Receive+0x104>
 8006fc6:	e031      	b.n	800702c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d113      	bne.n	8006ffe <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	1c9a      	adds	r2, r3, #2
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ffc:	e011      	b.n	8007022 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffe:	f7fb fb13 	bl	8002628 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d803      	bhi.n	8007016 <HAL_SPI_Receive+0x1bc>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d102      	bne.n	800701c <HAL_SPI_Receive+0x1c2>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007020:	e017      	b.n	8007052 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1cd      	bne.n	8006fc8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fa35 	bl	80074a0 <SPI_EndRxTransaction>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
 800704e:	e000      	b.n	8007052 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007050:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007062:	7dfb      	ldrb	r3, [r7, #23]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b08c      	sub	sp, #48	; 0x30
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800707a:	2301      	movs	r3, #1
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x26>
 800708e:	2302      	movs	r3, #2
 8007090:	e18a      	b.n	80073a8 <HAL_SPI_TransmitReceive+0x33c>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800709a:	f7fb fac5 	bl	8002628 <HAL_GetTick>
 800709e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070b0:	887b      	ldrh	r3, [r7, #2]
 80070b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d00f      	beq.n	80070dc <HAL_SPI_TransmitReceive+0x70>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070c2:	d107      	bne.n	80070d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <HAL_SPI_TransmitReceive+0x68>
 80070cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d003      	beq.n	80070dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070d4:	2302      	movs	r3, #2
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070da:	e15b      	b.n	8007394 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x82>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <HAL_SPI_TransmitReceive+0x82>
 80070e8:	887b      	ldrh	r3, [r7, #2]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070f4:	e14e      	b.n	8007394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d003      	beq.n	800710a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2205      	movs	r2, #5
 8007106:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	887a      	ldrh	r2, [r7, #2]
 800711a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	887a      	ldrh	r2, [r7, #2]
 8007120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	887a      	ldrh	r2, [r7, #2]
 800712c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	887a      	ldrh	r2, [r7, #2]
 8007132:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714a:	2b40      	cmp	r3, #64	; 0x40
 800714c:	d007      	beq.n	800715e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800715c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007166:	d178      	bne.n	800725a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_SPI_TransmitReceive+0x10a>
 8007170:	8b7b      	ldrh	r3, [r7, #26]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d166      	bne.n	8007244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	881a      	ldrh	r2, [r3, #0]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	1c9a      	adds	r2, r3, #2
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800719a:	e053      	b.n	8007244 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d11b      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x176>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d016      	beq.n	80071e2 <HAL_SPI_TransmitReceive+0x176>
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d113      	bne.n	80071e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	881a      	ldrh	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	1c9a      	adds	r2, r3, #2
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d119      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x1b8>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d014      	beq.n	8007224 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	b292      	uxth	r2, r2
 8007206:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	1c9a      	adds	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007220:	2301      	movs	r3, #1
 8007222:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007224:	f7fb fa00 	bl	8002628 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007230:	429a      	cmp	r2, r3
 8007232:	d807      	bhi.n	8007244 <HAL_SPI_TransmitReceive+0x1d8>
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d003      	beq.n	8007244 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007242:	e0a7      	b.n	8007394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1a6      	bne.n	800719c <HAL_SPI_TransmitReceive+0x130>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1a1      	bne.n	800719c <HAL_SPI_TransmitReceive+0x130>
 8007258:	e07c      	b.n	8007354 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_SPI_TransmitReceive+0x1fc>
 8007262:	8b7b      	ldrh	r3, [r7, #26]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d16b      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	330c      	adds	r3, #12
 8007272:	7812      	ldrb	r2, [r2, #0]
 8007274:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800728e:	e057      	b.n	8007340 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d11c      	bne.n	80072d8 <HAL_SPI_TransmitReceive+0x26c>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d017      	beq.n	80072d8 <HAL_SPI_TransmitReceive+0x26c>
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d114      	bne.n	80072d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	330c      	adds	r3, #12
 80072b8:	7812      	ldrb	r2, [r2, #0]
 80072ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d119      	bne.n	800731a <HAL_SPI_TransmitReceive+0x2ae>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d014      	beq.n	800731a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	3b01      	subs	r3, #1
 8007310:	b29a      	uxth	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007316:	2301      	movs	r3, #1
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800731a:	f7fb f985 	bl	8002628 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007326:	429a      	cmp	r2, r3
 8007328:	d803      	bhi.n	8007332 <HAL_SPI_TransmitReceive+0x2c6>
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d102      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x2cc>
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d103      	bne.n	8007340 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800733e:	e029      	b.n	8007394 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1a2      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x224>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d19d      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f907 	bl	800756c <SPI_EndRxTxTransaction>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d006      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2220      	movs	r2, #32
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007370:	e010      	b.n	8007394 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d10b      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	e000      	b.n	8007394 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80073a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3730      	adds	r7, #48	; 0x30
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073be:	b2db      	uxtb	r3, r3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	4613      	mov	r3, r2
 80073da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073dc:	e04c      	b.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e4:	d048      	beq.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80073e6:	f7fb f91f 	bl	8002628 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d902      	bls.n	80073fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d13d      	bne.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800740a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007414:	d111      	bne.n	800743a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741e:	d004      	beq.n	800742a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007428:	d107      	bne.n	800743a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007438:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007442:	d10f      	bne.n	8007464 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007462:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e00f      	b.n	8007498 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d1a3      	bne.n	80073de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074b4:	d111      	bne.n	80074da <SPI_EndRxTransaction+0x3a>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074be:	d004      	beq.n	80074ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c8:	d107      	bne.n	80074da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074e2:	d12a      	bne.n	800753a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ec:	d012      	beq.n	8007514 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	2180      	movs	r1, #128	; 0x80
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ff67 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d02d      	beq.n	8007560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	f043 0220 	orr.w	r2, r3, #32
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e026      	b.n	8007562 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	2101      	movs	r1, #1
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff ff54 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01a      	beq.n	8007560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752e:	f043 0220 	orr.w	r2, r3, #32
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e013      	b.n	8007562 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	2200      	movs	r2, #0
 8007542:	2101      	movs	r1, #1
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f7ff ff41 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e000      	b.n	8007562 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <SPI_EndRxTxTransaction+0x7c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1b      	ldr	r2, [pc, #108]	; (80075ec <SPI_EndRxTxTransaction+0x80>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	0d5b      	lsrs	r3, r3, #21
 8007584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007596:	d112      	bne.n	80075be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2200      	movs	r2, #0
 80075a0:	2180      	movs	r1, #128	; 0x80
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f7ff ff12 	bl	80073cc <SPI_WaitFlagStateUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d016      	beq.n	80075dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b2:	f043 0220 	orr.w	r2, r3, #32
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e00f      	b.n	80075de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d4:	2b80      	cmp	r3, #128	; 0x80
 80075d6:	d0f2      	beq.n	80075be <SPI_EndRxTxTransaction+0x52>
 80075d8:	e000      	b.n	80075dc <SPI_EndRxTxTransaction+0x70>
        break;
 80075da:	bf00      	nop
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3718      	adds	r7, #24
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000000 	.word	0x20000000
 80075ec:	165e9f81 	.word	0x165e9f81

080075f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e01d      	b.n	800763e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d106      	bne.n	800761c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f7f9 ff98 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3304      	adds	r3, #4
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f000 fa14 	bl	8007a5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0201 	orr.w	r2, r2, #1
 800765c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d007      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d122      	bne.n	80076ea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d11b      	bne.n	80076ea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f06f 0202 	mvn.w	r2, #2
 80076ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f9a5 	bl	8007a20 <HAL_TIM_IC_CaptureCallback>
 80076d6:	e005      	b.n	80076e4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f997 	bl	8007a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f9a8 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d122      	bne.n	800773e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b04      	cmp	r3, #4
 8007704:	d11b      	bne.n	800773e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f06f 0204 	mvn.w	r2, #4
 800770e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f97b 	bl	8007a20 <HAL_TIM_IC_CaptureCallback>
 800772a:	e005      	b.n	8007738 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f96d 	bl	8007a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f97e 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b08      	cmp	r3, #8
 800774a:	d122      	bne.n	8007792 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b08      	cmp	r3, #8
 8007758:	d11b      	bne.n	8007792 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f06f 0208 	mvn.w	r2, #8
 8007762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2204      	movs	r2, #4
 8007768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f951 	bl	8007a20 <HAL_TIM_IC_CaptureCallback>
 800777e:	e005      	b.n	800778c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f943 	bl	8007a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f954 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b10      	cmp	r3, #16
 800779e:	d122      	bne.n	80077e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d11b      	bne.n	80077e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f06f 0210 	mvn.w	r2, #16
 80077b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2208      	movs	r2, #8
 80077bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f927 	bl	8007a20 <HAL_TIM_IC_CaptureCallback>
 80077d2:	e005      	b.n	80077e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f919 	bl	8007a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f92a 	bl	8007a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d10e      	bne.n	8007812 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d107      	bne.n	8007812 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f06f 0201 	mvn.w	r2, #1
 800780a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7f9 fc81 	bl	8001114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b80      	cmp	r3, #128	; 0x80
 800781e:	d10e      	bne.n	800783e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b80      	cmp	r3, #128	; 0x80
 800782c:	d107      	bne.n	800783e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 facf 	bl	8007ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	d10e      	bne.n	800786a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d107      	bne.n	800786a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8ef 	bl	8007a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b20      	cmp	r3, #32
 8007876:	d10e      	bne.n	8007896 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b20      	cmp	r3, #32
 8007884:	d107      	bne.n	8007896 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f06f 0220 	mvn.w	r2, #32
 800788e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fa99 	bl	8007dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_ConfigClockSource+0x18>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e0a6      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x166>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d067      	beq.n	80079be <HAL_TIM_ConfigClockSource+0x120>
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d80b      	bhi.n	800790a <HAL_TIM_ConfigClockSource+0x6c>
 80078f2:	2b10      	cmp	r3, #16
 80078f4:	d073      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x140>
 80078f6:	2b10      	cmp	r3, #16
 80078f8:	d802      	bhi.n	8007900 <HAL_TIM_ConfigClockSource+0x62>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d06f      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80078fe:	e078      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007900:	2b20      	cmp	r3, #32
 8007902:	d06c      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x140>
 8007904:	2b30      	cmp	r3, #48	; 0x30
 8007906:	d06a      	beq.n	80079de <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007908:	e073      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800790a:	2b70      	cmp	r3, #112	; 0x70
 800790c:	d00d      	beq.n	800792a <HAL_TIM_ConfigClockSource+0x8c>
 800790e:	2b70      	cmp	r3, #112	; 0x70
 8007910:	d804      	bhi.n	800791c <HAL_TIM_ConfigClockSource+0x7e>
 8007912:	2b50      	cmp	r3, #80	; 0x50
 8007914:	d033      	beq.n	800797e <HAL_TIM_ConfigClockSource+0xe0>
 8007916:	2b60      	cmp	r3, #96	; 0x60
 8007918:	d041      	beq.n	800799e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800791a:	e06a      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800791c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007920:	d066      	beq.n	80079f0 <HAL_TIM_ConfigClockSource+0x152>
 8007922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007926:	d017      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007928:	e063      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6818      	ldr	r0, [r3, #0]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6899      	ldr	r1, [r3, #8]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f000 f9a9 	bl	8007c90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800794c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	609a      	str	r2, [r3, #8]
      break;
 8007956:	e04c      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6899      	ldr	r1, [r3, #8]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f000 f992 	bl	8007c90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800797a:	609a      	str	r2, [r3, #8]
      break;
 800797c:	e039      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6859      	ldr	r1, [r3, #4]
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	461a      	mov	r2, r3
 800798c:	f000 f906 	bl	8007b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2150      	movs	r1, #80	; 0x50
 8007996:	4618      	mov	r0, r3
 8007998:	f000 f95f 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 800799c:	e029      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6859      	ldr	r1, [r3, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f000 f925 	bl	8007bfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2160      	movs	r1, #96	; 0x60
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 f94f 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 80079bc:	e019      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	6859      	ldr	r1, [r3, #4]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f000 f8e6 	bl	8007b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 f93f 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 80079dc:	e009      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f000 f936 	bl	8007c5a <TIM_ITRx_SetConfig>
      break;
 80079ee:	e000      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80079f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a40      	ldr	r2, [pc, #256]	; (8007b70 <TIM_Base_SetConfig+0x114>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7a:	d00f      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a3d      	ldr	r2, [pc, #244]	; (8007b74 <TIM_Base_SetConfig+0x118>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a3c      	ldr	r2, [pc, #240]	; (8007b78 <TIM_Base_SetConfig+0x11c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3b      	ldr	r2, [pc, #236]	; (8007b7c <TIM_Base_SetConfig+0x120>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3a      	ldr	r2, [pc, #232]	; (8007b80 <TIM_Base_SetConfig+0x124>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d108      	bne.n	8007aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2f      	ldr	r2, [pc, #188]	; (8007b70 <TIM_Base_SetConfig+0x114>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d02b      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007abc:	d027      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2c      	ldr	r2, [pc, #176]	; (8007b74 <TIM_Base_SetConfig+0x118>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d023      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	; (8007b78 <TIM_Base_SetConfig+0x11c>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d01f      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <TIM_Base_SetConfig+0x120>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01b      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a29      	ldr	r2, [pc, #164]	; (8007b80 <TIM_Base_SetConfig+0x124>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d017      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a28      	ldr	r2, [pc, #160]	; (8007b84 <TIM_Base_SetConfig+0x128>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d013      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a27      	ldr	r2, [pc, #156]	; (8007b88 <TIM_Base_SetConfig+0x12c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00f      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <TIM_Base_SetConfig+0x130>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00b      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a25      	ldr	r2, [pc, #148]	; (8007b90 <TIM_Base_SetConfig+0x134>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d007      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a24      	ldr	r2, [pc, #144]	; (8007b94 <TIM_Base_SetConfig+0x138>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d003      	beq.n	8007b0e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a23      	ldr	r2, [pc, #140]	; (8007b98 <TIM_Base_SetConfig+0x13c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d108      	bne.n	8007b20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a0a      	ldr	r2, [pc, #40]	; (8007b70 <TIM_Base_SetConfig+0x114>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_Base_SetConfig+0xf8>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <TIM_Base_SetConfig+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d103      	bne.n	8007b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	615a      	str	r2, [r3, #20]
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000
 8007b74:	40000400 	.word	0x40000400
 8007b78:	40000800 	.word	0x40000800
 8007b7c:	40000c00 	.word	0x40000c00
 8007b80:	40010400 	.word	0x40010400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400
 8007b8c:	40014800 	.word	0x40014800
 8007b90:	40001800 	.word	0x40001800
 8007b94:	40001c00 	.word	0x40001c00
 8007b98:	40002000 	.word	0x40002000

08007b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f023 0201 	bic.w	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f023 030a 	bic.w	r3, r3, #10
 8007bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b087      	sub	sp, #28
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f023 0210 	bic.w	r2, r3, #16
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	031b      	lsls	r3, r3, #12
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	621a      	str	r2, [r3, #32]
}
 8007c4e:	bf00      	nop
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f043 0307 	orr.w	r3, r3, #7
 8007c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	609a      	str	r2, [r3, #8]
}
 8007c84:	bf00      	nop
 8007c86:	3714      	adds	r7, #20
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
 8007c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	021a      	lsls	r2, r3, #8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e05a      	b.n	8007d9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a21      	ldr	r2, [pc, #132]	; (8007dac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d34:	d01d      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1d      	ldr	r2, [pc, #116]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a1b      	ldr	r2, [pc, #108]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a18      	ldr	r2, [pc, #96]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a17      	ldr	r2, [pc, #92]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d10c      	bne.n	8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40010400 	.word	0x40010400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40001800 	.word	0x40001800

08007dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e03f      	b.n	8007e82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7f9 fbe4 	bl	80015e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2224      	movs	r2, #36	; 0x24
 8007e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f829 	bl	8007e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695a      	ldr	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007ece:	f023 030c 	bic.w	r3, r3, #12
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6812      	ldr	r2, [r2, #0]
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007efa:	f040 818b 	bne.w	8008214 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4ac1      	ldr	r2, [pc, #772]	; (8008208 <UART_SetConfig+0x37c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d005      	beq.n	8007f14 <UART_SetConfig+0x88>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4abf      	ldr	r2, [pc, #764]	; (800820c <UART_SetConfig+0x380>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	f040 80bd 	bne.w	800808e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f14:	f7fe fb5e 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
 8007f18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	461d      	mov	r5, r3
 8007f1e:	f04f 0600 	mov.w	r6, #0
 8007f22:	46a8      	mov	r8, r5
 8007f24:	46b1      	mov	r9, r6
 8007f26:	eb18 0308 	adds.w	r3, r8, r8
 8007f2a:	eb49 0409 	adc.w	r4, r9, r9
 8007f2e:	4698      	mov	r8, r3
 8007f30:	46a1      	mov	r9, r4
 8007f32:	eb18 0805 	adds.w	r8, r8, r5
 8007f36:	eb49 0906 	adc.w	r9, r9, r6
 8007f3a:	f04f 0100 	mov.w	r1, #0
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f4e:	4688      	mov	r8, r1
 8007f50:	4691      	mov	r9, r2
 8007f52:	eb18 0005 	adds.w	r0, r8, r5
 8007f56:	eb49 0106 	adc.w	r1, r9, r6
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	461d      	mov	r5, r3
 8007f60:	f04f 0600 	mov.w	r6, #0
 8007f64:	196b      	adds	r3, r5, r5
 8007f66:	eb46 0406 	adc.w	r4, r6, r6
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4623      	mov	r3, r4
 8007f6e:	f7f8 f93f 	bl	80001f0 <__aeabi_uldivmod>
 8007f72:	4603      	mov	r3, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	461a      	mov	r2, r3
 8007f78:	4ba5      	ldr	r3, [pc, #660]	; (8008210 <UART_SetConfig+0x384>)
 8007f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	461d      	mov	r5, r3
 8007f88:	f04f 0600 	mov.w	r6, #0
 8007f8c:	46a9      	mov	r9, r5
 8007f8e:	46b2      	mov	sl, r6
 8007f90:	eb19 0309 	adds.w	r3, r9, r9
 8007f94:	eb4a 040a 	adc.w	r4, sl, sl
 8007f98:	4699      	mov	r9, r3
 8007f9a:	46a2      	mov	sl, r4
 8007f9c:	eb19 0905 	adds.w	r9, r9, r5
 8007fa0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007fa4:	f04f 0100 	mov.w	r1, #0
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fb8:	4689      	mov	r9, r1
 8007fba:	4692      	mov	sl, r2
 8007fbc:	eb19 0005 	adds.w	r0, r9, r5
 8007fc0:	eb4a 0106 	adc.w	r1, sl, r6
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	461d      	mov	r5, r3
 8007fca:	f04f 0600 	mov.w	r6, #0
 8007fce:	196b      	adds	r3, r5, r5
 8007fd0:	eb46 0406 	adc.w	r4, r6, r6
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	f7f8 f90a 	bl	80001f0 <__aeabi_uldivmod>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b8b      	ldr	r3, [pc, #556]	; (8008210 <UART_SetConfig+0x384>)
 8007fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe8:	095b      	lsrs	r3, r3, #5
 8007fea:	2164      	movs	r1, #100	; 0x64
 8007fec:	fb01 f303 	mul.w	r3, r1, r3
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	3332      	adds	r3, #50	; 0x32
 8007ff6:	4a86      	ldr	r2, [pc, #536]	; (8008210 <UART_SetConfig+0x384>)
 8007ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffc:	095b      	lsrs	r3, r3, #5
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008004:	4498      	add	r8, r3
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	461d      	mov	r5, r3
 800800a:	f04f 0600 	mov.w	r6, #0
 800800e:	46a9      	mov	r9, r5
 8008010:	46b2      	mov	sl, r6
 8008012:	eb19 0309 	adds.w	r3, r9, r9
 8008016:	eb4a 040a 	adc.w	r4, sl, sl
 800801a:	4699      	mov	r9, r3
 800801c:	46a2      	mov	sl, r4
 800801e:	eb19 0905 	adds.w	r9, r9, r5
 8008022:	eb4a 0a06 	adc.w	sl, sl, r6
 8008026:	f04f 0100 	mov.w	r1, #0
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008032:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008036:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800803a:	4689      	mov	r9, r1
 800803c:	4692      	mov	sl, r2
 800803e:	eb19 0005 	adds.w	r0, r9, r5
 8008042:	eb4a 0106 	adc.w	r1, sl, r6
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	461d      	mov	r5, r3
 800804c:	f04f 0600 	mov.w	r6, #0
 8008050:	196b      	adds	r3, r5, r5
 8008052:	eb46 0406 	adc.w	r4, r6, r6
 8008056:	461a      	mov	r2, r3
 8008058:	4623      	mov	r3, r4
 800805a:	f7f8 f8c9 	bl	80001f0 <__aeabi_uldivmod>
 800805e:	4603      	mov	r3, r0
 8008060:	460c      	mov	r4, r1
 8008062:	461a      	mov	r2, r3
 8008064:	4b6a      	ldr	r3, [pc, #424]	; (8008210 <UART_SetConfig+0x384>)
 8008066:	fba3 1302 	umull	r1, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	2164      	movs	r1, #100	; 0x64
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	3332      	adds	r3, #50	; 0x32
 8008078:	4a65      	ldr	r2, [pc, #404]	; (8008210 <UART_SetConfig+0x384>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	f003 0207 	and.w	r2, r3, #7
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4442      	add	r2, r8
 800808a:	609a      	str	r2, [r3, #8]
 800808c:	e26f      	b.n	800856e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fe fa8d 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 8008092:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	461d      	mov	r5, r3
 8008098:	f04f 0600 	mov.w	r6, #0
 800809c:	46a8      	mov	r8, r5
 800809e:	46b1      	mov	r9, r6
 80080a0:	eb18 0308 	adds.w	r3, r8, r8
 80080a4:	eb49 0409 	adc.w	r4, r9, r9
 80080a8:	4698      	mov	r8, r3
 80080aa:	46a1      	mov	r9, r4
 80080ac:	eb18 0805 	adds.w	r8, r8, r5
 80080b0:	eb49 0906 	adc.w	r9, r9, r6
 80080b4:	f04f 0100 	mov.w	r1, #0
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80080c8:	4688      	mov	r8, r1
 80080ca:	4691      	mov	r9, r2
 80080cc:	eb18 0005 	adds.w	r0, r8, r5
 80080d0:	eb49 0106 	adc.w	r1, r9, r6
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	461d      	mov	r5, r3
 80080da:	f04f 0600 	mov.w	r6, #0
 80080de:	196b      	adds	r3, r5, r5
 80080e0:	eb46 0406 	adc.w	r4, r6, r6
 80080e4:	461a      	mov	r2, r3
 80080e6:	4623      	mov	r3, r4
 80080e8:	f7f8 f882 	bl	80001f0 <__aeabi_uldivmod>
 80080ec:	4603      	mov	r3, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	461a      	mov	r2, r3
 80080f2:	4b47      	ldr	r3, [pc, #284]	; (8008210 <UART_SetConfig+0x384>)
 80080f4:	fba3 2302 	umull	r2, r3, r3, r2
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	461d      	mov	r5, r3
 8008102:	f04f 0600 	mov.w	r6, #0
 8008106:	46a9      	mov	r9, r5
 8008108:	46b2      	mov	sl, r6
 800810a:	eb19 0309 	adds.w	r3, r9, r9
 800810e:	eb4a 040a 	adc.w	r4, sl, sl
 8008112:	4699      	mov	r9, r3
 8008114:	46a2      	mov	sl, r4
 8008116:	eb19 0905 	adds.w	r9, r9, r5
 800811a:	eb4a 0a06 	adc.w	sl, sl, r6
 800811e:	f04f 0100 	mov.w	r1, #0
 8008122:	f04f 0200 	mov.w	r2, #0
 8008126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800812a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800812e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008132:	4689      	mov	r9, r1
 8008134:	4692      	mov	sl, r2
 8008136:	eb19 0005 	adds.w	r0, r9, r5
 800813a:	eb4a 0106 	adc.w	r1, sl, r6
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	461d      	mov	r5, r3
 8008144:	f04f 0600 	mov.w	r6, #0
 8008148:	196b      	adds	r3, r5, r5
 800814a:	eb46 0406 	adc.w	r4, r6, r6
 800814e:	461a      	mov	r2, r3
 8008150:	4623      	mov	r3, r4
 8008152:	f7f8 f84d 	bl	80001f0 <__aeabi_uldivmod>
 8008156:	4603      	mov	r3, r0
 8008158:	460c      	mov	r4, r1
 800815a:	461a      	mov	r2, r3
 800815c:	4b2c      	ldr	r3, [pc, #176]	; (8008210 <UART_SetConfig+0x384>)
 800815e:	fba3 1302 	umull	r1, r3, r3, r2
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	2164      	movs	r1, #100	; 0x64
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	3332      	adds	r3, #50	; 0x32
 8008170:	4a27      	ldr	r2, [pc, #156]	; (8008210 <UART_SetConfig+0x384>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800817e:	4498      	add	r8, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	461d      	mov	r5, r3
 8008184:	f04f 0600 	mov.w	r6, #0
 8008188:	46a9      	mov	r9, r5
 800818a:	46b2      	mov	sl, r6
 800818c:	eb19 0309 	adds.w	r3, r9, r9
 8008190:	eb4a 040a 	adc.w	r4, sl, sl
 8008194:	4699      	mov	r9, r3
 8008196:	46a2      	mov	sl, r4
 8008198:	eb19 0905 	adds.w	r9, r9, r5
 800819c:	eb4a 0a06 	adc.w	sl, sl, r6
 80081a0:	f04f 0100 	mov.w	r1, #0
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081b4:	4689      	mov	r9, r1
 80081b6:	4692      	mov	sl, r2
 80081b8:	eb19 0005 	adds.w	r0, r9, r5
 80081bc:	eb4a 0106 	adc.w	r1, sl, r6
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	461d      	mov	r5, r3
 80081c6:	f04f 0600 	mov.w	r6, #0
 80081ca:	196b      	adds	r3, r5, r5
 80081cc:	eb46 0406 	adc.w	r4, r6, r6
 80081d0:	461a      	mov	r2, r3
 80081d2:	4623      	mov	r3, r4
 80081d4:	f7f8 f80c 	bl	80001f0 <__aeabi_uldivmod>
 80081d8:	4603      	mov	r3, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	461a      	mov	r2, r3
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <UART_SetConfig+0x384>)
 80081e0:	fba3 1302 	umull	r1, r3, r3, r2
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	2164      	movs	r1, #100	; 0x64
 80081e8:	fb01 f303 	mul.w	r3, r1, r3
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	3332      	adds	r3, #50	; 0x32
 80081f2:	4a07      	ldr	r2, [pc, #28]	; (8008210 <UART_SetConfig+0x384>)
 80081f4:	fba2 2303 	umull	r2, r3, r2, r3
 80081f8:	095b      	lsrs	r3, r3, #5
 80081fa:	f003 0207 	and.w	r2, r3, #7
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4442      	add	r2, r8
 8008204:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008206:	e1b2      	b.n	800856e <UART_SetConfig+0x6e2>
 8008208:	40011000 	.word	0x40011000
 800820c:	40011400 	.word	0x40011400
 8008210:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4ad7      	ldr	r2, [pc, #860]	; (8008578 <UART_SetConfig+0x6ec>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d005      	beq.n	800822a <UART_SetConfig+0x39e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4ad6      	ldr	r2, [pc, #856]	; (800857c <UART_SetConfig+0x6f0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	f040 80d1 	bne.w	80083cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800822a:	f7fe f9d3 	bl	80065d4 <HAL_RCC_GetPCLK2Freq>
 800822e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	469a      	mov	sl, r3
 8008234:	f04f 0b00 	mov.w	fp, #0
 8008238:	46d0      	mov	r8, sl
 800823a:	46d9      	mov	r9, fp
 800823c:	eb18 0308 	adds.w	r3, r8, r8
 8008240:	eb49 0409 	adc.w	r4, r9, r9
 8008244:	4698      	mov	r8, r3
 8008246:	46a1      	mov	r9, r4
 8008248:	eb18 080a 	adds.w	r8, r8, sl
 800824c:	eb49 090b 	adc.w	r9, r9, fp
 8008250:	f04f 0100 	mov.w	r1, #0
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800825c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008260:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008264:	4688      	mov	r8, r1
 8008266:	4691      	mov	r9, r2
 8008268:	eb1a 0508 	adds.w	r5, sl, r8
 800826c:	eb4b 0609 	adc.w	r6, fp, r9
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4619      	mov	r1, r3
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	f04f 0400 	mov.w	r4, #0
 8008282:	0094      	lsls	r4, r2, #2
 8008284:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008288:	008b      	lsls	r3, r1, #2
 800828a:	461a      	mov	r2, r3
 800828c:	4623      	mov	r3, r4
 800828e:	4628      	mov	r0, r5
 8008290:	4631      	mov	r1, r6
 8008292:	f7f7 ffad 	bl	80001f0 <__aeabi_uldivmod>
 8008296:	4603      	mov	r3, r0
 8008298:	460c      	mov	r4, r1
 800829a:	461a      	mov	r2, r3
 800829c:	4bb8      	ldr	r3, [pc, #736]	; (8008580 <UART_SetConfig+0x6f4>)
 800829e:	fba3 2302 	umull	r2, r3, r3, r2
 80082a2:	095b      	lsrs	r3, r3, #5
 80082a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	469b      	mov	fp, r3
 80082ac:	f04f 0c00 	mov.w	ip, #0
 80082b0:	46d9      	mov	r9, fp
 80082b2:	46e2      	mov	sl, ip
 80082b4:	eb19 0309 	adds.w	r3, r9, r9
 80082b8:	eb4a 040a 	adc.w	r4, sl, sl
 80082bc:	4699      	mov	r9, r3
 80082be:	46a2      	mov	sl, r4
 80082c0:	eb19 090b 	adds.w	r9, r9, fp
 80082c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082c8:	f04f 0100 	mov.w	r1, #0
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082dc:	4689      	mov	r9, r1
 80082de:	4692      	mov	sl, r2
 80082e0:	eb1b 0509 	adds.w	r5, fp, r9
 80082e4:	eb4c 060a 	adc.w	r6, ip, sl
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4619      	mov	r1, r3
 80082ee:	f04f 0200 	mov.w	r2, #0
 80082f2:	f04f 0300 	mov.w	r3, #0
 80082f6:	f04f 0400 	mov.w	r4, #0
 80082fa:	0094      	lsls	r4, r2, #2
 80082fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008300:	008b      	lsls	r3, r1, #2
 8008302:	461a      	mov	r2, r3
 8008304:	4623      	mov	r3, r4
 8008306:	4628      	mov	r0, r5
 8008308:	4631      	mov	r1, r6
 800830a:	f7f7 ff71 	bl	80001f0 <__aeabi_uldivmod>
 800830e:	4603      	mov	r3, r0
 8008310:	460c      	mov	r4, r1
 8008312:	461a      	mov	r2, r3
 8008314:	4b9a      	ldr	r3, [pc, #616]	; (8008580 <UART_SetConfig+0x6f4>)
 8008316:	fba3 1302 	umull	r1, r3, r3, r2
 800831a:	095b      	lsrs	r3, r3, #5
 800831c:	2164      	movs	r1, #100	; 0x64
 800831e:	fb01 f303 	mul.w	r3, r1, r3
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	3332      	adds	r3, #50	; 0x32
 8008328:	4a95      	ldr	r2, [pc, #596]	; (8008580 <UART_SetConfig+0x6f4>)
 800832a:	fba2 2303 	umull	r2, r3, r2, r3
 800832e:	095b      	lsrs	r3, r3, #5
 8008330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008334:	4498      	add	r8, r3
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	469b      	mov	fp, r3
 800833a:	f04f 0c00 	mov.w	ip, #0
 800833e:	46d9      	mov	r9, fp
 8008340:	46e2      	mov	sl, ip
 8008342:	eb19 0309 	adds.w	r3, r9, r9
 8008346:	eb4a 040a 	adc.w	r4, sl, sl
 800834a:	4699      	mov	r9, r3
 800834c:	46a2      	mov	sl, r4
 800834e:	eb19 090b 	adds.w	r9, r9, fp
 8008352:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008356:	f04f 0100 	mov.w	r1, #0
 800835a:	f04f 0200 	mov.w	r2, #0
 800835e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008362:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008366:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800836a:	4689      	mov	r9, r1
 800836c:	4692      	mov	sl, r2
 800836e:	eb1b 0509 	adds.w	r5, fp, r9
 8008372:	eb4c 060a 	adc.w	r6, ip, sl
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	4619      	mov	r1, r3
 800837c:	f04f 0200 	mov.w	r2, #0
 8008380:	f04f 0300 	mov.w	r3, #0
 8008384:	f04f 0400 	mov.w	r4, #0
 8008388:	0094      	lsls	r4, r2, #2
 800838a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800838e:	008b      	lsls	r3, r1, #2
 8008390:	461a      	mov	r2, r3
 8008392:	4623      	mov	r3, r4
 8008394:	4628      	mov	r0, r5
 8008396:	4631      	mov	r1, r6
 8008398:	f7f7 ff2a 	bl	80001f0 <__aeabi_uldivmod>
 800839c:	4603      	mov	r3, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	461a      	mov	r2, r3
 80083a2:	4b77      	ldr	r3, [pc, #476]	; (8008580 <UART_SetConfig+0x6f4>)
 80083a4:	fba3 1302 	umull	r1, r3, r3, r2
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	2164      	movs	r1, #100	; 0x64
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	3332      	adds	r3, #50	; 0x32
 80083b6:	4a72      	ldr	r2, [pc, #456]	; (8008580 <UART_SetConfig+0x6f4>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	f003 020f 	and.w	r2, r3, #15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4442      	add	r2, r8
 80083c8:	609a      	str	r2, [r3, #8]
 80083ca:	e0d0      	b.n	800856e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80083cc:	f7fe f8ee 	bl	80065ac <HAL_RCC_GetPCLK1Freq>
 80083d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	469a      	mov	sl, r3
 80083d6:	f04f 0b00 	mov.w	fp, #0
 80083da:	46d0      	mov	r8, sl
 80083dc:	46d9      	mov	r9, fp
 80083de:	eb18 0308 	adds.w	r3, r8, r8
 80083e2:	eb49 0409 	adc.w	r4, r9, r9
 80083e6:	4698      	mov	r8, r3
 80083e8:	46a1      	mov	r9, r4
 80083ea:	eb18 080a 	adds.w	r8, r8, sl
 80083ee:	eb49 090b 	adc.w	r9, r9, fp
 80083f2:	f04f 0100 	mov.w	r1, #0
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008402:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008406:	4688      	mov	r8, r1
 8008408:	4691      	mov	r9, r2
 800840a:	eb1a 0508 	adds.w	r5, sl, r8
 800840e:	eb4b 0609 	adc.w	r6, fp, r9
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4619      	mov	r1, r3
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	f04f 0300 	mov.w	r3, #0
 8008420:	f04f 0400 	mov.w	r4, #0
 8008424:	0094      	lsls	r4, r2, #2
 8008426:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800842a:	008b      	lsls	r3, r1, #2
 800842c:	461a      	mov	r2, r3
 800842e:	4623      	mov	r3, r4
 8008430:	4628      	mov	r0, r5
 8008432:	4631      	mov	r1, r6
 8008434:	f7f7 fedc 	bl	80001f0 <__aeabi_uldivmod>
 8008438:	4603      	mov	r3, r0
 800843a:	460c      	mov	r4, r1
 800843c:	461a      	mov	r2, r3
 800843e:	4b50      	ldr	r3, [pc, #320]	; (8008580 <UART_SetConfig+0x6f4>)
 8008440:	fba3 2302 	umull	r2, r3, r3, r2
 8008444:	095b      	lsrs	r3, r3, #5
 8008446:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	469b      	mov	fp, r3
 800844e:	f04f 0c00 	mov.w	ip, #0
 8008452:	46d9      	mov	r9, fp
 8008454:	46e2      	mov	sl, ip
 8008456:	eb19 0309 	adds.w	r3, r9, r9
 800845a:	eb4a 040a 	adc.w	r4, sl, sl
 800845e:	4699      	mov	r9, r3
 8008460:	46a2      	mov	sl, r4
 8008462:	eb19 090b 	adds.w	r9, r9, fp
 8008466:	eb4a 0a0c 	adc.w	sl, sl, ip
 800846a:	f04f 0100 	mov.w	r1, #0
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800847a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800847e:	4689      	mov	r9, r1
 8008480:	4692      	mov	sl, r2
 8008482:	eb1b 0509 	adds.w	r5, fp, r9
 8008486:	eb4c 060a 	adc.w	r6, ip, sl
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4619      	mov	r1, r3
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	f04f 0400 	mov.w	r4, #0
 800849c:	0094      	lsls	r4, r2, #2
 800849e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80084a2:	008b      	lsls	r3, r1, #2
 80084a4:	461a      	mov	r2, r3
 80084a6:	4623      	mov	r3, r4
 80084a8:	4628      	mov	r0, r5
 80084aa:	4631      	mov	r1, r6
 80084ac:	f7f7 fea0 	bl	80001f0 <__aeabi_uldivmod>
 80084b0:	4603      	mov	r3, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b32      	ldr	r3, [pc, #200]	; (8008580 <UART_SetConfig+0x6f4>)
 80084b8:	fba3 1302 	umull	r1, r3, r3, r2
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	2164      	movs	r1, #100	; 0x64
 80084c0:	fb01 f303 	mul.w	r3, r1, r3
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	3332      	adds	r3, #50	; 0x32
 80084ca:	4a2d      	ldr	r2, [pc, #180]	; (8008580 <UART_SetConfig+0x6f4>)
 80084cc:	fba2 2303 	umull	r2, r3, r2, r3
 80084d0:	095b      	lsrs	r3, r3, #5
 80084d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d6:	4498      	add	r8, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	469b      	mov	fp, r3
 80084dc:	f04f 0c00 	mov.w	ip, #0
 80084e0:	46d9      	mov	r9, fp
 80084e2:	46e2      	mov	sl, ip
 80084e4:	eb19 0309 	adds.w	r3, r9, r9
 80084e8:	eb4a 040a 	adc.w	r4, sl, sl
 80084ec:	4699      	mov	r9, r3
 80084ee:	46a2      	mov	sl, r4
 80084f0:	eb19 090b 	adds.w	r9, r9, fp
 80084f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084f8:	f04f 0100 	mov.w	r1, #0
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800850c:	4689      	mov	r9, r1
 800850e:	4692      	mov	sl, r2
 8008510:	eb1b 0509 	adds.w	r5, fp, r9
 8008514:	eb4c 060a 	adc.w	r6, ip, sl
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4619      	mov	r1, r3
 800851e:	f04f 0200 	mov.w	r2, #0
 8008522:	f04f 0300 	mov.w	r3, #0
 8008526:	f04f 0400 	mov.w	r4, #0
 800852a:	0094      	lsls	r4, r2, #2
 800852c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008530:	008b      	lsls	r3, r1, #2
 8008532:	461a      	mov	r2, r3
 8008534:	4623      	mov	r3, r4
 8008536:	4628      	mov	r0, r5
 8008538:	4631      	mov	r1, r6
 800853a:	f7f7 fe59 	bl	80001f0 <__aeabi_uldivmod>
 800853e:	4603      	mov	r3, r0
 8008540:	460c      	mov	r4, r1
 8008542:	461a      	mov	r2, r3
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <UART_SetConfig+0x6f4>)
 8008546:	fba3 1302 	umull	r1, r3, r3, r2
 800854a:	095b      	lsrs	r3, r3, #5
 800854c:	2164      	movs	r1, #100	; 0x64
 800854e:	fb01 f303 	mul.w	r3, r1, r3
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	011b      	lsls	r3, r3, #4
 8008556:	3332      	adds	r3, #50	; 0x32
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <UART_SetConfig+0x6f4>)
 800855a:	fba2 2303 	umull	r2, r3, r2, r3
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	f003 020f 	and.w	r2, r3, #15
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4442      	add	r2, r8
 800856a:	609a      	str	r2, [r3, #8]
}
 800856c:	e7ff      	b.n	800856e <UART_SetConfig+0x6e2>
 800856e:	bf00      	nop
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	40011000 	.word	0x40011000
 800857c:	40011400 	.word	0x40011400
 8008580:	51eb851f 	.word	0x51eb851f

08008584 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800858e:	2300      	movs	r3, #0
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d029      	beq.n	80085f2 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80085aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085ae:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085b8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80085be:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80085c4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80085ca:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80085d0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80085d6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80085dc:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80085e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	e034      	b.n	800865c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085fe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008608:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800860e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008622:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008626:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008630:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008636:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800863c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008642:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008648:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4313      	orrs	r3, r2
 800864e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr

0800866a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800866a:	b480      	push	{r7}
 800866c:	b087      	sub	sp, #28
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d02e      	beq.n	80086e2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008690:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	3b01      	subs	r3, #1
 800869e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80086a0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80086aa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80086b4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80086be:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80086c8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80086d2:	4313      	orrs	r3, r2
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	609a      	str	r2, [r3, #8]
 80086e0:	e03b      	b.n	800875a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086f2:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	3b01      	subs	r3, #1
 8008702:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008704:	4313      	orrs	r3, r2
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008718:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	3b01      	subs	r3, #1
 8008726:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008728:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	3b01      	subs	r3, #1
 8008730:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008732:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	3b01      	subs	r3, #1
 800873a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800873c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	3b01      	subs	r3, #1
 8008744:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008746:	4313      	orrs	r3, r2
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	4313      	orrs	r3, r2
 800874c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008784:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	3b01      	subs	r3, #1
 800878c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800878e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008796:	4313      	orrs	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80087a0:	f7f9 ff42 	bl	8002628 <HAL_GetTick>
 80087a4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80087a6:	e010      	b.n	80087ca <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d00c      	beq.n	80087ca <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <FMC_SDRAM_SendCommand+0x5e>
 80087b6:	f7f9 ff37 	bl	8002628 <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d201      	bcs.n	80087ca <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e006      	b.n	80087d8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d0e8      	beq.n	80087a8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	695a      	ldr	r2, [r3, #20]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008806:	b084      	sub	sp, #16
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	f107 001c 	add.w	r0, r7, #28
 8008814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	2b01      	cmp	r3, #1
 800881c:	d122      	bne.n	8008864 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008848:	2b01      	cmp	r3, #1
 800884a:	d105      	bne.n	8008858 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f949 	bl	8008af0 <USB_CoreReset>
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]
 8008862:	e01a      	b.n	800889a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f93d 	bl	8008af0 <USB_CoreReset>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800887a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008884:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	639a      	str	r2, [r3, #56]	; 0x38
 800888c:	e005      	b.n	800889a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	2b01      	cmp	r3, #1
 800889e:	d10b      	bne.n	80088b8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f043 0206 	orr.w	r2, r3, #6
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f043 0220 	orr.w	r2, r3, #32
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088c4:	b004      	add	sp, #16
 80088c6:	4770      	bx	lr

080088c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f043 0201 	orr.w	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f023 0201 	bic.w	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d106      	bne.n	8008938 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60da      	str	r2, [r3, #12]
 8008936:	e00b      	b.n	8008950 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	e001      	b.n	8008950 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e003      	b.n	8008958 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008950:	2032      	movs	r0, #50	; 0x32
 8008952:	f7f9 fe75 	bl	8002640 <HAL_Delay>

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	019b      	lsls	r3, r3, #6
 8008972:	f043 0220 	orr.w	r2, r3, #32
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3301      	adds	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4a09      	ldr	r2, [pc, #36]	; (80089a8 <USB_FlushTxFifo+0x48>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d901      	bls.n	800898c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e006      	b.n	800899a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f003 0320 	and.w	r3, r3, #32
 8008994:	2b20      	cmp	r3, #32
 8008996:	d0f0      	beq.n	800897a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	00030d40 	.word	0x00030d40

080089ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2210      	movs	r2, #16
 80089bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <USB_FlushRxFifo+0x40>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e006      	b.n	80089de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f003 0310 	and.w	r3, r3, #16
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d0f0      	beq.n	80089be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	00030d40 	.word	0x00030d40

080089f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b089      	sub	sp, #36	; 0x24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4611      	mov	r1, r2
 80089fc:	461a      	mov	r2, r3
 80089fe:	460b      	mov	r3, r1
 8008a00:	71fb      	strb	r3, [r7, #7]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d11a      	bne.n	8008a4c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008a16:	88bb      	ldrh	r3, [r7, #4]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	089b      	lsrs	r3, r3, #2
 8008a1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61bb      	str	r3, [r7, #24]
 8008a22:	e00f      	b.n	8008a44 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	031a      	lsls	r2, r3, #12
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a30:	461a      	mov	r2, r3
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	3301      	adds	r3, #1
 8008a42:	61bb      	str	r3, [r7, #24]
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d3eb      	bcc.n	8008a24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3724      	adds	r7, #36	; 0x24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b089      	sub	sp, #36	; 0x24
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	4613      	mov	r3, r2
 8008a66:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008a70:	88fb      	ldrh	r3, [r7, #6]
 8008a72:	3303      	adds	r3, #3
 8008a74:	089b      	lsrs	r3, r3, #2
 8008a76:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	61bb      	str	r3, [r7, #24]
 8008a7c:	e00b      	b.n	8008a96 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	3301      	adds	r3, #1
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d3ef      	bcc.n	8008a7e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008a9e:	69fb      	ldr	r3, [r7, #28]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3724      	adds	r7, #36	; 0x24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	f003 0301 	and.w	r3, r3, #1
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	3301      	adds	r3, #1
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4a13      	ldr	r2, [pc, #76]	; (8008b54 <USB_CoreReset+0x64>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d901      	bls.n	8008b0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e01b      	b.n	8008b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	daf2      	bge.n	8008afc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f043 0201 	orr.w	r2, r3, #1
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4a09      	ldr	r2, [pc, #36]	; (8008b54 <USB_CoreReset+0x64>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d901      	bls.n	8008b38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e006      	b.n	8008b46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d0f0      	beq.n	8008b26 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	00030d40 	.word	0x00030d40

08008b58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b58:	b084      	sub	sp, #16
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b084      	sub	sp, #16
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	f107 001c 	add.w	r0, r7, #28
 8008b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b74:	461a      	mov	r2, r3
 8008b76:	2300      	movs	r3, #0
 8008b78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d018      	beq.n	8008bdc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10a      	bne.n	8008bc6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bbe:	f043 0304 	orr.w	r3, r3, #4
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	e014      	b.n	8008bf0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bd4:	f023 0304 	bic.w	r3, r3, #4
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e009      	b.n	8008bf0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bea:	f023 0304 	bic.w	r3, r3, #4
 8008bee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008bf0:	2110      	movs	r1, #16
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff feb4 	bl	8008960 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff fed7 	bl	80089ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
 8008c02:	e015      	b.n	8008c30 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c10:	461a      	mov	r2, r3
 8008c12:	f04f 33ff 	mov.w	r3, #4294967295
 8008c16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c24:	461a      	mov	r2, r3
 8008c26:	2300      	movs	r3, #0
 8008c28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d3e5      	bcc.n	8008c04 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008c38:	2101      	movs	r1, #1
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f8ac 	bl	8008d98 <USB_DriveVbus>

  HAL_Delay(200U);
 8008c40:	20c8      	movs	r0, #200	; 0xc8
 8008c42:	f7f9 fcfd 	bl	8002640 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c52:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00b      	beq.n	8008c78 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c66:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a14      	ldr	r2, [pc, #80]	; (8008cbc <USB_HostInit+0x164>)
 8008c6c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a13      	ldr	r2, [pc, #76]	; (8008cc0 <USB_HostInit+0x168>)
 8008c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008c76:	e009      	b.n	8008c8c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2280      	movs	r2, #128	; 0x80
 8008c7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a10      	ldr	r2, [pc, #64]	; (8008cc4 <USB_HostInit+0x16c>)
 8008c82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a10      	ldr	r2, [pc, #64]	; (8008cc8 <USB_HostInit+0x170>)
 8008c88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d105      	bne.n	8008c9e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f043 0210 	orr.w	r2, r3, #16
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699a      	ldr	r2, [r3, #24]
 8008ca2:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <USB_HostInit+0x174>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cb6:	b004      	add	sp, #16
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	01000200 	.word	0x01000200
 8008cc0:	00e00300 	.word	0x00e00300
 8008cc4:	00600080 	.word	0x00600080
 8008cc8:	004000e0 	.word	0x004000e0
 8008ccc:	a3200008 	.word	0xa3200008

08008cd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008cee:	f023 0303 	bic.w	r3, r3, #3
 8008cf2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d107      	bne.n	8008d22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008d1e:	6053      	str	r3, [r2, #4]
 8008d20:	e009      	b.n	8008d36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d106      	bne.n	8008d36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d2e:	461a      	mov	r2, r3
 8008d30:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d74:	2064      	movs	r0, #100	; 0x64
 8008d76:	f7f9 fc63 	bl	8002640 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d88:	200a      	movs	r0, #10
 8008d8a:	f7f9 fc59 	bl	8002640 <HAL_Delay>

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3710      	adds	r7, #16
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008dbc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d109      	bne.n	8008ddc <USB_DriveVbus+0x44>
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d106      	bne.n	8008ddc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008dda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de6:	d109      	bne.n	8008dfc <USB_DriveVbus+0x64>
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dfa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b085      	sub	sp, #20
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	0c5b      	lsrs	r3, r3, #17
 8008e28:	f003 0303 	and.w	r3, r3, #3
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	b29b      	uxth	r3, r3
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
	...

08008e5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	70fb      	strb	r3, [r7, #3]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	70bb      	strb	r3, [r7, #2]
 8008e72:	4613      	mov	r3, r2
 8008e74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d87e      	bhi.n	8008f98 <USB_HC_Init+0x13c>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <USB_HC_Init+0x44>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008eb1 	.word	0x08008eb1
 8008ea4:	08008f5b 	.word	0x08008f5b
 8008ea8:	08008eb1 	.word	0x08008eb1
 8008eac:	08008f1d 	.word	0x08008f1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	f240 439d 	movw	r3, #1181	; 0x49d
 8008ec2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008ec4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	da10      	bge.n	8008eee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ecc:	78fb      	ldrb	r3, [r7, #3]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	78fa      	ldrb	r2, [r7, #3]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eea:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008eec:	e057      	b.n	8008f9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d051      	beq.n	8008f9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	0151      	lsls	r1, r2, #5
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	440a      	add	r2, r1
 8008f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f18:	60d3      	str	r3, [r2, #12]
      break;
 8008f1a:	e040      	b.n	8008f9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8008f2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	da34      	bge.n	8008fa2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	78fa      	ldrb	r2, [r7, #3]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f58:	e023      	b.n	8008fa2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f5a:	78fb      	ldrb	r3, [r7, #3]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f66:	461a      	mov	r2, r3
 8008f68:	f240 2325 	movw	r3, #549	; 0x225
 8008f6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	da17      	bge.n	8008fa6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008f94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f96:	e006      	b.n	8008fa6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f9c:	e004      	b.n	8008fa8 <USB_HC_Init+0x14c>
      break;
 8008f9e:	bf00      	nop
 8008fa0:	e002      	b.n	8008fa8 <USB_HC_Init+0x14c>
      break;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <USB_HC_Init+0x14c>
      break;
 8008fa6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008fd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da03      	bge.n	8008fe2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fde:	613b      	str	r3, [r7, #16]
 8008fe0:	e001      	b.n	8008fe6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008fe6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d103      	bne.n	8008ff6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	e001      	b.n	8008ffa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ffa:	787b      	ldrb	r3, [r7, #1]
 8008ffc:	059b      	lsls	r3, r3, #22
 8008ffe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009002:	78bb      	ldrb	r3, [r7, #2]
 8009004:	02db      	lsls	r3, r3, #11
 8009006:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800900a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800900c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009010:	049b      	lsls	r3, r3, #18
 8009012:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009016:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009018:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800901a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800901e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	0159      	lsls	r1, r3, #5
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	440b      	add	r3, r1
 800902c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009030:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009036:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8009038:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800903c:	2b03      	cmp	r3, #3
 800903e:	d10f      	bne.n	8009060 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4413      	add	r3, r2
 8009048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	440a      	add	r2, r1
 8009056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800905a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800905e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
}
 8009062:	4618      	mov	r0, r3
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
 800906e:	bf00      	nop

08009070 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b08c      	sub	sp, #48	; 0x30
 8009074:	af02      	add	r7, sp, #8
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	4613      	mov	r3, r2
 800907c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	785b      	ldrb	r3, [r3, #1]
 8009086:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800908c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009096:	2b00      	cmp	r3, #0
 8009098:	d028      	beq.n	80090ec <USB_HC_StartXfer+0x7c>
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	791b      	ldrb	r3, [r3, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d124      	bne.n	80090ec <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10b      	bne.n	80090c0 <USB_HC_StartXfer+0x50>
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	795b      	ldrb	r3, [r3, #5]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d107      	bne.n	80090c0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	785b      	ldrb	r3, [r3, #1]
 80090b4:	4619      	mov	r1, r3
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 fa30 	bl	800951c <USB_DoPing>
      return HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	e114      	b.n	80092ea <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80090c0:	79fb      	ldrb	r3, [r7, #7]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d112      	bne.n	80090ec <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	0151      	lsls	r1, r2, #5
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	440a      	add	r2, r1
 80090dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090e0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80090e4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2200      	movs	r2, #0
 80090ea:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d018      	beq.n	8009126 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	8912      	ldrh	r2, [r2, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	3b01      	subs	r3, #1
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	8912      	ldrh	r2, [r2, #8]
 8009104:	fbb3 f3f2 	udiv	r3, r3, r2
 8009108:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800910a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800910c:	8b7b      	ldrh	r3, [r7, #26]
 800910e:	429a      	cmp	r2, r3
 8009110:	d90b      	bls.n	800912a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8009112:	8b7b      	ldrh	r3, [r7, #26]
 8009114:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009116:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	8912      	ldrh	r2, [r2, #8]
 800911c:	fb02 f203 	mul.w	r2, r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	611a      	str	r2, [r3, #16]
 8009124:	e001      	b.n	800912a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8009126:	2301      	movs	r3, #1
 8009128:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	78db      	ldrb	r3, [r3, #3]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8009132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	8912      	ldrh	r2, [r2, #8]
 8009138:	fb02 f203 	mul.w	r2, r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009148:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800914a:	04d9      	lsls	r1, r3, #19
 800914c:	4b69      	ldr	r3, [pc, #420]	; (80092f4 <USB_HC_StartXfer+0x284>)
 800914e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8009150:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	7a9b      	ldrb	r3, [r3, #10]
 8009156:	075b      	lsls	r3, r3, #29
 8009158:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	0148      	lsls	r0, r1, #5
 8009160:	6a39      	ldr	r1, [r7, #32]
 8009162:	4401      	add	r1, r0
 8009164:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009168:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800916a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	68d9      	ldr	r1, [r3, #12]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	6a3b      	ldr	r3, [r7, #32]
 800917c:	4413      	add	r3, r2
 800917e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009182:	460a      	mov	r2, r1
 8009184:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	bf0c      	ite	eq
 8009196:	2301      	moveq	r3, #1
 8009198:	2300      	movne	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	6a3b      	ldr	r3, [r7, #32]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	7e7b      	ldrb	r3, [r7, #25]
 80091ce:	075b      	lsls	r3, r3, #29
 80091d0:	69f9      	ldr	r1, [r7, #28]
 80091d2:	0148      	lsls	r0, r1, #5
 80091d4:	6a39      	ldr	r1, [r7, #32]
 80091d6:	4401      	add	r1, r0
 80091d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80091dc:	4313      	orrs	r3, r2
 80091de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	015a      	lsls	r2, r3, #5
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	4413      	add	r3, r2
 80091e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a42      	ldr	r2, [pc, #264]	; (80092f8 <USB_HC_StartXfer+0x288>)
 80091f0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091f2:	4b41      	ldr	r3, [pc, #260]	; (80092f8 <USB_HC_StartXfer+0x288>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80091fa:	4a3f      	ldr	r2, [pc, #252]	; (80092f8 <USB_HC_StartXfer+0x288>)
 80091fc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	78db      	ldrb	r3, [r3, #3]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d006      	beq.n	8009214 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009206:	4b3c      	ldr	r3, [pc, #240]	; (80092f8 <USB_HC_StartXfer+0x288>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920e:	4a3a      	ldr	r2, [pc, #232]	; (80092f8 <USB_HC_StartXfer+0x288>)
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	e005      	b.n	8009220 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009214:	4b38      	ldr	r3, [pc, #224]	; (80092f8 <USB_HC_StartXfer+0x288>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800921c:	4a36      	ldr	r2, [pc, #216]	; (80092f8 <USB_HC_StartXfer+0x288>)
 800921e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009220:	4b35      	ldr	r3, [pc, #212]	; (80092f8 <USB_HC_StartXfer+0x288>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009228:	4a33      	ldr	r2, [pc, #204]	; (80092f8 <USB_HC_StartXfer+0x288>)
 800922a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	6a3b      	ldr	r3, [r7, #32]
 8009232:	4413      	add	r3, r2
 8009234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009238:	461a      	mov	r2, r3
 800923a:	4b2f      	ldr	r3, [pc, #188]	; (80092f8 <USB_HC_StartXfer+0x288>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e04f      	b.n	80092ea <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	78db      	ldrb	r3, [r3, #3]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d14a      	bne.n	80092e8 <USB_HC_StartXfer+0x278>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d046      	beq.n	80092e8 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	79db      	ldrb	r3, [r3, #7]
 800925e:	2b03      	cmp	r3, #3
 8009260:	d830      	bhi.n	80092c4 <USB_HC_StartXfer+0x254>
 8009262:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <USB_HC_StartXfer+0x1f8>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	08009279 	.word	0x08009279
 800926c:	0800929d 	.word	0x0800929d
 8009270:	08009279 	.word	0x08009279
 8009274:	0800929d 	.word	0x0800929d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	3303      	adds	r3, #3
 800927e:	089b      	lsrs	r3, r3, #2
 8009280:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009282:	8afa      	ldrh	r2, [r7, #22]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009288:	b29b      	uxth	r3, r3
 800928a:	429a      	cmp	r2, r3
 800928c:	d91c      	bls.n	80092c8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	f043 0220 	orr.w	r2, r3, #32
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	619a      	str	r2, [r3, #24]
        }
        break;
 800929a:	e015      	b.n	80092c8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	3303      	adds	r3, #3
 80092a2:	089b      	lsrs	r3, r3, #2
 80092a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80092a6:	8afa      	ldrh	r2, [r7, #22]
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d90a      	bls.n	80092cc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	619a      	str	r2, [r3, #24]
        }
        break;
 80092c2:	e003      	b.n	80092cc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80092c4:	bf00      	nop
 80092c6:	e002      	b.n	80092ce <USB_HC_StartXfer+0x25e>
        break;
 80092c8:	bf00      	nop
 80092ca:	e000      	b.n	80092ce <USB_HC_StartXfer+0x25e>
        break;
 80092cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	68d9      	ldr	r1, [r3, #12]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	785a      	ldrb	r2, [r3, #1]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	b298      	uxth	r0, r3
 80092dc:	2300      	movs	r3, #0
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	4603      	mov	r3, r0
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f7ff fb84 	bl	80089f0 <USB_WritePacket>
  }

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3728      	adds	r7, #40	; 0x28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	1ff80000 	.word	0x1ff80000
 80092f8:	20000500 	.word	0x20000500

080092fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	b29b      	uxth	r3, r3
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800931e:	b480      	push	{r7}
 8009320:	b087      	sub	sp, #28
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	460b      	mov	r3, r1
 8009328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800932e:	78fb      	ldrb	r3, [r7, #3]
 8009330:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	4413      	add	r3, r2
 800933e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	0c9b      	lsrs	r3, r3, #18
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <USB_HC_Halt+0x3a>
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b02      	cmp	r3, #2
 8009356:	d16c      	bne.n	8009432 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	4413      	add	r3, r2
 8009360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	0151      	lsls	r1, r2, #5
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	440a      	add	r2, r1
 800936e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009372:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009376:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d143      	bne.n	800940c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	4413      	add	r3, r2
 800938c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	440a      	add	r2, r1
 800939a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800939e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	0151      	lsls	r1, r2, #5
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	440a      	add	r2, r1
 80093ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80093c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68fa      	ldr	r2, [r7, #12]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093e2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	3301      	adds	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093f0:	d81d      	bhi.n	800942e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009408:	d0ec      	beq.n	80093e4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800940a:	e080      	b.n	800950e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	440a      	add	r2, r1
 8009422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800942a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800942c:	e06f      	b.n	800950e <USB_HC_Halt+0x1f0>
          break;
 800942e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009430:	e06d      	b.n	800950e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	4413      	add	r3, r2
 800943a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	440a      	add	r2, r1
 8009448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009450:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d143      	bne.n	80094ea <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	4413      	add	r3, r2
 800946a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	440a      	add	r2, r1
 8009478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800947c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009480:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	4413      	add	r3, r2
 800948a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	440a      	add	r2, r1
 8009498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800949c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094a0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	0151      	lsls	r1, r2, #5
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	440a      	add	r2, r1
 80094b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094c0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	3301      	adds	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094ce:	d81d      	bhi.n	800950c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094e6:	d0ec      	beq.n	80094c2 <USB_HC_Halt+0x1a4>
 80094e8:	e011      	b.n	800950e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009504:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	e000      	b.n	800950e <USB_HC_Halt+0x1f0>
          break;
 800950c:	bf00      	nop
    }
  }

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009530:	2301      	movs	r3, #1
 8009532:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	04da      	lsls	r2, r3, #19
 8009538:	4b15      	ldr	r3, [pc, #84]	; (8009590 <USB_DoPing+0x74>)
 800953a:	4013      	ands	r3, r2
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	440a      	add	r2, r1
 8009544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009548:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800954c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	4413      	add	r3, r2
 8009556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009564:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800956c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	4413      	add	r3, r2
 8009576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800957a:	461a      	mov	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	1ff80000 	.word	0x1ff80000

08009594 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff f9a0 	bl	80088ea <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80095aa:	2110      	movs	r1, #16
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f7ff f9d7 	bl	8008960 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff f9fa 	bl	80089ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095b8:	2300      	movs	r3, #0
 80095ba:	613b      	str	r3, [r7, #16]
 80095bc:	e01f      	b.n	80095fe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80095d4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095e4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095f2:	461a      	mov	r2, r3
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	3301      	adds	r3, #1
 80095fc:	613b      	str	r3, [r7, #16]
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	2b0f      	cmp	r3, #15
 8009602:	d9dc      	bls.n	80095be <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	e034      	b.n	8009674 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009620:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009628:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009630:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800963e:	461a      	mov	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	3301      	adds	r3, #1
 8009648:	617b      	str	r3, [r7, #20]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009650:	d80c      	bhi.n	800966c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4413      	add	r3, r2
 800965a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009668:	d0ec      	beq.n	8009644 <USB_StopHost+0xb0>
 800966a:	e000      	b.n	800966e <USB_StopHost+0xda>
        break;
 800966c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	2b0f      	cmp	r3, #15
 8009678:	d9c7      	bls.n	800960a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009680:	461a      	mov	r2, r3
 8009682:	f04f 33ff 	mov.w	r3, #4294967295
 8009686:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff f919 	bl	80088c8 <USB_EnableGlobalInt>

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80096a0:	b590      	push	{r4, r7, lr}
 80096a2:	b089      	sub	sp, #36	; 0x24
 80096a4:	af04      	add	r7, sp, #16
 80096a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80096a8:	2301      	movs	r3, #1
 80096aa:	2202      	movs	r2, #2
 80096ac:	2102      	movs	r1, #2
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fcba 	bl	800a028 <USBH_FindInterface>
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2bff      	cmp	r3, #255	; 0xff
 80096bc:	d002      	beq.n	80096c4 <USBH_CDC_InterfaceInit+0x24>
 80096be:	7bfb      	ldrb	r3, [r7, #15]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d901      	bls.n	80096c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096c4:	2302      	movs	r3, #2
 80096c6:	e13d      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fc8f 	bl	8009ff0 <USBH_SelectInterface>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d001      	beq.n	80096e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80096dc:	2302      	movs	r3, #2
 80096de:	e131      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80096e6:	2050      	movs	r0, #80	; 0x50
 80096e8:	f004 fec6 	bl	800e478 <malloc>
 80096ec:	4603      	mov	r3, r0
 80096ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009700:	2302      	movs	r3, #2
 8009702:	e11f      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009704:	2250      	movs	r2, #80	; 0x50
 8009706:	2100      	movs	r1, #0
 8009708:	68b8      	ldr	r0, [r7, #8]
 800970a:	f004 fed0 	bl	800e4ae <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800970e:	7bfb      	ldrb	r3, [r7, #15]
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	211a      	movs	r1, #26
 8009714:	fb01 f303 	mul.w	r3, r1, r3
 8009718:	4413      	add	r3, r2
 800971a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b25b      	sxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	da15      	bge.n	8009752 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	211a      	movs	r1, #26
 800972c:	fb01 f303 	mul.w	r3, r1, r3
 8009730:	4413      	add	r3, r2
 8009732:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009736:	781a      	ldrb	r2, [r3, #0]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	211a      	movs	r1, #26
 8009742:	fb01 f303 	mul.w	r3, r1, r3
 8009746:	4413      	add	r3, r2
 8009748:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	785b      	ldrb	r3, [r3, #1]
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f002 f894 	bl	800b886 <USBH_AllocPipe>
 800975e:	4603      	mov	r3, r0
 8009760:	461a      	mov	r2, r3
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	7819      	ldrb	r1, [r3, #0]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	7858      	ldrb	r0, [r3, #1]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	8952      	ldrh	r2, [r2, #10]
 800977e:	9202      	str	r2, [sp, #8]
 8009780:	2203      	movs	r2, #3
 8009782:	9201      	str	r2, [sp, #4]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4623      	mov	r3, r4
 8009788:	4602      	mov	r2, r0
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f002 f84c 	bl	800b828 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f004 fdbd 	bl	800e318 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800979e:	2300      	movs	r3, #0
 80097a0:	2200      	movs	r2, #0
 80097a2:	210a      	movs	r1, #10
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fc3f 	bl	800a028 <USBH_FindInterface>
 80097aa:	4603      	mov	r3, r0
 80097ac:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	2bff      	cmp	r3, #255	; 0xff
 80097b2:	d002      	beq.n	80097ba <USBH_CDC_InterfaceInit+0x11a>
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d901      	bls.n	80097be <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80097ba:	2302      	movs	r3, #2
 80097bc:	e0c2      	b.n	8009944 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	211a      	movs	r1, #26
 80097c4:	fb01 f303 	mul.w	r3, r1, r3
 80097c8:	4413      	add	r3, r2
 80097ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b25b      	sxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	da16      	bge.n	8009804 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	211a      	movs	r1, #26
 80097dc:	fb01 f303 	mul.w	r3, r1, r3
 80097e0:	4413      	add	r3, r2
 80097e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	211a      	movs	r1, #26
 80097f2:	fb01 f303 	mul.w	r3, r1, r3
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80097fc:	881a      	ldrh	r2, [r3, #0]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	835a      	strh	r2, [r3, #26]
 8009802:	e015      	b.n	8009830 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	211a      	movs	r1, #26
 800980a:	fb01 f303 	mul.w	r3, r1, r3
 800980e:	4413      	add	r3, r2
 8009810:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009814:	781a      	ldrb	r2, [r3, #0]
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	211a      	movs	r1, #26
 8009820:	fb01 f303 	mul.w	r3, r1, r3
 8009824:	4413      	add	r3, r2
 8009826:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800982a:	881a      	ldrh	r2, [r3, #0]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	211a      	movs	r1, #26
 8009836:	fb01 f303 	mul.w	r3, r1, r3
 800983a:	4413      	add	r3, r2
 800983c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b25b      	sxtb	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	da16      	bge.n	8009876 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	211a      	movs	r1, #26
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	211a      	movs	r1, #26
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	4413      	add	r3, r2
 800986a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800986e:	881a      	ldrh	r2, [r3, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	835a      	strh	r2, [r3, #26]
 8009874:	e015      	b.n	80098a2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	211a      	movs	r1, #26
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	4413      	add	r3, r2
 8009882:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	211a      	movs	r1, #26
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800989c:	881a      	ldrh	r2, [r3, #0]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	7b9b      	ldrb	r3, [r3, #14]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f001 ffec 	bl	800b886 <USBH_AllocPipe>
 80098ae:	4603      	mov	r3, r0
 80098b0:	461a      	mov	r2, r3
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	7bdb      	ldrb	r3, [r3, #15]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 ffe2 	bl	800b886 <USBH_AllocPipe>
 80098c2:	4603      	mov	r3, r0
 80098c4:	461a      	mov	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	7b59      	ldrb	r1, [r3, #13]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7b98      	ldrb	r0, [r3, #14]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	8b12      	ldrh	r2, [r2, #24]
 80098e2:	9202      	str	r2, [sp, #8]
 80098e4:	2202      	movs	r2, #2
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4623      	mov	r3, r4
 80098ec:	4602      	mov	r2, r0
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f001 ff9a 	bl	800b828 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	7b19      	ldrb	r1, [r3, #12]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	7bd8      	ldrb	r0, [r3, #15]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	8b52      	ldrh	r2, [r2, #26]
 800990c:	9202      	str	r2, [sp, #8]
 800990e:	2202      	movs	r2, #2
 8009910:	9201      	str	r2, [sp, #4]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	4623      	mov	r3, r4
 8009916:	4602      	mov	r2, r0
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 ff85 	bl	800b828 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	7b5b      	ldrb	r3, [r3, #13]
 800992a:	2200      	movs	r2, #0
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f004 fcf2 	bl	800e318 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	7b1b      	ldrb	r3, [r3, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f004 fceb 	bl	800e318 <USBH_LL_SetToggle>

  return USBH_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bd90      	pop	{r4, r7, pc}

0800994c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00e      	beq.n	8009984 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 ff7a 	bl	800b866 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f001 ffa5 	bl	800b8c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	7b1b      	ldrb	r3, [r3, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	7b1b      	ldrb	r3, [r3, #12]
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 ff67 	bl	800b866 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	7b1b      	ldrb	r3, [r3, #12]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 ff92 	bl	800b8c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	7b5b      	ldrb	r3, [r3, #13]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	7b5b      	ldrb	r3, [r3, #13]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 ff54 	bl	800b866 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	7b5b      	ldrb	r3, [r3, #13]
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 ff7f 	bl	800b8c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f004 fd4f 	bl	800e488 <free>
    phost->pActiveClass->pData = 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f0:	2200      	movs	r2, #0
 80099f2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b084      	sub	sp, #16
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3340      	adds	r3, #64	; 0x40
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f8b1 	bl	8009b7e <GetLineCoding>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d105      	bne.n	8009a32 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a2c:	2102      	movs	r1, #2
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009a32:	7afb      	ldrb	r3, [r7, #11]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a44:	2301      	movs	r3, #1
 8009a46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d877      	bhi.n	8009b50 <USBH_CDC_Process+0x114>
 8009a60:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <USBH_CDC_Process+0x2c>)
 8009a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a66:	bf00      	nop
 8009a68:	08009a7d 	.word	0x08009a7d
 8009a6c:	08009a83 	.word	0x08009a83
 8009a70:	08009ab3 	.word	0x08009ab3
 8009a74:	08009b27 	.word	0x08009b27
 8009a78:	08009b35 	.word	0x08009b35
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a80:	e06d      	b.n	8009b5e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f897 	bl	8009bbc <SetLineCoding>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d104      	bne.n	8009aa2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009aa0:	e058      	b.n	8009b54 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009aa2:	7bbb      	ldrb	r3, [r7, #14]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d055      	beq.n	8009b54 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ab0:	e050      	b.n	8009b54 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3340      	adds	r3, #64	; 0x40
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 f860 	bl	8009b7e <GetLineCoding>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ac2:	7bbb      	ldrb	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d126      	bne.n	8009b16 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ada:	791b      	ldrb	r3, [r3, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d13b      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d133      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009afa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d12b      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b08:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d124      	bne.n	8009b58 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 f984 	bl	8009e1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b14:	e020      	b.n	8009b58 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d01d      	beq.n	8009b58 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2204      	movs	r2, #4
 8009b20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009b24:	e018      	b.n	8009b58 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f867 	bl	8009bfa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f8f8 	bl	8009d22 <CDC_ProcessReception>
      break;
 8009b32:	e014      	b.n	8009b5e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009b34:	2100      	movs	r1, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 f953 	bl	800ade2 <USBH_ClrFeature>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009b4e:	e005      	b.n	8009b5c <USBH_CDC_Process+0x120>

    default:
      break;
 8009b50:	bf00      	nop
 8009b52:	e004      	b.n	8009b5e <USBH_CDC_Process+0x122>
      break;
 8009b54:	bf00      	nop
 8009b56:	e002      	b.n	8009b5e <USBH_CDC_Process+0x122>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <USBH_CDC_Process+0x122>
      break;
 8009b5c:	bf00      	nop

  }

  return status;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	22a1      	movs	r2, #161	; 0xa1
 8009b8c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2221      	movs	r2, #33	; 0x21
 8009b92:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2207      	movs	r2, #7
 8009ba4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2207      	movs	r2, #7
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 faf8 	bl	800b1a2 <USBH_CtlReq>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2221      	movs	r2, #33	; 0x21
 8009bca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2207      	movs	r2, #7
 8009be2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2207      	movs	r2, #7
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fad9 	bl	800b1a2 <USBH_CtlReq>
 8009bf0:	4603      	mov	r3, r0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af02      	add	r7, sp, #8
 8009c00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d002      	beq.n	8009c20 <CDC_ProcessTransmission+0x26>
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d025      	beq.n	8009c6a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8009c1e:	e07c      	b.n	8009d1a <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	8b12      	ldrh	r2, [r2, #24]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d90c      	bls.n	8009c46 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	69d9      	ldr	r1, [r3, #28]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8b1a      	ldrh	r2, [r3, #24]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	7b58      	ldrb	r0, [r3, #13]
 8009c38:	2301      	movs	r3, #1
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 fdaf 	bl	800b7a2 <USBH_BulkSendData>
 8009c44:	e00c      	b.n	8009c60 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	7b58      	ldrb	r0, [r3, #13]
 8009c54:	2301      	movs	r3, #1
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	4603      	mov	r3, r0
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f001 fda1 	bl	800b7a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2202      	movs	r2, #2
 8009c64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009c68:	e057      	b.n	8009d1a <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	7b5b      	ldrb	r3, [r3, #13]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f004 fb27 	bl	800e2c4 <USBH_LL_GetURBState>
 8009c76:	4603      	mov	r3, r0
 8009c78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009c7a:	7afb      	ldrb	r3, [r7, #11]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d136      	bne.n	8009cee <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	8b12      	ldrh	r2, [r2, #24]
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d90e      	bls.n	8009caa <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	8b12      	ldrh	r2, [r2, #24]
 8009c94:	1a9a      	subs	r2, r3, r2
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	8b12      	ldrh	r2, [r2, #24]
 8009ca2:	441a      	add	r2, r3
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	61da      	str	r2, [r3, #28]
 8009ca8:	e002      	b.n	8009cb0 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8009cc0:	e006      	b.n	8009cd0 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f892 	bl	8009df4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	f001 feea 	bl	800bac0 <osMessagePut>
      break;
 8009cec:	e014      	b.n	8009d18 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 8009cee:	7afb      	ldrb	r3, [r7, #11]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d111      	bne.n	8009d18 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2204      	movs	r2, #4
 8009d00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009d10:	2200      	movs	r2, #0
 8009d12:	4619      	mov	r1, r3
 8009d14:	f001 fed4 	bl	800bac0 <osMessagePut>
      break;
 8009d18:	bf00      	nop
  }
}
 8009d1a:	bf00      	nop
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d34:	2300      	movs	r3, #0
 8009d36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d002      	beq.n	8009d48 <CDC_ProcessReception+0x26>
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d00e      	beq.n	8009d64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009d46:	e051      	b.n	8009dec <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	6a19      	ldr	r1, [r3, #32]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	8b5a      	ldrh	r2, [r3, #26]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	7b1b      	ldrb	r3, [r3, #12]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 fd49 	bl	800b7ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2204      	movs	r2, #4
 8009d5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009d62:	e043      	b.n	8009dec <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	7b1b      	ldrb	r3, [r3, #12]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f004 faaa 	bl	800e2c4 <USBH_LL_GetURBState>
 8009d70:	4603      	mov	r3, r0
 8009d72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009d74:	7cfb      	ldrb	r3, [r7, #19]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d137      	bne.n	8009dea <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	7b1b      	ldrb	r3, [r3, #12]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f004 fa0d 	bl	800e1a0 <USBH_LL_GetLastXferSize>
 8009d86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d016      	beq.n	8009dc0 <CDC_ProcessReception+0x9e>
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	8b5b      	ldrh	r3, [r3, #26]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d910      	bls.n	8009dc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	1ad2      	subs	r2, r2, r3
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	6a1a      	ldr	r2, [r3, #32]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	441a      	add	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2203      	movs	r2, #3
 8009dba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8009dbe:	e006      	b.n	8009dce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f81d 	bl	8009e08 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2204      	movs	r2, #4
 8009dd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8009de2:	2200      	movs	r2, #0
 8009de4:	4619      	mov	r1, r3
 8009de6:	f001 fe6b 	bl	800bac0 <osMessagePut>
      break;
 8009dea:	bf00      	nop
  }
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009e30:	b5b0      	push	{r4, r5, r7, lr}
 8009e32:	b090      	sub	sp, #64	; 0x40
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d101      	bne.n	8009e48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009e44:	2302      	movs	r3, #2
 8009e46:	e04d      	b.n	8009ee4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	79fa      	ldrb	r2, [r7, #7]
 8009e4c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f000 f847 	bl	8009ef4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8009e94:	4b15      	ldr	r3, [pc, #84]	; (8009eec <USBH_Init+0xbc>)
 8009e96:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8009e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8009ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fde1 	bl	800ba6e <osMessageCreate>
 8009eac:	4602      	mov	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8009eb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ef0 <USBH_Init+0xc0>)
 8009eb6:	f107 0414 	add.w	r4, r7, #20
 8009eba:	461d      	mov	r5, r3
 8009ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ec0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009ec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	68f9      	ldr	r1, [r7, #12]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 fd6d 	bl	800b9ae <osThreadCreate>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f004 f8a3 	bl	800e028 <USBH_LL_Init>

  return USBH_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3740      	adds	r7, #64	; 0x40
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bdb0      	pop	{r4, r5, r7, pc}
 8009eec:	0800e678 	.word	0x0800e678
 8009ef0:	0800e694 	.word	0x0800e694

08009ef4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e009      	b.n	8009f1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	33e0      	adds	r3, #224	; 0xe0
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	2200      	movs	r2, #0
 8009f12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	3301      	adds	r3, #1
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b0e      	cmp	r3, #14
 8009f1e:	d9f2      	bls.n	8009f06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	e009      	b.n	8009f3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f40:	d3f1      	bcc.n	8009f26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2240      	movs	r2, #64	; 0x40
 8009f66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d016      	beq.n	8009fde <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10e      	bne.n	8009fd8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fc0:	1c59      	adds	r1, r3, #1
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	33de      	adds	r3, #222	; 0xde
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	73fb      	strb	r3, [r7, #15]
 8009fd6:	e004      	b.n	8009fe2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009fd8:	2302      	movs	r3, #2
 8009fda:	73fb      	strb	r3, [r7, #15]
 8009fdc:	e001      	b.n	8009fe2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009fde:	2302      	movs	r3, #2
 8009fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a006:	78fa      	ldrb	r2, [r7, #3]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d204      	bcs.n	800a016 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a014:	e001      	b.n	800a01a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a016:	2302      	movs	r3, #2
 800a018:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a028:	b480      	push	{r7}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	4608      	mov	r0, r1
 800a032:	4611      	mov	r1, r2
 800a034:	461a      	mov	r2, r3
 800a036:	4603      	mov	r3, r0
 800a038:	70fb      	strb	r3, [r7, #3]
 800a03a:	460b      	mov	r3, r1
 800a03c:	70bb      	strb	r3, [r7, #2]
 800a03e:	4613      	mov	r3, r2
 800a040:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a046:	2300      	movs	r3, #0
 800a048:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a050:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a052:	e025      	b.n	800a0a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	221a      	movs	r2, #26
 800a058:	fb02 f303 	mul.w	r3, r2, r3
 800a05c:	3308      	adds	r3, #8
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	3302      	adds	r3, #2
 800a064:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	795b      	ldrb	r3, [r3, #5]
 800a06a:	78fa      	ldrb	r2, [r7, #3]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d002      	beq.n	800a076 <USBH_FindInterface+0x4e>
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	2bff      	cmp	r3, #255	; 0xff
 800a074:	d111      	bne.n	800a09a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a07a:	78ba      	ldrb	r2, [r7, #2]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d002      	beq.n	800a086 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a080:	78bb      	ldrb	r3, [r7, #2]
 800a082:	2bff      	cmp	r3, #255	; 0xff
 800a084:	d109      	bne.n	800a09a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a08a:	787a      	ldrb	r2, [r7, #1]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d002      	beq.n	800a096 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a090:	787b      	ldrb	r3, [r7, #1]
 800a092:	2bff      	cmp	r3, #255	; 0xff
 800a094:	d101      	bne.n	800a09a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a096:	7dfb      	ldrb	r3, [r7, #23]
 800a098:	e006      	b.n	800a0a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	3301      	adds	r3, #1
 800a09e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d9d6      	bls.n	800a054 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a0a6:	23ff      	movs	r3, #255	; 0xff
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f003 fff9 	bl	800e0b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f004 f910 	bl	800e2ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af04      	add	r7, sp, #16
 800a0da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d102      	bne.n	800a0f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b0b      	cmp	r3, #11
 800a0fe:	f200 823c 	bhi.w	800a57a <USBH_Process+0x4a6>
 800a102:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <USBH_Process+0x34>)
 800a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a108:	0800a139 	.word	0x0800a139
 800a10c:	0800a187 	.word	0x0800a187
 800a110:	0800a20b 	.word	0x0800a20b
 800a114:	0800a4f9 	.word	0x0800a4f9
 800a118:	0800a57b 	.word	0x0800a57b
 800a11c:	0800a2cb 	.word	0x0800a2cb
 800a120:	0800a483 	.word	0x0800a483
 800a124:	0800a31d 	.word	0x0800a31d
 800a128:	0800a359 	.word	0x0800a359
 800a12c:	0800a393 	.word	0x0800a393
 800a130:	0800a3db 	.word	0x0800a3db
 800a134:	0800a4e1 	.word	0x0800a4e1
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 821c 	beq.w	800a57e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a14c:	20c8      	movs	r0, #200	; 0xc8
 800a14e:	f004 f916 	bl	800e37e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f004 f809 	bl	800e16a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a17c:	2200      	movs	r2, #0
 800a17e:	4619      	mov	r1, r3
 800a180:	f001 fc9e 	bl	800bac0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a184:	e1fb      	b.n	800a57e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d107      	bne.n	800a1a0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	e025      	b.n	800a1ec <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1aa:	d914      	bls.n	800a1d6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	b2da      	uxtb	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d903      	bls.n	800a1ce <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	220d      	movs	r2, #13
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	e00e      	b.n	800a1ec <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
 800a1d4:	e00a      	b.n	800a1ec <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a1dc:	f103 020a 	add.w	r2, r3, #10
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a1e6:	200a      	movs	r0, #10
 800a1e8:	f004 f8c9 	bl	800e37e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a200:	2200      	movs	r2, #0
 800a202:	4619      	mov	r1, r3
 800a204:	f001 fc5c 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a208:	e1c0      	b.n	800a58c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a21a:	2104      	movs	r1, #4
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a220:	2064      	movs	r0, #100	; 0x64
 800a222:	f004 f8ac 	bl	800e37e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f003 ff7a 	bl	800e120 <USBH_LL_GetSpeed>
 800a22c:	4603      	mov	r3, r0
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2205      	movs	r2, #5
 800a23a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a23c:	2100      	movs	r1, #0
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f001 fb21 	bl	800b886 <USBH_AllocPipe>
 800a244:	4603      	mov	r3, r0
 800a246:	461a      	mov	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a24c:	2180      	movs	r1, #128	; 0x80
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 fb19 	bl	800b886 <USBH_AllocPipe>
 800a254:	4603      	mov	r3, r0
 800a256:	461a      	mov	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	7919      	ldrb	r1, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a270:	b292      	uxth	r2, r2
 800a272:	9202      	str	r2, [sp, #8]
 800a274:	2200      	movs	r2, #0
 800a276:	9201      	str	r2, [sp, #4]
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4603      	mov	r3, r0
 800a27c:	2280      	movs	r2, #128	; 0x80
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f001 fad2 	bl	800b828 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	7959      	ldrb	r1, [r3, #5]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a298:	b292      	uxth	r2, r2
 800a29a:	9202      	str	r2, [sp, #8]
 800a29c:	2200      	movs	r2, #0
 800a29e:	9201      	str	r2, [sp, #4]
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fabe 	bl	800b828 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	f001 fbfc 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a2c8:	e160      	b.n	800a58c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f964 	bl	800a598 <USBH_HandleEnum>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f040 8152 	bne.w	800a582 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d103      	bne.n	800a2f8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2208      	movs	r2, #8
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e002      	b.n	800a2fe <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2207      	movs	r2, #7
 800a2fc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2205      	movs	r2, #5
 800a302:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a312:	2200      	movs	r2, #0
 800a314:	4619      	mov	r1, r3
 800a316:	f001 fbd3 	bl	800bac0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a31a:	e132      	b.n	800a582 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 812f 	beq.w	800a586 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a32e:	2101      	movs	r1, #1
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2208      	movs	r2, #8
 800a338:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2205      	movs	r2, #5
 800a33e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a34e:	2200      	movs	r2, #0
 800a350:	4619      	mov	r1, r3
 800a352:	f001 fbb5 	bl	800bac0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a356:	e116      	b.n	800a586 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a35e:	b29b      	uxth	r3, r3
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fcf6 	bl	800ad54 <USBH_SetCfg>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2209      	movs	r2, #9
 800a372:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a388:	2200      	movs	r2, #0
 800a38a:	4619      	mov	r1, r3
 800a38c:	f001 fb98 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a390:	e0fc      	b.n	800a58c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a398:	f003 0320 	and.w	r3, r3, #32
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fcf9 	bl	800ad9a <USBH_SetFeature>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d106      	bne.n	800a3bc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	701a      	strb	r2, [r3, #0]
 800a3b4:	e002      	b.n	800a3bc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	220a      	movs	r2, #10
 800a3ba:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	f001 fb74 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a3d8:	e0d8      	b.n	800a58c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d03f      	beq.n	800a464 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
 800a3f0:	e016      	b.n	800a420 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3f2:	7bfa      	ldrb	r2, [r7, #15]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	32de      	adds	r2, #222	; 0xde
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	791a      	ldrb	r2, [r3, #4]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a404:	429a      	cmp	r2, r3
 800a406:	d108      	bne.n	800a41a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a408:	7bfa      	ldrb	r2, [r7, #15]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	32de      	adds	r2, #222	; 0xde
 800a40e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a418:	e005      	b.n	800a426 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	3301      	adds	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0e5      	beq.n	800a3f2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d016      	beq.n	800a45e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	4798      	blx	r3
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d109      	bne.n	800a456 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2206      	movs	r2, #6
 800a446:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a44e:	2103      	movs	r1, #3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	4798      	blx	r3
 800a454:	e006      	b.n	800a464 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	220d      	movs	r2, #13
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	e002      	b.n	800a464 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	220d      	movs	r2, #13
 800a462:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2205      	movs	r2, #5
 800a468:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a478:	2200      	movs	r2, #0
 800a47a:	4619      	mov	r1, r3
 800a47c:	f001 fb20 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a480:	e084      	b.n	800a58c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d017      	beq.n	800a4bc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	4798      	blx	r3
 800a498:	4603      	mov	r3, r0
 800a49a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a49c:	7bbb      	ldrb	r3, [r7, #14]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d103      	bne.n	800a4ac <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	220b      	movs	r2, #11
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	e00a      	b.n	800a4c2 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d106      	bne.n	800a4c2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	220d      	movs	r2, #13
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	220d      	movs	r2, #13
 800a4c0:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2205      	movs	r2, #5
 800a4c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f001 faf1 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a4de:	e055      	b.n	800a58c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d04f      	beq.n	800a58a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4f0:	695b      	ldr	r3, [r3, #20]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	4798      	blx	r3
      }
      break;
 800a4f6:	e048      	b.n	800a58a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff fcf7 	bl	8009ef4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d005      	beq.n	800a53a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a534:	2105      	movs	r1, #5
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b01      	cmp	r3, #1
 800a544:	d107      	bne.n	800a556 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff fdb0 	bl	800a0b4 <USBH_Start>
 800a554:	e002      	b.n	800a55c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f003 fdac 	bl	800e0b4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a570:	2200      	movs	r2, #0
 800a572:	4619      	mov	r1, r3
 800a574:	f001 faa4 	bl	800bac0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a578:	e008      	b.n	800a58c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800a57a:	bf00      	nop
 800a57c:	e006      	b.n	800a58c <USBH_Process+0x4b8>
      break;
 800a57e:	bf00      	nop
 800a580:	e004      	b.n	800a58c <USBH_Process+0x4b8>
      break;
 800a582:	bf00      	nop
 800a584:	e002      	b.n	800a58c <USBH_Process+0x4b8>
    break;
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <USBH_Process+0x4b8>
      break;
 800a58a:	bf00      	nop
  }
  return USBH_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop

0800a598 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af04      	add	r7, sp, #16
 800a59e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	2b07      	cmp	r3, #7
 800a5ae:	f200 8208 	bhi.w	800a9c2 <USBH_HandleEnum+0x42a>
 800a5b2:	a201      	add	r2, pc, #4	; (adr r2, 800a5b8 <USBH_HandleEnum+0x20>)
 800a5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a697 	.word	0x0800a697
 800a5c0:	0800a701 	.word	0x0800a701
 800a5c4:	0800a78f 	.word	0x0800a78f
 800a5c8:	0800a7f9 	.word	0x0800a7f9
 800a5cc:	0800a869 	.word	0x0800a869
 800a5d0:	0800a905 	.word	0x0800a905
 800a5d4:	0800a983 	.word	0x0800a983
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a5d8:	2108      	movs	r1, #8
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 faea 	bl	800abb4 <USBH_Get_DevDesc>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a5e4:	7bbb      	ldrb	r3, [r7, #14]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d130      	bne.n	800a64c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7919      	ldrb	r1, [r3, #4]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a60e:	b292      	uxth	r2, r2
 800a610:	9202      	str	r2, [sp, #8]
 800a612:	2200      	movs	r2, #0
 800a614:	9201      	str	r2, [sp, #4]
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	4603      	mov	r3, r0
 800a61a:	2280      	movs	r2, #128	; 0x80
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f001 f903 	bl	800b828 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	7959      	ldrb	r1, [r3, #5]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a636:	b292      	uxth	r2, r2
 800a638:	9202      	str	r2, [sp, #8]
 800a63a:	2200      	movs	r2, #0
 800a63c:	9201      	str	r2, [sp, #4]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4603      	mov	r3, r0
 800a642:	2200      	movs	r2, #0
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f8ef 	bl	800b828 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a64a:	e1bc      	b.n	800a9c6 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b03      	cmp	r3, #3
 800a650:	f040 81b9 	bne.w	800a9c6 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a65a:	3301      	adds	r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a66a:	2b03      	cmp	r3, #3
 800a66c:	d903      	bls.n	800a676 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	220d      	movs	r2, #13
 800a672:	701a      	strb	r2, [r3, #0]
      break;
 800a674:	e1a7      	b.n	800a9c6 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	795b      	ldrb	r3, [r3, #5]
 800a67a:	4619      	mov	r1, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f001 f923 	bl	800b8c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	791b      	ldrb	r3, [r3, #4]
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 f91d 	bl	800b8c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
      break;
 800a694:	e197      	b.n	800a9c6 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a696:	2112      	movs	r1, #18
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fa8b 	bl	800abb4 <USBH_Get_DevDesc>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d103      	bne.n	800a6b0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6ae:	e18c      	b.n	800a9ca <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	f040 8189 	bne.w	800a9ca <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6be:	3301      	adds	r3, #1
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d903      	bls.n	800a6da <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	220d      	movs	r2, #13
 800a6d6:	701a      	strb	r2, [r3, #0]
      break;
 800a6d8:	e177      	b.n	800a9ca <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	795b      	ldrb	r3, [r3, #5]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 f8f1 	bl	800b8c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	791b      	ldrb	r3, [r3, #4]
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f001 f8eb 	bl	800b8c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
      break;
 800a6fe:	e164      	b.n	800a9ca <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a700:	2101      	movs	r1, #1
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fb02 	bl	800ad0c <USBH_SetAddress>
 800a708:	4603      	mov	r3, r0
 800a70a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a70c:	7bbb      	ldrb	r3, [r7, #14]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d132      	bne.n	800a778 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a712:	2002      	movs	r0, #2
 800a714:	f003 fe33 	bl	800e37e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2203      	movs	r2, #3
 800a724:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	7919      	ldrb	r1, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a73a:	b292      	uxth	r2, r2
 800a73c:	9202      	str	r2, [sp, #8]
 800a73e:	2200      	movs	r2, #0
 800a740:	9201      	str	r2, [sp, #4]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	4603      	mov	r3, r0
 800a746:	2280      	movs	r2, #128	; 0x80
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 f86d 	bl	800b828 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	7959      	ldrb	r1, [r3, #5]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a762:	b292      	uxth	r2, r2
 800a764:	9202      	str	r2, [sp, #8]
 800a766:	2200      	movs	r2, #0
 800a768:	9201      	str	r2, [sp, #4]
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	4603      	mov	r3, r0
 800a76e:	2200      	movs	r2, #0
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 f859 	bl	800b828 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a776:	e12a      	b.n	800a9ce <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a778:	7bbb      	ldrb	r3, [r7, #14]
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	f040 8127 	bne.w	800a9ce <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	220d      	movs	r2, #13
 800a784:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	705a      	strb	r2, [r3, #1]
      break;
 800a78c:	e11f      	b.n	800a9ce <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a78e:	2109      	movs	r1, #9
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fa37 	bl	800ac04 <USBH_Get_CfgDesc>
 800a796:	4603      	mov	r3, r0
 800a798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a79a:	7bbb      	ldrb	r3, [r7, #14]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d103      	bne.n	800a7a8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2204      	movs	r2, #4
 800a7a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7a6:	e114      	b.n	800a9d2 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	f040 8111 	bne.w	800a9d2 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d903      	bls.n	800a7d2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	220d      	movs	r2, #13
 800a7ce:	701a      	strb	r2, [r3, #0]
      break;
 800a7d0:	e0ff      	b.n	800a9d2 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	795b      	ldrb	r3, [r3, #5]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f875 	bl	800b8c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	791b      	ldrb	r3, [r3, #4]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 f86f 	bl	800b8c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	701a      	strb	r2, [r3, #0]
      break;
 800a7f6:	e0ec      	b.n	800a9d2 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f9ff 	bl	800ac04 <USBH_Get_CfgDesc>
 800a806:	4603      	mov	r3, r0
 800a808:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2205      	movs	r2, #5
 800a814:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a816:	e0de      	b.n	800a9d6 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	f040 80db 	bne.w	800a9d6 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a826:	3301      	adds	r3, #1
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a836:	2b03      	cmp	r3, #3
 800a838:	d903      	bls.n	800a842 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	220d      	movs	r2, #13
 800a83e:	701a      	strb	r2, [r3, #0]
      break;
 800a840:	e0c9      	b.n	800a9d6 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	795b      	ldrb	r3, [r3, #5]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f001 f83d 	bl	800b8c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	791b      	ldrb	r3, [r3, #4]
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f001 f837 	bl	800b8c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	701a      	strb	r2, [r3, #0]
      break;
 800a866:	e0b6      	b.n	800a9d6 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d036      	beq.n	800a8e0 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a87e:	23ff      	movs	r3, #255	; 0xff
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f9e3 	bl	800ac4c <USBH_Get_StringDesc>
 800a886:	4603      	mov	r3, r0
 800a888:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d111      	bne.n	800a8b4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2206      	movs	r2, #6
 800a894:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2205      	movs	r2, #5
 800a89a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f001 f907 	bl	800bac0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a8b2:	e092      	b.n	800a9da <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b03      	cmp	r3, #3
 800a8b8:	f040 808f 	bne.w	800a9da <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2206      	movs	r2, #6
 800a8c0:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2205      	movs	r2, #5
 800a8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f001 f8f1 	bl	800bac0 <osMessagePut>
      break;
 800a8de:	e07c      	b.n	800a9da <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2206      	movs	r2, #6
 800a8e4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2205      	movs	r2, #5
 800a8ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f001 f8df 	bl	800bac0 <osMessagePut>
      break;
 800a902:	e06a      	b.n	800a9da <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d027      	beq.n	800a95e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a91a:	23ff      	movs	r3, #255	; 0xff
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f995 	bl	800ac4c <USBH_Get_StringDesc>
 800a922:	4603      	mov	r3, r0
 800a924:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2207      	movs	r2, #7
 800a930:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a932:	e054      	b.n	800a9de <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	2b03      	cmp	r3, #3
 800a938:	d151      	bne.n	800a9de <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2207      	movs	r2, #7
 800a93e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2205      	movs	r2, #5
 800a944:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a954:	2200      	movs	r2, #0
 800a956:	4619      	mov	r1, r3
 800a958:	f001 f8b2 	bl	800bac0 <osMessagePut>
      break;
 800a95c:	e03f      	b.n	800a9de <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2207      	movs	r2, #7
 800a962:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2205      	movs	r2, #5
 800a968:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a978:	2200      	movs	r2, #0
 800a97a:	4619      	mov	r1, r3
 800a97c:	f001 f8a0 	bl	800bac0 <osMessagePut>
      break;
 800a980:	e02d      	b.n	800a9de <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d017      	beq.n	800a9bc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a998:	23ff      	movs	r3, #255	; 0xff
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f956 	bl	800ac4c <USBH_Get_StringDesc>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a9ae:	e018      	b.n	800a9e2 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d115      	bne.n	800a9e2 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ba:	e012      	b.n	800a9e2 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c0:	e00f      	b.n	800a9e2 <USBH_HandleEnum+0x44a>

    default:
      break;
 800a9c2:	bf00      	nop
 800a9c4:	e00e      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9c6:	bf00      	nop
 800a9c8:	e00c      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9ca:	bf00      	nop
 800a9cc:	e00a      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9ce:	bf00      	nop
 800a9d0:	e008      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9d2:	bf00      	nop
 800a9d4:	e006      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9d6:	bf00      	nop
 800a9d8:	e004      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9da:	bf00      	nop
 800a9dc:	e002      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9de:	bf00      	nop
 800a9e0:	e000      	b.n	800a9e4 <USBH_HandleEnum+0x44c>
      break;
 800a9e2:	bf00      	nop
  }
  return Status;
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop

0800a9f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800aa02:	bf00      	nop
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f804 	bl	800aa32 <USBH_HandleSof>
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b0b      	cmp	r3, #11
 800aa42:	d10a      	bne.n	800aa5a <USBH_HandleSof+0x28>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d005      	beq.n	800aa5a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	4798      	blx	r3
  }
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aa86:	2200      	movs	r2, #0
 800aa88:	4619      	mov	r1, r3
 800aa8a:	f001 f819 	bl	800bac0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800aa8e:	bf00      	nop
}
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aaa6:	bf00      	nop
}
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aae6:	2200      	movs	r2, #0
 800aae8:	4619      	mov	r1, r3
 800aaea:	f000 ffe9 	bl	800bac0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f003 fae6 	bl	800e0ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	791b      	ldrb	r3, [r3, #4]
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fecf 	bl	800b8c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	795b      	ldrb	r3, [r3, #5]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fec9 	bl	800b8c8 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	f000 ffb7 	bl	800bac0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b086      	sub	sp, #24
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ab6a:	f107 030c 	add.w	r3, r7, #12
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ab72:	4618      	mov	r0, r3
 800ab74:	f000 ffe4 	bl	800bb40 <osMessageGet>
    if (event.status == osEventMessage)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d1f2      	bne.n	800ab64 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff faa8 	bl	800a0d4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ab84:	e7ee      	b.n	800ab64 <USBH_Process_OS+0x8>

0800ab86 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b082      	sub	sp, #8
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aba2:	2200      	movs	r2, #0
 800aba4:	4619      	mov	r1, r3
 800aba6:	f000 ff8b 	bl	800bac0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af02      	add	r7, sp, #8
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	4613      	mov	r3, r2
 800abce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abd2:	2100      	movs	r1, #0
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f864 	bl	800aca2 <USBH_GetDescriptor>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10a      	bne.n	800abfa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800abf0:	78fa      	ldrb	r2, [r7, #3]
 800abf2:	b292      	uxth	r2, r2
 800abf4:	4619      	mov	r1, r3
 800abf6:	f000 f918 	bl	800ae2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	331c      	adds	r3, #28
 800ac14:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ac16:	887b      	ldrh	r3, [r7, #2]
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac20:	2100      	movs	r1, #0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f83d 	bl	800aca2 <USBH_GetDescriptor>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	72fb      	strb	r3, [r7, #11]
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d107      	bne.n	800ac42 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ac38:	887a      	ldrh	r2, [r7, #2]
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 f964 	bl	800af0a <USBH_ParseCfgDesc>
  }

  return status;
 800ac42:	7afb      	ldrb	r3, [r7, #11]
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	607a      	str	r2, [r7, #4]
 800ac56:	461a      	mov	r2, r3
 800ac58:	460b      	mov	r3, r1
 800ac5a:	72fb      	strb	r3, [r7, #11]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac68:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ac70:	893b      	ldrh	r3, [r7, #8]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	460b      	mov	r3, r1
 800ac76:	2100      	movs	r1, #0
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f812 	bl	800aca2 <USBH_GetDescriptor>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d107      	bne.n	800ac98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ac8e:	893a      	ldrh	r2, [r7, #8]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fa37 	bl	800b106 <USBH_ParseStringDesc>
  }

  return status;
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3718      	adds	r7, #24
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	607b      	str	r3, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	72fb      	strb	r3, [r7, #11]
 800acb0:	4613      	mov	r3, r2
 800acb2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	789b      	ldrb	r3, [r3, #2]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d11c      	bne.n	800acf6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800acbc:	7afb      	ldrb	r3, [r7, #11]
 800acbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2206      	movs	r2, #6
 800accc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	893a      	ldrh	r2, [r7, #8]
 800acd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800acd4:	893b      	ldrh	r3, [r7, #8]
 800acd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acde:	d104      	bne.n	800acea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f240 4209 	movw	r2, #1033	; 0x409
 800ace6:	829a      	strh	r2, [r3, #20]
 800ace8:	e002      	b.n	800acf0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8b3a      	ldrh	r2, [r7, #24]
 800acf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800acf6:	8b3b      	ldrh	r3, [r7, #24]
 800acf8:	461a      	mov	r2, r3
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 fa50 	bl	800b1a2 <USBH_CtlReq>
 800ad02:	4603      	mov	r3, r0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	789b      	ldrb	r3, [r3, #2]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d10f      	bne.n	800ad40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2205      	movs	r2, #5
 800ad2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad40:	2200      	movs	r2, #0
 800ad42:	2100      	movs	r1, #0
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fa2c 	bl	800b1a2 <USBH_CtlReq>
 800ad4a:	4603      	mov	r3, r0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	789b      	ldrb	r3, [r3, #2]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d10e      	bne.n	800ad86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2209      	movs	r2, #9
 800ad72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	887a      	ldrh	r2, [r7, #2]
 800ad78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ad86:	2200      	movs	r2, #0
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fa09 	bl	800b1a2 <USBH_CtlReq>
 800ad90:	4603      	mov	r3, r0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
 800ada2:	460b      	mov	r3, r1
 800ada4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	789b      	ldrb	r3, [r3, #2]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d10f      	bne.n	800adce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2203      	movs	r2, #3
 800adb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800adba:	78fb      	ldrb	r3, [r7, #3]
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800adce:	2200      	movs	r2, #0
 800add0:	2100      	movs	r1, #0
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 f9e5 	bl	800b1a2 <USBH_CtlReq>
 800add8:	4603      	mov	r3, r0
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	789b      	ldrb	r3, [r3, #2]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d10f      	bne.n	800ae16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2202      	movs	r2, #2
 800adfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ae16:	2200      	movs	r2, #0
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f9c1 	bl	800b1a2 <USBH_CtlReq>
 800ae20:	4603      	mov	r3, r0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3708      	adds	r7, #8
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	4613      	mov	r3, r2
 800ae36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	781a      	ldrb	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	785a      	ldrb	r2, [r3, #1]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	3302      	adds	r3, #2
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	3303      	adds	r3, #3
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	021b      	lsls	r3, r3, #8
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	791a      	ldrb	r2, [r3, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	795a      	ldrb	r2, [r3, #5]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	799a      	ldrb	r2, [r3, #6]
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	79da      	ldrb	r2, [r3, #7]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ae84:	88fb      	ldrh	r3, [r7, #6]
 800ae86:	2b08      	cmp	r3, #8
 800ae88:	d939      	bls.n	800aefe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	3309      	adds	r3, #9
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	021b      	lsls	r3, r3, #8
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	330a      	adds	r3, #10
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	330b      	adds	r3, #11
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	4313      	orrs	r3, r2
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	330c      	adds	r3, #12
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	330d      	adds	r3, #13
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	021b      	lsls	r3, r3, #8
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4313      	orrs	r3, r2
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	7b9a      	ldrb	r2, [r3, #14]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	7bda      	ldrb	r2, [r3, #15]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	7c1a      	ldrb	r2, [r3, #16]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	7c5a      	ldrb	r2, [r3, #17]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	745a      	strb	r2, [r3, #17]
  }
}
 800aefe:	bf00      	nop
 800af00:	3714      	adds	r7, #20
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b08a      	sub	sp, #40	; 0x28
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	4613      	mov	r3, r2
 800af16:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	781a      	ldrb	r2, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	785a      	ldrb	r2, [r3, #1]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	3302      	adds	r3, #2
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	b29a      	uxth	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	3303      	adds	r3, #3
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	021b      	lsls	r3, r3, #8
 800af4e:	b29b      	uxth	r3, r3
 800af50:	4313      	orrs	r3, r2
 800af52:	b29a      	uxth	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	791a      	ldrb	r2, [r3, #4]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	795a      	ldrb	r2, [r3, #5]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	799a      	ldrb	r2, [r3, #6]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	79da      	ldrb	r2, [r3, #7]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	7a1a      	ldrb	r2, [r3, #8]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800af80:	88fb      	ldrh	r3, [r7, #6]
 800af82:	2b09      	cmp	r3, #9
 800af84:	d95f      	bls.n	800b046 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800af86:	2309      	movs	r3, #9
 800af88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af8e:	e051      	b.n	800b034 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800af90:	f107 0316 	add.w	r3, r7, #22
 800af94:	4619      	mov	r1, r3
 800af96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af98:	f000 f8e8 	bl	800b16c <USBH_GetNextDesc>
 800af9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	785b      	ldrb	r3, [r3, #1]
 800afa2:	2b04      	cmp	r3, #4
 800afa4:	d146      	bne.n	800b034 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800afa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afaa:	221a      	movs	r2, #26
 800afac:	fb02 f303 	mul.w	r3, r2, r3
 800afb0:	3308      	adds	r3, #8
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	4413      	add	r3, r2
 800afb6:	3302      	adds	r3, #2
 800afb8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800afba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afbc:	69f8      	ldr	r0, [r7, #28]
 800afbe:	f000 f846 	bl	800b04e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800afc8:	2300      	movs	r3, #0
 800afca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800afcc:	e022      	b.n	800b014 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800afce:	f107 0316 	add.w	r3, r7, #22
 800afd2:	4619      	mov	r1, r3
 800afd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afd6:	f000 f8c9 	bl	800b16c <USBH_GetNextDesc>
 800afda:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	785b      	ldrb	r3, [r3, #1]
 800afe0:	2b05      	cmp	r3, #5
 800afe2:	d117      	bne.n	800b014 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800afe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afe8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800afec:	3201      	adds	r2, #1
 800afee:	00d2      	lsls	r2, r2, #3
 800aff0:	211a      	movs	r1, #26
 800aff2:	fb01 f303 	mul.w	r3, r1, r3
 800aff6:	4413      	add	r3, r2
 800aff8:	3308      	adds	r3, #8
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	4413      	add	r3, r2
 800affe:	3304      	adds	r3, #4
 800b000:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b004:	69b8      	ldr	r0, [r7, #24]
 800b006:	f000 f851 	bl	800b0ac <USBH_ParseEPDesc>
            ep_ix++;
 800b00a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b00e:	3301      	adds	r3, #1
 800b010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	791b      	ldrb	r3, [r3, #4]
 800b018:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d204      	bcs.n	800b02a <USBH_ParseCfgDesc+0x120>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	885a      	ldrh	r2, [r3, #2]
 800b024:	8afb      	ldrh	r3, [r7, #22]
 800b026:	429a      	cmp	r2, r3
 800b028:	d8d1      	bhi.n	800afce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b02a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b02e:	3301      	adds	r3, #1
 800b030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d804      	bhi.n	800b046 <USBH_ParseCfgDesc+0x13c>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	885a      	ldrh	r2, [r3, #2]
 800b040:	8afb      	ldrh	r3, [r7, #22]
 800b042:	429a      	cmp	r2, r3
 800b044:	d8a4      	bhi.n	800af90 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b046:	bf00      	nop
 800b048:	3728      	adds	r7, #40	; 0x28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b04e:	b480      	push	{r7}
 800b050:	b083      	sub	sp, #12
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	785a      	ldrb	r2, [r3, #1]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	789a      	ldrb	r2, [r3, #2]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	78da      	ldrb	r2, [r3, #3]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	791a      	ldrb	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	795a      	ldrb	r2, [r3, #5]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	799a      	ldrb	r2, [r3, #6]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	79da      	ldrb	r2, [r3, #7]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	7a1a      	ldrb	r2, [r3, #8]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	721a      	strb	r2, [r3, #8]
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	781a      	ldrb	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	785a      	ldrb	r2, [r3, #1]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	789a      	ldrb	r2, [r3, #2]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	78da      	ldrb	r2, [r3, #3]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	3305      	adds	r3, #5
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	021b      	lsls	r3, r3, #8
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	799a      	ldrb	r2, [r3, #6]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	719a      	strb	r2, [r3, #6]
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b106:	b480      	push	{r7}
 800b108:	b087      	sub	sp, #28
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	60f8      	str	r0, [r7, #12]
 800b10e:	60b9      	str	r1, [r7, #8]
 800b110:	4613      	mov	r3, r2
 800b112:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d120      	bne.n	800b160 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	1e9a      	subs	r2, r3, #2
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	4293      	cmp	r3, r2
 800b128:	bf28      	it	cs
 800b12a:	4613      	movcs	r3, r2
 800b12c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3302      	adds	r3, #2
 800b132:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b134:	2300      	movs	r3, #0
 800b136:	82fb      	strh	r3, [r7, #22]
 800b138:	e00b      	b.n	800b152 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b13a:	8afb      	ldrh	r3, [r7, #22]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	781a      	ldrb	r2, [r3, #0]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3301      	adds	r3, #1
 800b14a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b14c:	8afb      	ldrh	r3, [r7, #22]
 800b14e:	3302      	adds	r3, #2
 800b150:	82fb      	strh	r3, [r7, #22]
 800b152:	8afa      	ldrh	r2, [r7, #22]
 800b154:	8abb      	ldrh	r3, [r7, #20]
 800b156:	429a      	cmp	r2, r3
 800b158:	d3ef      	bcc.n	800b13a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2200      	movs	r2, #0
 800b15e:	701a      	strb	r2, [r3, #0]
  }
}
 800b160:	bf00      	nop
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	881a      	ldrh	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4413      	add	r3, r2
 800b182:	b29a      	uxth	r2, r3
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b194:	68fb      	ldr	r3, [r7, #12]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	60b9      	str	r1, [r7, #8]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	789b      	ldrb	r3, [r3, #2]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d002      	beq.n	800b1c2 <USBH_CtlReq+0x20>
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d01d      	beq.n	800b1fc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b1c0:	e043      	b.n	800b24a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	88fa      	ldrh	r2, [r7, #6]
 800b1cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2203      	movs	r2, #3
 800b1e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	f000 fc63 	bl	800bac0 <osMessagePut>
      break;
 800b1fa:	e026      	b.n	800b24a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b1fc:	68f8      	ldr	r0, [r7, #12]
 800b1fe:	f000 f829 	bl	800b254 <USBH_HandleControl>
 800b202:	4603      	mov	r3, r0
 800b204:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b206:	7dfb      	ldrb	r3, [r7, #23]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <USBH_CtlReq+0x70>
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	2b03      	cmp	r3, #3
 800b210:	d106      	bne.n	800b220 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2201      	movs	r2, #1
 800b216:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	761a      	strb	r2, [r3, #24]
 800b21e:	e005      	b.n	800b22c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	2b02      	cmp	r3, #2
 800b224:	d102      	bne.n	800b22c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2201      	movs	r2, #1
 800b22a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2203      	movs	r2, #3
 800b230:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b240:	2200      	movs	r2, #0
 800b242:	4619      	mov	r1, r3
 800b244:	f000 fc3c 	bl	800bac0 <osMessagePut>
      break;
 800b248:	bf00      	nop
  }
  return status;
 800b24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b086      	sub	sp, #24
 800b258:	af02      	add	r7, sp, #8
 800b25a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b25c:	2301      	movs	r3, #1
 800b25e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b260:	2300      	movs	r3, #0
 800b262:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7e1b      	ldrb	r3, [r3, #24]
 800b268:	3b01      	subs	r3, #1
 800b26a:	2b0a      	cmp	r3, #10
 800b26c:	f200 822b 	bhi.w	800b6c6 <USBH_HandleControl+0x472>
 800b270:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <USBH_HandleControl+0x24>)
 800b272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b276:	bf00      	nop
 800b278:	0800b2a5 	.word	0x0800b2a5
 800b27c:	0800b2bf 	.word	0x0800b2bf
 800b280:	0800b361 	.word	0x0800b361
 800b284:	0800b387 	.word	0x0800b387
 800b288:	0800b413 	.word	0x0800b413
 800b28c:	0800b43f 	.word	0x0800b43f
 800b290:	0800b501 	.word	0x0800b501
 800b294:	0800b523 	.word	0x0800b523
 800b298:	0800b5b5 	.word	0x0800b5b5
 800b29c:	0800b5dd 	.word	0x0800b5dd
 800b2a0:	0800b66f 	.word	0x0800b66f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f103 0110 	add.w	r1, r3, #16
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	795b      	ldrb	r3, [r3, #5]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 fa19 	bl	800b6e8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	761a      	strb	r2, [r3, #24]
      break;
 800b2bc:	e20e      	b.n	800b6dc <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	795b      	ldrb	r3, [r3, #5]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f002 fffd 	bl	800e2c4 <USBH_LL_GetURBState>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d12c      	bne.n	800b32e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7c1b      	ldrb	r3, [r3, #16]
 800b2d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	8adb      	ldrh	r3, [r3, #22]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b2e6:	7b7b      	ldrb	r3, [r7, #13]
 800b2e8:	2b80      	cmp	r3, #128	; 0x80
 800b2ea:	d103      	bne.n	800b2f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	761a      	strb	r2, [r3, #24]
 800b2f2:	e00d      	b.n	800b310 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2205      	movs	r2, #5
 800b2f8:	761a      	strb	r2, [r3, #24]
 800b2fa:	e009      	b.n	800b310 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b2fc:	7b7b      	ldrb	r3, [r7, #13]
 800b2fe:	2b80      	cmp	r3, #128	; 0x80
 800b300:	d103      	bne.n	800b30a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2209      	movs	r2, #9
 800b306:	761a      	strb	r2, [r3, #24]
 800b308:	e002      	b.n	800b310 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2207      	movs	r2, #7
 800b30e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2203      	movs	r2, #3
 800b314:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b324:	2200      	movs	r2, #0
 800b326:	4619      	mov	r1, r3
 800b328:	f000 fbca 	bl	800bac0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b32c:	e1cd      	b.n	800b6ca <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
 800b330:	2b04      	cmp	r3, #4
 800b332:	d003      	beq.n	800b33c <USBH_HandleControl+0xe8>
 800b334:	7bbb      	ldrb	r3, [r7, #14]
 800b336:	2b02      	cmp	r3, #2
 800b338:	f040 81c7 	bne.w	800b6ca <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	220b      	movs	r2, #11
 800b340:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2203      	movs	r2, #3
 800b346:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b356:	2200      	movs	r2, #0
 800b358:	4619      	mov	r1, r3
 800b35a:	f000 fbb1 	bl	800bac0 <osMessagePut>
      break;
 800b35e:	e1b4      	b.n	800b6ca <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b366:	b29a      	uxth	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6899      	ldr	r1, [r3, #8]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	899a      	ldrh	r2, [r3, #12]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	791b      	ldrb	r3, [r3, #4]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 f9f4 	bl	800b766 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2204      	movs	r2, #4
 800b382:	761a      	strb	r2, [r3, #24]
      break;
 800b384:	e1aa      	b.n	800b6dc <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	791b      	ldrb	r3, [r3, #4]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f002 ff99 	bl	800e2c4 <USBH_LL_GetURBState>
 800b392:	4603      	mov	r3, r0
 800b394:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d110      	bne.n	800b3be <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2209      	movs	r2, #9
 800b3a0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2203      	movs	r2, #3
 800b3a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	f000 fb81 	bl	800bac0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
 800b3c0:	2b05      	cmp	r3, #5
 800b3c2:	d110      	bne.n	800b3e6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2203      	movs	r2, #3
 800b3cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3dc:	2200      	movs	r2, #0
 800b3de:	4619      	mov	r1, r3
 800b3e0:	f000 fb6e 	bl	800bac0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b3e4:	e173      	b.n	800b6ce <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	2b04      	cmp	r3, #4
 800b3ea:	f040 8170 	bne.w	800b6ce <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	220b      	movs	r2, #11
 800b3f2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2203      	movs	r2, #3
 800b3f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b408:	2200      	movs	r2, #0
 800b40a:	4619      	mov	r1, r3
 800b40c:	f000 fb58 	bl	800bac0 <osMessagePut>
      break;
 800b410:	e15d      	b.n	800b6ce <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6899      	ldr	r1, [r3, #8]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	899a      	ldrh	r2, [r3, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7958      	ldrb	r0, [r3, #5]
 800b41e:	2301      	movs	r3, #1
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	4603      	mov	r3, r0
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f979 	bl	800b71c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b430:	b29a      	uxth	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2206      	movs	r2, #6
 800b43a:	761a      	strb	r2, [r3, #24]
      break;
 800b43c:	e14e      	b.n	800b6dc <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	795b      	ldrb	r3, [r3, #5]
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f002 ff3d 	bl	800e2c4 <USBH_LL_GetURBState>
 800b44a:	4603      	mov	r3, r0
 800b44c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d111      	bne.n	800b478 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2207      	movs	r2, #7
 800b458:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2203      	movs	r2, #3
 800b45e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b46e:	2200      	movs	r2, #0
 800b470:	4619      	mov	r1, r3
 800b472:	f000 fb25 	bl	800bac0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b476:	e12c      	b.n	800b6d2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	2b05      	cmp	r3, #5
 800b47c:	d113      	bne.n	800b4a6 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	220c      	movs	r2, #12
 800b482:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b484:	2303      	movs	r3, #3
 800b486:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2203      	movs	r2, #3
 800b48c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b49c:	2200      	movs	r2, #0
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f000 fb0e 	bl	800bac0 <osMessagePut>
      break;
 800b4a4:	e115      	b.n	800b6d2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d111      	bne.n	800b4d0 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2205      	movs	r2, #5
 800b4b0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2203      	movs	r2, #3
 800b4b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	f000 faf9 	bl	800bac0 <osMessagePut>
      break;
 800b4ce:	e100      	b.n	800b6d2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800b4d0:	7bbb      	ldrb	r3, [r7, #14]
 800b4d2:	2b04      	cmp	r3, #4
 800b4d4:	f040 80fd 	bne.w	800b6d2 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	220b      	movs	r2, #11
 800b4dc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b4de:	2302      	movs	r3, #2
 800b4e0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	f000 fae1 	bl	800bac0 <osMessagePut>
      break;
 800b4fe:	e0e8      	b.n	800b6d2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	791b      	ldrb	r3, [r3, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	2100      	movs	r1, #0
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f92c 	bl	800b766 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b514:	b29a      	uxth	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2208      	movs	r2, #8
 800b51e:	761a      	strb	r2, [r3, #24]

      break;
 800b520:	e0dc      	b.n	800b6dc <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	791b      	ldrb	r3, [r3, #4]
 800b526:	4619      	mov	r1, r3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f002 fecb 	bl	800e2c4 <USBH_LL_GetURBState>
 800b52e:	4603      	mov	r3, r0
 800b530:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b532:	7bbb      	ldrb	r3, [r7, #14]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d113      	bne.n	800b560 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	220d      	movs	r2, #13
 800b53c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2203      	movs	r2, #3
 800b546:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b556:	2200      	movs	r2, #0
 800b558:	4619      	mov	r1, r3
 800b55a:	f000 fab1 	bl	800bac0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b55e:	e0ba      	b.n	800b6d6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	2b04      	cmp	r3, #4
 800b564:	d111      	bne.n	800b58a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	220b      	movs	r2, #11
 800b56a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2203      	movs	r2, #3
 800b570:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b580:	2200      	movs	r2, #0
 800b582:	4619      	mov	r1, r3
 800b584:	f000 fa9c 	bl	800bac0 <osMessagePut>
      break;
 800b588:	e0a5      	b.n	800b6d6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	2b05      	cmp	r3, #5
 800b58e:	f040 80a2 	bne.w	800b6d6 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800b592:	2303      	movs	r3, #3
 800b594:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2203      	movs	r2, #3
 800b59a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	f000 fa87 	bl	800bac0 <osMessagePut>
      break;
 800b5b2:	e090      	b.n	800b6d6 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	795a      	ldrb	r2, [r3, #5]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f8aa 	bl	800b71c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	761a      	strb	r2, [r3, #24]
      break;
 800b5da:	e07f      	b.n	800b6dc <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	795b      	ldrb	r3, [r3, #5]
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f002 fe6e 	bl	800e2c4 <USBH_LL_GetURBState>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d113      	bne.n	800b61a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	220d      	movs	r2, #13
 800b5fa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2203      	movs	r2, #3
 800b600:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b610:	2200      	movs	r2, #0
 800b612:	4619      	mov	r1, r3
 800b614:	f000 fa54 	bl	800bac0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b618:	e05f      	b.n	800b6da <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b61a:	7bbb      	ldrb	r3, [r7, #14]
 800b61c:	2b02      	cmp	r3, #2
 800b61e:	d111      	bne.n	800b644 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2209      	movs	r2, #9
 800b624:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2203      	movs	r2, #3
 800b62a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b63a:	2200      	movs	r2, #0
 800b63c:	4619      	mov	r1, r3
 800b63e:	f000 fa3f 	bl	800bac0 <osMessagePut>
      break;
 800b642:	e04a      	b.n	800b6da <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800b644:	7bbb      	ldrb	r3, [r7, #14]
 800b646:	2b04      	cmp	r3, #4
 800b648:	d147      	bne.n	800b6da <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	220b      	movs	r2, #11
 800b64e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2203      	movs	r2, #3
 800b654:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b664:	2200      	movs	r2, #0
 800b666:	4619      	mov	r1, r3
 800b668:	f000 fa2a 	bl	800bac0 <osMessagePut>
      break;
 800b66c:	e035      	b.n	800b6da <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7e5b      	ldrb	r3, [r3, #25]
 800b672:	3301      	adds	r3, #1
 800b674:	b2da      	uxtb	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	765a      	strb	r2, [r3, #25]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	7e5b      	ldrb	r3, [r3, #25]
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d806      	bhi.n	800b690 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b68e:	e025      	b.n	800b6dc <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b696:	2106      	movs	r1, #6
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	795b      	ldrb	r3, [r3, #5]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f90d 	bl	800b8c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	791b      	ldrb	r3, [r3, #4]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f907 	bl	800b8c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b6c0:	2302      	movs	r3, #2
 800b6c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c4:	e00a      	b.n	800b6dc <USBH_HandleControl+0x488>

    default:
      break;
 800b6c6:	bf00      	nop
 800b6c8:	e008      	b.n	800b6dc <USBH_HandleControl+0x488>
      break;
 800b6ca:	bf00      	nop
 800b6cc:	e006      	b.n	800b6dc <USBH_HandleControl+0x488>
      break;
 800b6ce:	bf00      	nop
 800b6d0:	e004      	b.n	800b6dc <USBH_HandleControl+0x488>
      break;
 800b6d2:	bf00      	nop
 800b6d4:	e002      	b.n	800b6dc <USBH_HandleControl+0x488>
      break;
 800b6d6:	bf00      	nop
 800b6d8:	e000      	b.n	800b6dc <USBH_HandleControl+0x488>
      break;
 800b6da:	bf00      	nop
  }

  return status;
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop

0800b6e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af04      	add	r7, sp, #16
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6f6:	79f9      	ldrb	r1, [r7, #7]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	2308      	movs	r3, #8
 800b6fe:	9302      	str	r3, [sp, #8]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	2300      	movs	r3, #0
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	2300      	movs	r3, #0
 800b70a:	2200      	movs	r2, #0
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f002 fda8 	bl	800e262 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b712:	2300      	movs	r3, #0
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af04      	add	r7, sp, #16
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	4611      	mov	r1, r2
 800b728:	461a      	mov	r2, r3
 800b72a:	460b      	mov	r3, r1
 800b72c:	80fb      	strh	r3, [r7, #6]
 800b72e:	4613      	mov	r3, r2
 800b730:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d001      	beq.n	800b740 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b73c:	2300      	movs	r3, #0
 800b73e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b740:	7979      	ldrb	r1, [r7, #5]
 800b742:	7e3b      	ldrb	r3, [r7, #24]
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	88fb      	ldrh	r3, [r7, #6]
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	2301      	movs	r3, #1
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	2300      	movs	r3, #0
 800b754:	2200      	movs	r2, #0
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f002 fd83 	bl	800e262 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b088      	sub	sp, #32
 800b76a:	af04      	add	r7, sp, #16
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	4611      	mov	r1, r2
 800b772:	461a      	mov	r2, r3
 800b774:	460b      	mov	r3, r1
 800b776:	80fb      	strh	r3, [r7, #6]
 800b778:	4613      	mov	r3, r2
 800b77a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b77c:	7979      	ldrb	r1, [r7, #5]
 800b77e:	2300      	movs	r3, #0
 800b780:	9303      	str	r3, [sp, #12]
 800b782:	88fb      	ldrh	r3, [r7, #6]
 800b784:	9302      	str	r3, [sp, #8]
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	2301      	movs	r3, #1
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	2201      	movs	r2, #1
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f002 fd65 	bl	800e262 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b798:	2300      	movs	r3, #0

}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b088      	sub	sp, #32
 800b7a6:	af04      	add	r7, sp, #16
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	4611      	mov	r1, r2
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	80fb      	strh	r3, [r7, #6]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7c6:	7979      	ldrb	r1, [r7, #5]
 800b7c8:	7e3b      	ldrb	r3, [r7, #24]
 800b7ca:	9303      	str	r3, [sp, #12]
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	9302      	str	r3, [sp, #8]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	2302      	movs	r3, #2
 800b7da:	2200      	movs	r2, #0
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f002 fd40 	bl	800e262 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af04      	add	r7, sp, #16
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	80fb      	strh	r3, [r7, #6]
 800b7fe:	4613      	mov	r3, r2
 800b800:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b802:	7979      	ldrb	r1, [r7, #5]
 800b804:	2300      	movs	r3, #0
 800b806:	9303      	str	r3, [sp, #12]
 800b808:	88fb      	ldrh	r3, [r7, #6]
 800b80a:	9302      	str	r3, [sp, #8]
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	2301      	movs	r3, #1
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	2302      	movs	r3, #2
 800b816:	2201      	movs	r2, #1
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f002 fd22 	bl	800e262 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3710      	adds	r7, #16
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af04      	add	r7, sp, #16
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	4608      	mov	r0, r1
 800b832:	4611      	mov	r1, r2
 800b834:	461a      	mov	r2, r3
 800b836:	4603      	mov	r3, r0
 800b838:	70fb      	strb	r3, [r7, #3]
 800b83a:	460b      	mov	r3, r1
 800b83c:	70bb      	strb	r3, [r7, #2]
 800b83e:	4613      	mov	r3, r2
 800b840:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b842:	7878      	ldrb	r0, [r7, #1]
 800b844:	78ba      	ldrb	r2, [r7, #2]
 800b846:	78f9      	ldrb	r1, [r7, #3]
 800b848:	8b3b      	ldrh	r3, [r7, #24]
 800b84a:	9302      	str	r3, [sp, #8]
 800b84c:	7d3b      	ldrb	r3, [r7, #20]
 800b84e:	9301      	str	r3, [sp, #4]
 800b850:	7c3b      	ldrb	r3, [r7, #16]
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	4603      	mov	r3, r0
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f002 fcb5 	bl	800e1c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	460b      	mov	r3, r1
 800b870:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b872:	78fb      	ldrb	r3, [r7, #3]
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f002 fcd4 	bl	800e224 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	460b      	mov	r3, r1
 800b890:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f836 	bl	800b904 <USBH_GetFreePipe>
 800b898:	4603      	mov	r3, r0
 800b89a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b89c:	89fb      	ldrh	r3, [r7, #14]
 800b89e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d00a      	beq.n	800b8bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	89fb      	ldrh	r3, [r7, #14]
 800b8aa:	f003 030f 	and.w	r3, r3, #15
 800b8ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	33e0      	adds	r3, #224	; 0xe0
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	440b      	add	r3, r1
 800b8ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b8bc:	89fb      	ldrh	r3, [r7, #14]
 800b8be:	b2db      	uxtb	r3, r3
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b0a      	cmp	r3, #10
 800b8d8:	d80d      	bhi.n	800b8f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	33e0      	adds	r3, #224	; 0xe0
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	685a      	ldr	r2, [r3, #4]
 800b8e6:	78fb      	ldrb	r3, [r7, #3]
 800b8e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b8ec:	6879      	ldr	r1, [r7, #4]
 800b8ee:	33e0      	adds	r3, #224	; 0xe0
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	440b      	add	r3, r1
 800b8f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b90c:	2300      	movs	r3, #0
 800b90e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]
 800b914:	e00f      	b.n	800b936 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	33e0      	adds	r3, #224	; 0xe0
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	4413      	add	r3, r2
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d102      	bne.n	800b930 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	e007      	b.n	800b940 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	3301      	adds	r3, #1
 800b934:	73fb      	strb	r3, [r7, #15]
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	2b0a      	cmp	r3, #10
 800b93a:	d9ec      	bls.n	800b916 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b93c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b940:	4618      	mov	r0, r3
 800b942:	3714      	adds	r7, #20
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b956:	2300      	movs	r3, #0
 800b958:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b95a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b95e:	2b84      	cmp	r3, #132	; 0x84
 800b960:	d005      	beq.n	800b96e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b962:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	4413      	add	r3, r2
 800b96a:	3303      	adds	r3, #3
 800b96c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b96e:	68fb      	ldr	r3, [r7, #12]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b982:	f3ef 8305 	mrs	r3, IPSR
 800b986:	607b      	str	r3, [r7, #4]
  return(result);
 800b988:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	bf14      	ite	ne
 800b98e:	2301      	movne	r3, #1
 800b990:	2300      	moveq	r3, #0
 800b992:	b2db      	uxtb	r3, r3
}
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b9a4:	f001 f8f4 	bl	800cb90 <vTaskStartScheduler>
  
  return osOK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b9ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9b0:	b089      	sub	sp, #36	; 0x24
 800b9b2:	af04      	add	r7, sp, #16
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	695b      	ldr	r3, [r3, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d020      	beq.n	800ba02 <osThreadCreate+0x54>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d01c      	beq.n	800ba02 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685c      	ldr	r4, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681d      	ldr	r5, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	691e      	ldr	r6, [r3, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff ffb6 	bl	800b94c <makeFreeRtosPriority>
 800b9e0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9ea:	9202      	str	r2, [sp, #8]
 800b9ec:	9301      	str	r3, [sp, #4]
 800b9ee:	9100      	str	r1, [sp, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	4632      	mov	r2, r6
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f000 fefb 	bl	800c7f2 <xTaskCreateStatic>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	e01c      	b.n	800ba3c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	685c      	ldr	r4, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba0e:	b29e      	uxth	r6, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7ff ff98 	bl	800b94c <makeFreeRtosPriority>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	f107 030c 	add.w	r3, r7, #12
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	9200      	str	r2, [sp, #0]
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	4632      	mov	r2, r6
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f000 ff3a 	bl	800c8a6 <xTaskCreate>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d001      	beq.n	800ba3c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	e000      	b.n	800ba3e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d001      	beq.n	800ba5c <osDelay+0x16>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	e000      	b.n	800ba5e <osDelay+0x18>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f001 f862 	bl	800cb28 <vTaskDelay>
  
  return osOK;
 800ba64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3710      	adds	r7, #16
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ba6e:	b590      	push	{r4, r7, lr}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af02      	add	r7, sp, #8
 800ba74:	6078      	str	r0, [r7, #4]
 800ba76:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d012      	beq.n	800baa6 <osMessageCreate+0x38>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00e      	beq.n	800baa6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6818      	ldr	r0, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6859      	ldr	r1, [r3, #4]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	689a      	ldr	r2, [r3, #8]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68dc      	ldr	r4, [r3, #12]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	f000 f9df 	bl	800be60 <xQueueGenericCreateStatic>
 800baa2:	4603      	mov	r3, r0
 800baa4:	e008      	b.n	800bab8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6818      	ldr	r0, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	4619      	mov	r1, r3
 800bab2:	f000 fa48 	bl	800bf46 <xQueueGenericCreate>
 800bab6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}

0800bac0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bacc:	2300      	movs	r3, #0
 800bace:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <osMessagePut+0x1e>
    ticks = 1;
 800bada:	2301      	movs	r3, #1
 800badc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bade:	f7ff ff4d 	bl	800b97c <inHandlerMode>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d018      	beq.n	800bb1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bae8:	f107 0210 	add.w	r2, r7, #16
 800baec:	f107 0108 	add.w	r1, r7, #8
 800baf0:	2300      	movs	r3, #0
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 fb80 	bl	800c1f8 <xQueueGenericSendFromISR>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d001      	beq.n	800bb02 <osMessagePut+0x42>
      return osErrorOS;
 800bafe:	23ff      	movs	r3, #255	; 0xff
 800bb00:	e018      	b.n	800bb34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d014      	beq.n	800bb32 <osMessagePut+0x72>
 800bb08:	4b0c      	ldr	r3, [pc, #48]	; (800bb3c <osMessagePut+0x7c>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	e00b      	b.n	800bb32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bb1a:	f107 0108 	add.w	r1, r7, #8
 800bb1e:	2300      	movs	r3, #0
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 fa6e 	bl	800c004 <xQueueGenericSend>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d001      	beq.n	800bb32 <osMessagePut+0x72>
      return osErrorOS;
 800bb2e:	23ff      	movs	r3, #255	; 0xff
 800bb30:	e000      	b.n	800bb34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	e000ed04 	.word	0xe000ed04

0800bb40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bb40:	b590      	push	{r4, r7, lr}
 800bb42:	b08b      	sub	sp, #44	; 0x2c
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bb50:	2300      	movs	r3, #0
 800bb52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bb5a:	2380      	movs	r3, #128	; 0x80
 800bb5c:	617b      	str	r3, [r7, #20]
    return event;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	461c      	mov	r4, r3
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bb6e:	e054      	b.n	800bc1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bb70:	2300      	movs	r3, #0
 800bb72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb7e:	d103      	bne.n	800bb88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
 800bb86:	e009      	b.n	800bb9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d006      	beq.n	800bb9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <osMessageGet+0x5c>
      ticks = 1;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bb9c:	f7ff feee 	bl	800b97c <inHandlerMode>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d01c      	beq.n	800bbe0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bba6:	f107 0220 	add.w	r2, r7, #32
 800bbaa:	f107 0314 	add.w	r3, r7, #20
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	68b8      	ldr	r0, [r7, #8]
 800bbb4:	f000 fc90 	bl	800c4d8 <xQueueReceiveFromISR>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d102      	bne.n	800bbc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bbbe:	2310      	movs	r3, #16
 800bbc0:	617b      	str	r3, [r7, #20]
 800bbc2:	e001      	b.n	800bbc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d01d      	beq.n	800bc0a <osMessageGet+0xca>
 800bbce:	4b15      	ldr	r3, [pc, #84]	; (800bc24 <osMessageGet+0xe4>)
 800bbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	e014      	b.n	800bc0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe8:	4619      	mov	r1, r3
 800bbea:	68b8      	ldr	r0, [r7, #8]
 800bbec:	f000 fb98 	bl	800c320 <xQueueReceive>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d102      	bne.n	800bbfc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bbf6:	2310      	movs	r3, #16
 800bbf8:	617b      	str	r3, [r7, #20]
 800bbfa:	e006      	b.n	800bc0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <osMessageGet+0xc6>
 800bc02:	2300      	movs	r3, #0
 800bc04:	e000      	b.n	800bc08 <osMessageGet+0xc8>
 800bc06:	2340      	movs	r3, #64	; 0x40
 800bc08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	461c      	mov	r4, r3
 800bc0e:	f107 0314 	add.w	r3, r7, #20
 800bc12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	372c      	adds	r7, #44	; 0x2c
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd90      	pop	{r4, r7, pc}
 800bc22:	bf00      	nop
 800bc24:	e000ed04 	.word	0xe000ed04

0800bc28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f103 0208 	add.w	r2, r3, #8
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f103 0208 	add.w	r2, r3, #8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f103 0208 	add.w	r2, r3, #8
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc82:	b480      	push	{r7}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	683a      	ldr	r2, [r7, #0]
 800bca6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	601a      	str	r2, [r3, #0]
}
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce0:	d103      	bne.n	800bcea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e00c      	b.n	800bd04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	3308      	adds	r3, #8
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e002      	b.n	800bcf8 <vListInsert+0x2e>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d2f6      	bcs.n	800bcf2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	601a      	str	r2, [r3, #0]
}
 800bd30:	bf00      	nop
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691b      	ldr	r3, [r3, #16]
 800bd48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6892      	ldr	r2, [r2, #8]
 800bd52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6852      	ldr	r2, [r2, #4]
 800bd5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d103      	bne.n	800bd70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	1e5a      	subs	r2, r3, #1
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	60bb      	str	r3, [r7, #8]
 800bdb6:	e7fe      	b.n	800bdb6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bdb8:	f001 fd38 	bl	800d82c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc4:	68f9      	ldr	r1, [r7, #12]
 800bdc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdc8:	fb01 f303 	mul.w	r3, r1, r3
 800bdcc:	441a      	add	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde8:	3b01      	subs	r3, #1
 800bdea:	68f9      	ldr	r1, [r7, #12]
 800bdec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdee:	fb01 f303 	mul.w	r3, r1, r3
 800bdf2:	441a      	add	r2, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	22ff      	movs	r2, #255	; 0xff
 800bdfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	22ff      	movs	r2, #255	; 0xff
 800be04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d114      	bne.n	800be38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d01a      	beq.n	800be4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3310      	adds	r3, #16
 800be1a:	4618      	mov	r0, r3
 800be1c:	f001 f91c 	bl	800d058 <xTaskRemoveFromEventList>
 800be20:	4603      	mov	r3, r0
 800be22:	2b00      	cmp	r3, #0
 800be24:	d012      	beq.n	800be4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be26:	4b0d      	ldr	r3, [pc, #52]	; (800be5c <xQueueGenericReset+0xcc>)
 800be28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	f3bf 8f4f 	dsb	sy
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	e009      	b.n	800be4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	3310      	adds	r3, #16
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7ff fef3 	bl	800bc28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3324      	adds	r3, #36	; 0x24
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff feee 	bl	800bc28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be4c:	f001 fd1c 	bl	800d888 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be50:	2301      	movs	r3, #1
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be60:	b580      	push	{r7, lr}
 800be62:	b08e      	sub	sp, #56	; 0x38
 800be64:	af02      	add	r7, sp, #8
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d109      	bne.n	800be88 <xQueueGenericCreateStatic+0x28>
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	62bb      	str	r3, [r7, #40]	; 0x28
 800be86:	e7fe      	b.n	800be86 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <xQueueGenericCreateStatic+0x42>
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	627b      	str	r3, [r7, #36]	; 0x24
 800bea0:	e7fe      	b.n	800bea0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d002      	beq.n	800beae <xQueueGenericCreateStatic+0x4e>
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <xQueueGenericCreateStatic+0x52>
 800beae:	2301      	movs	r3, #1
 800beb0:	e000      	b.n	800beb4 <xQueueGenericCreateStatic+0x54>
 800beb2:	2300      	movs	r3, #0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d109      	bne.n	800becc <xQueueGenericCreateStatic+0x6c>
 800beb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bebc:	f383 8811 	msr	BASEPRI, r3
 800bec0:	f3bf 8f6f 	isb	sy
 800bec4:	f3bf 8f4f 	dsb	sy
 800bec8:	623b      	str	r3, [r7, #32]
 800beca:	e7fe      	b.n	800beca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d102      	bne.n	800bed8 <xQueueGenericCreateStatic+0x78>
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <xQueueGenericCreateStatic+0x7c>
 800bed8:	2301      	movs	r3, #1
 800beda:	e000      	b.n	800bede <xQueueGenericCreateStatic+0x7e>
 800bedc:	2300      	movs	r3, #0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d109      	bne.n	800bef6 <xQueueGenericCreateStatic+0x96>
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	f383 8811 	msr	BASEPRI, r3
 800beea:	f3bf 8f6f 	isb	sy
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	61fb      	str	r3, [r7, #28]
 800bef4:	e7fe      	b.n	800bef4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bef6:	2348      	movs	r3, #72	; 0x48
 800bef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	2b48      	cmp	r3, #72	; 0x48
 800befe:	d009      	beq.n	800bf14 <xQueueGenericCreateStatic+0xb4>
 800bf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	61bb      	str	r3, [r7, #24]
 800bf12:	e7fe      	b.n	800bf12 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00d      	beq.n	800bf3c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	4613      	mov	r3, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f000 f844 	bl	800bfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3730      	adds	r7, #48	; 0x30
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b08a      	sub	sp, #40	; 0x28
 800bf4a:	af02      	add	r7, sp, #8
 800bf4c:	60f8      	str	r0, [r7, #12]
 800bf4e:	60b9      	str	r1, [r7, #8]
 800bf50:	4613      	mov	r3, r2
 800bf52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d109      	bne.n	800bf6e <xQueueGenericCreate+0x28>
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	f383 8811 	msr	BASEPRI, r3
 800bf62:	f3bf 8f6f 	isb	sy
 800bf66:	f3bf 8f4f 	dsb	sy
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	e7fe      	b.n	800bf6c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61fb      	str	r3, [r7, #28]
 800bf78:	e004      	b.n	800bf84 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	fb02 f303 	mul.w	r3, r2, r3
 800bf82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	3348      	adds	r3, #72	; 0x48
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f001 fd69 	bl	800da60 <pvPortMalloc>
 800bf8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d011      	beq.n	800bfba <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	3348      	adds	r3, #72	; 0x48
 800bf9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfa8:	79fa      	ldrb	r2, [r7, #7]
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	9300      	str	r3, [sp, #0]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	68b9      	ldr	r1, [r7, #8]
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 f805 	bl	800bfc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfba:	69bb      	ldr	r3, [r7, #24]
	}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	60f8      	str	r0, [r7, #12]
 800bfcc:	60b9      	str	r1, [r7, #8]
 800bfce:	607a      	str	r2, [r7, #4]
 800bfd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d103      	bne.n	800bfe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bff2:	2101      	movs	r1, #1
 800bff4:	69b8      	ldr	r0, [r7, #24]
 800bff6:	f7ff fecb 	bl	800bd90 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bffa:	bf00      	nop
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08e      	sub	sp, #56	; 0x38
 800c008:	af00      	add	r7, sp, #0
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c012:	2300      	movs	r3, #0
 800c014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d109      	bne.n	800c034 <xQueueGenericSend+0x30>
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	62bb      	str	r3, [r7, #40]	; 0x28
 800c032:	e7fe      	b.n	800c032 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d103      	bne.n	800c042 <xQueueGenericSend+0x3e>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d101      	bne.n	800c046 <xQueueGenericSend+0x42>
 800c042:	2301      	movs	r3, #1
 800c044:	e000      	b.n	800c048 <xQueueGenericSend+0x44>
 800c046:	2300      	movs	r3, #0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d109      	bne.n	800c060 <xQueueGenericSend+0x5c>
 800c04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c050:	f383 8811 	msr	BASEPRI, r3
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f3bf 8f4f 	dsb	sy
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
 800c05e:	e7fe      	b.n	800c05e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b02      	cmp	r3, #2
 800c064:	d103      	bne.n	800c06e <xQueueGenericSend+0x6a>
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d101      	bne.n	800c072 <xQueueGenericSend+0x6e>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <xQueueGenericSend+0x70>
 800c072:	2300      	movs	r3, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d109      	bne.n	800c08c <xQueueGenericSend+0x88>
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	623b      	str	r3, [r7, #32]
 800c08a:	e7fe      	b.n	800c08a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c08c:	f001 f99c 	bl	800d3c8 <xTaskGetSchedulerState>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <xQueueGenericSend+0x98>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <xQueueGenericSend+0x9c>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e000      	b.n	800c0a2 <xQueueGenericSend+0x9e>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d109      	bne.n	800c0ba <xQueueGenericSend+0xb6>
 800c0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	61fb      	str	r3, [r7, #28]
 800c0b8:	e7fe      	b.n	800c0b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ba:	f001 fbb7 	bl	800d82c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d302      	bcc.n	800c0d0 <xQueueGenericSend+0xcc>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d129      	bne.n	800c124 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	68b9      	ldr	r1, [r7, #8]
 800c0d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0d6:	f000 fa7c 	bl	800c5d2 <prvCopyDataToQueue>
 800c0da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d010      	beq.n	800c106 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	3324      	adds	r3, #36	; 0x24
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 ffb5 	bl	800d058 <xTaskRemoveFromEventList>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d013      	beq.n	800c11c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0f4:	4b3f      	ldr	r3, [pc, #252]	; (800c1f4 <xQueueGenericSend+0x1f0>)
 800c0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	e00a      	b.n	800c11c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d007      	beq.n	800c11c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c10c:	4b39      	ldr	r3, [pc, #228]	; (800c1f4 <xQueueGenericSend+0x1f0>)
 800c10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c11c:	f001 fbb4 	bl	800d888 <vPortExitCritical>
				return pdPASS;
 800c120:	2301      	movs	r3, #1
 800c122:	e063      	b.n	800c1ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d103      	bne.n	800c132 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c12a:	f001 fbad 	bl	800d888 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	e05c      	b.n	800c1ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c138:	f107 0314 	add.w	r3, r7, #20
 800c13c:	4618      	mov	r0, r3
 800c13e:	f000 ffed 	bl	800d11c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c142:	2301      	movs	r3, #1
 800c144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c146:	f001 fb9f 	bl	800d888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c14a:	f000 fd7f 	bl	800cc4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c14e:	f001 fb6d 	bl	800d82c <vPortEnterCritical>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c158:	b25b      	sxtb	r3, r3
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15e:	d103      	bne.n	800c168 <xQueueGenericSend+0x164>
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c16e:	b25b      	sxtb	r3, r3
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d103      	bne.n	800c17e <xQueueGenericSend+0x17a>
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c17e:	f001 fb83 	bl	800d888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c182:	1d3a      	adds	r2, r7, #4
 800c184:	f107 0314 	add.w	r3, r7, #20
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 ffdc 	bl	800d148 <xTaskCheckForTimeOut>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d124      	bne.n	800c1e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c198:	f000 fb13 	bl	800c7c2 <prvIsQueueFull>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d018      	beq.n	800c1d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	3310      	adds	r3, #16
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 ff30 	bl	800d010 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1b2:	f000 fa9e 	bl	800c6f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1b6:	f000 fd57 	bl	800cc68 <xTaskResumeAll>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f47f af7c 	bne.w	800c0ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <xQueueGenericSend+0x1f0>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	e772      	b.n	800c0ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1d6:	f000 fa8c 	bl	800c6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1da:	f000 fd45 	bl	800cc68 <xTaskResumeAll>
 800c1de:	e76c      	b.n	800c0ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1e2:	f000 fa86 	bl	800c6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1e6:	f000 fd3f 	bl	800cc68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3738      	adds	r7, #56	; 0x38
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	e000ed04 	.word	0xe000ed04

0800c1f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08e      	sub	sp, #56	; 0x38
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <xQueueGenericSendFromISR+0x2c>
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	627b      	str	r3, [r7, #36]	; 0x24
 800c222:	e7fe      	b.n	800c222 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d103      	bne.n	800c232 <xQueueGenericSendFromISR+0x3a>
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <xQueueGenericSendFromISR+0x3e>
 800c232:	2301      	movs	r3, #1
 800c234:	e000      	b.n	800c238 <xQueueGenericSendFromISR+0x40>
 800c236:	2300      	movs	r3, #0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d109      	bne.n	800c250 <xQueueGenericSendFromISR+0x58>
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	623b      	str	r3, [r7, #32]
 800c24e:	e7fe      	b.n	800c24e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	2b02      	cmp	r3, #2
 800c254:	d103      	bne.n	800c25e <xQueueGenericSendFromISR+0x66>
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <xQueueGenericSendFromISR+0x6a>
 800c25e:	2301      	movs	r3, #1
 800c260:	e000      	b.n	800c264 <xQueueGenericSendFromISR+0x6c>
 800c262:	2300      	movs	r3, #0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d109      	bne.n	800c27c <xQueueGenericSendFromISR+0x84>
 800c268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26c:	f383 8811 	msr	BASEPRI, r3
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	61fb      	str	r3, [r7, #28]
 800c27a:	e7fe      	b.n	800c27a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c27c:	f001 fbb2 	bl	800d9e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c280:	f3ef 8211 	mrs	r2, BASEPRI
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	61ba      	str	r2, [r7, #24]
 800c296:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c298:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c29a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <xQueueGenericSendFromISR+0xb6>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d12c      	bne.n	800c308 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	68b9      	ldr	r1, [r7, #8]
 800c2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2be:	f000 f988 	bl	800c5d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ca:	d112      	bne.n	800c2f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d016      	beq.n	800c302 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d6:	3324      	adds	r3, #36	; 0x24
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 febd 	bl	800d058 <xTaskRemoveFromEventList>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00e      	beq.n	800c302 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00b      	beq.n	800c302 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	e007      	b.n	800c302 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	b25a      	sxtb	r2, r3
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c302:	2301      	movs	r3, #1
 800c304:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c306:	e001      	b.n	800c30c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	637b      	str	r3, [r7, #52]	; 0x34
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3738      	adds	r7, #56	; 0x38
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08c      	sub	sp, #48	; 0x30
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c32c:	2300      	movs	r3, #0
 800c32e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	2b00      	cmp	r3, #0
 800c338:	d109      	bne.n	800c34e <xQueueReceive+0x2e>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	623b      	str	r3, [r7, #32]
 800c34c:	e7fe      	b.n	800c34c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d103      	bne.n	800c35c <xQueueReceive+0x3c>
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <xQueueReceive+0x40>
 800c35c:	2301      	movs	r3, #1
 800c35e:	e000      	b.n	800c362 <xQueueReceive+0x42>
 800c360:	2300      	movs	r3, #0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <xQueueReceive+0x5a>
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	61fb      	str	r3, [r7, #28]
 800c378:	e7fe      	b.n	800c378 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c37a:	f001 f825 	bl	800d3c8 <xTaskGetSchedulerState>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d102      	bne.n	800c38a <xQueueReceive+0x6a>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <xQueueReceive+0x6e>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e000      	b.n	800c390 <xQueueReceive+0x70>
 800c38e:	2300      	movs	r3, #0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d109      	bne.n	800c3a8 <xQueueReceive+0x88>
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	61bb      	str	r3, [r7, #24]
 800c3a6:	e7fe      	b.n	800c3a6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3a8:	f001 fa40 	bl	800d82c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01f      	beq.n	800c3f8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3bc:	f000 f973 	bl	800c6a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	1e5a      	subs	r2, r3, #1
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	691b      	ldr	r3, [r3, #16]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00f      	beq.n	800c3f0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	3310      	adds	r3, #16
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 fe3f 	bl	800d058 <xTaskRemoveFromEventList>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3e0:	4b3c      	ldr	r3, [pc, #240]	; (800c4d4 <xQueueReceive+0x1b4>)
 800c3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e6:	601a      	str	r2, [r3, #0]
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3f0:	f001 fa4a 	bl	800d888 <vPortExitCritical>
				return pdPASS;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e069      	b.n	800c4cc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d103      	bne.n	800c406 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c3fe:	f001 fa43 	bl	800d888 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c402:	2300      	movs	r3, #0
 800c404:	e062      	b.n	800c4cc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d106      	bne.n	800c41a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c40c:	f107 0310 	add.w	r3, r7, #16
 800c410:	4618      	mov	r0, r3
 800c412:	f000 fe83 	bl	800d11c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c416:	2301      	movs	r3, #1
 800c418:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c41a:	f001 fa35 	bl	800d888 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c41e:	f000 fc15 	bl	800cc4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c422:	f001 fa03 	bl	800d82c <vPortEnterCritical>
 800c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c42c:	b25b      	sxtb	r3, r3
 800c42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c432:	d103      	bne.n	800c43c <xQueueReceive+0x11c>
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c442:	b25b      	sxtb	r3, r3
 800c444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c448:	d103      	bne.n	800c452 <xQueueReceive+0x132>
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c452:	f001 fa19 	bl	800d888 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c456:	1d3a      	adds	r2, r7, #4
 800c458:	f107 0310 	add.w	r3, r7, #16
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fe72 	bl	800d148 <xTaskCheckForTimeOut>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d123      	bne.n	800c4b2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c46a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c46c:	f000 f993 	bl	800c796 <prvIsQueueEmpty>
 800c470:	4603      	mov	r3, r0
 800c472:	2b00      	cmp	r3, #0
 800c474:	d017      	beq.n	800c4a6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	3324      	adds	r3, #36	; 0x24
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	4611      	mov	r1, r2
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 fdc6 	bl	800d010 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c486:	f000 f934 	bl	800c6f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c48a:	f000 fbed 	bl	800cc68 <xTaskResumeAll>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d189      	bne.n	800c3a8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <xQueueReceive+0x1b4>)
 800c496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	e780      	b.n	800c3a8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4a8:	f000 f923 	bl	800c6f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4ac:	f000 fbdc 	bl	800cc68 <xTaskResumeAll>
 800c4b0:	e77a      	b.n	800c3a8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4b4:	f000 f91d 	bl	800c6f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4b8:	f000 fbd6 	bl	800cc68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4be:	f000 f96a 	bl	800c796 <prvIsQueueEmpty>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f43f af6f 	beq.w	800c3a8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3730      	adds	r7, #48	; 0x30
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	e000ed04 	.word	0xe000ed04

0800c4d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08e      	sub	sp, #56	; 0x38
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d109      	bne.n	800c502 <xQueueReceiveFromISR+0x2a>
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	623b      	str	r3, [r7, #32]
 800c500:	e7fe      	b.n	800c500 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <xQueueReceiveFromISR+0x38>
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d101      	bne.n	800c514 <xQueueReceiveFromISR+0x3c>
 800c510:	2301      	movs	r3, #1
 800c512:	e000      	b.n	800c516 <xQueueReceiveFromISR+0x3e>
 800c514:	2300      	movs	r3, #0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d109      	bne.n	800c52e <xQueueReceiveFromISR+0x56>
 800c51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	61fb      	str	r3, [r7, #28]
 800c52c:	e7fe      	b.n	800c52c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c52e:	f001 fa59 	bl	800d9e4 <vPortValidateInterruptPriority>
	__asm volatile
 800c532:	f3ef 8211 	mrs	r2, BASEPRI
 800c536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	61ba      	str	r2, [r7, #24]
 800c548:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c54a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c54c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c552:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	2b00      	cmp	r3, #0
 800c558:	d02f      	beq.n	800c5ba <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c564:	68b9      	ldr	r1, [r7, #8]
 800c566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c568:	f000 f89d 	bl	800c6a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	1e5a      	subs	r2, r3, #1
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c574:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57c:	d112      	bne.n	800c5a4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d016      	beq.n	800c5b4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	3310      	adds	r3, #16
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fd64 	bl	800d058 <xTaskRemoveFromEventList>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00e      	beq.n	800c5b4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00b      	beq.n	800c5b4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e007      	b.n	800c5b4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	b25a      	sxtb	r2, r3
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5b8:	e001      	b.n	800c5be <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3738      	adds	r7, #56	; 0x38
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5d2:	b580      	push	{r7, lr}
 800c5d4:	b086      	sub	sp, #24
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	60f8      	str	r0, [r7, #12]
 800c5da:	60b9      	str	r1, [r7, #8]
 800c5dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10d      	bne.n	800c60c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d14d      	bne.n	800c694 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 ff01 	bl	800d404 <xTaskPriorityDisinherit>
 800c602:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2200      	movs	r2, #0
 800c608:	609a      	str	r2, [r3, #8]
 800c60a:	e043      	b.n	800c694 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d119      	bne.n	800c646 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6858      	ldr	r0, [r3, #4]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61a:	461a      	mov	r2, r3
 800c61c:	68b9      	ldr	r1, [r7, #8]
 800c61e:	f001 ff3b 	bl	800e498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62a:	441a      	add	r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d32b      	bcc.n	800c694 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	605a      	str	r2, [r3, #4]
 800c644:	e026      	b.n	800c694 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	68d8      	ldr	r0, [r3, #12]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64e:	461a      	mov	r2, r3
 800c650:	68b9      	ldr	r1, [r7, #8]
 800c652:	f001 ff21 	bl	800e498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c65e:	425b      	negs	r3, r3
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	68da      	ldr	r2, [r3, #12]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d207      	bcs.n	800c682 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	689a      	ldr	r2, [r3, #8]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c67a:	425b      	negs	r3, r3
 800c67c:	441a      	add	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b02      	cmp	r3, #2
 800c686:	d105      	bne.n	800c694 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	3b01      	subs	r3, #1
 800c692:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c69c:	697b      	ldr	r3, [r7, #20]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d018      	beq.n	800c6ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68da      	ldr	r2, [r3, #12]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c0:	441a      	add	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68da      	ldr	r2, [r3, #12]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d303      	bcc.n	800c6da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	68d9      	ldr	r1, [r3, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	6838      	ldr	r0, [r7, #0]
 800c6e6:	f001 fed7 	bl	800e498 <memcpy>
	}
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c6fa:	f001 f897 	bl	800d82c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c704:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c706:	e011      	b.n	800c72c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d012      	beq.n	800c736 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	3324      	adds	r3, #36	; 0x24
 800c714:	4618      	mov	r0, r3
 800c716:	f000 fc9f 	bl	800d058 <xTaskRemoveFromEventList>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c720:	f000 fd72 	bl	800d208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	3b01      	subs	r3, #1
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c72c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c730:	2b00      	cmp	r3, #0
 800c732:	dce9      	bgt.n	800c708 <prvUnlockQueue+0x16>
 800c734:	e000      	b.n	800c738 <prvUnlockQueue+0x46>
					break;
 800c736:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	22ff      	movs	r2, #255	; 0xff
 800c73c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c740:	f001 f8a2 	bl	800d888 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c744:	f001 f872 	bl	800d82c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c74e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c750:	e011      	b.n	800c776 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d012      	beq.n	800c780 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3310      	adds	r3, #16
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fc7a 	bl	800d058 <xTaskRemoveFromEventList>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c76a:	f000 fd4d 	bl	800d208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	3b01      	subs	r3, #1
 800c772:	b2db      	uxtb	r3, r3
 800c774:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	dce9      	bgt.n	800c752 <prvUnlockQueue+0x60>
 800c77e:	e000      	b.n	800c782 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c780:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c78a:	f001 f87d 	bl	800d888 <vPortExitCritical>
}
 800c78e:	bf00      	nop
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c79e:	f001 f845 	bl	800d82c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	60fb      	str	r3, [r7, #12]
 800c7ae:	e001      	b.n	800c7b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7b4:	f001 f868 	bl	800d888 <vPortExitCritical>

	return xReturn;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7ca:	f001 f82f 	bl	800d82c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d102      	bne.n	800c7e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	60fb      	str	r3, [r7, #12]
 800c7de:	e001      	b.n	800c7e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c7e4:	f001 f850 	bl	800d888 <vPortExitCritical>

	return xReturn;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b08e      	sub	sp, #56	; 0x38
 800c7f6:	af04      	add	r7, sp, #16
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
 800c7fe:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <xTaskCreateStatic+0x28>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	623b      	str	r3, [r7, #32]
 800c818:	e7fe      	b.n	800c818 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d109      	bne.n	800c834 <xTaskCreateStatic+0x42>
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	61fb      	str	r3, [r7, #28]
 800c832:	e7fe      	b.n	800c832 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c834:	2358      	movs	r3, #88	; 0x58
 800c836:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b58      	cmp	r3, #88	; 0x58
 800c83c:	d009      	beq.n	800c852 <xTaskCreateStatic+0x60>
 800c83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	61bb      	str	r3, [r7, #24]
 800c850:	e7fe      	b.n	800c850 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01e      	beq.n	800c898 <xTaskCreateStatic+0xa6>
 800c85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01b      	beq.n	800c898 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	2202      	movs	r2, #2
 800c86e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c872:	2300      	movs	r3, #0
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c878:	9302      	str	r3, [sp, #8]
 800c87a:	f107 0314 	add.w	r3, r7, #20
 800c87e:	9301      	str	r3, [sp, #4]
 800c880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	68b9      	ldr	r1, [r7, #8]
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f000 f850 	bl	800c930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c892:	f000 f8df 	bl	800ca54 <prvAddNewTaskToReadyList>
 800c896:	e001      	b.n	800c89c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c898:	2300      	movs	r3, #0
 800c89a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c89c:	697b      	ldr	r3, [r7, #20]
	}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3728      	adds	r7, #40	; 0x28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b08c      	sub	sp, #48	; 0x30
 800c8aa:	af04      	add	r7, sp, #16
 800c8ac:	60f8      	str	r0, [r7, #12]
 800c8ae:	60b9      	str	r1, [r7, #8]
 800c8b0:	603b      	str	r3, [r7, #0]
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8b6:	88fb      	ldrh	r3, [r7, #6]
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f001 f8d0 	bl	800da60 <pvPortMalloc>
 800c8c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00e      	beq.n	800c8e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8c8:	2058      	movs	r0, #88	; 0x58
 800c8ca:	f001 f8c9 	bl	800da60 <pvPortMalloc>
 800c8ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d003      	beq.n	800c8de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	631a      	str	r2, [r3, #48]	; 0x30
 800c8dc:	e005      	b.n	800c8ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8de:	6978      	ldr	r0, [r7, #20]
 800c8e0:	f001 f984 	bl	800dbec <vPortFree>
 800c8e4:	e001      	b.n	800c8ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d017      	beq.n	800c920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8f8:	88fa      	ldrh	r2, [r7, #6]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9303      	str	r3, [sp, #12]
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	9302      	str	r3, [sp, #8]
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	9301      	str	r3, [sp, #4]
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f000 f80e 	bl	800c930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c914:	69f8      	ldr	r0, [r7, #28]
 800c916:	f000 f89d 	bl	800ca54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c91a:	2301      	movs	r3, #1
 800c91c:	61bb      	str	r3, [r7, #24]
 800c91e:	e002      	b.n	800c926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c920:	f04f 33ff 	mov.w	r3, #4294967295
 800c924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c926:	69bb      	ldr	r3, [r7, #24]
	}
 800c928:	4618      	mov	r0, r3
 800c92a:	3720      	adds	r7, #32
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	607a      	str	r2, [r7, #4]
 800c93c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	461a      	mov	r2, r3
 800c948:	21a5      	movs	r1, #165	; 0xa5
 800c94a:	f001 fdb0 	bl	800e4ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c958:	3b01      	subs	r3, #1
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f023 0307 	bic.w	r3, r3, #7
 800c966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	f003 0307 	and.w	r3, r3, #7
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d009      	beq.n	800c986 <prvInitialiseNewTask+0x56>
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	e7fe      	b.n	800c984 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d01f      	beq.n	800c9cc <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c98c:	2300      	movs	r3, #0
 800c98e:	61fb      	str	r3, [r7, #28]
 800c990:	e012      	b.n	800c9b8 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	4413      	add	r3, r2
 800c998:	7819      	ldrb	r1, [r3, #0]
 800c99a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	4413      	add	r3, r2
 800c9a0:	3334      	adds	r3, #52	; 0x34
 800c9a2:	460a      	mov	r2, r1
 800c9a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	4413      	add	r3, r2
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d006      	beq.n	800c9c0 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	61fb      	str	r3, [r7, #28]
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	2b0f      	cmp	r3, #15
 800c9bc:	d9e9      	bls.n	800c992 <prvInitialiseNewTask+0x62>
 800c9be:	e000      	b.n	800c9c2 <prvInitialiseNewTask+0x92>
			{
				break;
 800c9c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9ca:	e003      	b.n	800c9d4 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	2b06      	cmp	r3, #6
 800c9d8:	d901      	bls.n	800c9de <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9da:	2306      	movs	r3, #6
 800c9dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9e8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7ff f937 	bl	800bc68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fc:	3318      	adds	r3, #24
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff f932 	bl	800bc68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	f1c3 0207 	rsb	r2, r3, #7
 800ca10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca22:	2200      	movs	r2, #0
 800ca24:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca2e:	683a      	ldr	r2, [r7, #0]
 800ca30:	68f9      	ldr	r1, [r7, #12]
 800ca32:	69b8      	ldr	r0, [r7, #24]
 800ca34:	f000 fdd0 	bl	800d5d8 <pxPortInitialiseStack>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca4a:	bf00      	nop
 800ca4c:	3720      	adds	r7, #32
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
	...

0800ca54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca5c:	f000 fee6 	bl	800d82c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca60:	4b2a      	ldr	r3, [pc, #168]	; (800cb0c <prvAddNewTaskToReadyList+0xb8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	4a29      	ldr	r2, [pc, #164]	; (800cb0c <prvAddNewTaskToReadyList+0xb8>)
 800ca68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca6a:	4b29      	ldr	r3, [pc, #164]	; (800cb10 <prvAddNewTaskToReadyList+0xbc>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d109      	bne.n	800ca86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca72:	4a27      	ldr	r2, [pc, #156]	; (800cb10 <prvAddNewTaskToReadyList+0xbc>)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca78:	4b24      	ldr	r3, [pc, #144]	; (800cb0c <prvAddNewTaskToReadyList+0xb8>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d110      	bne.n	800caa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca80:	f000 fbe8 	bl	800d254 <prvInitialiseTaskLists>
 800ca84:	e00d      	b.n	800caa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca86:	4b23      	ldr	r3, [pc, #140]	; (800cb14 <prvAddNewTaskToReadyList+0xc0>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d109      	bne.n	800caa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca8e:	4b20      	ldr	r3, [pc, #128]	; (800cb10 <prvAddNewTaskToReadyList+0xbc>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d802      	bhi.n	800caa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca9c:	4a1c      	ldr	r2, [pc, #112]	; (800cb10 <prvAddNewTaskToReadyList+0xbc>)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800caa2:	4b1d      	ldr	r3, [pc, #116]	; (800cb18 <prvAddNewTaskToReadyList+0xc4>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3301      	adds	r3, #1
 800caa8:	4a1b      	ldr	r2, [pc, #108]	; (800cb18 <prvAddNewTaskToReadyList+0xc4>)
 800caaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	2201      	movs	r2, #1
 800cab2:	409a      	lsls	r2, r3
 800cab4:	4b19      	ldr	r3, [pc, #100]	; (800cb1c <prvAddNewTaskToReadyList+0xc8>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4313      	orrs	r3, r2
 800caba:	4a18      	ldr	r2, [pc, #96]	; (800cb1c <prvAddNewTaskToReadyList+0xc8>)
 800cabc:	6013      	str	r3, [r2, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	4a15      	ldr	r2, [pc, #84]	; (800cb20 <prvAddNewTaskToReadyList+0xcc>)
 800cacc:	441a      	add	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	3304      	adds	r3, #4
 800cad2:	4619      	mov	r1, r3
 800cad4:	4610      	mov	r0, r2
 800cad6:	f7ff f8d4 	bl	800bc82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cada:	f000 fed5 	bl	800d888 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cade:	4b0d      	ldr	r3, [pc, #52]	; (800cb14 <prvAddNewTaskToReadyList+0xc0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00e      	beq.n	800cb04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cae6:	4b0a      	ldr	r3, [pc, #40]	; (800cb10 <prvAddNewTaskToReadyList+0xbc>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d207      	bcs.n	800cb04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800caf4:	4b0b      	ldr	r3, [pc, #44]	; (800cb24 <prvAddNewTaskToReadyList+0xd0>)
 800caf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	f3bf 8f4f 	dsb	sy
 800cb00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb04:	bf00      	nop
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	20000604 	.word	0x20000604
 800cb10:	20000504 	.word	0x20000504
 800cb14:	20000610 	.word	0x20000610
 800cb18:	20000620 	.word	0x20000620
 800cb1c:	2000060c 	.word	0x2000060c
 800cb20:	20000508 	.word	0x20000508
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d016      	beq.n	800cb68 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <vTaskDelay+0x60>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d009      	beq.n	800cb56 <vTaskDelay+0x2e>
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	60bb      	str	r3, [r7, #8]
 800cb54:	e7fe      	b.n	800cb54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800cb56:	f000 f879 	bl	800cc4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fcd5 	bl	800d50c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb62:	f000 f881 	bl	800cc68 <xTaskResumeAll>
 800cb66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d107      	bne.n	800cb7e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800cb6e:	4b07      	ldr	r3, [pc, #28]	; (800cb8c <vTaskDelay+0x64>)
 800cb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb7e:	bf00      	nop
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	2000062c 	.word	0x2000062c
 800cb8c:	e000ed04 	.word	0xe000ed04

0800cb90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b08a      	sub	sp, #40	; 0x28
 800cb94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb9e:	463a      	mov	r2, r7
 800cba0:	1d39      	adds	r1, r7, #4
 800cba2:	f107 0308 	add.w	r3, r7, #8
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f3 fe38 	bl	800081c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cbac:	6839      	ldr	r1, [r7, #0]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	9202      	str	r2, [sp, #8]
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	460a      	mov	r2, r1
 800cbbe:	491d      	ldr	r1, [pc, #116]	; (800cc34 <vTaskStartScheduler+0xa4>)
 800cbc0:	481d      	ldr	r0, [pc, #116]	; (800cc38 <vTaskStartScheduler+0xa8>)
 800cbc2:	f7ff fe16 	bl	800c7f2 <xTaskCreateStatic>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	4b1c      	ldr	r3, [pc, #112]	; (800cc3c <vTaskStartScheduler+0xac>)
 800cbca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cbcc:	4b1b      	ldr	r3, [pc, #108]	; (800cc3c <vTaskStartScheduler+0xac>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	617b      	str	r3, [r7, #20]
 800cbd8:	e001      	b.n	800cbde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d115      	bne.n	800cc10 <vTaskStartScheduler+0x80>
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbf6:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <vTaskStartScheduler+0xb0>)
 800cbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbfe:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <vTaskStartScheduler+0xb4>)
 800cc00:	2201      	movs	r2, #1
 800cc02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc04:	4b10      	ldr	r3, [pc, #64]	; (800cc48 <vTaskStartScheduler+0xb8>)
 800cc06:	2200      	movs	r2, #0
 800cc08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc0a:	f000 fd71 	bl	800d6f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc0e:	e00d      	b.n	800cc2c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc16:	d109      	bne.n	800cc2c <vTaskStartScheduler+0x9c>
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	60fb      	str	r3, [r7, #12]
 800cc2a:	e7fe      	b.n	800cc2a <vTaskStartScheduler+0x9a>
}
 800cc2c:	bf00      	nop
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	0800e6b0 	.word	0x0800e6b0
 800cc38:	0800d221 	.word	0x0800d221
 800cc3c:	20000628 	.word	0x20000628
 800cc40:	20000624 	.word	0x20000624
 800cc44:	20000610 	.word	0x20000610
 800cc48:	20000608 	.word	0x20000608

0800cc4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cc50:	4b04      	ldr	r3, [pc, #16]	; (800cc64 <vTaskSuspendAll+0x18>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3301      	adds	r3, #1
 800cc56:	4a03      	ldr	r2, [pc, #12]	; (800cc64 <vTaskSuspendAll+0x18>)
 800cc58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cc5a:	bf00      	nop
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr
 800cc64:	2000062c 	.word	0x2000062c

0800cc68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc76:	4b41      	ldr	r3, [pc, #260]	; (800cd7c <xTaskResumeAll+0x114>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d109      	bne.n	800cc92 <xTaskResumeAll+0x2a>
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	e7fe      	b.n	800cc90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc92:	f000 fdcb 	bl	800d82c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc96:	4b39      	ldr	r3, [pc, #228]	; (800cd7c <xTaskResumeAll+0x114>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	4a37      	ldr	r2, [pc, #220]	; (800cd7c <xTaskResumeAll+0x114>)
 800cc9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cca0:	4b36      	ldr	r3, [pc, #216]	; (800cd7c <xTaskResumeAll+0x114>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d161      	bne.n	800cd6c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cca8:	4b35      	ldr	r3, [pc, #212]	; (800cd80 <xTaskResumeAll+0x118>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d05d      	beq.n	800cd6c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccb0:	e02e      	b.n	800cd10 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccb2:	4b34      	ldr	r3, [pc, #208]	; (800cd84 <xTaskResumeAll+0x11c>)
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3318      	adds	r3, #24
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7ff f83c 	bl	800bd3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7ff f837 	bl	800bd3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	409a      	lsls	r2, r3
 800ccd6:	4b2c      	ldr	r3, [pc, #176]	; (800cd88 <xTaskResumeAll+0x120>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	4a2a      	ldr	r2, [pc, #168]	; (800cd88 <xTaskResumeAll+0x120>)
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce4:	4613      	mov	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4a27      	ldr	r2, [pc, #156]	; (800cd8c <xTaskResumeAll+0x124>)
 800ccee:	441a      	add	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	4610      	mov	r0, r2
 800ccf8:	f7fe ffc3 	bl	800bc82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd00:	4b23      	ldr	r3, [pc, #140]	; (800cd90 <xTaskResumeAll+0x128>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d302      	bcc.n	800cd10 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cd0a:	4b22      	ldr	r3, [pc, #136]	; (800cd94 <xTaskResumeAll+0x12c>)
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd10:	4b1c      	ldr	r3, [pc, #112]	; (800cd84 <xTaskResumeAll+0x11c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1cc      	bne.n	800ccb2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd1e:	f000 fb33 	bl	800d388 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cd22:	4b1d      	ldr	r3, [pc, #116]	; (800cd98 <xTaskResumeAll+0x130>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d010      	beq.n	800cd50 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd2e:	f000 f837 	bl	800cda0 <xTaskIncrementTick>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cd38:	4b16      	ldr	r3, [pc, #88]	; (800cd94 <xTaskResumeAll+0x12c>)
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1f1      	bne.n	800cd2e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cd4a:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <xTaskResumeAll+0x130>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd50:	4b10      	ldr	r3, [pc, #64]	; (800cd94 <xTaskResumeAll+0x12c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d009      	beq.n	800cd6c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd5c:	4b0f      	ldr	r3, [pc, #60]	; (800cd9c <xTaskResumeAll+0x134>)
 800cd5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd6c:	f000 fd8c 	bl	800d888 <vPortExitCritical>

	return xAlreadyYielded;
 800cd70:	68bb      	ldr	r3, [r7, #8]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	2000062c 	.word	0x2000062c
 800cd80:	20000604 	.word	0x20000604
 800cd84:	200005c4 	.word	0x200005c4
 800cd88:	2000060c 	.word	0x2000060c
 800cd8c:	20000508 	.word	0x20000508
 800cd90:	20000504 	.word	0x20000504
 800cd94:	20000618 	.word	0x20000618
 800cd98:	20000614 	.word	0x20000614
 800cd9c:	e000ed04 	.word	0xe000ed04

0800cda0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b086      	sub	sp, #24
 800cda4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cda6:	2300      	movs	r3, #0
 800cda8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdaa:	4b4e      	ldr	r3, [pc, #312]	; (800cee4 <xTaskIncrementTick+0x144>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f040 8087 	bne.w	800cec2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cdb4:	4b4c      	ldr	r3, [pc, #304]	; (800cee8 <xTaskIncrementTick+0x148>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cdbc:	4a4a      	ldr	r2, [pc, #296]	; (800cee8 <xTaskIncrementTick+0x148>)
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d11f      	bne.n	800ce08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cdc8:	4b48      	ldr	r3, [pc, #288]	; (800ceec <xTaskIncrementTick+0x14c>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d009      	beq.n	800cde6 <xTaskIncrementTick+0x46>
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	603b      	str	r3, [r7, #0]
 800cde4:	e7fe      	b.n	800cde4 <xTaskIncrementTick+0x44>
 800cde6:	4b41      	ldr	r3, [pc, #260]	; (800ceec <xTaskIncrementTick+0x14c>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
 800cdec:	4b40      	ldr	r3, [pc, #256]	; (800cef0 <xTaskIncrementTick+0x150>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a3e      	ldr	r2, [pc, #248]	; (800ceec <xTaskIncrementTick+0x14c>)
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	4a3e      	ldr	r2, [pc, #248]	; (800cef0 <xTaskIncrementTick+0x150>)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	4b3e      	ldr	r3, [pc, #248]	; (800cef4 <xTaskIncrementTick+0x154>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	4a3c      	ldr	r2, [pc, #240]	; (800cef4 <xTaskIncrementTick+0x154>)
 800ce02:	6013      	str	r3, [r2, #0]
 800ce04:	f000 fac0 	bl	800d388 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce08:	4b3b      	ldr	r3, [pc, #236]	; (800cef8 <xTaskIncrementTick+0x158>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	693a      	ldr	r2, [r7, #16]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d348      	bcc.n	800cea4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce12:	4b36      	ldr	r3, [pc, #216]	; (800ceec <xTaskIncrementTick+0x14c>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d104      	bne.n	800ce26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce1c:	4b36      	ldr	r3, [pc, #216]	; (800cef8 <xTaskIncrementTick+0x158>)
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce22:	601a      	str	r2, [r3, #0]
					break;
 800ce24:	e03e      	b.n	800cea4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce26:	4b31      	ldr	r3, [pc, #196]	; (800ceec <xTaskIncrementTick+0x14c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce36:	693a      	ldr	r2, [r7, #16]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d203      	bcs.n	800ce46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce3e:	4a2e      	ldr	r2, [pc, #184]	; (800cef8 <xTaskIncrementTick+0x158>)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce44:	e02e      	b.n	800cea4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	3304      	adds	r3, #4
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fe ff76 	bl	800bd3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d004      	beq.n	800ce62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	3318      	adds	r3, #24
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe ff6d 	bl	800bd3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce66:	2201      	movs	r2, #1
 800ce68:	409a      	lsls	r2, r3
 800ce6a:	4b24      	ldr	r3, [pc, #144]	; (800cefc <xTaskIncrementTick+0x15c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	4a22      	ldr	r2, [pc, #136]	; (800cefc <xTaskIncrementTick+0x15c>)
 800ce72:	6013      	str	r3, [r2, #0]
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce78:	4613      	mov	r3, r2
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	4413      	add	r3, r2
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4a1f      	ldr	r2, [pc, #124]	; (800cf00 <xTaskIncrementTick+0x160>)
 800ce82:	441a      	add	r2, r3
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	3304      	adds	r3, #4
 800ce88:	4619      	mov	r1, r3
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	f7fe fef9 	bl	800bc82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce94:	4b1b      	ldr	r3, [pc, #108]	; (800cf04 <xTaskIncrementTick+0x164>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d3b9      	bcc.n	800ce12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cea2:	e7b6      	b.n	800ce12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cea4:	4b17      	ldr	r3, [pc, #92]	; (800cf04 <xTaskIncrementTick+0x164>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceaa:	4915      	ldr	r1, [pc, #84]	; (800cf00 <xTaskIncrementTick+0x160>)
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	440b      	add	r3, r1
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d907      	bls.n	800cecc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800cebc:	2301      	movs	r3, #1
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e004      	b.n	800cecc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cec2:	4b11      	ldr	r3, [pc, #68]	; (800cf08 <xTaskIncrementTick+0x168>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	4a0f      	ldr	r2, [pc, #60]	; (800cf08 <xTaskIncrementTick+0x168>)
 800ceca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cecc:	4b0f      	ldr	r3, [pc, #60]	; (800cf0c <xTaskIncrementTick+0x16c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800ced4:	2301      	movs	r3, #1
 800ced6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ced8:	697b      	ldr	r3, [r7, #20]
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}
 800cee2:	bf00      	nop
 800cee4:	2000062c 	.word	0x2000062c
 800cee8:	20000608 	.word	0x20000608
 800ceec:	200005bc 	.word	0x200005bc
 800cef0:	200005c0 	.word	0x200005c0
 800cef4:	2000061c 	.word	0x2000061c
 800cef8:	20000624 	.word	0x20000624
 800cefc:	2000060c 	.word	0x2000060c
 800cf00:	20000508 	.word	0x20000508
 800cf04:	20000504 	.word	0x20000504
 800cf08:	20000614 	.word	0x20000614
 800cf0c:	20000618 	.word	0x20000618

0800cf10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf16:	4b39      	ldr	r3, [pc, #228]	; (800cffc <vTaskSwitchContext+0xec>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf1e:	4b38      	ldr	r3, [pc, #224]	; (800d000 <vTaskSwitchContext+0xf0>)
 800cf20:	2201      	movs	r2, #1
 800cf22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf24:	e065      	b.n	800cff2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800cf26:	4b36      	ldr	r3, [pc, #216]	; (800d000 <vTaskSwitchContext+0xf0>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cf2c:	4b35      	ldr	r3, [pc, #212]	; (800d004 <vTaskSwitchContext+0xf4>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf32:	61fb      	str	r3, [r7, #28]
 800cf34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cf38:	61bb      	str	r3, [r7, #24]
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d111      	bne.n	800cf68 <vTaskSwitchContext+0x58>
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	3304      	adds	r3, #4
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d10b      	bne.n	800cf68 <vTaskSwitchContext+0x58>
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	3308      	adds	r3, #8
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d105      	bne.n	800cf68 <vTaskSwitchContext+0x58>
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	330c      	adds	r3, #12
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69ba      	ldr	r2, [r7, #24]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d008      	beq.n	800cf7a <vTaskSwitchContext+0x6a>
 800cf68:	4b26      	ldr	r3, [pc, #152]	; (800d004 <vTaskSwitchContext+0xf4>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	4b25      	ldr	r3, [pc, #148]	; (800d004 <vTaskSwitchContext+0xf4>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3334      	adds	r3, #52	; 0x34
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7f3 fc3e 	bl	80007f6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf7a:	4b23      	ldr	r3, [pc, #140]	; (800d008 <vTaskSwitchContext+0xf8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	fab3 f383 	clz	r3, r3
 800cf86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	f1c3 031f 	rsb	r3, r3, #31
 800cf8e:	617b      	str	r3, [r7, #20]
 800cf90:	491e      	ldr	r1, [pc, #120]	; (800d00c <vTaskSwitchContext+0xfc>)
 800cf92:	697a      	ldr	r2, [r7, #20]
 800cf94:	4613      	mov	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	440b      	add	r3, r1
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d109      	bne.n	800cfb8 <vTaskSwitchContext+0xa8>
	__asm volatile
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	f383 8811 	msr	BASEPRI, r3
 800cfac:	f3bf 8f6f 	isb	sy
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	607b      	str	r3, [r7, #4]
 800cfb6:	e7fe      	b.n	800cfb6 <vTaskSwitchContext+0xa6>
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4413      	add	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4a12      	ldr	r2, [pc, #72]	; (800d00c <vTaskSwitchContext+0xfc>)
 800cfc4:	4413      	add	r3, r2
 800cfc6:	613b      	str	r3, [r7, #16]
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	605a      	str	r2, [r3, #4]
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	685a      	ldr	r2, [r3, #4]
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	3308      	adds	r3, #8
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d104      	bne.n	800cfe8 <vTaskSwitchContext+0xd8>
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	605a      	str	r2, [r3, #4]
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	4a05      	ldr	r2, [pc, #20]	; (800d004 <vTaskSwitchContext+0xf4>)
 800cff0:	6013      	str	r3, [r2, #0]
}
 800cff2:	bf00      	nop
 800cff4:	3720      	adds	r7, #32
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	2000062c 	.word	0x2000062c
 800d000:	20000618 	.word	0x20000618
 800d004:	20000504 	.word	0x20000504
 800d008:	2000060c 	.word	0x2000060c
 800d00c:	20000508 	.word	0x20000508

0800d010 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d109      	bne.n	800d034 <vTaskPlaceOnEventList+0x24>
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e7fe      	b.n	800d032 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d034:	4b07      	ldr	r3, [pc, #28]	; (800d054 <vTaskPlaceOnEventList+0x44>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	3318      	adds	r3, #24
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f7fe fe44 	bl	800bcca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d042:	2101      	movs	r1, #1
 800d044:	6838      	ldr	r0, [r7, #0]
 800d046:	f000 fa61 	bl	800d50c <prvAddCurrentTaskToDelayedList>
}
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20000504 	.word	0x20000504

0800d058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b086      	sub	sp, #24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d109      	bne.n	800d082 <xTaskRemoveFromEventList+0x2a>
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	e7fe      	b.n	800d080 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	3318      	adds	r3, #24
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe fe58 	bl	800bd3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d08c:	4b1d      	ldr	r3, [pc, #116]	; (800d104 <xTaskRemoveFromEventList+0xac>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d11c      	bne.n	800d0ce <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	3304      	adds	r3, #4
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fe4f 	bl	800bd3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	409a      	lsls	r2, r3
 800d0a6:	4b18      	ldr	r3, [pc, #96]	; (800d108 <xTaskRemoveFromEventList+0xb0>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	4a16      	ldr	r2, [pc, #88]	; (800d108 <xTaskRemoveFromEventList+0xb0>)
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	009b      	lsls	r3, r3, #2
 800d0bc:	4a13      	ldr	r2, [pc, #76]	; (800d10c <xTaskRemoveFromEventList+0xb4>)
 800d0be:	441a      	add	r2, r3
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	f7fe fddb 	bl	800bc82 <vListInsertEnd>
 800d0cc:	e005      	b.n	800d0da <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	3318      	adds	r3, #24
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	480e      	ldr	r0, [pc, #56]	; (800d110 <xTaskRemoveFromEventList+0xb8>)
 800d0d6:	f7fe fdd4 	bl	800bc82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <xTaskRemoveFromEventList+0xbc>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d905      	bls.n	800d0f4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d0ec:	4b0a      	ldr	r3, [pc, #40]	; (800d118 <xTaskRemoveFromEventList+0xc0>)
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]
 800d0f2:	e001      	b.n	800d0f8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d0f8:	697b      	ldr	r3, [r7, #20]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	2000062c 	.word	0x2000062c
 800d108:	2000060c 	.word	0x2000060c
 800d10c:	20000508 	.word	0x20000508
 800d110:	200005c4 	.word	0x200005c4
 800d114:	20000504 	.word	0x20000504
 800d118:	20000618 	.word	0x20000618

0800d11c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d124:	4b06      	ldr	r3, [pc, #24]	; (800d140 <vTaskInternalSetTimeOutState+0x24>)
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <vTaskInternalSetTimeOutState+0x28>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	605a      	str	r2, [r3, #4]
}
 800d134:	bf00      	nop
 800d136:	370c      	adds	r7, #12
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr
 800d140:	2000061c 	.word	0x2000061c
 800d144:	20000608 	.word	0x20000608

0800d148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d109      	bne.n	800d16c <xTaskCheckForTimeOut+0x24>
 800d158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15c:	f383 8811 	msr	BASEPRI, r3
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	f3bf 8f4f 	dsb	sy
 800d168:	613b      	str	r3, [r7, #16]
 800d16a:	e7fe      	b.n	800d16a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d109      	bne.n	800d186 <xTaskCheckForTimeOut+0x3e>
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	60fb      	str	r3, [r7, #12]
 800d184:	e7fe      	b.n	800d184 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d186:	f000 fb51 	bl	800d82c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d18a:	4b1d      	ldr	r3, [pc, #116]	; (800d200 <xTaskCheckForTimeOut+0xb8>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a2:	d102      	bne.n	800d1aa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	61fb      	str	r3, [r7, #28]
 800d1a8:	e023      	b.n	800d1f2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	4b15      	ldr	r3, [pc, #84]	; (800d204 <xTaskCheckForTimeOut+0xbc>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d007      	beq.n	800d1c6 <xTaskCheckForTimeOut+0x7e>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	69ba      	ldr	r2, [r7, #24]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d302      	bcc.n	800d1c6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	61fb      	str	r3, [r7, #28]
 800d1c4:	e015      	b.n	800d1f2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	697a      	ldr	r2, [r7, #20]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d20b      	bcs.n	800d1e8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	1ad2      	subs	r2, r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7ff ff9d 	bl	800d11c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	61fb      	str	r3, [r7, #28]
 800d1e6:	e004      	b.n	800d1f2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d1f2:	f000 fb49 	bl	800d888 <vPortExitCritical>

	return xReturn;
 800d1f6:	69fb      	ldr	r3, [r7, #28]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3720      	adds	r7, #32
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	20000608 	.word	0x20000608
 800d204:	2000061c 	.word	0x2000061c

0800d208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d20c:	4b03      	ldr	r3, [pc, #12]	; (800d21c <vTaskMissedYield+0x14>)
 800d20e:	2201      	movs	r2, #1
 800d210:	601a      	str	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	20000618 	.word	0x20000618

0800d220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d228:	f000 f854 	bl	800d2d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d22c:	4b07      	ldr	r3, [pc, #28]	; (800d24c <prvIdleTask+0x2c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d907      	bls.n	800d244 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d234:	4b06      	ldr	r3, [pc, #24]	; (800d250 <prvIdleTask+0x30>)
 800d236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d244:	f7f3 fad0 	bl	80007e8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d248:	e7ee      	b.n	800d228 <prvIdleTask+0x8>
 800d24a:	bf00      	nop
 800d24c:	20000508 	.word	0x20000508
 800d250:	e000ed04 	.word	0xe000ed04

0800d254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d25a:	2300      	movs	r3, #0
 800d25c:	607b      	str	r3, [r7, #4]
 800d25e:	e00c      	b.n	800d27a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	4613      	mov	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4a12      	ldr	r2, [pc, #72]	; (800d2b4 <prvInitialiseTaskLists+0x60>)
 800d26c:	4413      	add	r3, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fcda 	bl	800bc28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3301      	adds	r3, #1
 800d278:	607b      	str	r3, [r7, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b06      	cmp	r3, #6
 800d27e:	d9ef      	bls.n	800d260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d280:	480d      	ldr	r0, [pc, #52]	; (800d2b8 <prvInitialiseTaskLists+0x64>)
 800d282:	f7fe fcd1 	bl	800bc28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d286:	480d      	ldr	r0, [pc, #52]	; (800d2bc <prvInitialiseTaskLists+0x68>)
 800d288:	f7fe fcce 	bl	800bc28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d28c:	480c      	ldr	r0, [pc, #48]	; (800d2c0 <prvInitialiseTaskLists+0x6c>)
 800d28e:	f7fe fccb 	bl	800bc28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d292:	480c      	ldr	r0, [pc, #48]	; (800d2c4 <prvInitialiseTaskLists+0x70>)
 800d294:	f7fe fcc8 	bl	800bc28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d298:	480b      	ldr	r0, [pc, #44]	; (800d2c8 <prvInitialiseTaskLists+0x74>)
 800d29a:	f7fe fcc5 	bl	800bc28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d29e:	4b0b      	ldr	r3, [pc, #44]	; (800d2cc <prvInitialiseTaskLists+0x78>)
 800d2a0:	4a05      	ldr	r2, [pc, #20]	; (800d2b8 <prvInitialiseTaskLists+0x64>)
 800d2a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2a4:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <prvInitialiseTaskLists+0x7c>)
 800d2a6:	4a05      	ldr	r2, [pc, #20]	; (800d2bc <prvInitialiseTaskLists+0x68>)
 800d2a8:	601a      	str	r2, [r3, #0]
}
 800d2aa:	bf00      	nop
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20000508 	.word	0x20000508
 800d2b8:	20000594 	.word	0x20000594
 800d2bc:	200005a8 	.word	0x200005a8
 800d2c0:	200005c4 	.word	0x200005c4
 800d2c4:	200005d8 	.word	0x200005d8
 800d2c8:	200005f0 	.word	0x200005f0
 800d2cc:	200005bc 	.word	0x200005bc
 800d2d0:	200005c0 	.word	0x200005c0

0800d2d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2da:	e019      	b.n	800d310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d2dc:	f000 faa6 	bl	800d82c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2e0:	4b0f      	ldr	r3, [pc, #60]	; (800d320 <prvCheckTasksWaitingTermination+0x4c>)
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe fd25 	bl	800bd3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d2f2:	4b0c      	ldr	r3, [pc, #48]	; (800d324 <prvCheckTasksWaitingTermination+0x50>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	4a0a      	ldr	r2, [pc, #40]	; (800d324 <prvCheckTasksWaitingTermination+0x50>)
 800d2fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	; (800d328 <prvCheckTasksWaitingTermination+0x54>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	3b01      	subs	r3, #1
 800d302:	4a09      	ldr	r2, [pc, #36]	; (800d328 <prvCheckTasksWaitingTermination+0x54>)
 800d304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d306:	f000 fabf 	bl	800d888 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f80e 	bl	800d32c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <prvCheckTasksWaitingTermination+0x54>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1e1      	bne.n	800d2dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d318:	bf00      	nop
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	200005d8 	.word	0x200005d8
 800d324:	20000604 	.word	0x20000604
 800d328:	200005ec 	.word	0x200005ec

0800d32c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d108      	bne.n	800d350 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d342:	4618      	mov	r0, r3
 800d344:	f000 fc52 	bl	800dbec <vPortFree>
				vPortFree( pxTCB );
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fc4f 	bl	800dbec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d34e:	e017      	b.n	800d380 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d356:	2b01      	cmp	r3, #1
 800d358:	d103      	bne.n	800d362 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fc46 	bl	800dbec <vPortFree>
	}
 800d360:	e00e      	b.n	800d380 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d009      	beq.n	800d380 <prvDeleteTCB+0x54>
 800d36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d370:	f383 8811 	msr	BASEPRI, r3
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	60fb      	str	r3, [r7, #12]
 800d37e:	e7fe      	b.n	800d37e <prvDeleteTCB+0x52>
	}
 800d380:	bf00      	nop
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d38e:	4b0c      	ldr	r3, [pc, #48]	; (800d3c0 <prvResetNextTaskUnblockTime+0x38>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d104      	bne.n	800d3a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d398:	4b0a      	ldr	r3, [pc, #40]	; (800d3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d39a:	f04f 32ff 	mov.w	r2, #4294967295
 800d39e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d3a0:	e008      	b.n	800d3b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <prvResetNextTaskUnblockTime+0x38>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	4a04      	ldr	r2, [pc, #16]	; (800d3c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d3b2:	6013      	str	r3, [r2, #0]
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	200005bc 	.word	0x200005bc
 800d3c4:	20000624 	.word	0x20000624

0800d3c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d3ce:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <xTaskGetSchedulerState+0x34>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d102      	bne.n	800d3dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	607b      	str	r3, [r7, #4]
 800d3da:	e008      	b.n	800d3ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3dc:	4b08      	ldr	r3, [pc, #32]	; (800d400 <xTaskGetSchedulerState+0x38>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d3e4:	2302      	movs	r3, #2
 800d3e6:	607b      	str	r3, [r7, #4]
 800d3e8:	e001      	b.n	800d3ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d3ee:	687b      	ldr	r3, [r7, #4]
	}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr
 800d3fc:	20000610 	.word	0x20000610
 800d400:	2000062c 	.word	0x2000062c

0800d404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d410:	2300      	movs	r3, #0
 800d412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d06c      	beq.n	800d4f4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d41a:	4b39      	ldr	r3, [pc, #228]	; (800d500 <xTaskPriorityDisinherit+0xfc>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	693a      	ldr	r2, [r7, #16]
 800d420:	429a      	cmp	r2, r3
 800d422:	d009      	beq.n	800d438 <xTaskPriorityDisinherit+0x34>
 800d424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	60fb      	str	r3, [r7, #12]
 800d436:	e7fe      	b.n	800d436 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d109      	bne.n	800d454 <xTaskPriorityDisinherit+0x50>
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	60bb      	str	r3, [r7, #8]
 800d452:	e7fe      	b.n	800d452 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d458:	1e5a      	subs	r2, r3, #1
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d466:	429a      	cmp	r2, r3
 800d468:	d044      	beq.n	800d4f4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d140      	bne.n	800d4f4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	3304      	adds	r3, #4
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe fc60 	bl	800bd3c <uxListRemove>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d115      	bne.n	800d4ae <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d486:	491f      	ldr	r1, [pc, #124]	; (800d504 <xTaskPriorityDisinherit+0x100>)
 800d488:	4613      	mov	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	440b      	add	r3, r1
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10a      	bne.n	800d4ae <xTaskPriorityDisinherit+0xaa>
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d49c:	2201      	movs	r2, #1
 800d49e:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a2:	43da      	mvns	r2, r3
 800d4a4:	4b18      	ldr	r3, [pc, #96]	; (800d508 <xTaskPriorityDisinherit+0x104>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	4a17      	ldr	r2, [pc, #92]	; (800d508 <xTaskPriorityDisinherit+0x104>)
 800d4ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ba:	f1c3 0207 	rsb	r2, r3, #7
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	409a      	lsls	r2, r3
 800d4ca:	4b0f      	ldr	r3, [pc, #60]	; (800d508 <xTaskPriorityDisinherit+0x104>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	4a0d      	ldr	r2, [pc, #52]	; (800d508 <xTaskPriorityDisinherit+0x104>)
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4a08      	ldr	r2, [pc, #32]	; (800d504 <xTaskPriorityDisinherit+0x100>)
 800d4e2:	441a      	add	r2, r3
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fe fbc9 	bl	800bc82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4f4:	697b      	ldr	r3, [r7, #20]
	}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3718      	adds	r7, #24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	20000504 	.word	0x20000504
 800d504:	20000508 	.word	0x20000508
 800d508:	2000060c 	.word	0x2000060c

0800d50c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d516:	4b29      	ldr	r3, [pc, #164]	; (800d5bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d51c:	4b28      	ldr	r3, [pc, #160]	; (800d5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	3304      	adds	r3, #4
 800d522:	4618      	mov	r0, r3
 800d524:	f7fe fc0a 	bl	800bd3c <uxListRemove>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d10b      	bne.n	800d546 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d52e:	4b24      	ldr	r3, [pc, #144]	; (800d5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d534:	2201      	movs	r2, #1
 800d536:	fa02 f303 	lsl.w	r3, r2, r3
 800d53a:	43da      	mvns	r2, r3
 800d53c:	4b21      	ldr	r3, [pc, #132]	; (800d5c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4013      	ands	r3, r2
 800d542:	4a20      	ldr	r2, [pc, #128]	; (800d5c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d544:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54c:	d10a      	bne.n	800d564 <prvAddCurrentTaskToDelayedList+0x58>
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d007      	beq.n	800d564 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d554:	4b1a      	ldr	r3, [pc, #104]	; (800d5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3304      	adds	r3, #4
 800d55a:	4619      	mov	r1, r3
 800d55c:	481a      	ldr	r0, [pc, #104]	; (800d5c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d55e:	f7fe fb90 	bl	800bc82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d562:	e026      	b.n	800d5b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4413      	add	r3, r2
 800d56a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d56c:	4b14      	ldr	r3, [pc, #80]	; (800d5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d574:	68ba      	ldr	r2, [r7, #8]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d209      	bcs.n	800d590 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d57c:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3304      	adds	r3, #4
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f7fe fb9e 	bl	800bcca <vListInsert>
}
 800d58e:	e010      	b.n	800d5b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d590:	4b0f      	ldr	r3, [pc, #60]	; (800d5d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3304      	adds	r3, #4
 800d59a:	4619      	mov	r1, r3
 800d59c:	4610      	mov	r0, r2
 800d59e:	f7fe fb94 	bl	800bcca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5a2:	4b0c      	ldr	r3, [pc, #48]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d202      	bcs.n	800d5b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d5ac:	4a09      	ldr	r2, [pc, #36]	; (800d5d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6013      	str	r3, [r2, #0]
}
 800d5b2:	bf00      	nop
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20000608 	.word	0x20000608
 800d5c0:	20000504 	.word	0x20000504
 800d5c4:	2000060c 	.word	0x2000060c
 800d5c8:	200005f0 	.word	0x200005f0
 800d5cc:	200005c0 	.word	0x200005c0
 800d5d0:	200005bc 	.word	0x200005bc
 800d5d4:	20000624 	.word	0x20000624

0800d5d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	3b04      	subs	r3, #4
 800d5e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d5f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3b04      	subs	r3, #4
 800d5f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f023 0201 	bic.w	r2, r3, #1
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	3b04      	subs	r3, #4
 800d606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d608:	4a0c      	ldr	r2, [pc, #48]	; (800d63c <pxPortInitialiseStack+0x64>)
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3b14      	subs	r3, #20
 800d612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3b04      	subs	r3, #4
 800d61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f06f 0202 	mvn.w	r2, #2
 800d626:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	3b20      	subs	r3, #32
 800d62c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d62e:	68fb      	ldr	r3, [r7, #12]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	0800d641 	.word	0x0800d641

0800d640 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d640:	b480      	push	{r7}
 800d642:	b085      	sub	sp, #20
 800d644:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d64a:	4b11      	ldr	r3, [pc, #68]	; (800d690 <prvTaskExitError+0x50>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d652:	d009      	beq.n	800d668 <prvTaskExitError+0x28>
 800d654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d658:	f383 8811 	msr	BASEPRI, r3
 800d65c:	f3bf 8f6f 	isb	sy
 800d660:	f3bf 8f4f 	dsb	sy
 800d664:	60fb      	str	r3, [r7, #12]
 800d666:	e7fe      	b.n	800d666 <prvTaskExitError+0x26>
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d67a:	bf00      	nop
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d0fc      	beq.n	800d67c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d682:	bf00      	nop
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	20000074 	.word	0x20000074
	...

0800d6a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6a0:	4b07      	ldr	r3, [pc, #28]	; (800d6c0 <pxCurrentTCBConst2>)
 800d6a2:	6819      	ldr	r1, [r3, #0]
 800d6a4:	6808      	ldr	r0, [r1, #0]
 800d6a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6aa:	f380 8809 	msr	PSP, r0
 800d6ae:	f3bf 8f6f 	isb	sy
 800d6b2:	f04f 0000 	mov.w	r0, #0
 800d6b6:	f380 8811 	msr	BASEPRI, r0
 800d6ba:	4770      	bx	lr
 800d6bc:	f3af 8000 	nop.w

0800d6c0 <pxCurrentTCBConst2>:
 800d6c0:	20000504 	.word	0x20000504
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6c4:	bf00      	nop
 800d6c6:	bf00      	nop

0800d6c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6c8:	4808      	ldr	r0, [pc, #32]	; (800d6ec <prvPortStartFirstTask+0x24>)
 800d6ca:	6800      	ldr	r0, [r0, #0]
 800d6cc:	6800      	ldr	r0, [r0, #0]
 800d6ce:	f380 8808 	msr	MSP, r0
 800d6d2:	f04f 0000 	mov.w	r0, #0
 800d6d6:	f380 8814 	msr	CONTROL, r0
 800d6da:	b662      	cpsie	i
 800d6dc:	b661      	cpsie	f
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	df00      	svc	0
 800d6e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6ea:	bf00      	nop
 800d6ec:	e000ed08 	.word	0xe000ed08

0800d6f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6f6:	4b44      	ldr	r3, [pc, #272]	; (800d808 <xPortStartScheduler+0x118>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4a44      	ldr	r2, [pc, #272]	; (800d80c <xPortStartScheduler+0x11c>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d109      	bne.n	800d714 <xPortStartScheduler+0x24>
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	613b      	str	r3, [r7, #16]
 800d712:	e7fe      	b.n	800d712 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d714:	4b3c      	ldr	r3, [pc, #240]	; (800d808 <xPortStartScheduler+0x118>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a3d      	ldr	r2, [pc, #244]	; (800d810 <xPortStartScheduler+0x120>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d109      	bne.n	800d732 <xPortStartScheduler+0x42>
 800d71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d722:	f383 8811 	msr	BASEPRI, r3
 800d726:	f3bf 8f6f 	isb	sy
 800d72a:	f3bf 8f4f 	dsb	sy
 800d72e:	60fb      	str	r3, [r7, #12]
 800d730:	e7fe      	b.n	800d730 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d732:	4b38      	ldr	r3, [pc, #224]	; (800d814 <xPortStartScheduler+0x124>)
 800d734:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	22ff      	movs	r2, #255	; 0xff
 800d742:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d754:	b2da      	uxtb	r2, r3
 800d756:	4b30      	ldr	r3, [pc, #192]	; (800d818 <xPortStartScheduler+0x128>)
 800d758:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d75a:	4b30      	ldr	r3, [pc, #192]	; (800d81c <xPortStartScheduler+0x12c>)
 800d75c:	2207      	movs	r2, #7
 800d75e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d760:	e009      	b.n	800d776 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d762:	4b2e      	ldr	r3, [pc, #184]	; (800d81c <xPortStartScheduler+0x12c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3b01      	subs	r3, #1
 800d768:	4a2c      	ldr	r2, [pc, #176]	; (800d81c <xPortStartScheduler+0x12c>)
 800d76a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d76c:	78fb      	ldrb	r3, [r7, #3]
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	b2db      	uxtb	r3, r3
 800d774:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d776:	78fb      	ldrb	r3, [r7, #3]
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d77e:	2b80      	cmp	r3, #128	; 0x80
 800d780:	d0ef      	beq.n	800d762 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d782:	4b26      	ldr	r3, [pc, #152]	; (800d81c <xPortStartScheduler+0x12c>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f1c3 0307 	rsb	r3, r3, #7
 800d78a:	2b04      	cmp	r3, #4
 800d78c:	d009      	beq.n	800d7a2 <xPortStartScheduler+0xb2>
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	60bb      	str	r3, [r7, #8]
 800d7a0:	e7fe      	b.n	800d7a0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7a2:	4b1e      	ldr	r3, [pc, #120]	; (800d81c <xPortStartScheduler+0x12c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	021b      	lsls	r3, r3, #8
 800d7a8:	4a1c      	ldr	r2, [pc, #112]	; (800d81c <xPortStartScheduler+0x12c>)
 800d7aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7ac:	4b1b      	ldr	r3, [pc, #108]	; (800d81c <xPortStartScheduler+0x12c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7b4:	4a19      	ldr	r2, [pc, #100]	; (800d81c <xPortStartScheduler+0x12c>)
 800d7b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7c0:	4b17      	ldr	r3, [pc, #92]	; (800d820 <xPortStartScheduler+0x130>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a16      	ldr	r2, [pc, #88]	; (800d820 <xPortStartScheduler+0x130>)
 800d7c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7cc:	4b14      	ldr	r3, [pc, #80]	; (800d820 <xPortStartScheduler+0x130>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a13      	ldr	r2, [pc, #76]	; (800d820 <xPortStartScheduler+0x130>)
 800d7d2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7d8:	f000 f8d6 	bl	800d988 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7dc:	4b11      	ldr	r3, [pc, #68]	; (800d824 <xPortStartScheduler+0x134>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7e2:	f000 f8f5 	bl	800d9d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7e6:	4b10      	ldr	r3, [pc, #64]	; (800d828 <xPortStartScheduler+0x138>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4a0f      	ldr	r2, [pc, #60]	; (800d828 <xPortStartScheduler+0x138>)
 800d7ec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7f0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7f2:	f7ff ff69 	bl	800d6c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7f6:	f7ff fb8b 	bl	800cf10 <vTaskSwitchContext>
	prvTaskExitError();
 800d7fa:	f7ff ff21 	bl	800d640 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3718      	adds	r7, #24
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	e000ed00 	.word	0xe000ed00
 800d80c:	410fc271 	.word	0x410fc271
 800d810:	410fc270 	.word	0x410fc270
 800d814:	e000e400 	.word	0xe000e400
 800d818:	20000630 	.word	0x20000630
 800d81c:	20000634 	.word	0x20000634
 800d820:	e000ed20 	.word	0xe000ed20
 800d824:	20000074 	.word	0x20000074
 800d828:	e000ef34 	.word	0xe000ef34

0800d82c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d844:	4b0e      	ldr	r3, [pc, #56]	; (800d880 <vPortEnterCritical+0x54>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	4a0d      	ldr	r2, [pc, #52]	; (800d880 <vPortEnterCritical+0x54>)
 800d84c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d84e:	4b0c      	ldr	r3, [pc, #48]	; (800d880 <vPortEnterCritical+0x54>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d10e      	bne.n	800d874 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d856:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <vPortEnterCritical+0x58>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d009      	beq.n	800d874 <vPortEnterCritical+0x48>
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	603b      	str	r3, [r7, #0]
 800d872:	e7fe      	b.n	800d872 <vPortEnterCritical+0x46>
	}
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	20000074 	.word	0x20000074
 800d884:	e000ed04 	.word	0xe000ed04

0800d888 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d88e:	4b11      	ldr	r3, [pc, #68]	; (800d8d4 <vPortExitCritical+0x4c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d109      	bne.n	800d8aa <vPortExitCritical+0x22>
 800d896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89a:	f383 8811 	msr	BASEPRI, r3
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f3bf 8f4f 	dsb	sy
 800d8a6:	607b      	str	r3, [r7, #4]
 800d8a8:	e7fe      	b.n	800d8a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d8aa:	4b0a      	ldr	r3, [pc, #40]	; (800d8d4 <vPortExitCritical+0x4c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	4a08      	ldr	r2, [pc, #32]	; (800d8d4 <vPortExitCritical+0x4c>)
 800d8b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8b4:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <vPortExitCritical+0x4c>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d104      	bne.n	800d8c6 <vPortExitCritical+0x3e>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8c6:	bf00      	nop
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	20000074 	.word	0x20000074
	...

0800d8e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8e0:	f3ef 8009 	mrs	r0, PSP
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	4b15      	ldr	r3, [pc, #84]	; (800d940 <pxCurrentTCBConst>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	f01e 0f10 	tst.w	lr, #16
 800d8f0:	bf08      	it	eq
 800d8f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fa:	6010      	str	r0, [r2, #0]
 800d8fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d900:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d904:	f380 8811 	msr	BASEPRI, r0
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f7ff fafe 	bl	800cf10 <vTaskSwitchContext>
 800d914:	f04f 0000 	mov.w	r0, #0
 800d918:	f380 8811 	msr	BASEPRI, r0
 800d91c:	bc09      	pop	{r0, r3}
 800d91e:	6819      	ldr	r1, [r3, #0]
 800d920:	6808      	ldr	r0, [r1, #0]
 800d922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d926:	f01e 0f10 	tst.w	lr, #16
 800d92a:	bf08      	it	eq
 800d92c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d930:	f380 8809 	msr	PSP, r0
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	f3af 8000 	nop.w

0800d940 <pxCurrentTCBConst>:
 800d940:	20000504 	.word	0x20000504
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d944:	bf00      	nop
 800d946:	bf00      	nop

0800d948 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d960:	f7ff fa1e 	bl	800cda0 <xTaskIncrementTick>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d96a:	4b06      	ldr	r3, [pc, #24]	; (800d984 <SysTick_Handler+0x3c>)
 800d96c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d970:	601a      	str	r2, [r3, #0]
 800d972:	2300      	movs	r3, #0
 800d974:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d97c:	bf00      	nop
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	e000ed04 	.word	0xe000ed04

0800d988 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d988:	b480      	push	{r7}
 800d98a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d98c:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <vPortSetupTimerInterrupt+0x34>)
 800d98e:	2200      	movs	r2, #0
 800d990:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d992:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <vPortSetupTimerInterrupt+0x38>)
 800d994:	2200      	movs	r2, #0
 800d996:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <vPortSetupTimerInterrupt+0x3c>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4a0a      	ldr	r2, [pc, #40]	; (800d9c8 <vPortSetupTimerInterrupt+0x40>)
 800d99e:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a2:	099b      	lsrs	r3, r3, #6
 800d9a4:	4a09      	ldr	r2, [pc, #36]	; (800d9cc <vPortSetupTimerInterrupt+0x44>)
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9aa:	4b04      	ldr	r3, [pc, #16]	; (800d9bc <vPortSetupTimerInterrupt+0x34>)
 800d9ac:	2207      	movs	r2, #7
 800d9ae:	601a      	str	r2, [r3, #0]
}
 800d9b0:	bf00      	nop
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	e000e010 	.word	0xe000e010
 800d9c0:	e000e018 	.word	0xe000e018
 800d9c4:	20000000 	.word	0x20000000
 800d9c8:	10624dd3 	.word	0x10624dd3
 800d9cc:	e000e014 	.word	0xe000e014

0800d9d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9e0 <vPortEnableVFP+0x10>
 800d9d4:	6801      	ldr	r1, [r0, #0]
 800d9d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9da:	6001      	str	r1, [r0, #0]
 800d9dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9de:	bf00      	nop
 800d9e0:	e000ed88 	.word	0xe000ed88

0800d9e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9ea:	f3ef 8305 	mrs	r3, IPSR
 800d9ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b0f      	cmp	r3, #15
 800d9f4:	d913      	bls.n	800da1e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9f6:	4a16      	ldr	r2, [pc, #88]	; (800da50 <vPortValidateInterruptPriority+0x6c>)
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da00:	4b14      	ldr	r3, [pc, #80]	; (800da54 <vPortValidateInterruptPriority+0x70>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	7afa      	ldrb	r2, [r7, #11]
 800da06:	429a      	cmp	r2, r3
 800da08:	d209      	bcs.n	800da1e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	607b      	str	r3, [r7, #4]
 800da1c:	e7fe      	b.n	800da1c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da1e:	4b0e      	ldr	r3, [pc, #56]	; (800da58 <vPortValidateInterruptPriority+0x74>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800da26:	4b0d      	ldr	r3, [pc, #52]	; (800da5c <vPortValidateInterruptPriority+0x78>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d909      	bls.n	800da42 <vPortValidateInterruptPriority+0x5e>
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	e7fe      	b.n	800da40 <vPortValidateInterruptPriority+0x5c>
	}
 800da42:	bf00      	nop
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr
 800da4e:	bf00      	nop
 800da50:	e000e3f0 	.word	0xe000e3f0
 800da54:	20000630 	.word	0x20000630
 800da58:	e000ed0c 	.word	0xe000ed0c
 800da5c:	20000634 	.word	0x20000634

0800da60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08a      	sub	sp, #40	; 0x28
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da68:	2300      	movs	r3, #0
 800da6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da6c:	f7ff f8ee 	bl	800cc4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da70:	4b59      	ldr	r3, [pc, #356]	; (800dbd8 <pvPortMalloc+0x178>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d101      	bne.n	800da7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da78:	f000 f910 	bl	800dc9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da7c:	4b57      	ldr	r3, [pc, #348]	; (800dbdc <pvPortMalloc+0x17c>)
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4013      	ands	r3, r2
 800da84:	2b00      	cmp	r3, #0
 800da86:	f040 808c 	bne.w	800dba2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d01c      	beq.n	800daca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800da90:	2208      	movs	r2, #8
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4413      	add	r3, r2
 800da96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f003 0307 	and.w	r3, r3, #7
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d013      	beq.n	800daca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f023 0307 	bic.w	r3, r3, #7
 800daa8:	3308      	adds	r3, #8
 800daaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d009      	beq.n	800daca <pvPortMalloc+0x6a>
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	617b      	str	r3, [r7, #20]
 800dac8:	e7fe      	b.n	800dac8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d068      	beq.n	800dba2 <pvPortMalloc+0x142>
 800dad0:	4b43      	ldr	r3, [pc, #268]	; (800dbe0 <pvPortMalloc+0x180>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d863      	bhi.n	800dba2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dada:	4b42      	ldr	r3, [pc, #264]	; (800dbe4 <pvPortMalloc+0x184>)
 800dadc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dade:	4b41      	ldr	r3, [pc, #260]	; (800dbe4 <pvPortMalloc+0x184>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dae4:	e004      	b.n	800daf0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dae8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d903      	bls.n	800db02 <pvPortMalloc+0xa2>
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1f1      	bne.n	800dae6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db02:	4b35      	ldr	r3, [pc, #212]	; (800dbd8 <pvPortMalloc+0x178>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db08:	429a      	cmp	r2, r3
 800db0a:	d04a      	beq.n	800dba2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db0c:	6a3b      	ldr	r3, [r7, #32]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2208      	movs	r2, #8
 800db12:	4413      	add	r3, r2
 800db14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	6a3b      	ldr	r3, [r7, #32]
 800db1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	1ad2      	subs	r2, r2, r3
 800db26:	2308      	movs	r3, #8
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d91e      	bls.n	800db6c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4413      	add	r3, r2
 800db34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	f003 0307 	and.w	r3, r3, #7
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <pvPortMalloc+0xf4>
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	613b      	str	r3, [r7, #16]
 800db52:	e7fe      	b.n	800db52 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	1ad2      	subs	r2, r2, r3
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db66:	69b8      	ldr	r0, [r7, #24]
 800db68:	f000 f8fa 	bl	800dd60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db6c:	4b1c      	ldr	r3, [pc, #112]	; (800dbe0 <pvPortMalloc+0x180>)
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	685b      	ldr	r3, [r3, #4]
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	4a1a      	ldr	r2, [pc, #104]	; (800dbe0 <pvPortMalloc+0x180>)
 800db78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db7a:	4b19      	ldr	r3, [pc, #100]	; (800dbe0 <pvPortMalloc+0x180>)
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	4b1a      	ldr	r3, [pc, #104]	; (800dbe8 <pvPortMalloc+0x188>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	429a      	cmp	r2, r3
 800db84:	d203      	bcs.n	800db8e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db86:	4b16      	ldr	r3, [pc, #88]	; (800dbe0 <pvPortMalloc+0x180>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a17      	ldr	r2, [pc, #92]	; (800dbe8 <pvPortMalloc+0x188>)
 800db8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db90:	685a      	ldr	r2, [r3, #4]
 800db92:	4b12      	ldr	r3, [pc, #72]	; (800dbdc <pvPortMalloc+0x17c>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	431a      	orrs	r2, r3
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dba2:	f7ff f861 	bl	800cc68 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d101      	bne.n	800dbb0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800dbac:	f7f2 fe2e 	bl	800080c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	f003 0307 	and.w	r3, r3, #7
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d009      	beq.n	800dbce <pvPortMalloc+0x16e>
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	e7fe      	b.n	800dbcc <pvPortMalloc+0x16c>
	return pvReturn;
 800dbce:	69fb      	ldr	r3, [r7, #28]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3728      	adds	r7, #40	; 0x28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20008640 	.word	0x20008640
 800dbdc:	2000864c 	.word	0x2000864c
 800dbe0:	20008644 	.word	0x20008644
 800dbe4:	20008638 	.word	0x20008638
 800dbe8:	20008648 	.word	0x20008648

0800dbec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d046      	beq.n	800dc8c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbfe:	2308      	movs	r3, #8
 800dc00:	425b      	negs	r3, r3
 800dc02:	697a      	ldr	r2, [r7, #20]
 800dc04:	4413      	add	r3, r2
 800dc06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	4b20      	ldr	r3, [pc, #128]	; (800dc94 <vPortFree+0xa8>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4013      	ands	r3, r2
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d109      	bne.n	800dc2e <vPortFree+0x42>
 800dc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1e:	f383 8811 	msr	BASEPRI, r3
 800dc22:	f3bf 8f6f 	isb	sy
 800dc26:	f3bf 8f4f 	dsb	sy
 800dc2a:	60fb      	str	r3, [r7, #12]
 800dc2c:	e7fe      	b.n	800dc2c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d009      	beq.n	800dc4a <vPortFree+0x5e>
 800dc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	60bb      	str	r3, [r7, #8]
 800dc48:	e7fe      	b.n	800dc48 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	4b11      	ldr	r3, [pc, #68]	; (800dc94 <vPortFree+0xa8>)
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	4013      	ands	r3, r2
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d019      	beq.n	800dc8c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d115      	bne.n	800dc8c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	4b0b      	ldr	r3, [pc, #44]	; (800dc94 <vPortFree+0xa8>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	43db      	mvns	r3, r3
 800dc6a:	401a      	ands	r2, r3
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc70:	f7fe ffec 	bl	800cc4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	685a      	ldr	r2, [r3, #4]
 800dc78:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <vPortFree+0xac>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	4a06      	ldr	r2, [pc, #24]	; (800dc98 <vPortFree+0xac>)
 800dc80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc82:	6938      	ldr	r0, [r7, #16]
 800dc84:	f000 f86c 	bl	800dd60 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dc88:	f7fe ffee 	bl	800cc68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc8c:	bf00      	nop
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	2000864c 	.word	0x2000864c
 800dc98:	20008644 	.word	0x20008644

0800dc9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b085      	sub	sp, #20
 800dca0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dca6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dca8:	4b27      	ldr	r3, [pc, #156]	; (800dd48 <prvHeapInit+0xac>)
 800dcaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f003 0307 	and.w	r3, r3, #7
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00c      	beq.n	800dcd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3307      	adds	r3, #7
 800dcba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f023 0307 	bic.w	r3, r3, #7
 800dcc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	4a1f      	ldr	r2, [pc, #124]	; (800dd48 <prvHeapInit+0xac>)
 800dccc:	4413      	add	r3, r2
 800dcce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcd4:	4a1d      	ldr	r2, [pc, #116]	; (800dd4c <prvHeapInit+0xb0>)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcda:	4b1c      	ldr	r3, [pc, #112]	; (800dd4c <prvHeapInit+0xb0>)
 800dcdc:	2200      	movs	r2, #0
 800dcde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	4413      	add	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dce8:	2208      	movs	r2, #8
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	1a9b      	subs	r3, r3, r2
 800dcee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0307 	bic.w	r3, r3, #7
 800dcf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	4a15      	ldr	r2, [pc, #84]	; (800dd50 <prvHeapInit+0xb4>)
 800dcfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcfe:	4b14      	ldr	r3, [pc, #80]	; (800dd50 <prvHeapInit+0xb4>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2200      	movs	r2, #0
 800dd04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd06:	4b12      	ldr	r3, [pc, #72]	; (800dd50 <prvHeapInit+0xb4>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	68fa      	ldr	r2, [r7, #12]
 800dd16:	1ad2      	subs	r2, r2, r3
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd1c:	4b0c      	ldr	r3, [pc, #48]	; (800dd50 <prvHeapInit+0xb4>)
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	4a0a      	ldr	r2, [pc, #40]	; (800dd54 <prvHeapInit+0xb8>)
 800dd2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	4a09      	ldr	r2, [pc, #36]	; (800dd58 <prvHeapInit+0xbc>)
 800dd32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd34:	4b09      	ldr	r3, [pc, #36]	; (800dd5c <prvHeapInit+0xc0>)
 800dd36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd3a:	601a      	str	r2, [r3, #0]
}
 800dd3c:	bf00      	nop
 800dd3e:	3714      	adds	r7, #20
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr
 800dd48:	20000638 	.word	0x20000638
 800dd4c:	20008638 	.word	0x20008638
 800dd50:	20008640 	.word	0x20008640
 800dd54:	20008648 	.word	0x20008648
 800dd58:	20008644 	.word	0x20008644
 800dd5c:	2000864c 	.word	0x2000864c

0800dd60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd68:	4b28      	ldr	r3, [pc, #160]	; (800de0c <prvInsertBlockIntoFreeList+0xac>)
 800dd6a:	60fb      	str	r3, [r7, #12]
 800dd6c:	e002      	b.n	800dd74 <prvInsertBlockIntoFreeList+0x14>
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d8f7      	bhi.n	800dd6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	4413      	add	r3, r2
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d108      	bne.n	800dda2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	441a      	add	r2, r3
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	68ba      	ldr	r2, [r7, #8]
 800ddac:	441a      	add	r2, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d118      	bne.n	800dde8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	4b15      	ldr	r3, [pc, #84]	; (800de10 <prvInsertBlockIntoFreeList+0xb0>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d00d      	beq.n	800ddde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	441a      	add	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	e008      	b.n	800ddf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddde:	4b0c      	ldr	r3, [pc, #48]	; (800de10 <prvInsertBlockIntoFreeList+0xb0>)
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	e003      	b.n	800ddf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d002      	beq.n	800ddfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddfe:	bf00      	nop
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	20008638 	.word	0x20008638
 800de10:	20008640 	.word	0x20008640

0800de14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800de18:	2200      	movs	r2, #0
 800de1a:	490e      	ldr	r1, [pc, #56]	; (800de54 <MX_USB_HOST_Init+0x40>)
 800de1c:	480e      	ldr	r0, [pc, #56]	; (800de58 <MX_USB_HOST_Init+0x44>)
 800de1e:	f7fc f807 	bl	8009e30 <USBH_Init>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800de28:	f7f3 f986 	bl	8001138 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800de2c:	490b      	ldr	r1, [pc, #44]	; (800de5c <MX_USB_HOST_Init+0x48>)
 800de2e:	480a      	ldr	r0, [pc, #40]	; (800de58 <MX_USB_HOST_Init+0x44>)
 800de30:	f7fc f8b4 	bl	8009f9c <USBH_RegisterClass>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800de3a:	f7f3 f97d 	bl	8001138 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800de3e:	4806      	ldr	r0, [pc, #24]	; (800de58 <MX_USB_HOST_Init+0x44>)
 800de40:	f7fc f938 	bl	800a0b4 <USBH_Start>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800de4a:	f7f3 f975 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de4e:	bf00      	nop
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	0800de61 	.word	0x0800de61
 800de58:	200089a0 	.word	0x200089a0
 800de5c:	20000054 	.word	0x20000054

0800de60 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	460b      	mov	r3, r1
 800de6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800de6c:	78fb      	ldrb	r3, [r7, #3]
 800de6e:	3b01      	subs	r3, #1
 800de70:	2b04      	cmp	r3, #4
 800de72:	d819      	bhi.n	800dea8 <USBH_UserProcess+0x48>
 800de74:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <USBH_UserProcess+0x1c>)
 800de76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7a:	bf00      	nop
 800de7c:	0800dea9 	.word	0x0800dea9
 800de80:	0800de99 	.word	0x0800de99
 800de84:	0800dea9 	.word	0x0800dea9
 800de88:	0800dea1 	.word	0x0800dea1
 800de8c:	0800de91 	.word	0x0800de91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800de90:	4b09      	ldr	r3, [pc, #36]	; (800deb8 <USBH_UserProcess+0x58>)
 800de92:	2203      	movs	r2, #3
 800de94:	701a      	strb	r2, [r3, #0]
  break;
 800de96:	e008      	b.n	800deaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800de98:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <USBH_UserProcess+0x58>)
 800de9a:	2202      	movs	r2, #2
 800de9c:	701a      	strb	r2, [r3, #0]
  break;
 800de9e:	e004      	b.n	800deaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800dea0:	4b05      	ldr	r3, [pc, #20]	; (800deb8 <USBH_UserProcess+0x58>)
 800dea2:	2201      	movs	r2, #1
 800dea4:	701a      	strb	r2, [r3, #0]
  break;
 800dea6:	e000      	b.n	800deaa <USBH_UserProcess+0x4a>

  default:
  break;
 800dea8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800deaa:	bf00      	nop
 800deac:	370c      	adds	r7, #12
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	20008650 	.word	0x20008650

0800debc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08a      	sub	sp, #40	; 0x28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dec4:	f107 0314 	add.w	r3, r7, #20
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	605a      	str	r2, [r3, #4]
 800dece:	609a      	str	r2, [r3, #8]
 800ded0:	60da      	str	r2, [r3, #12]
 800ded2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4a24      	ldr	r2, [pc, #144]	; (800df6c <HAL_HCD_MspInit+0xb0>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d141      	bne.n	800df62 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dede:	2300      	movs	r3, #0
 800dee0:	613b      	str	r3, [r7, #16]
 800dee2:	4b23      	ldr	r3, [pc, #140]	; (800df70 <HAL_HCD_MspInit+0xb4>)
 800dee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee6:	4a22      	ldr	r2, [pc, #136]	; (800df70 <HAL_HCD_MspInit+0xb4>)
 800dee8:	f043 0302 	orr.w	r3, r3, #2
 800deec:	6313      	str	r3, [r2, #48]	; 0x30
 800deee:	4b20      	ldr	r3, [pc, #128]	; (800df70 <HAL_HCD_MspInit+0xb4>)
 800def0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def2:	f003 0302 	and.w	r3, r3, #2
 800def6:	613b      	str	r3, [r7, #16]
 800def8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800defa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800defe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df00:	2302      	movs	r3, #2
 800df02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df04:	2300      	movs	r3, #0
 800df06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df08:	2300      	movs	r3, #0
 800df0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800df0c:	230c      	movs	r3, #12
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df10:	f107 0314 	add.w	r3, r7, #20
 800df14:	4619      	mov	r1, r3
 800df16:	4817      	ldr	r0, [pc, #92]	; (800df74 <HAL_HCD_MspInit+0xb8>)
 800df18:	f7f5 fa0a 	bl	8003330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800df1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800df20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df22:	2300      	movs	r3, #0
 800df24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df26:	2300      	movs	r3, #0
 800df28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800df2a:	f107 0314 	add.w	r3, r7, #20
 800df2e:	4619      	mov	r1, r3
 800df30:	4810      	ldr	r0, [pc, #64]	; (800df74 <HAL_HCD_MspInit+0xb8>)
 800df32:	f7f5 f9fd 	bl	8003330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800df36:	2300      	movs	r3, #0
 800df38:	60fb      	str	r3, [r7, #12]
 800df3a:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <HAL_HCD_MspInit+0xb4>)
 800df3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df3e:	4a0c      	ldr	r2, [pc, #48]	; (800df70 <HAL_HCD_MspInit+0xb4>)
 800df40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df44:	6313      	str	r3, [r2, #48]	; 0x30
 800df46:	4b0a      	ldr	r3, [pc, #40]	; (800df70 <HAL_HCD_MspInit+0xb4>)
 800df48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df4e:	60fb      	str	r3, [r7, #12]
 800df50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800df52:	2200      	movs	r2, #0
 800df54:	2100      	movs	r1, #0
 800df56:	204d      	movs	r0, #77	; 0x4d
 800df58:	f7f4 fc4c 	bl	80027f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800df5c:	204d      	movs	r0, #77	; 0x4d
 800df5e:	f7f4 fc65 	bl	800282c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800df62:	bf00      	nop
 800df64:	3728      	adds	r7, #40	; 0x28
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	40040000 	.word	0x40040000
 800df70:	40023800 	.word	0x40023800
 800df74:	40020400 	.word	0x40020400

0800df78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df86:	4618      	mov	r0, r3
 800df88:	f7fc fd41 	bl	800aa0e <USBH_LL_IncTimer>
}
 800df8c:	bf00      	nop
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fc fd85 	bl	800aab2 <USBH_LL_Connect>
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fc fd9a 	bl	800aaf8 <USBH_LL_Disconnect>
}
 800dfc4:	bf00      	nop
 800dfc6:	3708      	adds	r7, #8
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	70fb      	strb	r3, [r7, #3]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fc fdcf 	bl	800ab86 <USBH_LL_NotifyURBChange>
#endif
}
 800dfe8:	bf00      	nop
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}

0800dff0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fc fd2f 	bl	800aa62 <USBH_LL_PortEnabled>
}
 800e004:	bf00      	nop
 800e006:	3708      	adds	r7, #8
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fc fd3b 	bl	800aa96 <USBH_LL_PortDisabled>
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e036:	2b00      	cmp	r3, #0
 800e038:	d132      	bne.n	800e0a0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e03a:	4a1c      	ldr	r2, [pc, #112]	; (800e0ac <USBH_LL_Init+0x84>)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	4a19      	ldr	r2, [pc, #100]	; (800e0ac <USBH_LL_Init+0x84>)
 800e046:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e04a:	4b18      	ldr	r3, [pc, #96]	; (800e0ac <USBH_LL_Init+0x84>)
 800e04c:	4a18      	ldr	r2, [pc, #96]	; (800e0b0 <USBH_LL_Init+0x88>)
 800e04e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e050:	4b16      	ldr	r3, [pc, #88]	; (800e0ac <USBH_LL_Init+0x84>)
 800e052:	220c      	movs	r2, #12
 800e054:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e056:	4b15      	ldr	r3, [pc, #84]	; (800e0ac <USBH_LL_Init+0x84>)
 800e058:	2201      	movs	r2, #1
 800e05a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e05c:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <USBH_LL_Init+0x84>)
 800e05e:	2200      	movs	r2, #0
 800e060:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e062:	4b12      	ldr	r3, [pc, #72]	; (800e0ac <USBH_LL_Init+0x84>)
 800e064:	2202      	movs	r2, #2
 800e066:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e068:	4b10      	ldr	r3, [pc, #64]	; (800e0ac <USBH_LL_Init+0x84>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e06e:	4b0f      	ldr	r3, [pc, #60]	; (800e0ac <USBH_LL_Init+0x84>)
 800e070:	2200      	movs	r2, #0
 800e072:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e074:	4b0d      	ldr	r3, [pc, #52]	; (800e0ac <USBH_LL_Init+0x84>)
 800e076:	2200      	movs	r2, #0
 800e078:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e07a:	4b0c      	ldr	r3, [pc, #48]	; (800e0ac <USBH_LL_Init+0x84>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e080:	480a      	ldr	r0, [pc, #40]	; (800e0ac <USBH_LL_Init+0x84>)
 800e082:	f7f5 fc22 	bl	80038ca <HAL_HCD_Init>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d001      	beq.n	800e090 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e08c:	f7f3 f854 	bl	8001138 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e090:	4806      	ldr	r0, [pc, #24]	; (800e0ac <USBH_LL_Init+0x84>)
 800e092:	f7f6 f825 	bl	80040e0 <HAL_HCD_GetCurrentFrame>
 800e096:	4603      	mov	r3, r0
 800e098:	4619      	mov	r1, r3
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7fc fca8 	bl	800a9f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20008d84 	.word	0x20008d84
 800e0b0:	40040000 	.word	0x40040000

0800e0b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7f5 ff90 	bl	8003ff0 <HAL_HCD_Start>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0d4:	7bfb      	ldrb	r3, [r7, #15]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 f95c 	bl	800e394 <USBH_Get_USB_Status>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e100:	4618      	mov	r0, r3
 800e102:	f7f5 ff98 	bl	8004036 <HAL_HCD_Stop>
 800e106:	4603      	mov	r3, r0
 800e108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e10a:	7bfb      	ldrb	r3, [r7, #15]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f000 f941 	bl	800e394 <USBH_Get_USB_Status>
 800e112:	4603      	mov	r3, r0
 800e114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e116:	7bbb      	ldrb	r3, [r7, #14]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3710      	adds	r7, #16
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e128:	2301      	movs	r3, #1
 800e12a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e132:	4618      	mov	r0, r3
 800e134:	f7f5 ffe2 	bl	80040fc <HAL_HCD_GetCurrentSpeed>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d007      	beq.n	800e14e <USBH_LL_GetSpeed+0x2e>
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d302      	bcc.n	800e148 <USBH_LL_GetSpeed+0x28>
 800e142:	2b02      	cmp	r3, #2
 800e144:	d006      	beq.n	800e154 <USBH_LL_GetSpeed+0x34>
 800e146:	e008      	b.n	800e15a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e148:	2300      	movs	r3, #0
 800e14a:	73fb      	strb	r3, [r7, #15]
    break;
 800e14c:	e008      	b.n	800e160 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e14e:	2301      	movs	r3, #1
 800e150:	73fb      	strb	r3, [r7, #15]
    break;
 800e152:	e005      	b.n	800e160 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e154:	2302      	movs	r3, #2
 800e156:	73fb      	strb	r3, [r7, #15]
    break;
 800e158:	e002      	b.n	800e160 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e15a:	2301      	movs	r3, #1
 800e15c:	73fb      	strb	r3, [r7, #15]
    break;
 800e15e:	bf00      	nop
  }
  return  speed;
 800e160:	7bfb      	ldrb	r3, [r7, #15]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e180:	4618      	mov	r0, r3
 800e182:	f7f5 ff75 	bl	8004070 <HAL_HCD_ResetPort>
 800e186:	4603      	mov	r3, r0
 800e188:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f000 f901 	bl	800e394 <USBH_Get_USB_Status>
 800e192:	4603      	mov	r3, r0
 800e194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e196:	7bbb      	ldrb	r3, [r7, #14]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1b2:	78fa      	ldrb	r2, [r7, #3]
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f5 ff7d 	bl	80040b6 <HAL_HCD_HC_GetXferCount>
 800e1bc:	4603      	mov	r3, r0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e1c6:	b590      	push	{r4, r7, lr}
 800e1c8:	b089      	sub	sp, #36	; 0x24
 800e1ca:	af04      	add	r7, sp, #16
 800e1cc:	6078      	str	r0, [r7, #4]
 800e1ce:	4608      	mov	r0, r1
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	70fb      	strb	r3, [r7, #3]
 800e1d8:	460b      	mov	r3, r1
 800e1da:	70bb      	strb	r3, [r7, #2]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e1ee:	787c      	ldrb	r4, [r7, #1]
 800e1f0:	78ba      	ldrb	r2, [r7, #2]
 800e1f2:	78f9      	ldrb	r1, [r7, #3]
 800e1f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1f6:	9302      	str	r3, [sp, #8]
 800e1f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e1fc:	9301      	str	r3, [sp, #4]
 800e1fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	4623      	mov	r3, r4
 800e206:	f7f5 fbc2 	bl	800398e <HAL_HCD_HC_Init>
 800e20a:	4603      	mov	r3, r0
 800e20c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
 800e210:	4618      	mov	r0, r3
 800e212:	f000 f8bf 	bl	800e394 <USBH_Get_USB_Status>
 800e216:	4603      	mov	r3, r0
 800e218:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	bd90      	pop	{r4, r7, pc}

0800e224 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e234:	2300      	movs	r3, #0
 800e236:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e23e:	78fa      	ldrb	r2, [r7, #3]
 800e240:	4611      	mov	r1, r2
 800e242:	4618      	mov	r0, r3
 800e244:	f7f5 fc3b 	bl	8003abe <HAL_HCD_HC_Halt>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	4618      	mov	r0, r3
 800e250:	f000 f8a0 	bl	800e394 <USBH_Get_USB_Status>
 800e254:	4603      	mov	r3, r0
 800e256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e258:	7bbb      	ldrb	r3, [r7, #14]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e262:	b590      	push	{r4, r7, lr}
 800e264:	b089      	sub	sp, #36	; 0x24
 800e266:	af04      	add	r7, sp, #16
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	4608      	mov	r0, r1
 800e26c:	4611      	mov	r1, r2
 800e26e:	461a      	mov	r2, r3
 800e270:	4603      	mov	r3, r0
 800e272:	70fb      	strb	r3, [r7, #3]
 800e274:	460b      	mov	r3, r1
 800e276:	70bb      	strb	r3, [r7, #2]
 800e278:	4613      	mov	r3, r2
 800e27a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e28a:	787c      	ldrb	r4, [r7, #1]
 800e28c:	78ba      	ldrb	r2, [r7, #2]
 800e28e:	78f9      	ldrb	r1, [r7, #3]
 800e290:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e294:	9303      	str	r3, [sp, #12]
 800e296:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e298:	9302      	str	r3, [sp, #8]
 800e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2a2:	9300      	str	r3, [sp, #0]
 800e2a4:	4623      	mov	r3, r4
 800e2a6:	f7f5 fc2d 	bl	8003b04 <HAL_HCD_HC_SubmitRequest>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 f86f 	bl	800e394 <USBH_Get_USB_Status>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd90      	pop	{r4, r7, pc}

0800e2c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2d6:	78fa      	ldrb	r2, [r7, #3]
 800e2d8:	4611      	mov	r1, r2
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7f5 fed6 	bl	800408c <HAL_HCD_HC_GetURBState>
 800e2e0:	4603      	mov	r3, r0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d103      	bne.n	800e308 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e300:	78fb      	ldrb	r3, [r7, #3]
 800e302:	4618      	mov	r0, r3
 800e304:	f000 f872 	bl	800e3ec <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e308:	20c8      	movs	r0, #200	; 0xc8
 800e30a:	f7f4 f999 	bl	8002640 <HAL_Delay>
  return USBH_OK;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	460b      	mov	r3, r1
 800e322:	70fb      	strb	r3, [r7, #3]
 800e324:	4613      	mov	r3, r2
 800e326:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e32e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e330:	78fa      	ldrb	r2, [r7, #3]
 800e332:	68f9      	ldr	r1, [r7, #12]
 800e334:	4613      	mov	r3, r2
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	4413      	add	r3, r2
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	440b      	add	r3, r1
 800e33e:	333b      	adds	r3, #59	; 0x3b
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00a      	beq.n	800e35c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	68f9      	ldr	r1, [r7, #12]
 800e34a:	4613      	mov	r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	4413      	add	r3, r2
 800e350:	00db      	lsls	r3, r3, #3
 800e352:	440b      	add	r3, r1
 800e354:	3350      	adds	r3, #80	; 0x50
 800e356:	78ba      	ldrb	r2, [r7, #2]
 800e358:	701a      	strb	r2, [r3, #0]
 800e35a:	e009      	b.n	800e370 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	68f9      	ldr	r1, [r7, #12]
 800e360:	4613      	mov	r3, r2
 800e362:	009b      	lsls	r3, r3, #2
 800e364:	4413      	add	r3, r2
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	440b      	add	r3, r1
 800e36a:	3351      	adds	r3, #81	; 0x51
 800e36c:	78ba      	ldrb	r2, [r7, #2]
 800e36e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3714      	adds	r7, #20
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b082      	sub	sp, #8
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f7f4 f95a 	bl	8002640 <HAL_Delay>
}
 800e38c:	bf00      	nop
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e3a2:	79fb      	ldrb	r3, [r7, #7]
 800e3a4:	2b03      	cmp	r3, #3
 800e3a6:	d817      	bhi.n	800e3d8 <USBH_Get_USB_Status+0x44>
 800e3a8:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <USBH_Get_USB_Status+0x1c>)
 800e3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ae:	bf00      	nop
 800e3b0:	0800e3c1 	.word	0x0800e3c1
 800e3b4:	0800e3c7 	.word	0x0800e3c7
 800e3b8:	0800e3cd 	.word	0x0800e3cd
 800e3bc:	0800e3d3 	.word	0x0800e3d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3c4:	e00b      	b.n	800e3de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e3c6:	2302      	movs	r3, #2
 800e3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ca:	e008      	b.n	800e3de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d0:	e005      	b.n	800e3de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e3d2:	2302      	movs	r3, #2
 800e3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d6:	e002      	b.n	800e3de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e3d8:	2302      	movs	r3, #2
 800e3da:	73fb      	strb	r3, [r7, #15]
    break;
 800e3dc:	bf00      	nop
  }
  return usb_status;
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr

0800e3ec <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e3f6:	79fb      	ldrb	r3, [r7, #7]
 800e3f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d102      	bne.n	800e406 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800e400:	2301      	movs	r3, #1
 800e402:	73fb      	strb	r3, [r7, #15]
 800e404:	e001      	b.n	800e40a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e406:	2300      	movs	r3, #0
 800e408:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800e40a:	7bfb      	ldrb	r3, [r7, #15]
 800e40c:	461a      	mov	r2, r3
 800e40e:	2110      	movs	r1, #16
 800e410:	4803      	ldr	r0, [pc, #12]	; (800e420 <MX_DriverVbusHS+0x34>)
 800e412:	f7f5 fa41 	bl	8003898 <HAL_GPIO_WritePin>
}
 800e416:	bf00      	nop
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	40020800 	.word	0x40020800

0800e424 <__errno>:
 800e424:	4b01      	ldr	r3, [pc, #4]	; (800e42c <__errno+0x8>)
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	20000078 	.word	0x20000078

0800e430 <__libc_init_array>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	4e0d      	ldr	r6, [pc, #52]	; (800e468 <__libc_init_array+0x38>)
 800e434:	4c0d      	ldr	r4, [pc, #52]	; (800e46c <__libc_init_array+0x3c>)
 800e436:	1ba4      	subs	r4, r4, r6
 800e438:	10a4      	asrs	r4, r4, #2
 800e43a:	2500      	movs	r5, #0
 800e43c:	42a5      	cmp	r5, r4
 800e43e:	d109      	bne.n	800e454 <__libc_init_array+0x24>
 800e440:	4e0b      	ldr	r6, [pc, #44]	; (800e470 <__libc_init_array+0x40>)
 800e442:	4c0c      	ldr	r4, [pc, #48]	; (800e474 <__libc_init_array+0x44>)
 800e444:	f000 f8f6 	bl	800e634 <_init>
 800e448:	1ba4      	subs	r4, r4, r6
 800e44a:	10a4      	asrs	r4, r4, #2
 800e44c:	2500      	movs	r5, #0
 800e44e:	42a5      	cmp	r5, r4
 800e450:	d105      	bne.n	800e45e <__libc_init_array+0x2e>
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e458:	4798      	blx	r3
 800e45a:	3501      	adds	r5, #1
 800e45c:	e7ee      	b.n	800e43c <__libc_init_array+0xc>
 800e45e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e462:	4798      	blx	r3
 800e464:	3501      	adds	r5, #1
 800e466:	e7f2      	b.n	800e44e <__libc_init_array+0x1e>
 800e468:	08010198 	.word	0x08010198
 800e46c:	08010198 	.word	0x08010198
 800e470:	08010198 	.word	0x08010198
 800e474:	0801019c 	.word	0x0801019c

0800e478 <malloc>:
 800e478:	4b02      	ldr	r3, [pc, #8]	; (800e484 <malloc+0xc>)
 800e47a:	4601      	mov	r1, r0
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	f000 b86d 	b.w	800e55c <_malloc_r>
 800e482:	bf00      	nop
 800e484:	20000078 	.word	0x20000078

0800e488 <free>:
 800e488:	4b02      	ldr	r3, [pc, #8]	; (800e494 <free+0xc>)
 800e48a:	4601      	mov	r1, r0
 800e48c:	6818      	ldr	r0, [r3, #0]
 800e48e:	f000 b817 	b.w	800e4c0 <_free_r>
 800e492:	bf00      	nop
 800e494:	20000078 	.word	0x20000078

0800e498 <memcpy>:
 800e498:	b510      	push	{r4, lr}
 800e49a:	1e43      	subs	r3, r0, #1
 800e49c:	440a      	add	r2, r1
 800e49e:	4291      	cmp	r1, r2
 800e4a0:	d100      	bne.n	800e4a4 <memcpy+0xc>
 800e4a2:	bd10      	pop	{r4, pc}
 800e4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4ac:	e7f7      	b.n	800e49e <memcpy+0x6>

0800e4ae <memset>:
 800e4ae:	4402      	add	r2, r0
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d100      	bne.n	800e4b8 <memset+0xa>
 800e4b6:	4770      	bx	lr
 800e4b8:	f803 1b01 	strb.w	r1, [r3], #1
 800e4bc:	e7f9      	b.n	800e4b2 <memset+0x4>
	...

0800e4c0 <_free_r>:
 800e4c0:	b538      	push	{r3, r4, r5, lr}
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	d045      	beq.n	800e554 <_free_r+0x94>
 800e4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4cc:	1f0c      	subs	r4, r1, #4
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	bfb8      	it	lt
 800e4d2:	18e4      	addlt	r4, r4, r3
 800e4d4:	f000 f8ac 	bl	800e630 <__malloc_lock>
 800e4d8:	4a1f      	ldr	r2, [pc, #124]	; (800e558 <_free_r+0x98>)
 800e4da:	6813      	ldr	r3, [r2, #0]
 800e4dc:	4610      	mov	r0, r2
 800e4de:	b933      	cbnz	r3, 800e4ee <_free_r+0x2e>
 800e4e0:	6063      	str	r3, [r4, #4]
 800e4e2:	6014      	str	r4, [r2, #0]
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ea:	f000 b8a2 	b.w	800e632 <__malloc_unlock>
 800e4ee:	42a3      	cmp	r3, r4
 800e4f0:	d90c      	bls.n	800e50c <_free_r+0x4c>
 800e4f2:	6821      	ldr	r1, [r4, #0]
 800e4f4:	1862      	adds	r2, r4, r1
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	bf04      	itt	eq
 800e4fa:	681a      	ldreq	r2, [r3, #0]
 800e4fc:	685b      	ldreq	r3, [r3, #4]
 800e4fe:	6063      	str	r3, [r4, #4]
 800e500:	bf04      	itt	eq
 800e502:	1852      	addeq	r2, r2, r1
 800e504:	6022      	streq	r2, [r4, #0]
 800e506:	6004      	str	r4, [r0, #0]
 800e508:	e7ec      	b.n	800e4e4 <_free_r+0x24>
 800e50a:	4613      	mov	r3, r2
 800e50c:	685a      	ldr	r2, [r3, #4]
 800e50e:	b10a      	cbz	r2, 800e514 <_free_r+0x54>
 800e510:	42a2      	cmp	r2, r4
 800e512:	d9fa      	bls.n	800e50a <_free_r+0x4a>
 800e514:	6819      	ldr	r1, [r3, #0]
 800e516:	1858      	adds	r0, r3, r1
 800e518:	42a0      	cmp	r0, r4
 800e51a:	d10b      	bne.n	800e534 <_free_r+0x74>
 800e51c:	6820      	ldr	r0, [r4, #0]
 800e51e:	4401      	add	r1, r0
 800e520:	1858      	adds	r0, r3, r1
 800e522:	4282      	cmp	r2, r0
 800e524:	6019      	str	r1, [r3, #0]
 800e526:	d1dd      	bne.n	800e4e4 <_free_r+0x24>
 800e528:	6810      	ldr	r0, [r2, #0]
 800e52a:	6852      	ldr	r2, [r2, #4]
 800e52c:	605a      	str	r2, [r3, #4]
 800e52e:	4401      	add	r1, r0
 800e530:	6019      	str	r1, [r3, #0]
 800e532:	e7d7      	b.n	800e4e4 <_free_r+0x24>
 800e534:	d902      	bls.n	800e53c <_free_r+0x7c>
 800e536:	230c      	movs	r3, #12
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	e7d3      	b.n	800e4e4 <_free_r+0x24>
 800e53c:	6820      	ldr	r0, [r4, #0]
 800e53e:	1821      	adds	r1, r4, r0
 800e540:	428a      	cmp	r2, r1
 800e542:	bf04      	itt	eq
 800e544:	6811      	ldreq	r1, [r2, #0]
 800e546:	6852      	ldreq	r2, [r2, #4]
 800e548:	6062      	str	r2, [r4, #4]
 800e54a:	bf04      	itt	eq
 800e54c:	1809      	addeq	r1, r1, r0
 800e54e:	6021      	streq	r1, [r4, #0]
 800e550:	605c      	str	r4, [r3, #4]
 800e552:	e7c7      	b.n	800e4e4 <_free_r+0x24>
 800e554:	bd38      	pop	{r3, r4, r5, pc}
 800e556:	bf00      	nop
 800e558:	20008654 	.word	0x20008654

0800e55c <_malloc_r>:
 800e55c:	b570      	push	{r4, r5, r6, lr}
 800e55e:	1ccd      	adds	r5, r1, #3
 800e560:	f025 0503 	bic.w	r5, r5, #3
 800e564:	3508      	adds	r5, #8
 800e566:	2d0c      	cmp	r5, #12
 800e568:	bf38      	it	cc
 800e56a:	250c      	movcc	r5, #12
 800e56c:	2d00      	cmp	r5, #0
 800e56e:	4606      	mov	r6, r0
 800e570:	db01      	blt.n	800e576 <_malloc_r+0x1a>
 800e572:	42a9      	cmp	r1, r5
 800e574:	d903      	bls.n	800e57e <_malloc_r+0x22>
 800e576:	230c      	movs	r3, #12
 800e578:	6033      	str	r3, [r6, #0]
 800e57a:	2000      	movs	r0, #0
 800e57c:	bd70      	pop	{r4, r5, r6, pc}
 800e57e:	f000 f857 	bl	800e630 <__malloc_lock>
 800e582:	4a21      	ldr	r2, [pc, #132]	; (800e608 <_malloc_r+0xac>)
 800e584:	6814      	ldr	r4, [r2, #0]
 800e586:	4621      	mov	r1, r4
 800e588:	b991      	cbnz	r1, 800e5b0 <_malloc_r+0x54>
 800e58a:	4c20      	ldr	r4, [pc, #128]	; (800e60c <_malloc_r+0xb0>)
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	b91b      	cbnz	r3, 800e598 <_malloc_r+0x3c>
 800e590:	4630      	mov	r0, r6
 800e592:	f000 f83d 	bl	800e610 <_sbrk_r>
 800e596:	6020      	str	r0, [r4, #0]
 800e598:	4629      	mov	r1, r5
 800e59a:	4630      	mov	r0, r6
 800e59c:	f000 f838 	bl	800e610 <_sbrk_r>
 800e5a0:	1c43      	adds	r3, r0, #1
 800e5a2:	d124      	bne.n	800e5ee <_malloc_r+0x92>
 800e5a4:	230c      	movs	r3, #12
 800e5a6:	6033      	str	r3, [r6, #0]
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	f000 f842 	bl	800e632 <__malloc_unlock>
 800e5ae:	e7e4      	b.n	800e57a <_malloc_r+0x1e>
 800e5b0:	680b      	ldr	r3, [r1, #0]
 800e5b2:	1b5b      	subs	r3, r3, r5
 800e5b4:	d418      	bmi.n	800e5e8 <_malloc_r+0x8c>
 800e5b6:	2b0b      	cmp	r3, #11
 800e5b8:	d90f      	bls.n	800e5da <_malloc_r+0x7e>
 800e5ba:	600b      	str	r3, [r1, #0]
 800e5bc:	50cd      	str	r5, [r1, r3]
 800e5be:	18cc      	adds	r4, r1, r3
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f000 f836 	bl	800e632 <__malloc_unlock>
 800e5c6:	f104 000b 	add.w	r0, r4, #11
 800e5ca:	1d23      	adds	r3, r4, #4
 800e5cc:	f020 0007 	bic.w	r0, r0, #7
 800e5d0:	1ac3      	subs	r3, r0, r3
 800e5d2:	d0d3      	beq.n	800e57c <_malloc_r+0x20>
 800e5d4:	425a      	negs	r2, r3
 800e5d6:	50e2      	str	r2, [r4, r3]
 800e5d8:	e7d0      	b.n	800e57c <_malloc_r+0x20>
 800e5da:	428c      	cmp	r4, r1
 800e5dc:	684b      	ldr	r3, [r1, #4]
 800e5de:	bf16      	itet	ne
 800e5e0:	6063      	strne	r3, [r4, #4]
 800e5e2:	6013      	streq	r3, [r2, #0]
 800e5e4:	460c      	movne	r4, r1
 800e5e6:	e7eb      	b.n	800e5c0 <_malloc_r+0x64>
 800e5e8:	460c      	mov	r4, r1
 800e5ea:	6849      	ldr	r1, [r1, #4]
 800e5ec:	e7cc      	b.n	800e588 <_malloc_r+0x2c>
 800e5ee:	1cc4      	adds	r4, r0, #3
 800e5f0:	f024 0403 	bic.w	r4, r4, #3
 800e5f4:	42a0      	cmp	r0, r4
 800e5f6:	d005      	beq.n	800e604 <_malloc_r+0xa8>
 800e5f8:	1a21      	subs	r1, r4, r0
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	f000 f808 	bl	800e610 <_sbrk_r>
 800e600:	3001      	adds	r0, #1
 800e602:	d0cf      	beq.n	800e5a4 <_malloc_r+0x48>
 800e604:	6025      	str	r5, [r4, #0]
 800e606:	e7db      	b.n	800e5c0 <_malloc_r+0x64>
 800e608:	20008654 	.word	0x20008654
 800e60c:	20008658 	.word	0x20008658

0800e610 <_sbrk_r>:
 800e610:	b538      	push	{r3, r4, r5, lr}
 800e612:	4c06      	ldr	r4, [pc, #24]	; (800e62c <_sbrk_r+0x1c>)
 800e614:	2300      	movs	r3, #0
 800e616:	4605      	mov	r5, r0
 800e618:	4608      	mov	r0, r1
 800e61a:	6023      	str	r3, [r4, #0]
 800e61c:	f7f2 fefa 	bl	8001414 <_sbrk>
 800e620:	1c43      	adds	r3, r0, #1
 800e622:	d102      	bne.n	800e62a <_sbrk_r+0x1a>
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	b103      	cbz	r3, 800e62a <_sbrk_r+0x1a>
 800e628:	602b      	str	r3, [r5, #0]
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	20009048 	.word	0x20009048

0800e630 <__malloc_lock>:
 800e630:	4770      	bx	lr

0800e632 <__malloc_unlock>:
 800e632:	4770      	bx	lr

0800e634 <_init>:
 800e634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e636:	bf00      	nop
 800e638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63a:	bc08      	pop	{r3}
 800e63c:	469e      	mov	lr, r3
 800e63e:	4770      	bx	lr

0800e640 <_fini>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	bf00      	nop
 800e644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e646:	bc08      	pop	{r3}
 800e648:	469e      	mov	lr, r3
 800e64a:	4770      	bx	lr
