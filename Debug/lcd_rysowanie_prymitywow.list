
lcd_rysowanie_prymitywow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc0  0800bd38  0800bd38  0001bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9f8  0800d9f8  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9f8  0800d9f8  0001d9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da00  0800da00  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da00  0800da00  0001da00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da04  0800da04  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800da08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000930  200000bc  0800dac4  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009ec  0800dac4  000209ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b07  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065a2  00000000  00000000  00050bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002638  00000000  00000000  00057198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002338  00000000  00000000  000597d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d5d3  00000000  00000000  0005bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000272b2  00000000  00000000  000890db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5f7e  00000000  00000000  000b038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a630b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4dc  00000000  00000000  001a6388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bd20 	.word	0x0800bd20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	0800bd20 	.word	0x0800bd20

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <drawingCircle>:
 */

///RGB_Code: the pixel color in ARGB mode (8-8-8-8)

void drawingCircle (uint16_t x_pos, uint16_t y_pos, uint16_t rad, uint32_t color)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	4603      	mov	r3, r0
 80004fa:	81fb      	strh	r3, [r7, #14]
 80004fc:	460b      	mov	r3, r1
 80004fe:	81bb      	strh	r3, [r7, #12]
 8000500:	4613      	mov	r3, r2
 8000502:	817b      	strh	r3, [r7, #10]
	uint16_t x_cur = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	82fb      	strh	r3, [r7, #22]
    uint16_t y_cur = rad;
 8000508:	897b      	ldrh	r3, [r7, #10]
 800050a:	82bb      	strh	r3, [r7, #20]
    int16_t c = 2 * (1 - rad);
 800050c:	897b      	ldrh	r3, [r7, #10]
 800050e:	f1c3 0301 	rsb	r3, r3, #1
 8000512:	b29b      	uxth	r3, r3
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	b29b      	uxth	r3, r3
 8000518:	827b      	strh	r3, [r7, #18]

    while(x_cur <= y_cur)
 800051a:	e080      	b.n	800061e <drawingCircle+0x12e>
    {
        BSP_LCD_DrawPixel(x_pos + x_cur, y_pos + y_cur, color);
 800051c:	89fa      	ldrh	r2, [r7, #14]
 800051e:	8afb      	ldrh	r3, [r7, #22]
 8000520:	4413      	add	r3, r2
 8000522:	b298      	uxth	r0, r3
 8000524:	89ba      	ldrh	r2, [r7, #12]
 8000526:	8abb      	ldrh	r3, [r7, #20]
 8000528:	4413      	add	r3, r2
 800052a:	b29b      	uxth	r3, r3
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	f002 fd02 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x_cur,y_pos + y_cur, color);
 8000534:	89fa      	ldrh	r2, [r7, #14]
 8000536:	8afb      	ldrh	r3, [r7, #22]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	b298      	uxth	r0, r3
 800053c:	89ba      	ldrh	r2, [r7, #12]
 800053e:	8abb      	ldrh	r3, [r7, #20]
 8000540:	4413      	add	r3, r2
 8000542:	b29b      	uxth	r3, r3
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4619      	mov	r1, r3
 8000548:	f002 fcf6 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x_cur,y_pos + -y_cur, color);
 800054c:	89fa      	ldrh	r2, [r7, #14]
 800054e:	8afb      	ldrh	r3, [r7, #22]
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	b298      	uxth	r0, r3
 8000554:	89ba      	ldrh	r2, [r7, #12]
 8000556:	8abb      	ldrh	r3, [r7, #20]
 8000558:	1ad3      	subs	r3, r2, r3
 800055a:	b29b      	uxth	r3, r3
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4619      	mov	r1, r3
 8000560:	f002 fcea 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + x_cur,y_pos + -y_cur, color);
 8000564:	89fa      	ldrh	r2, [r7, #14]
 8000566:	8afb      	ldrh	r3, [r7, #22]
 8000568:	4413      	add	r3, r2
 800056a:	b298      	uxth	r0, r3
 800056c:	89ba      	ldrh	r2, [r7, #12]
 800056e:	8abb      	ldrh	r3, [r7, #20]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	b29b      	uxth	r3, r3
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4619      	mov	r1, r3
 8000578:	f002 fcde 	bl	8002f38 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + y_cur,y_pos + x_cur, color);
 800057c:	89fa      	ldrh	r2, [r7, #14]
 800057e:	8abb      	ldrh	r3, [r7, #20]
 8000580:	4413      	add	r3, r2
 8000582:	b298      	uxth	r0, r3
 8000584:	89ba      	ldrh	r2, [r7, #12]
 8000586:	8afb      	ldrh	r3, [r7, #22]
 8000588:	4413      	add	r3, r2
 800058a:	b29b      	uxth	r3, r3
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4619      	mov	r1, r3
 8000590:	f002 fcd2 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y_cur,y_pos + x_cur, color);
 8000594:	89fa      	ldrh	r2, [r7, #14]
 8000596:	8abb      	ldrh	r3, [r7, #20]
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b298      	uxth	r0, r3
 800059c:	89ba      	ldrh	r2, [r7, #12]
 800059e:	8afb      	ldrh	r3, [r7, #22]
 80005a0:	4413      	add	r3, r2
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4619      	mov	r1, r3
 80005a8:	f002 fcc6 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y_cur,y_pos + -x_cur, color);
 80005ac:	89fa      	ldrh	r2, [r7, #14]
 80005ae:	8abb      	ldrh	r3, [r7, #20]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	b298      	uxth	r0, r3
 80005b4:	89ba      	ldrh	r2, [r7, #12]
 80005b6:	8afb      	ldrh	r3, [r7, #22]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4619      	mov	r1, r3
 80005c0:	f002 fcba 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + y_cur,y_pos + -x_cur, color);
 80005c4:	89fa      	ldrh	r2, [r7, #14]
 80005c6:	8abb      	ldrh	r3, [r7, #20]
 80005c8:	4413      	add	r3, r2
 80005ca:	b298      	uxth	r0, r3
 80005cc:	89ba      	ldrh	r2, [r7, #12]
 80005ce:	8afb      	ldrh	r3, [r7, #22]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	4619      	mov	r1, r3
 80005d8:	f002 fcae 	bl	8002f38 <BSP_LCD_DrawPixel>

        if(2 * c > 1 - 2 * y_cur)
 80005dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80005e0:	005a      	lsls	r2, r3, #1
 80005e2:	8abb      	ldrh	r3, [r7, #20]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	f1c3 0301 	rsb	r3, r3, #1
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dd0b      	ble.n	8000606 <drawingCircle+0x116>
        {
            y_cur--;
 80005ee:	8abb      	ldrh	r3, [r7, #20]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	82bb      	strh	r3, [r7, #20]
            c -= 2 * y_cur - 1;
 80005f4:	8a7a      	ldrh	r2, [r7, #18]
 80005f6:	8abb      	ldrh	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	b29b      	uxth	r3, r3
 8000600:	3301      	adds	r3, #1
 8000602:	b29b      	uxth	r3, r3
 8000604:	827b      	strh	r3, [r7, #18]
        }
        x_cur++;
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	3301      	adds	r3, #1
 800060a:	82fb      	strh	r3, [r7, #22]
        c += 2 * x_cur + 1;
 800060c:	8afb      	ldrh	r3, [r7, #22]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	8a7b      	ldrh	r3, [r7, #18]
 8000614:	4413      	add	r3, r2
 8000616:	b29b      	uxth	r3, r3
 8000618:	3301      	adds	r3, #1
 800061a:	b29b      	uxth	r3, r3
 800061c:	827b      	strh	r3, [r7, #18]
    while(x_cur <= y_cur)
 800061e:	8afa      	ldrh	r2, [r7, #22]
 8000620:	8abb      	ldrh	r3, [r7, #20]
 8000622:	429a      	cmp	r2, r3
 8000624:	f67f af7a 	bls.w	800051c <drawingCircle+0x2c>
    }
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <DrawLine>:
 *
 * source: http://mst.mimuw.edu.pl/lecture.php?lecture=gk1&part=Ch2
 */

void DrawLine ( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	4604      	mov	r4, r0
 8000638:	4608      	mov	r0, r1
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	4623      	mov	r3, r4
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4603      	mov	r3, r0
 8000644:	80bb      	strh	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	807b      	strh	r3, [r7, #2]
 800064a:	4613      	mov	r3, r2
 800064c:	803b      	strh	r3, [r7, #0]
    int16_t delta_x, delta_y, g, h, c;

    delta_x = x2-x1;
 800064e:	887a      	ldrh	r2, [r7, #2]
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b29b      	uxth	r3, r3
 8000656:	823b      	strh	r3, [r7, #16]
    if (delta_x > 0)
 8000658:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800065c:	2b00      	cmp	r3, #0
 800065e:	dd02      	ble.n	8000666 <DrawLine+0x36>
        g = +1;
 8000660:	2301      	movs	r3, #1
 8000662:	82fb      	strh	r3, [r7, #22]
 8000664:	e002      	b.n	800066c <DrawLine+0x3c>
    else
        g = -1;
 8000666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800066a:	82fb      	strh	r3, [r7, #22]
    delta_x = abs(delta_x);
 800066c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000670:	2b00      	cmp	r3, #0
 8000672:	bfb8      	it	lt
 8000674:	425b      	neglt	r3, r3
 8000676:	823b      	strh	r3, [r7, #16]
    delta_y = y2-y1;
 8000678:	883a      	ldrh	r2, [r7, #0]
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	b29b      	uxth	r3, r3
 8000680:	81fb      	strh	r3, [r7, #14]
    if (delta_y > 0)
 8000682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000686:	2b00      	cmp	r3, #0
 8000688:	dd02      	ble.n	8000690 <DrawLine+0x60>
        h = +1;
 800068a:	2301      	movs	r3, #1
 800068c:	82bb      	strh	r3, [r7, #20]
 800068e:	e002      	b.n	8000696 <DrawLine+0x66>
    else
        h = -1;
 8000690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000694:	82bb      	strh	r3, [r7, #20]
    delta_y = abs(delta_y);
 8000696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800069a:	2b00      	cmp	r3, #0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	81fb      	strh	r3, [r7, #14]
    if (delta_x > delta_y)
 80006a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80006a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dd2d      	ble.n	800070a <DrawLine+0xda>
    {
        c = -delta_x;
 80006ae:	8a3b      	ldrh	r3, [r7, #16]
 80006b0:	425b      	negs	r3, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	827b      	strh	r3, [r7, #18]
        while (x1 != x2) {
 80006b6:	e021      	b.n	80006fc <DrawLine+0xcc>
        BSP_LCD_DrawPixel(x1,y1, color);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	88b9      	ldrh	r1, [r7, #4]
 80006bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fc3a 	bl	8002f38 <BSP_LCD_DrawPixel>
        c += 2*delta_y;
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	8a7b      	ldrh	r3, [r7, #18]
 80006cc:	4413      	add	r3, r2
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	827b      	strh	r3, [r7, #18]
        if (c > 0)
 80006d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	dd0b      	ble.n	80006f2 <DrawLine+0xc2>
        {
            y1 += h;
 80006da:	88ba      	ldrh	r2, [r7, #4]
 80006dc:	8abb      	ldrh	r3, [r7, #20]
 80006de:	4413      	add	r3, r2
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	80bb      	strh	r3, [r7, #4]
            c -= 2*delta_x;
 80006e4:	8a7a      	ldrh	r2, [r7, #18]
 80006e6:	8a3b      	ldrh	r3, [r7, #16]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	827b      	strh	r3, [r7, #18]
        }
        x1 += g;
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	8afb      	ldrh	r3, [r7, #22]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	80fb      	strh	r3, [r7, #6]
        while (x1 != x2) {
 80006fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000700:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000704:	429a      	cmp	r2, r3
 8000706:	d1d7      	bne.n	80006b8 <DrawLine+0x88>
                c -= 2*delta_y;
            }
            y1 += h;
        }
    }
}
 8000708:	e02c      	b.n	8000764 <DrawLine+0x134>
        c = -delta_y;
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	425b      	negs	r3, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	827b      	strh	r3, [r7, #18]
        while (y1 != y2)
 8000712:	e021      	b.n	8000758 <DrawLine+0x128>
            BSP_LCD_DrawPixel(x1,y1, color);
 8000714:	88fb      	ldrh	r3, [r7, #6]
 8000716:	88b9      	ldrh	r1, [r7, #4]
 8000718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071a:	4618      	mov	r0, r3
 800071c:	f002 fc0c 	bl	8002f38 <BSP_LCD_DrawPixel>
            c += 2*delta_x;
 8000720:	8a3b      	ldrh	r3, [r7, #16]
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	b29a      	uxth	r2, r3
 8000726:	8a7b      	ldrh	r3, [r7, #18]
 8000728:	4413      	add	r3, r2
 800072a:	b29b      	uxth	r3, r3
 800072c:	827b      	strh	r3, [r7, #18]
            if (c > 0)
 800072e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000732:	2b00      	cmp	r3, #0
 8000734:	dd0b      	ble.n	800074e <DrawLine+0x11e>
                x1 += g;
 8000736:	88fa      	ldrh	r2, [r7, #6]
 8000738:	8afb      	ldrh	r3, [r7, #22]
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	80fb      	strh	r3, [r7, #6]
                c -= 2*delta_y;
 8000740:	8a7a      	ldrh	r2, [r7, #18]
 8000742:	89fb      	ldrh	r3, [r7, #14]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	b29b      	uxth	r3, r3
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	b29b      	uxth	r3, r3
 800074c:	827b      	strh	r3, [r7, #18]
            y1 += h;
 800074e:	88ba      	ldrh	r2, [r7, #4]
 8000750:	8abb      	ldrh	r3, [r7, #20]
 8000752:	4413      	add	r3, r2
 8000754:	b29b      	uxth	r3, r3
 8000756:	80bb      	strh	r3, [r7, #4]
        while (y1 != y2)
 8000758:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800075c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000760:	429a      	cmp	r2, r3
 8000762:	d1d7      	bne.n	8000714 <DrawLine+0xe4>
}
 8000764:	bf00      	nop
 8000766:	371c      	adds	r7, #28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd90      	pop	{r4, r7, pc}

0800076c <drawingLetterD>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterD (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b087      	sub	sp, #28
 8000770:	af02      	add	r7, sp, #8
 8000772:	4603      	mov	r3, r0
 8000774:	603a      	str	r2, [r7, #0]
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	460b      	mov	r3, r1
 800077a:	80bb      	strh	r3, [r7, #4]
    DrawLine(x_pos, y_pos, x_pos, y_pos-45, color);
 800077c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000780:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000784:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	3b2d      	subs	r3, #45	; 0x2d
 800078c:	b29b      	uxth	r3, r3
 800078e:	b21c      	sxth	r4, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	4623      	mov	r3, r4
 8000796:	f7ff ff4b 	bl	8000630 <DrawLine>

    x_pos = (int16_t)x_pos;
    y_pos = (int16_t)(y_pos - 23);
 800079a:	88bb      	ldrh	r3, [r7, #4]
 800079c:	3b17      	subs	r3, #23
 800079e:	80bb      	strh	r3, [r7, #4]
    int16_t rad = 24;
 80007a0:	2318      	movs	r3, #24
 80007a2:	813b      	strh	r3, [r7, #8]
    int16_t x = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	81fb      	strh	r3, [r7, #14]
    int16_t y = rad;
 80007a8:	893b      	ldrh	r3, [r7, #8]
 80007aa:	81bb      	strh	r3, [r7, #12]
    int16_t c = 2*(1 - rad);
 80007ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007b0:	f1c3 0301 	rsb	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	817b      	strh	r3, [r7, #10]

    while(x<=y)
 80007bc:	e057      	b.n	800086e <drawingLetterD+0x102>
    {
        BSP_LCD_DrawPixel(x_pos + x, y_pos + y, color);
 80007be:	89fa      	ldrh	r2, [r7, #14]
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	4413      	add	r3, r2
 80007c4:	b298      	uxth	r0, r3
 80007c6:	89ba      	ldrh	r2, [r7, #12]
 80007c8:	88bb      	ldrh	r3, [r7, #4]
 80007ca:	4413      	add	r3, r2
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f002 fbb1 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + x,y_pos + -y, color);
 80007d6:	89fa      	ldrh	r2, [r7, #14]
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	4413      	add	r3, r2
 80007dc:	b298      	uxth	r0, r3
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	88ba      	ldrh	r2, [r7, #4]
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	683a      	ldr	r2, [r7, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f002 fba5 	bl	8002f38 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + y,y_pos + x, color);
 80007ee:	89ba      	ldrh	r2, [r7, #12]
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	4413      	add	r3, r2
 80007f4:	b298      	uxth	r0, r3
 80007f6:	89fa      	ldrh	r2, [r7, #14]
 80007f8:	88bb      	ldrh	r3, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f002 fb99 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + y,y_pos + -x, color);
 8000806:	89ba      	ldrh	r2, [r7, #12]
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	4413      	add	r3, r2
 800080c:	b298      	uxth	r0, r3
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	88ba      	ldrh	r2, [r7, #4]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f002 fb8d 	bl	8002f38 <BSP_LCD_DrawPixel>
        if(2*c > 1-2*y){
 800081e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000822:	005a      	lsls	r2, r3, #1
 8000824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	f1c3 0301 	rsb	r3, r3, #1
 800082e:	429a      	cmp	r2, r3
 8000830:	dd0e      	ble.n	8000850 <drawingLetterD+0xe4>
            y--;
 8000832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000836:	b29b      	uxth	r3, r3
 8000838:	3b01      	subs	r3, #1
 800083a:	b29b      	uxth	r3, r3
 800083c:	81bb      	strh	r3, [r7, #12]
            c -= 2*y-1;
 800083e:	897a      	ldrh	r2, [r7, #10]
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	b29b      	uxth	r3, r3
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	3301      	adds	r3, #1
 800084c:	b29b      	uxth	r3, r3
 800084e:	817b      	strh	r3, [r7, #10]
        }
        x++;
 8000850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000854:	b29b      	uxth	r3, r3
 8000856:	3301      	adds	r3, #1
 8000858:	b29b      	uxth	r3, r3
 800085a:	81fb      	strh	r3, [r7, #14]
        c+=2*x+1;
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	b29a      	uxth	r2, r3
 8000862:	897b      	ldrh	r3, [r7, #10]
 8000864:	4413      	add	r3, r2
 8000866:	b29b      	uxth	r3, r3
 8000868:	3301      	adds	r3, #1
 800086a:	b29b      	uxth	r3, r3
 800086c:	817b      	strh	r3, [r7, #10]
    while(x<=y)
 800086e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000872:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000876:	429a      	cmp	r2, r3
 8000878:	dda1      	ble.n	80007be <drawingLetterD+0x52>
    }
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bd90      	pop	{r4, r7, pc}

08000882 <drawingLetterC>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterC (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	603a      	str	r2, [r7, #0]
 800088c:	80fb      	strh	r3, [r7, #6]
 800088e:	460b      	mov	r3, r1
 8000890:	80bb      	strh	r3, [r7, #4]
    y_pos = y_pos - 23;
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	3b17      	subs	r3, #23
 8000896:	80bb      	strh	r3, [r7, #4]

    int16_t rad = 24;
 8000898:	2318      	movs	r3, #24
 800089a:	813b      	strh	r3, [r7, #8]

    int16_t x = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	81fb      	strh	r3, [r7, #14]
    int16_t y = rad;
 80008a0:	893b      	ldrh	r3, [r7, #8]
 80008a2:	81bb      	strh	r3, [r7, #12]

    int16_t c = 2*(1 - rad);
 80008a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80008a8:	f1c3 0301 	rsb	r3, r3, #1
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	817b      	strh	r3, [r7, #10]

    while(x<=y){
 80008b4:	e057      	b.n	8000966 <drawingLetterC+0xe4>
        BSP_LCD_DrawPixel(x_pos + -x,y_pos + y, color);
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	88fa      	ldrh	r2, [r7, #6]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	b298      	uxth	r0, r3
 80008be:	89ba      	ldrh	r2, [r7, #12]
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	4413      	add	r3, r2
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	f002 fb35 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x,y_pos + -y, color);
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	88fa      	ldrh	r2, [r7, #6]
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	b298      	uxth	r0, r3
 80008d6:	89bb      	ldrh	r3, [r7, #12]
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	b29b      	uxth	r3, r3
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f002 fb29 	bl	8002f38 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + -y,y_pos + x, color);
 80008e6:	89bb      	ldrh	r3, [r7, #12]
 80008e8:	88fa      	ldrh	r2, [r7, #6]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	b298      	uxth	r0, r3
 80008ee:	89fa      	ldrh	r2, [r7, #14]
 80008f0:	88bb      	ldrh	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f002 fb1d 	bl	8002f38 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y,y_pos + -x, color);
 80008fe:	89bb      	ldrh	r3, [r7, #12]
 8000900:	88fa      	ldrh	r2, [r7, #6]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	b298      	uxth	r0, r3
 8000906:	89fb      	ldrh	r3, [r7, #14]
 8000908:	88ba      	ldrh	r2, [r7, #4]
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	b29b      	uxth	r3, r3
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f002 fb11 	bl	8002f38 <BSP_LCD_DrawPixel>
        if(2*c > 1-2*y){
 8000916:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800091a:	005a      	lsls	r2, r3, #1
 800091c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	f1c3 0301 	rsb	r3, r3, #1
 8000926:	429a      	cmp	r2, r3
 8000928:	dd0e      	ble.n	8000948 <drawingLetterC+0xc6>
            y--;
 800092a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800092e:	b29b      	uxth	r3, r3
 8000930:	3b01      	subs	r3, #1
 8000932:	b29b      	uxth	r3, r3
 8000934:	81bb      	strh	r3, [r7, #12]
            c -= 2*y-1;
 8000936:	897a      	ldrh	r2, [r7, #10]
 8000938:	89bb      	ldrh	r3, [r7, #12]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	b29b      	uxth	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b29b      	uxth	r3, r3
 8000946:	817b      	strh	r3, [r7, #10]
        }
        x++;
 8000948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800094c:	b29b      	uxth	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b29b      	uxth	r3, r3
 8000952:	81fb      	strh	r3, [r7, #14]
        c+=2*x+1;
 8000954:	89fb      	ldrh	r3, [r7, #14]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	b29a      	uxth	r2, r3
 800095a:	897b      	ldrh	r3, [r7, #10]
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	3301      	adds	r3, #1
 8000962:	b29b      	uxth	r3, r3
 8000964:	817b      	strh	r3, [r7, #10]
    while(x<=y){
 8000966:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800096a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800096e:	429a      	cmp	r2, r3
 8000970:	dda1      	ble.n	80008b6 <drawingLetterC+0x34>
    }
}
 8000972:	bf00      	nop
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <drawingLetterA>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterA (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 800097a:	b590      	push	{r4, r7, lr}
 800097c:	b085      	sub	sp, #20
 800097e:	af02      	add	r7, sp, #8
 8000980:	4603      	mov	r3, r0
 8000982:	603a      	str	r2, [r7, #0]
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos, x_pos+20, y_pos-45, color);
 800098a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800098e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	3314      	adds	r3, #20
 8000996:	b29b      	uxth	r3, r3
 8000998:	b21a      	sxth	r2, r3
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	3b2d      	subs	r3, #45	; 0x2d
 800099e:	b29b      	uxth	r3, r3
 80009a0:	b21c      	sxth	r4, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	9300      	str	r3, [sp, #0]
 80009a6:	4623      	mov	r3, r4
 80009a8:	f7ff fe42 	bl	8000630 <DrawLine>
     DrawLine(x_pos+20, y_pos-45, x_pos+40, y_pos, color);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	3314      	adds	r3, #20
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b218      	sxth	r0, r3
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	3b2d      	subs	r3, #45	; 0x2d
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	b219      	sxth	r1, r3
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	3328      	adds	r3, #40	; 0x28
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	4623      	mov	r3, r4
 80009ce:	f7ff fe2f 	bl	8000630 <DrawLine>
     DrawLine(x_pos+5, y_pos-25, x_pos+35, y_pos-25, color);
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	3305      	adds	r3, #5
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b218      	sxth	r0, r3
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	3b19      	subs	r3, #25
 80009de:	b29b      	uxth	r3, r3
 80009e0:	b219      	sxth	r1, r3
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	3323      	adds	r3, #35	; 0x23
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b21a      	sxth	r2, r3
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	3b19      	subs	r3, #25
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b21c      	sxth	r4, r3
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	4623      	mov	r3, r4
 80009f8:	f7ff fe1a 	bl	8000630 <DrawLine>
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}

08000a04 <drawingLetterW>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterW (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	603a      	str	r2, [r7, #0]
 8000a0e:	80fb      	strh	r3, [r7, #6]
 8000a10:	460b      	mov	r3, r1
 8000a12:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos-25, x_pos+10, y_pos, color);
 8000a14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	3b19      	subs	r3, #25
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	b219      	sxth	r1, r3
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	330a      	adds	r3, #10
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4623      	mov	r3, r4
 8000a32:	f7ff fdfd 	bl	8000630 <DrawLine>
     DrawLine(x_pos+10, y_pos, x_pos+20, y_pos-20, color);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	330a      	adds	r3, #10
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b218      	sxth	r0, r3
 8000a3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a42:	88fb      	ldrh	r3, [r7, #6]
 8000a44:	3314      	adds	r3, #20
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	3b14      	subs	r3, #20
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	b21c      	sxth	r4, r3
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4623      	mov	r3, r4
 8000a58:	f7ff fdea 	bl	8000630 <DrawLine>
     DrawLine(x_pos+20, y_pos-20, x_pos+30, y_pos, color);
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	3314      	adds	r3, #20
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	b218      	sxth	r0, r3
 8000a64:	88bb      	ldrh	r3, [r7, #4]
 8000a66:	3b14      	subs	r3, #20
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	b219      	sxth	r1, r3
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	331e      	adds	r3, #30
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	4623      	mov	r3, r4
 8000a7e:	f7ff fdd7 	bl	8000630 <DrawLine>
     DrawLine(x_pos+30, y_pos, x_pos+40, y_pos-25, color);
 8000a82:	88fb      	ldrh	r3, [r7, #6]
 8000a84:	331e      	adds	r3, #30
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b218      	sxth	r0, r3
 8000a8a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a8e:	88fb      	ldrh	r3, [r7, #6]
 8000a90:	3328      	adds	r3, #40	; 0x28
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	3b19      	subs	r3, #25
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	b21c      	sxth	r4, r3
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	f7ff fdc4 	bl	8000630 <DrawLine>
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}

08000ab0 <drawingLetterN>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterN (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	603a      	str	r2, [r7, #0]
 8000aba:	80fb      	strh	r3, [r7, #6]
 8000abc:	460b      	mov	r3, r1
 8000abe:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos-25, x_pos, y_pos, color);
 8000ac0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	3b19      	subs	r3, #25
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	b219      	sxth	r1, r3
 8000acc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ad0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4623      	mov	r3, r4
 8000ada:	f7ff fda9 	bl	8000630 <DrawLine>
     DrawLine(x_pos, y_pos-25, x_pos+15, y_pos, color);
 8000ade:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	3b19      	subs	r3, #25
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b219      	sxth	r1, r3
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	330f      	adds	r3, #15
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	4623      	mov	r3, r4
 8000afc:	f7ff fd98 	bl	8000630 <DrawLine>
     DrawLine(x_pos+15, y_pos, x_pos+15, y_pos-25, color);
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	330f      	adds	r3, #15
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b218      	sxth	r0, r3
 8000b08:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	330f      	adds	r3, #15
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	88bb      	ldrh	r3, [r7, #4]
 8000b16:	3b19      	subs	r3, #25
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b21c      	sxth	r4, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	4623      	mov	r3, r4
 8000b22:	f7ff fd85 	bl	8000630 <DrawLine>
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}

08000b2e <drawingLetterL>:
 * @param x_pos X position of the bottom right corner of the letter
 * @param y_pos Y position of the bottom right corner of the letter
 */

void drawingLetterL (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b085      	sub	sp, #20
 8000b32:	af02      	add	r7, sp, #8
 8000b34:	4603      	mov	r3, r0
 8000b36:	603a      	str	r2, [r7, #0]
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos, x_pos, y_pos-45, color);
 8000b3e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b42:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	3b2d      	subs	r3, #45	; 0x2d
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	b21c      	sxth	r4, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4623      	mov	r3, r4
 8000b58:	f7ff fd6a 	bl	8000630 <DrawLine>
     DrawLine(x_pos, y_pos, x_pos+30, y_pos, color);
 8000b5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b60:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	331e      	adds	r3, #30
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b21a      	sxth	r2, r3
 8000b6c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	4623      	mov	r3, r4
 8000b76:	f7ff fd5b 	bl	8000630 <DrawLine>
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}

08000b82 <drawingText>:
 * @param x_pos X position of the bottom right corner of the letter
 * @param y_pos Y position of the bottom right corner of the letter
 */

void drawingText (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	603a      	str	r2, [r7, #0]
 8000b8c:	80fb      	strh	r3, [r7, #6]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i < 6; i++){
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e060      	b.n	8000c5a <drawingText+0xd8>
		drawingLetterA(x_pos + i, y_pos + i, color);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b298      	uxth	r0, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	88bb      	ldrh	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff fee3 	bl	800097a <drawingLetterA>
		drawingLetterW(x_pos + i + 40, y_pos + i, color);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	3328      	adds	r3, #40	; 0x28
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	f7ff ff18 	bl	8000a04 <drawingLetterW>
		drawingLetterN(x_pos + i + 85, y_pos + i, color);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	3355      	adds	r3, #85	; 0x55
 8000be0:	b298      	uxth	r0, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff ff5e 	bl	8000ab0 <drawingLetterN>
		drawingLetterL(x_pos + i + 120, y_pos + i, color);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	3378      	adds	r3, #120	; 0x78
 8000c00:	b298      	uxth	r0, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	88bb      	ldrh	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	f7ff ff8d 	bl	8000b2e <drawingLetterL>
		drawingLetterC(x_pos + i + 175, y_pos + i, color);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	33af      	adds	r3, #175	; 0xaf
 8000c20:	b298      	uxth	r0, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f7ff fe27 	bl	8000882 <drawingLetterC>
		drawingLetterD(x_pos + i + 195, y_pos + i, color);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	33c3      	adds	r3, #195	; 0xc3
 8000c40:	b298      	uxth	r0, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f7ff fd8c 	bl	800076c <drawingLetterD>
	for(int i = 0; i < 6; i++){
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	dd9b      	ble.n	8000b98 <drawingText+0x16>
	}
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <animationCircle>:
 * @param count	the number of circles
 * @param time	the time between drawings
 */

void animationCircle (uint16_t x_pos, uint16_t y_pos, uint16_t rad, uint16_t count, uint16_t time)
{
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	4611      	mov	r1, r2
 8000c74:	461a      	mov	r2, r3
 8000c76:	4623      	mov	r3, r4
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80bb      	strh	r3, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	807b      	strh	r3, [r7, #2]
 8000c82:	4613      	mov	r3, r2
 8000c84:	803b      	strh	r3, [r7, #0]

	//drawing animations with pixels
	for(int i = 0; i<count; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	e0a6      	b.n	8000dda <animationCircle+0x172>
		//diagonally
		drawingCircle(x_pos + i, y_pos + i, rad, 2164260608 + i*10);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	4413      	add	r3, r2
 8000c94:	b298      	uxth	r0, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	88bb      	ldrh	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000cae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	f7ff fc1c 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos - i, y_pos - i, rad, 2164260608 + i*10);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	88fa      	ldrh	r2, [r7, #6]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b298      	uxth	r0, r3
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	88ba      	ldrh	r2, [r7, #4]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000cda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	f7ff fc06 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos + i, y_pos - i, rad, 2164260608 + i*10);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4413      	add	r3, r2
 8000cec:	b298      	uxth	r0, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	88ba      	ldrh	r2, [r7, #4]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000d06:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	f7ff fbf0 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos - i, y_pos + i, rad, 2164260608 + i*10);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	1ad3      	subs	r3, r2, r3
 8000d18:	b298      	uxth	r0, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	b299      	uxth	r1, r3
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000d32:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	f7ff fbda 	bl	80004f0 <drawingCircle>

		//vertically and horizontally
		drawingCircle(x_pos, y_pos + i, rad, 2164260608 + i*10);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	b299      	uxth	r1, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000d54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d58:	887a      	ldrh	r2, [r7, #2]
 8000d5a:	88f8      	ldrh	r0, [r7, #6]
 8000d5c:	f7ff fbc8 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos, y_pos - i, rad, 2164260608 + i*10);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	88ba      	ldrh	r2, [r7, #4]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000d78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000d7c:	887a      	ldrh	r2, [r7, #2]
 8000d7e:	88f8      	ldrh	r0, [r7, #6]
 8000d80:	f7ff fbb6 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos + i, y_pos, rad, 2164260608 + i*10);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b298      	uxth	r0, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	4613      	mov	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000d9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000da0:	887a      	ldrh	r2, [r7, #2]
 8000da2:	88b9      	ldrh	r1, [r7, #4]
 8000da4:	f7ff fba4 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos - i, y_pos, rad, 2164260608 + i*10);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	88fa      	ldrh	r2, [r7, #6]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	b298      	uxth	r0, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000dc0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	88b9      	ldrh	r1, [r7, #4]
 8000dc8:	f7ff fb92 	bl	80004f0 <drawingCircle>

		HAL_Delay(time);
 8000dcc:	8c3b      	ldrh	r3, [r7, #32]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fb1c 	bl	800340c <HAL_Delay>
	for(int i = 0; i<count; i++){
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	883b      	ldrh	r3, [r7, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f6ff af54 	blt.w	8000c8c <animationCircle+0x24>
	}

	//clearing the screen by drawing with pixels
	for(int i = 0; i<count; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	e082      	b.n	8000ef0 <animationCircle+0x288>
		//diagonally
		drawingCircle(x_pos + i, y_pos + i, rad, BSP_LCD_GetBackColor());
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4413      	add	r3, r2
 8000df2:	b29c      	uxth	r4, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b29d      	uxth	r5, r3
 8000dfe:	f001 ff5d 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000e02:	4603      	mov	r3, r0
 8000e04:	887a      	ldrh	r2, [r7, #2]
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f7ff fb71 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos - i, y_pos - i, rad, BSP_LCD_GetBackColor());
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	b29c      	uxth	r4, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	88ba      	ldrh	r2, [r7, #4]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b29d      	uxth	r5, r3
 8000e22:	f001 ff4b 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000e26:	4603      	mov	r3, r0
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	4629      	mov	r1, r5
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f7ff fb5f 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos + i, y_pos - i, rad, BSP_LCD_GetBackColor());
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29c      	uxth	r4, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	88ba      	ldrh	r2, [r7, #4]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	b29d      	uxth	r5, r3
 8000e46:	f001 ff39 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	887a      	ldrh	r2, [r7, #2]
 8000e4e:	4629      	mov	r1, r5
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff fb4d 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos - i, y_pos + i, rad, BSP_LCD_GetBackColor());
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	88fa      	ldrh	r2, [r7, #6]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	b29c      	uxth	r4, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	b29d      	uxth	r5, r3
 8000e6a:	f001 ff27 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	887a      	ldrh	r2, [r7, #2]
 8000e72:	4629      	mov	r1, r5
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff fb3b 	bl	80004f0 <drawingCircle>

		//vertically and horizontally
		drawingCircle(x_pos, y_pos + i, rad, BSP_LCD_GetBackColor());
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	88bb      	ldrh	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	b29c      	uxth	r4, r3
 8000e84:	f001 ff1a 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	88f8      	ldrh	r0, [r7, #6]
 8000e8e:	4621      	mov	r1, r4
 8000e90:	f7ff fb2e 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos, y_pos - i, rad, BSP_LCD_GetBackColor());
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	88ba      	ldrh	r2, [r7, #4]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	b29c      	uxth	r4, r3
 8000e9e:	f001 ff0d 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	887a      	ldrh	r2, [r7, #2]
 8000ea6:	88f8      	ldrh	r0, [r7, #6]
 8000ea8:	4621      	mov	r1, r4
 8000eaa:	f7ff fb21 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos + i, y_pos, rad, BSP_LCD_GetBackColor());
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29c      	uxth	r4, r3
 8000eb8:	f001 ff00 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	88b9      	ldrh	r1, [r7, #4]
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fb14 	bl	80004f0 <drawingCircle>
		drawingCircle(x_pos - i, y_pos, rad, BSP_LCD_GetBackColor());
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b29c      	uxth	r4, r3
 8000ed2:	f001 fef3 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	88b9      	ldrh	r1, [r7, #4]
 8000edc:	4620      	mov	r0, r4
 8000ede:	f7ff fb07 	bl	80004f0 <drawingCircle>

		HAL_Delay(time);
 8000ee2:	8c3b      	ldrh	r3, [r7, #32]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f002 fa91 	bl	800340c <HAL_Delay>
	for(int i = 0; i<count; i++){
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	883b      	ldrh	r3, [r7, #0]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	f6ff af78 	blt.w	8000dea <animationCircle+0x182>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f04 <animationText>:
 * @param x_pos X position of the bottom right corner of the animation
 * @param y_pos Y position of the bottom right corner of the animation
 */

void animationText (uint16_t x_pos, uint16_t y_pos)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	80fb      	strh	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	80bb      	strh	r3, [r7, #4]
	uint16_t time = 200;
 8000f14:	23c8      	movs	r3, #200	; 0xc8
 8000f16:	81fb      	strh	r3, [r7, #14]

	uint32_t color = 2164272953;
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <animationText+0xe0>)
 8000f1a:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i<10; i++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	e02c      	b.n	8000f7c <animationText+0x78>
		for(int j = 0; j<10; j++){
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	e01f      	b.n	8000f68 <animationText+0x64>
			drawingText(5, 60 + j + 30*i, color + 12345*i);
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	0109      	lsls	r1, r1, #4
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	333c      	adds	r3, #60	; 0x3c
 8000f40:	b299      	uxth	r1, r3
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f243 0239 	movw	r2, #12345	; 0x3039
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	461a      	mov	r2, r3
 8000f54:	2005      	movs	r0, #5
 8000f56:	f7ff fe14 	bl	8000b82 <drawingText>
			HAL_Delay(500);
 8000f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5e:	f002 fa55 	bl	800340c <HAL_Delay>
		for(int j = 0; j<10; j++){
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b09      	cmp	r3, #9
 8000f6c:	dddc      	ble.n	8000f28 <animationText+0x24>
		}
		HAL_Delay(time);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fa4b 	bl	800340c <HAL_Delay>
	for(int i = 0; i<10; i++){
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b09      	cmp	r3, #9
 8000f80:	ddcf      	ble.n	8000f22 <animationText+0x1e>
	}
	for(int i = 0; i<5; i++){
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e026      	b.n	8000fd6 <animationText+0xd2>
		for(int j = 0; j<10; j++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e019      	b.n	8000fc2 <animationText+0xbe>
			drawingText(5, 60 + 2*j + 30*i, BSP_LCD_GetBackColor());
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	f103 011e 	add.w	r1, r3, #30
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	4613      	mov	r3, r2
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	b29c      	uxth	r4, r3
 8000fa4:	f001 fe8a 	bl	8002cbc <BSP_LCD_GetBackColor>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	4621      	mov	r1, r4
 8000fae:	2005      	movs	r0, #5
 8000fb0:	f7ff fde7 	bl	8000b82 <drawingText>
			HAL_Delay(500);
 8000fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fb8:	f002 fa28 	bl	800340c <HAL_Delay>
		for(int j = 0; j<10; j++){
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	dde2      	ble.n	8000f8e <animationText+0x8a>
		}
		HAL_Delay(time);
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fa1e 	bl	800340c <HAL_Delay>
	for(int i = 0; i<5; i++){
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	ddd5      	ble.n	8000f88 <animationText+0x84>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3724      	adds	r7, #36	; 0x24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	81002f39 	.word	0x81002f39

08000fe8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_CRC_Init+0x20>)
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <MX_CRC_Init+0x24>)
 8000ff0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_CRC_Init+0x20>)
 8000ff4:	f002 fb0e 	bl	8003614 <HAL_CRC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ffe:	f000 fead 	bl	8001d5c <Error_Handler>
  }

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000380 	.word	0x20000380
 800100c:	40023000 	.word	0x40023000

08001010 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_CRC_MspInit+0x3c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10d      	bne.n	800103e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_CRC_MspInit+0x40>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <HAL_CRC_MspInit+0x40>)
 800102c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_CRC_MspInit+0x40>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	40023000 	.word	0x40023000
 8001050:	40023800 	.word	0x40023800

08001054 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_DMA_Init+0x3c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <MX_DMA_Init+0x3c>)
 8001064:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_DMA_Init+0x3c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	203a      	movs	r0, #58	; 0x3a
 800107c:	f002 faa0 	bl	80035c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001080:	203a      	movs	r0, #58	; 0x3a
 8001082:	f002 fab9 	bl	80035f8 <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800

08001094 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <MX_DMA2D_Init+0x60>)
 800109c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010ca:	f002 fead 	bl	8003e28 <HAL_DMA2D_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80010d4:	f000 fe42 	bl	8001d5c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010d8:	2101      	movs	r1, #1
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_DMA2D_Init+0x5c>)
 80010dc:	f003 f912 	bl	8004304 <HAL_DMA2D_ConfigLayer>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010e6:	f000 fe39 	bl	8001d5c <Error_Handler>
  }

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000388 	.word	0x20000388
 80010f4:	4002b000 	.word	0x4002b000

080010f8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_DMA2D_MspInit+0x48>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d115      	bne.n	8001136 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_DMA2D_MspInit+0x4c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <HAL_DMA2D_MspInit+0x4c>)
 8001114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_DMA2D_MspInit+0x4c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2105      	movs	r1, #5
 800112a:	205a      	movs	r0, #90	; 0x5a
 800112c:	f002 fa48 	bl	80035c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001130:	205a      	movs	r0, #90	; 0x5a
 8001132:	f002 fa61 	bl	80035f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	4002b000 	.word	0x4002b000
 8001144:	40023800 	.word	0x40023800

08001148 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <MX_FMC_Init+0x98>)
 8001162:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <MX_FMC_Init+0x9c>)
 8001164:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_FMC_Init+0x98>)
 8001168:	2201      	movs	r2, #1
 800116a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <MX_FMC_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_FMC_Init+0x98>)
 8001174:	2204      	movs	r2, #4
 8001176:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_FMC_Init+0x98>)
 800117a:	2210      	movs	r2, #16
 800117c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_FMC_Init+0x98>)
 8001180:	2240      	movs	r2, #64	; 0x40
 8001182:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_FMC_Init+0x98>)
 8001186:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800118a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800118c:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_FMC_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <MX_FMC_Init+0x98>)
 8001194:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001198:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_FMC_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_FMC_Init+0x98>)
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80011ac:	2307      	movs	r3, #7
 80011ae:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80011b0:	2304      	movs	r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80011b8:	2303      	movs	r3, #3
 80011ba:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011bc:	2302      	movs	r3, #2
 80011be:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_FMC_Init+0x98>)
 80011ca:	f006 f957 	bl	800747c <HAL_SDRAM_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80011d4:	f000 fdc2 	bl	8001d5c <Error_Handler>
  }

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200003c8 	.word	0x200003c8
 80011e4:	a0000140 	.word	0xa0000140

080011e8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HAL_FMC_MspInit+0x104>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d16f      	bne.n	80012e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <HAL_FMC_MspInit+0x104>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <HAL_FMC_MspInit+0x108>)
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	4a37      	ldr	r2, [pc, #220]	; (80012f0 <HAL_FMC_MspInit+0x108>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6393      	str	r3, [r2, #56]	; 0x38
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <HAL_FMC_MspInit+0x108>)
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001226:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800122a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001238:	230c      	movs	r3, #12
 800123a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	482c      	ldr	r0, [pc, #176]	; (80012f4 <HAL_FMC_MspInit+0x10c>)
 8001242:	f003 f98d 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001246:	2301      	movs	r3, #1
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001256:	230c      	movs	r3, #12
 8001258:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4826      	ldr	r0, [pc, #152]	; (80012f8 <HAL_FMC_MspInit+0x110>)
 8001260:	f003 f97e 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001264:	f248 1333 	movw	r3, #33075	; 0x8133
 8001268:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001276:	230c      	movs	r3, #12
 8001278:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	481f      	ldr	r0, [pc, #124]	; (80012fc <HAL_FMC_MspInit+0x114>)
 8001280:	f003 f96e 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001284:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001288:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001296:	230c      	movs	r3, #12
 8001298:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4818      	ldr	r0, [pc, #96]	; (8001300 <HAL_FMC_MspInit+0x118>)
 80012a0:	f003 f95e 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80012a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80012a8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b6:	230c      	movs	r3, #12
 80012b8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <HAL_FMC_MspInit+0x11c>)
 80012c0:	f003 f94e 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d4:	230c      	movs	r3, #12
 80012d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	4619      	mov	r1, r3
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <HAL_FMC_MspInit+0x120>)
 80012de:	f003 f93f 	bl	8004560 <HAL_GPIO_Init>
 80012e2:	e000      	b.n	80012e6 <HAL_FMC_MspInit+0xfe>
    return;
 80012e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000d8 	.word	0x200000d8
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40021800 	.word	0x40021800
 8001300:	40021000 	.word	0x40021000
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40020400 	.word	0x40020400

0800130c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001314:	f7ff ff68 	bl	80011e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	4b7a      	ldr	r3, [pc, #488]	; (800153c <MX_GPIO_Init+0x204>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a79      	ldr	r2, [pc, #484]	; (800153c <MX_GPIO_Init+0x204>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <MX_GPIO_Init+0x204>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	623b      	str	r3, [r7, #32]
 8001368:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	4b73      	ldr	r3, [pc, #460]	; (800153c <MX_GPIO_Init+0x204>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a72      	ldr	r2, [pc, #456]	; (800153c <MX_GPIO_Init+0x204>)
 8001374:	f043 0320 	orr.w	r3, r3, #32
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b70      	ldr	r3, [pc, #448]	; (800153c <MX_GPIO_Init+0x204>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0320 	and.w	r3, r3, #32
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b6c      	ldr	r3, [pc, #432]	; (800153c <MX_GPIO_Init+0x204>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a6b      	ldr	r2, [pc, #428]	; (800153c <MX_GPIO_Init+0x204>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b69      	ldr	r3, [pc, #420]	; (800153c <MX_GPIO_Init+0x204>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <MX_GPIO_Init+0x204>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a64      	ldr	r2, [pc, #400]	; (800153c <MX_GPIO_Init+0x204>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b62      	ldr	r3, [pc, #392]	; (800153c <MX_GPIO_Init+0x204>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b5e      	ldr	r3, [pc, #376]	; (800153c <MX_GPIO_Init+0x204>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a5d      	ldr	r2, [pc, #372]	; (800153c <MX_GPIO_Init+0x204>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <MX_GPIO_Init+0x204>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <MX_GPIO_Init+0x204>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a56      	ldr	r2, [pc, #344]	; (800153c <MX_GPIO_Init+0x204>)
 80013e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b54      	ldr	r3, [pc, #336]	; (800153c <MX_GPIO_Init+0x204>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <MX_GPIO_Init+0x204>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a4f      	ldr	r2, [pc, #316]	; (800153c <MX_GPIO_Init+0x204>)
 8001400:	f043 0310 	orr.w	r3, r3, #16
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b4d      	ldr	r3, [pc, #308]	; (800153c <MX_GPIO_Init+0x204>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <MX_GPIO_Init+0x204>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a48      	ldr	r2, [pc, #288]	; (800153c <MX_GPIO_Init+0x204>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <MX_GPIO_Init+0x204>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2116      	movs	r1, #22
 8001432:	4843      	ldr	r0, [pc, #268]	; (8001540 <MX_GPIO_Init+0x208>)
 8001434:	f003 fb48 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	4841      	ldr	r0, [pc, #260]	; (8001544 <MX_GPIO_Init+0x20c>)
 800143e:	f003 fb43 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001448:	483f      	ldr	r0, [pc, #252]	; (8001548 <MX_GPIO_Init+0x210>)
 800144a:	f003 fb3d 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001454:	483d      	ldr	r0, [pc, #244]	; (800154c <MX_GPIO_Init+0x214>)
 8001456:	f003 fb37 	bl	8004ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800145a:	2316      	movs	r3, #22
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4833      	ldr	r0, [pc, #204]	; (8001540 <MX_GPIO_Init+0x208>)
 8001472:	f003 f875 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001476:	f248 0307 	movw	r3, #32775	; 0x8007
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800147c:	4b34      	ldr	r3, [pc, #208]	; (8001550 <MX_GPIO_Init+0x218>)
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	482e      	ldr	r0, [pc, #184]	; (8001544 <MX_GPIO_Init+0x20c>)
 800148c:	f003 f868 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4827      	ldr	r0, [pc, #156]	; (8001544 <MX_GPIO_Init+0x20c>)
 80014a8:	f003 f85a 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80014ac:	2320      	movs	r3, #32
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_GPIO_Init+0x218>)
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	4619      	mov	r1, r3
 80014be:	4820      	ldr	r0, [pc, #128]	; (8001540 <MX_GPIO_Init+0x208>)
 80014c0:	f003 f84e 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014c4:	2304      	movs	r3, #4
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	481f      	ldr	r0, [pc, #124]	; (8001554 <MX_GPIO_Init+0x21c>)
 80014d8:	f003 f842 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80014dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80014ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ee:	4619      	mov	r1, r3
 80014f0:	4815      	ldr	r0, [pc, #84]	; (8001548 <MX_GPIO_Init+0x210>)
 80014f2:	f003 f835 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80014f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001504:	2300      	movs	r3, #0
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_GPIO_Init+0x210>)
 8001510:	f003 f826 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001514:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_GPIO_Init+0x214>)
 800152e:	f003 f817 	bl	8004560 <HAL_GPIO_Init>

}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020800 	.word	0x40020800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021800 	.word	0x40021800
 8001550:	10120000 	.word	0x10120000
 8001554:	40020400 	.word	0x40020400

08001558 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_I2C3_Init+0x74>)
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <MX_I2C3_Init+0x78>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_I2C3_Init+0x74>)
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <MX_I2C3_Init+0x7c>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_I2C3_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <MX_I2C3_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_I2C3_Init+0x74>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_I2C3_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C3_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_I2C3_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C3_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_I2C3_Init+0x74>)
 8001596:	f004 fc9b 	bl	8005ed0 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015a0:	f000 fbdc 	bl	8001d5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4809      	ldr	r0, [pc, #36]	; (80015cc <MX_I2C3_Init+0x74>)
 80015a8:	f004 fdca 	bl	8006140 <HAL_I2CEx_ConfigAnalogFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80015b2:	f000 fbd3 	bl	8001d5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C3_Init+0x74>)
 80015ba:	f004 fdfd 	bl	80061b8 <HAL_I2CEx_ConfigDigitalFilter>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80015c4:	f000 fbca 	bl	8001d5c <Error_Handler>
  }

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200003fc 	.word	0x200003fc
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a29      	ldr	r2, [pc, #164]	; (800169c <HAL_I2C_MspInit+0xc4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d14b      	bne.n	8001692 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001604:	f043 0304 	orr.w	r3, r3, #4
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001638:	2312      	movs	r3, #18
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001644:	2304      	movs	r3, #4
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4815      	ldr	r0, [pc, #84]	; (80016a4 <HAL_I2C_MspInit+0xcc>)
 8001650:	f002 ff86 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165e:	2301      	movs	r3, #1
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <HAL_I2C_MspInit+0xd0>)
 8001672:	f002 ff75 	bl	8004560 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001680:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_I2C_MspInit+0xc8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005c00 	.word	0x40005c00
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000

080016ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09a      	sub	sp, #104	; 0x68
 80016b0:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b6:	2234      	movs	r2, #52	; 0x34
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f009 febf 	bl	800b43e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f009 feb9 	bl	800b43e <memset>

  hltdc.Instance = LTDC;
 80016cc:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016ce:	4a4f      	ldr	r2, [pc, #316]	; (800180c <MX_LTDC_Init+0x160>)
 80016d0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016d2:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80016de:	4b4a      	ldr	r3, [pc, #296]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80016e4:	4b48      	ldr	r3, [pc, #288]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80016ea:	4b47      	ldr	r3, [pc, #284]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80016f0:	4b45      	ldr	r3, [pc, #276]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016f8:	220e      	movs	r2, #14
 80016fa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <MX_LTDC_Init+0x15c>)
 80016fe:	2205      	movs	r2, #5
 8001700:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <MX_LTDC_Init+0x15c>)
 8001704:	f240 228e 	movw	r2, #654	; 0x28e
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800170a:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <MX_LTDC_Init+0x15c>)
 800170c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <MX_LTDC_Init+0x15c>)
 8001714:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <MX_LTDC_Init+0x15c>)
 800171c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8001720:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <MX_LTDC_Init+0x15c>)
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <MX_LTDC_Init+0x15c>)
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <MX_LTDC_Init+0x15c>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800173a:	4833      	ldr	r0, [pc, #204]	; (8001808 <MX_LTDC_Init+0x15c>)
 800173c:	f004 fd7c 	bl	8006238 <HAL_LTDC_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001746:	f000 fb09 	bl	8001d5c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800175a:	2300      	movs	r3, #0
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800176c:	2305      	movs	r3, #5
 800176e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800178e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	481c      	ldr	r0, [pc, #112]	; (8001808 <MX_LTDC_Init+0x15c>)
 8001798:	f004 fe1e 	bl	80063d8 <HAL_LTDC_ConfigLayer>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80017a2:	f000 fadb 	bl	8001d5c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80017c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017c8:	2305      	movs	r3, #5
 80017ca:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80017ea:	463b      	mov	r3, r7
 80017ec:	2201      	movs	r2, #1
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_LTDC_Init+0x15c>)
 80017f2:	f004 fdf1 	bl	80063d8 <HAL_LTDC_ConfigLayer>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80017fc:	f000 faae 	bl	8001d5c <Error_Handler>
  }

}
 8001800:	bf00      	nop
 8001802:	3768      	adds	r7, #104	; 0x68
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000450 	.word	0x20000450
 800180c:	40016800 	.word	0x40016800

08001810 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08e      	sub	sp, #56	; 0x38
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a77      	ldr	r2, [pc, #476]	; (8001a0c <HAL_LTDC_MspInit+0x1fc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	f040 80e8 	bne.w	8001a04 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
 8001838:	4b75      	ldr	r3, [pc, #468]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	4a74      	ldr	r2, [pc, #464]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 800183e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001842:	6453      	str	r3, [r2, #68]	; 0x44
 8001844:	4b72      	ldr	r3, [pc, #456]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800184c:	623b      	str	r3, [r7, #32]
 800184e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a6d      	ldr	r2, [pc, #436]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 800185a:	f043 0320 	orr.w	r3, r3, #32
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b6b      	ldr	r3, [pc, #428]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
 8001870:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a66      	ldr	r2, [pc, #408]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	4b60      	ldr	r3, [pc, #384]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b5d      	ldr	r3, [pc, #372]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018e6:	f043 0308 	orr.w	r3, r3, #8
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <HAL_LTDC_MspInit+0x200>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80018f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800190a:	230e      	movs	r3, #14
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	483f      	ldr	r0, [pc, #252]	; (8001a14 <HAL_LTDC_MspInit+0x204>)
 8001916:	f002 fe23 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800191a:	f641 0358 	movw	r3, #6232	; 0x1858
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800192c:	230e      	movs	r3, #14
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	4838      	ldr	r0, [pc, #224]	; (8001a18 <HAL_LTDC_MspInit+0x208>)
 8001938:	f002 fe12 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800193c:	2303      	movs	r3, #3
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800194c:	2309      	movs	r3, #9
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001954:	4619      	mov	r1, r3
 8001956:	4831      	ldr	r0, [pc, #196]	; (8001a1c <HAL_LTDC_MspInit+0x20c>)
 8001958:	f002 fe02 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800195c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800196e:	230e      	movs	r3, #14
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <HAL_LTDC_MspInit+0x20c>)
 800197a:	f002 fdf1 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800197e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001990:	230e      	movs	r3, #14
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	4821      	ldr	r0, [pc, #132]	; (8001a20 <HAL_LTDC_MspInit+0x210>)
 800199c:	f002 fde0 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80019a0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019b2:	230e      	movs	r3, #14
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4819      	ldr	r0, [pc, #100]	; (8001a24 <HAL_LTDC_MspInit+0x214>)
 80019be:	f002 fdcf 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80019c2:	2348      	movs	r3, #72	; 0x48
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019d2:	230e      	movs	r3, #14
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019da:	4619      	mov	r1, r3
 80019dc:	4812      	ldr	r0, [pc, #72]	; (8001a28 <HAL_LTDC_MspInit+0x218>)
 80019de:	f002 fdbf 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80019e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80019f4:	2309      	movs	r3, #9
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	4808      	ldr	r0, [pc, #32]	; (8001a20 <HAL_LTDC_MspInit+0x210>)
 8001a00:	f002 fdae 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40016800 	.word	0x40016800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40021800 	.word	0x40021800
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00

08001a2c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <HAL_UART_RxCpltCallback+0x38>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10d      	bne.n	8001a5a <HAL_UART_RxCpltCallback+0x2e>
		receivedFlag=1;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_UART_RxCpltCallback+0x3c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, data, 2, 100);
 8001a44:	2364      	movs	r3, #100	; 0x64
 8001a46:	2202      	movs	r2, #2
 8001a48:	4908      	ldr	r1, [pc, #32]	; (8001a6c <HAL_UART_RxCpltCallback+0x40>)
 8001a4a:	4809      	ldr	r0, [pc, #36]	; (8001a70 <HAL_UART_RxCpltCallback+0x44>)
 8001a4c:	f006 ff6d 	bl	800892a <HAL_UART_Transmit>
		//HAL_UART_Receive_IT(&huart1, data, 2);
		HAL_UART_Receive_DMA (&huart1, data, 2);
 8001a50:	2202      	movs	r2, #2
 8001a52:	4906      	ldr	r1, [pc, #24]	; (8001a6c <HAL_UART_RxCpltCallback+0x40>)
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <HAL_UART_RxCpltCallback+0x44>)
 8001a56:	f007 f801 	bl	8008a5c <HAL_UART_Receive_DMA>
	}
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40011000 	.word	0x40011000
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	20000598 	.word	0x20000598
 8001a70:	20000558 	.word	0x20000558

08001a74 <_write>:

int _write(int file, char *ptr, int len) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 50);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2332      	movs	r3, #50	; 0x32
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	4803      	ldr	r0, [pc, #12]	; (8001a98 <_write+0x24>)
 8001a8a:	f006 ff4e 	bl	800892a <HAL_UART_Transmit>
	return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000558 	.word	0x20000558

08001a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa2:	f001 fc71 	bl	8003388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa6:	f000 f8c3 	bl	8001c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aaa:	f7ff fc45 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aae:	f7ff fad1 	bl	8001054 <MX_DMA_Init>
  MX_CRC_Init();
 8001ab2:	f7ff fa99 	bl	8000fe8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8001ab6:	f7ff faed 	bl	8001094 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001aba:	f7ff fb45 	bl	8001148 <MX_FMC_Init>
  MX_I2C3_Init();
 8001abe:	f7ff fd4b 	bl	8001558 <MX_I2C3_Init>
  MX_SPI5_Init();
 8001ac2:	f000 f953 	bl	8001d6c <MX_SPI5_Init>
  MX_TIM1_Init();
 8001ac6:	f000 fb5f 	bl	8002188 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001aca:	f000 fbcf 	bl	800226c <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8001ace:	f7ff fded 	bl	80016ac <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init();                                                     //Wlaczenie biblioteki
 8001ad2:	f000 fffd 	bl	8002ad0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie pierwszej warstwy
 8001ad6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001ada:	2000      	movs	r0, #0
 8001adc:	f001 f87a 	bl	8002bd4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);   //Wlaczenie drugiej warstwy
 8001ae0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f001 f875 	bl	8002bd4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);                          //Wybranie warstwy aktywnej
 8001aea:	2001      	movs	r0, #1
 8001aec:	f001 f8d6 	bl	8002c9c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();                                                //Wlaczenie podswietlania
 8001af0:	f001 f93c 	bl	8002d6c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);                                     //Kolor Tla
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f001 f910 	bl	8002d1c <BSP_LCD_Clear>


  //HAL_UART_Receive_IT(&huart1, data, 2);
  HAL_UART_Receive_DMA (&huart1, data, 2);
 8001afc:	2202      	movs	r2, #2
 8001afe:	4938      	ldr	r1, [pc, #224]	; (8001be0 <main+0x144>)
 8001b00:	4838      	ldr	r0, [pc, #224]	; (8001be4 <main+0x148>)
 8001b02:	f006 ffab 	bl	8008a5c <HAL_UART_Receive_DMA>

  printf("\r\n");
 8001b06:	4838      	ldr	r0, [pc, #224]	; (8001be8 <main+0x14c>)
 8001b08:	f009 fda6 	bl	800b658 <puts>
  printf("AwnLCD\r\n\n");
 8001b0c:	4837      	ldr	r0, [pc, #220]	; (8001bec <main+0x150>)
 8001b0e:	f009 fda3 	bl	800b658 <puts>
  printf("Wpisz cyfre i potwierdz naciskajac klawisz ENTER\r\n");
 8001b12:	4837      	ldr	r0, [pc, #220]	; (8001bf0 <main+0x154>)
 8001b14:	f009 fda0 	bl	800b658 <puts>
  printf("Animacje:\r\n");
 8001b18:	4836      	ldr	r0, [pc, #216]	; (8001bf4 <main+0x158>)
 8001b1a:	f009 fd9d 	bl	800b658 <puts>
  printf("1. Linia\r\n");
 8001b1e:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <main+0x15c>)
 8001b20:	f009 fd9a 	bl	800b658 <puts>
  printf("2. Trojkat\r\n");
 8001b24:	4835      	ldr	r0, [pc, #212]	; (8001bfc <main+0x160>)
 8001b26:	f009 fd97 	bl	800b658 <puts>
  printf("3. Prostokat\r\n");
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <main+0x164>)
 8001b2c:	f009 fd94 	bl	800b658 <puts>
  printf("4. Okrag\r\n");
 8001b30:	4834      	ldr	r0, [pc, #208]	; (8001c04 <main+0x168>)
 8001b32:	f009 fd91 	bl	800b658 <puts>
  printf("5. Tekst\r\n\n");
 8001b36:	4834      	ldr	r0, [pc, #208]	; (8001c08 <main+0x16c>)
 8001b38:	f009 fd8e 	bl	800b658 <puts>
  printf("Wybor: \r\n");
 8001b3c:	4833      	ldr	r0, [pc, #204]	; (8001c0c <main+0x170>)
 8001b3e:	f009 fd8b 	bl	800b658 <puts>


  while(1){

	  if(receivedFlag == 1){
 8001b42:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <main+0x174>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d1fb      	bne.n	8001b42 <main+0xa6>
		  switch ((uint8_t)(data[0])) {
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <main+0x144>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	3b31      	subs	r3, #49	; 0x31
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d83d      	bhi.n	8001bd0 <main+0x134>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <main+0xc0>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b71 	.word	0x08001b71
 8001b60:	08001b7f 	.word	0x08001b7f
 8001b64:	08001b8d 	.word	0x08001b8d
 8001b68:	08001b9b 	.word	0x08001b9b
 8001b6c:	08001bbb 	.word	0x08001bbb
		  case '1':
			  printf("Wybrano 1 - animacja linii\r\n");
 8001b70:	4828      	ldr	r0, [pc, #160]	; (8001c14 <main+0x178>)
 8001b72:	f009 fd71 	bl	800b658 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8001b76:	4828      	ldr	r0, [pc, #160]	; (8001c18 <main+0x17c>)
 8001b78:	f009 fd6e 	bl	800b658 <puts>
			  break;
 8001b7c:	e02c      	b.n	8001bd8 <main+0x13c>
		  case '2':
			  printf("Wybrano 2 - animacja trojkata\r\n");
 8001b7e:	4827      	ldr	r0, [pc, #156]	; (8001c1c <main+0x180>)
 8001b80:	f009 fd6a 	bl	800b658 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8001b84:	4824      	ldr	r0, [pc, #144]	; (8001c18 <main+0x17c>)
 8001b86:	f009 fd67 	bl	800b658 <puts>
			  break;
 8001b8a:	e025      	b.n	8001bd8 <main+0x13c>
		  case '3':
			  printf("Wybrano 3 - animacja prostokata\r\n");
 8001b8c:	4824      	ldr	r0, [pc, #144]	; (8001c20 <main+0x184>)
 8001b8e:	f009 fd63 	bl	800b658 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8001b92:	4821      	ldr	r0, [pc, #132]	; (8001c18 <main+0x17c>)
 8001b94:	f009 fd60 	bl	800b658 <puts>
			  break;
 8001b98:	e01e      	b.n	8001bd8 <main+0x13c>
		  case '4':
			  printf("Wybrano 4 - animacja okregu\r\n");
 8001b9a:	4822      	ldr	r0, [pc, #136]	; (8001c24 <main+0x188>)
 8001b9c:	f009 fd5c 	bl	800b658 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8001ba0:	481d      	ldr	r0, [pc, #116]	; (8001c18 <main+0x17c>)
 8001ba2:	f009 fd59 	bl	800b658 <puts>
			  animationCircle(120, 160, 40, 80, 500);
 8001ba6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2350      	movs	r3, #80	; 0x50
 8001bae:	2228      	movs	r2, #40	; 0x28
 8001bb0:	21a0      	movs	r1, #160	; 0xa0
 8001bb2:	2078      	movs	r0, #120	; 0x78
 8001bb4:	f7ff f858 	bl	8000c68 <animationCircle>
			  break;
 8001bb8:	e00e      	b.n	8001bd8 <main+0x13c>
		  case '5':
			  printf("Wybrano 5 - animacja tekstu\r\n");
 8001bba:	481b      	ldr	r0, [pc, #108]	; (8001c28 <main+0x18c>)
 8001bbc:	f009 fd4c 	bl	800b658 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8001bc0:	4815      	ldr	r0, [pc, #84]	; (8001c18 <main+0x17c>)
 8001bc2:	f009 fd49 	bl	800b658 <puts>
			  animationText(5, 60);
 8001bc6:	213c      	movs	r1, #60	; 0x3c
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f7ff f99b 	bl	8000f04 <animationText>
			  break;
 8001bce:	e003      	b.n	8001bd8 <main+0x13c>
		  default:
			  printf("Nieprawidlowy wybor. Wprowadz ponownie: \r\n");
 8001bd0:	4816      	ldr	r0, [pc, #88]	; (8001c2c <main+0x190>)
 8001bd2:	f009 fd41 	bl	800b658 <puts>
			  break;
 8001bd6:	bf00      	nop
		  }
		  receivedFlag=0;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <main+0x174>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
	  if(receivedFlag == 1){
 8001bde:	e7b0      	b.n	8001b42 <main+0xa6>
 8001be0:	20000598 	.word	0x20000598
 8001be4:	20000558 	.word	0x20000558
 8001be8:	0800bd38 	.word	0x0800bd38
 8001bec:	0800bd3c 	.word	0x0800bd3c
 8001bf0:	0800bd48 	.word	0x0800bd48
 8001bf4:	0800bd7c 	.word	0x0800bd7c
 8001bf8:	0800bd88 	.word	0x0800bd88
 8001bfc:	0800bd94 	.word	0x0800bd94
 8001c00:	0800bda0 	.word	0x0800bda0
 8001c04:	0800bdb0 	.word	0x0800bdb0
 8001c08:	0800bdbc 	.word	0x0800bdbc
 8001c0c:	0800bdc8 	.word	0x0800bdc8
 8001c10:	200000dc 	.word	0x200000dc
 8001c14:	0800bdd4 	.word	0x0800bdd4
 8001c18:	0800bdf0 	.word	0x0800bdf0
 8001c1c:	0800be0c 	.word	0x0800be0c
 8001c20:	0800be2c 	.word	0x0800be2c
 8001c24:	0800be50 	.word	0x0800be50
 8001c28:	0800be70 	.word	0x0800be70
 8001c2c:	0800be90 	.word	0x0800be90

08001c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0a0      	sub	sp, #128	; 0x80
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c3a:	2230      	movs	r2, #48	; 0x30
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f009 fbfd 	bl	800b43e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2230      	movs	r2, #48	; 0x30
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f009 fbee 	bl	800b43e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <SystemClock_Config+0x100>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a31      	ldr	r2, [pc, #196]	; (8001d30 <SystemClock_Config+0x100>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <SystemClock_Config+0x100>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <SystemClock_Config+0x104>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2b      	ldr	r2, [pc, #172]	; (8001d34 <SystemClock_Config+0x104>)
 8001c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <SystemClock_Config+0x104>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ca2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cac:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001cb2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001cb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cbc:	2307      	movs	r3, #7
 8001cbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fd87 	bl	80067d8 <HAL_RCC_OscConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001cd0:	f000 f844 	bl	8001d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 ffe0 	bl	8006cb8 <HAL_RCC_ClockConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001cfe:	f000 f82d 	bl	8001d5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d02:	2308      	movs	r3, #8
 8001d04:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8001d06:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001d0a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f005 f9f1 	bl	8007100 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8001d24:	f000 f81a 	bl	8001d5c <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3780      	adds	r7, #128	; 0x80
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000

08001d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d4a:	f001 fb3f 	bl	80033cc <HAL_IncTick>
//	  size = sprintf(data, "Liczba wyslanych wiadomosci: %d.\n\r", cnt); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
//	  HAL_UART_Transmit_IT(&huart1, data, size);
//  }

  /* USER CODE END Callback 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40001000 	.word	0x40001000

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001d70:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d72:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <MX_SPI5_Init+0x6c>)
 8001d74:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d7c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d84:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001da2:	2218      	movs	r2, #24
 8001da4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001dba:	220a      	movs	r2, #10
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001dc0:	f005 fbdb 	bl	800757a <HAL_SPI_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 8001dca:	f7ff ffc7 	bl	8001d5c <Error_Handler>
  }

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000059c 	.word	0x2000059c
 8001dd8:	40015000 	.word	0x40015000

08001ddc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_SPI_MspInit+0x84>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12c      	bne.n	8001e58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a10      	ldr	r2, [pc, #64]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e24:	f043 0320 	orr.w	r3, r3, #32
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_SPI_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001e36:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e48:	2305      	movs	r3, #5
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <HAL_SPI_MspInit+0x8c>)
 8001e54:	f002 fb84 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3728      	adds	r7, #40	; 0x28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40015000 	.word	0x40015000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021400 	.word	0x40021400

08001e6c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_SPI_MspDeInit+0x30>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10a      	bne.n	8001e94 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_SPI_MspDeInit+0x34>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_SPI_MspDeInit+0x34>)
 8001e84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e88:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001e8a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_SPI_MspDeInit+0x38>)
 8001e90:	f002 fd10 	bl	80048b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40015000 	.word	0x40015000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40021400 	.word	0x40021400

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_MspInit+0x54>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_MspInit+0x54>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x54>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_MspInit+0x54>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_MspInit+0x54>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_MspInit+0x54>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	210f      	movs	r1, #15
 8001eea:	f06f 0001 	mvn.w	r0, #1
 8001eee:	f001 fb67 	bl	80035c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	2036      	movs	r0, #54	; 0x36
 8001f16:	f001 fb53 	bl	80035c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1a:	2036      	movs	r0, #54	; 0x36
 8001f1c:	f001 fb6c 	bl	80035f8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f30:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_InitTick+0xa4>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f3c:	f107 0210 	add.w	r2, r7, #16
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f005 f8a8 	bl	800709c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f4c:	f005 f87e 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 8001f50:	4603      	mov	r3, r0
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <HAL_InitTick+0xa8>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	3b01      	subs	r3, #1
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_InitTick+0xac>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <HAL_InitTick+0xb0>)
 8001f68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_InitTick+0xac>)
 8001f6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_InitTick+0xac>)
 8001f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_InitTick+0xac>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_InitTick+0xac>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f84:	4809      	ldr	r0, [pc, #36]	; (8001fac <HAL_InitTick+0xac>)
 8001f86:	f006 f883 	bl	8008090 <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f90:	4806      	ldr	r0, [pc, #24]	; (8001fac <HAL_InitTick+0xac>)
 8001f92:	f006 f8a8 	bl	80080e6 <HAL_TIM_Base_Start_IT>
 8001f96:	4603      	mov	r3, r0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3730      	adds	r7, #48	; 0x30
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	431bde83 	.word	0x431bde83
 8001fac:	200005f4 	.word	0x200005f4
 8001fb0:	40001000 	.word	0x40001000

08001fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc6:	e7fe      	b.n	8001fc6 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	e7fe      	b.n	8001fcc <MemManage_Handler+0x4>

08001fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0x4>

08001fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <UsageFault_Handler+0x4>

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <USART1_IRQHandler+0x10>)
 8001fee:	f006 fdb5 	bl	8008b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000558 	.word	0x20000558

08001ffc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <TIM6_DAC_IRQHandler+0x10>)
 8002002:	f006 f894 	bl	800812e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200005f4 	.word	0x200005f4

08002010 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002014:	4802      	ldr	r0, [pc, #8]	; (8002020 <DMA2_Stream2_IRQHandler+0x10>)
 8002016:	f001 fc9f 	bl	8003958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200004f8 	.word	0x200004f8

08002024 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <OTG_HS_IRQHandler+0x10>)
 800202a:	f002 fd66 	bl	8004afa <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000724 	.word	0x20000724

08002038 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA2D_IRQHandler+0x10>)
 800203e:	f002 f850 	bl	80040e2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000388 	.word	0x20000388

0800204c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e00a      	b.n	8002074 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800205e:	f3af 8000 	nop.w
 8002062:	4601      	mov	r1, r0
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	dbf0      	blt.n	800205e <_read+0x12>
	}

return len;
 800207c:	687b      	ldr	r3, [r7, #4]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
	return -1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ae:	605a      	str	r2, [r3, #4]
	return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_isatty>:

int _isatty(int file)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
	return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
	return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f009 f958 	bl	800b3d4 <__errno>
 8002124:	4602      	mov	r2, r0
 8002126:	230c      	movs	r3, #12
 8002128:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20030000 	.word	0x20030000
 8002150:	00000400 	.word	0x00000400
 8002154:	200000e0 	.word	0x200000e0
 8002158:	200009f0 	.word	0x200009f0

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <SystemInit+0x28>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <SystemInit+0x28>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SystemInit+0x28>)
 8002172:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002176:	609a      	str	r2, [r3, #8]
#endif
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80021a4:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_TIM1_Init+0x98>)
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <MX_TIM1_Init+0x9c>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <MX_TIM1_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_TIM1_Init+0x98>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_TIM1_Init+0x98>)
 80021b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MX_TIM1_Init+0x98>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MX_TIM1_Init+0x98>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <MX_TIM1_Init+0x98>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021d0:	4813      	ldr	r0, [pc, #76]	; (8002220 <MX_TIM1_Init+0x98>)
 80021d2:	f005 ff5d 	bl	8008090 <HAL_TIM_Base_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80021dc:	f7ff fdbe 	bl	8001d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <MX_TIM1_Init+0x98>)
 80021ee:	f006 f8a6 	bl	800833e <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80021f8:	f7ff fdb0 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002204:	463b      	mov	r3, r7
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_TIM1_Init+0x98>)
 800220a:	f006 fab1 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002214:	f7ff fda2 	bl	8001d5c <Error_Handler>
  }

}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000634 	.word	0x20000634
 8002224:	40010000 	.word	0x40010000

08002228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_TIM_Base_MspInit+0x3c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10d      	bne.n	8002256 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_TIM_Base_MspInit+0x40>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_TIM_Base_MspInit+0x40>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_TIM_Base_MspInit+0x40>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40023800 	.word	0x40023800

0800226c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002270:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <MX_USART1_UART_Init+0x50>)
 8002274:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <MX_USART1_UART_Init+0x4c>)
 80022a4:	f006 faf4 	bl	8008890 <HAL_UART_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ae:	f7ff fd55 	bl	8001d5c <Error_Handler>
  }

}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000558 	.word	0x20000558
 80022bc:	40011000 	.word	0x40011000

080022c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	; 0x28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a35      	ldr	r2, [pc, #212]	; (80023b4 <HAL_UART_MspInit+0xf4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d163      	bne.n	80023aa <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	4b34      	ldr	r3, [pc, #208]	; (80023b8 <HAL_UART_MspInit+0xf8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a33      	ldr	r2, [pc, #204]	; (80023b8 <HAL_UART_MspInit+0xf8>)
 80022ec:	f043 0310 	orr.w	r3, r3, #16
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <HAL_UART_MspInit+0xf8>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_UART_MspInit+0xf8>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a2c      	ldr	r2, [pc, #176]	; (80023b8 <HAL_UART_MspInit+0xf8>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_UART_MspInit+0xf8>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800231a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800231e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800232c:	2307      	movs	r3, #7
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4821      	ldr	r0, [pc, #132]	; (80023bc <HAL_UART_MspInit+0xfc>)
 8002338:	f002 f912 	bl	8004560 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_UART_MspInit+0x100>)
 800233e:	4a21      	ldr	r2, [pc, #132]	; (80023c4 <HAL_UART_MspInit+0x104>)
 8002340:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002344:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002348:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_UART_MspInit+0x100>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002360:	2200      	movs	r2, #0
 8002362:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002364:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002366:	2200      	movs	r2, #0
 8002368:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_UART_MspInit+0x100>)
 800236c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002370:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_UART_MspInit+0x100>)
 800237a:	2200      	movs	r2, #0
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800237e:	4810      	ldr	r0, [pc, #64]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002380:	f001 f964 	bl	800364c <HAL_DMA_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800238a:	f7ff fce7 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002392:	635a      	str	r2, [r3, #52]	; 0x34
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_UART_MspInit+0x100>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2025      	movs	r0, #37	; 0x25
 80023a0:	f001 f90e 	bl	80035c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a4:	2025      	movs	r0, #37	; 0x25
 80023a6:	f001 f927 	bl	80035f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	; 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40011000 	.word	0x40011000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	200004f8 	.word	0x200004f8
 80023c4:	40026440 	.word	0x40026440

080023c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002400 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023ce:	e003      	b.n	80023d8 <LoopCopyDataInit>

080023d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023d6:	3104      	adds	r1, #4

080023d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023d8:	480b      	ldr	r0, [pc, #44]	; (8002408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023e0:	d3f6      	bcc.n	80023d0 <CopyDataInit>
  ldr  r2, =_sbss
 80023e2:	4a0b      	ldr	r2, [pc, #44]	; (8002410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023e4:	e002      	b.n	80023ec <LoopFillZerobss>

080023e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023e8:	f842 3b04 	str.w	r3, [r2], #4

080023ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023ec:	4b09      	ldr	r3, [pc, #36]	; (8002414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023f0:	d3f9      	bcc.n	80023e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023f2:	f7ff feb3 	bl	800215c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023f6:	f008 fff3 	bl	800b3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fa:	f7ff fb4f 	bl	8001a9c <main>
  bx  lr    
 80023fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002400:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002404:	0800da08 	.word	0x0800da08
  ldr  r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800240c:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8002410:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8002414:	200009ec 	.word	0x200009ec

08002418 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC_IRQHandler>

0800241a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800241e:	f000 fa5d 	bl	80028dc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002422:	20ca      	movs	r0, #202	; 0xca
 8002424:	f000 f95d 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002428:	20c3      	movs	r0, #195	; 0xc3
 800242a:	f000 f967 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800242e:	2008      	movs	r0, #8
 8002430:	f000 f964 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002434:	2050      	movs	r0, #80	; 0x50
 8002436:	f000 f961 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800243a:	20cf      	movs	r0, #207	; 0xcf
 800243c:	f000 f951 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002440:	2000      	movs	r0, #0
 8002442:	f000 f95b 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002446:	20c1      	movs	r0, #193	; 0xc1
 8002448:	f000 f958 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800244c:	2030      	movs	r0, #48	; 0x30
 800244e:	f000 f955 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002452:	20ed      	movs	r0, #237	; 0xed
 8002454:	f000 f945 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002458:	2064      	movs	r0, #100	; 0x64
 800245a:	f000 f94f 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800245e:	2003      	movs	r0, #3
 8002460:	f000 f94c 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002464:	2012      	movs	r0, #18
 8002466:	f000 f949 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800246a:	2081      	movs	r0, #129	; 0x81
 800246c:	f000 f946 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002470:	20e8      	movs	r0, #232	; 0xe8
 8002472:	f000 f936 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002476:	2085      	movs	r0, #133	; 0x85
 8002478:	f000 f940 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f93d 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002482:	2078      	movs	r0, #120	; 0x78
 8002484:	f000 f93a 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002488:	20cb      	movs	r0, #203	; 0xcb
 800248a:	f000 f92a 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800248e:	2039      	movs	r0, #57	; 0x39
 8002490:	f000 f934 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002494:	202c      	movs	r0, #44	; 0x2c
 8002496:	f000 f931 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800249a:	2000      	movs	r0, #0
 800249c:	f000 f92e 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80024a0:	2034      	movs	r0, #52	; 0x34
 80024a2:	f000 f92b 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80024a6:	2002      	movs	r0, #2
 80024a8:	f000 f928 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80024ac:	20f7      	movs	r0, #247	; 0xf7
 80024ae:	f000 f918 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80024b2:	2020      	movs	r0, #32
 80024b4:	f000 f922 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80024b8:	20ea      	movs	r0, #234	; 0xea
 80024ba:	f000 f912 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f91c 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f919 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80024ca:	20b1      	movs	r0, #177	; 0xb1
 80024cc:	f000 f909 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 f913 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80024d6:	201b      	movs	r0, #27
 80024d8:	f000 f910 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80024dc:	20b6      	movs	r0, #182	; 0xb6
 80024de:	f000 f900 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80024e2:	200a      	movs	r0, #10
 80024e4:	f000 f90a 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80024e8:	20a2      	movs	r0, #162	; 0xa2
 80024ea:	f000 f907 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80024ee:	20c0      	movs	r0, #192	; 0xc0
 80024f0:	f000 f8f7 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80024f4:	2010      	movs	r0, #16
 80024f6:	f000 f901 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80024fa:	20c1      	movs	r0, #193	; 0xc1
 80024fc:	f000 f8f1 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002500:	2010      	movs	r0, #16
 8002502:	f000 f8fb 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002506:	20c5      	movs	r0, #197	; 0xc5
 8002508:	f000 f8eb 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800250c:	2045      	movs	r0, #69	; 0x45
 800250e:	f000 f8f5 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002512:	2015      	movs	r0, #21
 8002514:	f000 f8f2 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002518:	20c7      	movs	r0, #199	; 0xc7
 800251a:	f000 f8e2 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800251e:	2090      	movs	r0, #144	; 0x90
 8002520:	f000 f8ec 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002524:	2036      	movs	r0, #54	; 0x36
 8002526:	f000 f8dc 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800252a:	20c8      	movs	r0, #200	; 0xc8
 800252c:	f000 f8e6 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002530:	20f2      	movs	r0, #242	; 0xf2
 8002532:	f000 f8d6 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f8e0 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800253c:	20b0      	movs	r0, #176	; 0xb0
 800253e:	f000 f8d0 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002542:	20c2      	movs	r0, #194	; 0xc2
 8002544:	f000 f8da 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002548:	20b6      	movs	r0, #182	; 0xb6
 800254a:	f000 f8ca 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800254e:	200a      	movs	r0, #10
 8002550:	f000 f8d4 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002554:	20a7      	movs	r0, #167	; 0xa7
 8002556:	f000 f8d1 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800255a:	2027      	movs	r0, #39	; 0x27
 800255c:	f000 f8ce 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002560:	2004      	movs	r0, #4
 8002562:	f000 f8cb 	bl	80026fc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002566:	202a      	movs	r0, #42	; 0x2a
 8002568:	f000 f8bb 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f000 f8c5 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f8c2 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f8bf 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800257e:	20ef      	movs	r0, #239	; 0xef
 8002580:	f000 f8bc 	bl	80026fc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002584:	202b      	movs	r0, #43	; 0x2b
 8002586:	f000 f8ac 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800258a:	2000      	movs	r0, #0
 800258c:	f000 f8b6 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002590:	2000      	movs	r0, #0
 8002592:	f000 f8b3 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002596:	2001      	movs	r0, #1
 8002598:	f000 f8b0 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800259c:	203f      	movs	r0, #63	; 0x3f
 800259e:	f000 f8ad 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80025a2:	20f6      	movs	r0, #246	; 0xf6
 80025a4:	f000 f89d 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 f8a7 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f000 f8a4 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80025b4:	2006      	movs	r0, #6
 80025b6:	f000 f8a1 	bl	80026fc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80025ba:	202c      	movs	r0, #44	; 0x2c
 80025bc:	f000 f891 	bl	80026e2 <ili9341_WriteReg>
  LCD_Delay(200);
 80025c0:	20c8      	movs	r0, #200	; 0xc8
 80025c2:	f000 fa79 	bl	8002ab8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80025c6:	2026      	movs	r0, #38	; 0x26
 80025c8:	f000 f88b 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f000 f895 	bl	80026fc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80025d2:	20e0      	movs	r0, #224	; 0xe0
 80025d4:	f000 f885 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80025d8:	200f      	movs	r0, #15
 80025da:	f000 f88f 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80025de:	2029      	movs	r0, #41	; 0x29
 80025e0:	f000 f88c 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80025e4:	2024      	movs	r0, #36	; 0x24
 80025e6:	f000 f889 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80025ea:	200c      	movs	r0, #12
 80025ec:	f000 f886 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80025f0:	200e      	movs	r0, #14
 80025f2:	f000 f883 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80025f6:	2009      	movs	r0, #9
 80025f8:	f000 f880 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80025fc:	204e      	movs	r0, #78	; 0x4e
 80025fe:	f000 f87d 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002602:	2078      	movs	r0, #120	; 0x78
 8002604:	f000 f87a 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002608:	203c      	movs	r0, #60	; 0x3c
 800260a:	f000 f877 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800260e:	2009      	movs	r0, #9
 8002610:	f000 f874 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002614:	2013      	movs	r0, #19
 8002616:	f000 f871 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800261a:	2005      	movs	r0, #5
 800261c:	f000 f86e 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002620:	2017      	movs	r0, #23
 8002622:	f000 f86b 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002626:	2011      	movs	r0, #17
 8002628:	f000 f868 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800262c:	2000      	movs	r0, #0
 800262e:	f000 f865 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002632:	20e1      	movs	r0, #225	; 0xe1
 8002634:	f000 f855 	bl	80026e2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002638:	2000      	movs	r0, #0
 800263a:	f000 f85f 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800263e:	2016      	movs	r0, #22
 8002640:	f000 f85c 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002644:	201b      	movs	r0, #27
 8002646:	f000 f859 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800264a:	2004      	movs	r0, #4
 800264c:	f000 f856 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002650:	2011      	movs	r0, #17
 8002652:	f000 f853 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002656:	2007      	movs	r0, #7
 8002658:	f000 f850 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800265c:	2031      	movs	r0, #49	; 0x31
 800265e:	f000 f84d 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002662:	2033      	movs	r0, #51	; 0x33
 8002664:	f000 f84a 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002668:	2042      	movs	r0, #66	; 0x42
 800266a:	f000 f847 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800266e:	2005      	movs	r0, #5
 8002670:	f000 f844 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002674:	200c      	movs	r0, #12
 8002676:	f000 f841 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800267a:	200a      	movs	r0, #10
 800267c:	f000 f83e 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002680:	2028      	movs	r0, #40	; 0x28
 8002682:	f000 f83b 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002686:	202f      	movs	r0, #47	; 0x2f
 8002688:	f000 f838 	bl	80026fc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800268c:	200f      	movs	r0, #15
 800268e:	f000 f835 	bl	80026fc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002692:	2011      	movs	r0, #17
 8002694:	f000 f825 	bl	80026e2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002698:	20c8      	movs	r0, #200	; 0xc8
 800269a:	f000 fa0d 	bl	8002ab8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800269e:	2029      	movs	r0, #41	; 0x29
 80026a0:	f000 f81f 	bl	80026e2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80026a4:	202c      	movs	r0, #44	; 0x2c
 80026a6:	f000 f81c 	bl	80026e2 <ili9341_WriteReg>
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}

080026ae <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80026b2:	f000 f913 	bl	80028dc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80026b6:	2103      	movs	r1, #3
 80026b8:	20d3      	movs	r0, #211	; 0xd3
 80026ba:	f000 f82c 	bl	8002716 <ili9341_ReadData>
 80026be:	4603      	mov	r3, r0
 80026c0:	b29b      	uxth	r3, r3
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80026ca:	2029      	movs	r0, #41	; 0x29
 80026cc:	f000 f809 	bl	80026e2 <ili9341_WriteReg>
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80026d8:	2028      	movs	r0, #40	; 0x28
 80026da:	f000 f802 	bl	80026e2 <ili9341_WriteReg>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 f98e 	bl	8002a10 <LCD_IO_WriteReg>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f95f 	bl	80029cc <LCD_IO_WriteData>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	460a      	mov	r2, r1
 8002720:	80fb      	strh	r3, [r7, #6]
 8002722:	4613      	mov	r3, r2
 8002724:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002726:	797a      	ldrb	r2, [r7, #5]
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f991 	bl	8002a54 <LCD_IO_ReadData>
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002740:	23f0      	movs	r3, #240	; 0xf0
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002750:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002764:	4819      	ldr	r0, [pc, #100]	; (80027cc <SPIx_Init+0x6c>)
 8002766:	f005 fb73 	bl	8007e50 <HAL_SPI_GetState>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d12b      	bne.n	80027c8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <SPIx_Init+0x6c>)
 8002772:	4a17      	ldr	r2, [pc, #92]	; (80027d0 <SPIx_Init+0x70>)
 8002774:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <SPIx_Init+0x6c>)
 8002778:	2218      	movs	r2, #24
 800277a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800277c:	4b13      	ldr	r3, [pc, #76]	; (80027cc <SPIx_Init+0x6c>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <SPIx_Init+0x6c>)
 8002784:	2200      	movs	r2, #0
 8002786:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002788:	4b10      	ldr	r3, [pc, #64]	; (80027cc <SPIx_Init+0x6c>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <SPIx_Init+0x6c>)
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002794:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <SPIx_Init+0x6c>)
 8002796:	2207      	movs	r2, #7
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <SPIx_Init+0x6c>)
 800279c:	2200      	movs	r2, #0
 800279e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <SPIx_Init+0x6c>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <SPIx_Init+0x6c>)
 80027a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ac:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <SPIx_Init+0x6c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <SPIx_Init+0x6c>)
 80027b6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027ba:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80027bc:	4803      	ldr	r0, [pc, #12]	; (80027cc <SPIx_Init+0x6c>)
 80027be:	f000 f853 	bl	8002868 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80027c2:	4802      	ldr	r0, [pc, #8]	; (80027cc <SPIx_Init+0x6c>)
 80027c4:	f004 fed9 	bl	800757a <HAL_SPI_Init>
  } 
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200000e4 	.word	0x200000e4
 80027d0:	40015000 	.word	0x40015000

080027d4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <SPIx_Read+0x38>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f107 0108 	add.w	r1, r7, #8
 80027ee:	4808      	ldr	r0, [pc, #32]	; (8002810 <SPIx_Read+0x3c>)
 80027f0:	f005 f883 	bl	80078fa <HAL_SPI_Receive>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027fe:	f000 f827 	bl	8002850 <SPIx_Error>
  }
  
  return readvalue;
 8002802:	68bb      	ldr	r3, [r7, #8]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000003c 	.word	0x2000003c
 8002810:	200000e4 	.word	0x200000e4

08002814 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <SPIx_Write+0x34>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1db9      	adds	r1, r7, #6
 8002828:	2201      	movs	r2, #1
 800282a:	4808      	ldr	r0, [pc, #32]	; (800284c <SPIx_Write+0x38>)
 800282c:	f004 ff31 	bl	8007692 <HAL_SPI_Transmit>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800283a:	f000 f809 	bl	8002850 <SPIx_Error>
  }
}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2000003c 	.word	0x2000003c
 800284c:	200000e4 	.word	0x200000e4

08002850 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002854:	4803      	ldr	r0, [pc, #12]	; (8002864 <SPIx_Error+0x14>)
 8002856:	f004 fef4 	bl	8007642 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800285a:	f7ff ff81 	bl	8002760 <SPIx_Init>
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200000e4 	.word	0x200000e4

08002868 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <SPIx_MspInit+0x6c>)
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <SPIx_MspInit+0x6c>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	6453      	str	r3, [r2, #68]	; 0x44
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <SPIx_MspInit+0x6c>)
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <SPIx_MspInit+0x6c>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <SPIx_MspInit+0x6c>)
 8002896:	f043 0320 	orr.w	r3, r3, #32
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b0d      	ldr	r3, [pc, #52]	; (80028d4 <SPIx_MspInit+0x6c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80028a8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80028b6:	2301      	movs	r3, #1
 80028b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80028ba:	2305      	movs	r3, #5
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80028be:	f107 0314 	add.w	r3, r7, #20
 80028c2:	4619      	mov	r1, r3
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <SPIx_MspInit+0x70>)
 80028c6:	f001 fe4b 	bl	8004560 <HAL_GPIO_Init>
}
 80028ca:	bf00      	nop
 80028cc:	3728      	adds	r7, #40	; 0x28
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40021400 	.word	0x40021400

080028dc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <LCD_IO_Init+0xe0>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d164      	bne.n	80029b4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <LCD_IO_Init+0xe0>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <LCD_IO_Init+0xe4>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <LCD_IO_Init+0xe4>)
 80028fa:	f043 0308 	orr.w	r3, r3, #8
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <LCD_IO_Init+0xe4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800290c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002910:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002912:	2301      	movs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800291a:	2302      	movs	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4619      	mov	r1, r3
 8002924:	4827      	ldr	r0, [pc, #156]	; (80029c4 <LCD_IO_Init+0xe8>)
 8002926:	f001 fe1b 	bl	8004560 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <LCD_IO_Init+0xe4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <LCD_IO_Init+0xe4>)
 8002934:	f043 0308 	orr.w	r3, r3, #8
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <LCD_IO_Init+0xe4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800294a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800294c:	2301      	movs	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002954:	2302      	movs	r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	4619      	mov	r1, r3
 800295e:	4819      	ldr	r0, [pc, #100]	; (80029c4 <LCD_IO_Init+0xe8>)
 8002960:	f001 fdfe 	bl	8004560 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <LCD_IO_Init+0xe4>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <LCD_IO_Init+0xe4>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <LCD_IO_Init+0xe4>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002980:	2304      	movs	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002984:	2301      	movs	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	4619      	mov	r1, r3
 8002996:	480c      	ldr	r0, [pc, #48]	; (80029c8 <LCD_IO_Init+0xec>)
 8002998:	f001 fde2 	bl	8004560 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800299c:	2200      	movs	r2, #0
 800299e:	2104      	movs	r1, #4
 80029a0:	4809      	ldr	r0, [pc, #36]	; (80029c8 <LCD_IO_Init+0xec>)
 80029a2:	f002 f891 	bl	8004ac8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80029a6:	2201      	movs	r2, #1
 80029a8:	2104      	movs	r1, #4
 80029aa:	4807      	ldr	r0, [pc, #28]	; (80029c8 <LCD_IO_Init+0xec>)
 80029ac:	f002 f88c 	bl	8004ac8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80029b0:	f7ff fed6 	bl	8002760 <SPIx_Init>
  }
}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000013c 	.word	0x2000013c
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020c00 	.word	0x40020c00
 80029c8:	40020800 	.word	0x40020800

080029cc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029dc:	480a      	ldr	r0, [pc, #40]	; (8002a08 <LCD_IO_WriteData+0x3c>)
 80029de:	f002 f873 	bl	8004ac8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80029e2:	2200      	movs	r2, #0
 80029e4:	2104      	movs	r1, #4
 80029e6:	4809      	ldr	r0, [pc, #36]	; (8002a0c <LCD_IO_WriteData+0x40>)
 80029e8:	f002 f86e 	bl	8004ac8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff10 	bl	8002814 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029f4:	2201      	movs	r2, #1
 80029f6:	2104      	movs	r1, #4
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <LCD_IO_WriteData+0x40>)
 80029fa:	f002 f865 	bl	8004ac8 <HAL_GPIO_WritePin>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40020800 	.word	0x40020800

08002a10 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a20:	480a      	ldr	r0, [pc, #40]	; (8002a4c <LCD_IO_WriteReg+0x3c>)
 8002a22:	f002 f851 	bl	8004ac8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002a26:	2200      	movs	r2, #0
 8002a28:	2104      	movs	r1, #4
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <LCD_IO_WriteReg+0x40>)
 8002a2c:	f002 f84c 	bl	8004ac8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff feed 	bl	8002814 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2104      	movs	r1, #4
 8002a3e:	4804      	ldr	r0, [pc, #16]	; (8002a50 <LCD_IO_WriteReg+0x40>)
 8002a40:	f002 f842 	bl	8004ac8 <HAL_GPIO_WritePin>
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40020800 	.word	0x40020800

08002a54 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	460a      	mov	r2, r1
 8002a5e:	80fb      	strh	r3, [r7, #6]
 8002a60:	4613      	mov	r3, r2
 8002a62:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4810      	ldr	r0, [pc, #64]	; (8002ab0 <LCD_IO_ReadData+0x5c>)
 8002a6e:	f002 f82b 	bl	8004ac8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a72:	2200      	movs	r2, #0
 8002a74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a78:	480e      	ldr	r0, [pc, #56]	; (8002ab4 <LCD_IO_ReadData+0x60>)
 8002a7a:	f002 f825 	bl	8004ac8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fec7 	bl	8002814 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002a86:	797b      	ldrb	r3, [r7, #5]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fea3 	bl	80027d4 <SPIx_Read>
 8002a8e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a96:	4807      	ldr	r0, [pc, #28]	; (8002ab4 <LCD_IO_ReadData+0x60>)
 8002a98:	f002 f816 	bl	8004ac8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2104      	movs	r1, #4
 8002aa0:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <LCD_IO_ReadData+0x5c>)
 8002aa2:	f002 f811 	bl	8004ac8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00

08002ab8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fca3 	bl	800340c <HAL_Delay>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002ad6:	4a2e      	ldr	r2, [pc, #184]	; (8002b90 <BSP_LCD_Init+0xc0>)
 8002ad8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002adc:	2209      	movs	r2, #9
 8002ade:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002ae6:	4b29      	ldr	r3, [pc, #164]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002ae8:	221d      	movs	r2, #29
 8002aea:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002aec:	4b27      	ldr	r3, [pc, #156]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002aee:	2203      	movs	r2, #3
 8002af0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002af4:	f240 120d 	movw	r2, #269	; 0x10d
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002afc:	f240 1243 	movw	r2, #323	; 0x143
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002b02:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b04:	f240 1217 	movw	r2, #279	; 0x117
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002b0a:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b0c:	f240 1247 	movw	r2, #327	; 0x147
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002b22:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <BSP_LCD_Init+0xc4>)
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <BSP_LCD_Init+0xc4>)
 8002b32:	22c0      	movs	r2, #192	; 0xc0
 8002b34:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <BSP_LCD_Init+0xc4>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002b3c:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <BSP_LCD_Init+0xc4>)
 8002b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002b44:	4813      	ldr	r0, [pc, #76]	; (8002b94 <BSP_LCD_Init+0xc4>)
 8002b46:	f004 fadb 	bl	8007100 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b50:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002b62:	f000 f913 	bl	8002d8c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002b66:	4809      	ldr	r0, [pc, #36]	; (8002b8c <BSP_LCD_Init+0xbc>)
 8002b68:	f003 fb66 	bl	8006238 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_LCD_Init+0xc8>)
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <BSP_LCD_Init+0xcc>)
 8002b70:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <BSP_LCD_Init+0xc8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002b7a:	f000 fa3b 	bl	8002ff4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b7e:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <BSP_LCD_Init+0xd0>)
 8002b80:	f000 f8b2 	bl	8002ce8 <BSP_LCD_SetFont>

  return LCD_OK;
 8002b84:	2300      	movs	r3, #0
}  
 8002b86:	4618      	mov	r0, r3
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000674 	.word	0x20000674
 8002b90:	40016800 	.word	0x40016800
 8002b94:	20000180 	.word	0x20000180
 8002b98:	2000071c 	.word	0x2000071c
 8002b9c:	20000004 	.word	0x20000004
 8002ba0:	20000040 	.word	0x20000040

08002ba4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <BSP_LCD_GetXSize+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	4798      	blx	r3
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000071c 	.word	0x2000071c

08002bbc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <BSP_LCD_GetYSize+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4798      	blx	r3
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	2000071c 	.word	0x2000071c

08002bd4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b090      	sub	sp, #64	; 0x40
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002be4:	f7ff ffde 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002be8:	4603      	mov	r3, r0
 8002bea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002bf0:	f7ff ffe4 	bl	8002bbc <BSP_LCD_GetYSize>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002c00:	23ff      	movs	r3, #255	; 0xff
 8002c02:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002c1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002c20:	2307      	movs	r3, #7
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002c24:	f7ff ffbe 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002c2c:	f7ff ffc6 	bl	8002bbc <BSP_LCD_GetYSize>
 8002c30:	4603      	mov	r3, r0
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4814      	ldr	r0, [pc, #80]	; (8002c90 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c3e:	f003 fbcb 	bl	80063d8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	4913      	ldr	r1, [pc, #76]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3304      	adds	r3, #4
 8002c52:	f04f 32ff 	mov.w	r2, #4294967295
 8002c56:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	490e      	ldr	r1, [pc, #56]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3308      	adds	r3, #8
 8002c68:	4a0b      	ldr	r2, [pc, #44]	; (8002c98 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002c6a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002c6c:	88fa      	ldrh	r2, [r7, #6]
 8002c6e:	4909      	ldr	r1, [pc, #36]	; (8002c94 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c82:	f003 fbe7 	bl	8006454 <HAL_LTDC_EnableDither>
}
 8002c86:	bf00      	nop
 8002c88:	3740      	adds	r7, #64	; 0x40
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000674 	.word	0x20000674
 8002c94:	200001b4 	.word	0x200001b4
 8002c98:	20000040 	.word	0x20000040

08002c9c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <BSP_LCD_SelectLayer+0x1c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	200001b0 	.word	0x200001b0

08002cbc <BSP_LCD_GetBackColor>:
/**
  * @brief  Gets the LCD Background color. 
  * @retval Background color  
  */
uint32_t BSP_LCD_GetBackColor(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].BackColor;
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <BSP_LCD_GetBackColor+0x24>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4907      	ldr	r1, [pc, #28]	; (8002ce4 <BSP_LCD_GetBackColor+0x28>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	200001b0 	.word	0x200001b0
 8002ce4:	200001b4 	.word	0x200001b4

08002ce8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <BSP_LCD_SetFont+0x2c>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4908      	ldr	r1, [pc, #32]	; (8002d18 <BSP_LCD_SetFont+0x30>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	3308      	adds	r3, #8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	200001b0 	.word	0x200001b0
 8002d18:	200001b4 	.word	0x200001b4

08002d1c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af02      	add	r7, sp, #8
 8002d22:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <BSP_LCD_Clear+0x48>)
 8002d26:	681c      	ldr	r4, [r3, #0]
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <BSP_LCD_Clear+0x48>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <BSP_LCD_Clear+0x4c>)
 8002d2e:	2134      	movs	r1, #52	; 0x34
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	f7ff ff32 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002d40:	4606      	mov	r6, r0
 8002d42:	f7ff ff3b 	bl	8002bbc <BSP_LCD_GetYSize>
 8002d46:	4602      	mov	r2, r0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	4632      	mov	r2, r6
 8002d54:	4629      	mov	r1, r5
 8002d56:	4620      	mov	r0, r4
 8002d58:	f000 f914 	bl	8002f84 <FillBuffer>
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d64:	200001b0 	.word	0x200001b0
 8002d68:	20000674 	.word	0x20000674

08002d6c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <BSP_LCD_DisplayOn+0x1c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002d7a:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <BSP_LCD_DisplayOn+0x1c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4798      	blx	r3
  }
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000071c 	.word	0x2000071c

08002d8c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002daa:	623b      	str	r3, [r7, #32]
 8002dac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002dae:	2300      	movs	r3, #0
 8002db0:	61fb      	str	r3, [r7, #28]
 8002db2:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a59      	ldr	r2, [pc, #356]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002db8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b57      	ldr	r3, [pc, #348]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	61bb      	str	r3, [r7, #24]
 8002de4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a44      	ldr	r2, [pc, #272]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b42      	ldr	r3, [pc, #264]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b37      	ldr	r3, [pc, #220]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a36      	ldr	r2, [pc, #216]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e44:	f043 0320 	orr.w	r3, r3, #32
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b34      	ldr	r3, [pc, #208]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <BSP_LCD_MspInit+0x190>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002e72:	f641 0358 	movw	r3, #6232	; 0x1858
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e80:	2302      	movs	r3, #2
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002e84:	230e      	movs	r3, #14
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4824      	ldr	r0, [pc, #144]	; (8002f20 <BSP_LCD_MspInit+0x194>)
 8002e90:	f001 fb66 	bl	8004560 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002e94:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4820      	ldr	r0, [pc, #128]	; (8002f24 <BSP_LCD_MspInit+0x198>)
 8002ea2:	f001 fb5d 	bl	8004560 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002ea6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	481d      	ldr	r0, [pc, #116]	; (8002f28 <BSP_LCD_MspInit+0x19c>)
 8002eb4:	f001 fb54 	bl	8004560 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002eb8:	2348      	movs	r3, #72	; 0x48
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	481a      	ldr	r0, [pc, #104]	; (8002f2c <BSP_LCD_MspInit+0x1a0>)
 8002ec4:	f001 fb4c 	bl	8004560 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4816      	ldr	r0, [pc, #88]	; (8002f30 <BSP_LCD_MspInit+0x1a4>)
 8002ed6:	f001 fb43 	bl	8004560 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002eda:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4813      	ldr	r0, [pc, #76]	; (8002f34 <BSP_LCD_MspInit+0x1a8>)
 8002ee8:	f001 fb3a 	bl	8004560 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002eec:	2303      	movs	r3, #3
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480a      	ldr	r0, [pc, #40]	; (8002f24 <BSP_LCD_MspInit+0x198>)
 8002efc:	f001 fb30 	bl	8004560 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002f00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4809      	ldr	r0, [pc, #36]	; (8002f34 <BSP_LCD_MspInit+0x1a8>)
 8002f0e:	f001 fb27 	bl	8004560 <HAL_GPIO_Init>
}
 8002f12:	bf00      	nop
 8002f14:	3738      	adds	r7, #56	; 0x38
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40020000 	.word	0x40020000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020800 	.word	0x40020800
 8002f2c:	40020c00 	.word	0x40020c00
 8002f30:	40021400 	.word	0x40021400
 8002f34:	40021800 	.word	0x40021800

08002f38 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	603a      	str	r2, [r7, #0]
 8002f42:	80fb      	strh	r3, [r7, #6]
 8002f44:	460b      	mov	r3, r1
 8002f46:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <BSP_LCD_DrawPixel+0x44>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <BSP_LCD_DrawPixel+0x48>)
 8002f4e:	2134      	movs	r1, #52	; 0x34
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	681c      	ldr	r4, [r3, #0]
 8002f5a:	88bd      	ldrh	r5, [r7, #4]
 8002f5c:	f7ff fe22 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002f60:	4603      	mov	r3, r0
 8002f62:	fb03 f205 	mul.w	r2, r3, r5
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4423      	add	r3, r4
 8002f6e:	461a      	mov	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7c:	200001b0 	.word	0x200001b0
 8002f80:	20000674 	.word	0x20000674

08002f84 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <FillBuffer+0x68>)
 8002f94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f98:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <FillBuffer+0x68>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002fa0:	4a12      	ldr	r2, [pc, #72]	; (8002fec <FillBuffer+0x68>)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <FillBuffer+0x68>)
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <FillBuffer+0x6c>)
 8002faa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002fac:	480f      	ldr	r0, [pc, #60]	; (8002fec <FillBuffer+0x68>)
 8002fae:	f000 ff3b 	bl	8003e28 <HAL_DMA2D_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d115      	bne.n	8002fe4 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	480c      	ldr	r0, [pc, #48]	; (8002fec <FillBuffer+0x68>)
 8002fbc:	f001 f9a2 	bl	8004304 <HAL_DMA2D_ConfigLayer>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10e      	bne.n	8002fe4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69f9      	ldr	r1, [r7, #28]
 8002fd0:	4806      	ldr	r0, [pc, #24]	; (8002fec <FillBuffer+0x68>)
 8002fd2:	f000 ff72 	bl	8003eba <HAL_DMA2D_Start>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002fdc:	210a      	movs	r1, #10
 8002fde:	4803      	ldr	r0, [pc, #12]	; (8002fec <FillBuffer+0x68>)
 8002fe0:	f000 ff96 	bl	8003f10 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000140 	.word	0x20000140
 8002ff0:	4002b000 	.word	0x4002b000

08002ff4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8002ffa:	4a2a      	ldr	r2, [pc, #168]	; (80030a4 <BSP_SDRAM_Init+0xb0>)
 8002ffc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 8003000:	2202      	movs	r2, #2
 8003002:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003004:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 8003006:	2207      	movs	r2, #7
 8003008:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800300a:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 800300c:	2204      	movs	r2, #4
 800300e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 8003012:	2207      	movs	r2, #7
 8003014:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 8003018:	2202      	movs	r2, #2
 800301a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 800301e:	2202      	movs	r2, #2
 8003020:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 8003024:	2202      	movs	r2, #2
 8003026:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 800302a:	2201      	movs	r2, #1
 800302c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800302e:	4b1c      	ldr	r3, [pc, #112]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003034:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003036:	2204      	movs	r2, #4
 8003038:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 800303c:	2210      	movs	r2, #16
 800303e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003040:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003046:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003048:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800304c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003050:	2200      	movs	r2, #0
 8003052:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800305a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800305c:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 800305e:	2200      	movs	r2, #0
 8003060:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003062:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800306a:	2100      	movs	r1, #0
 800306c:	480c      	ldr	r0, [pc, #48]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 800306e:	f000 f87f 	bl	8003170 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <BSP_SDRAM_Init+0xb4>)
 8003074:	480a      	ldr	r0, [pc, #40]	; (80030a0 <BSP_SDRAM_Init+0xac>)
 8003076:	f004 fa01 	bl	800747c <HAL_SDRAM_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <BSP_SDRAM_Init+0xb8>)
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
 8003086:	e002      	b.n	800308e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <BSP_SDRAM_Init+0xb8>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800308e:	f240 506a 	movw	r0, #1386	; 0x56a
 8003092:	f000 f80d 	bl	80030b0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <BSP_SDRAM_Init+0xb8>)
 8003098:	781b      	ldrb	r3, [r3, #0]
}
 800309a:	4618      	mov	r0, r3
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200001cc 	.word	0x200001cc
 80030a4:	a0000140 	.word	0xa0000140
 80030a8:	20000200 	.word	0x20000200
 80030ac:	20000048 	.word	0x20000048

080030b0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030c2:	4b29      	ldr	r3, [pc, #164]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030c4:	2208      	movs	r2, #8
 80030c6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80030d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d8:	4923      	ldr	r1, [pc, #140]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030da:	4824      	ldr	r0, [pc, #144]	; (800316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80030dc:	f004 fa02 	bl	80074e4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f000 f993 	bl	800340c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030ee:	2208      	movs	r2, #8
 80030f0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80030fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003102:	4919      	ldr	r1, [pc, #100]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003104:	4819      	ldr	r0, [pc, #100]	; (800316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003106:	f004 f9ed 	bl	80074e4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800310c:	2203      	movs	r2, #3
 800310e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003112:	2208      	movs	r2, #8
 8003114:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003118:	2204      	movs	r2, #4
 800311a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003126:	4910      	ldr	r1, [pc, #64]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003128:	4810      	ldr	r0, [pc, #64]	; (800316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800312a:	f004 f9db 	bl	80074e4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800312e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003132:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003136:	2204      	movs	r2, #4
 8003138:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800313c:	2208      	movs	r2, #8
 800313e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003142:	2201      	movs	r2, #1
 8003144:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800314a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800314c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003150:	4905      	ldr	r1, [pc, #20]	; (8003168 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003152:	4806      	ldr	r0, [pc, #24]	; (800316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003154:	f004 f9c6 	bl	80074e4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4804      	ldr	r0, [pc, #16]	; (800316c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800315c:	f004 f9ed 	bl	800753a <HAL_SDRAM_ProgramRefreshRate>
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000021c 	.word	0x2000021c
 800316c:	200001cc 	.word	0x200001cc

08003170 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b090      	sub	sp, #64	; 0x40
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80ec 	beq.w	800335a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
 8003186:	4b77      	ldr	r3, [pc, #476]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4a76      	ldr	r2, [pc, #472]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6393      	str	r3, [r2, #56]	; 0x38
 8003192:	4b74      	ldr	r3, [pc, #464]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
 80031a2:	4b70      	ldr	r3, [pc, #448]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a6f      	ldr	r2, [pc, #444]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	623b      	str	r3, [r7, #32]
 80031be:	4b69      	ldr	r3, [pc, #420]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a68      	ldr	r2, [pc, #416]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b66      	ldr	r3, [pc, #408]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	4a61      	ldr	r2, [pc, #388]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	6313      	str	r3, [r2, #48]	; 0x30
 80031e6:	4b5f      	ldr	r3, [pc, #380]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a5a      	ldr	r2, [pc, #360]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 80031fc:	f043 0308 	orr.w	r3, r3, #8
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b58      	ldr	r3, [pc, #352]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	4b54      	ldr	r3, [pc, #336]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a53      	ldr	r2, [pc, #332]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b51      	ldr	r3, [pc, #324]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	4b4d      	ldr	r3, [pc, #308]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a4c      	ldr	r2, [pc, #304]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003234:	f043 0320 	orr.w	r3, r3, #32
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b46      	ldr	r3, [pc, #280]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a45      	ldr	r2, [pc, #276]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <BSP_SDRAM_MspInit+0x1f4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003266:	2302      	movs	r3, #2
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800326e:	230c      	movs	r3, #12
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003272:	2360      	movs	r3, #96	; 0x60
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003276:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800327a:	4619      	mov	r1, r3
 800327c:	483a      	ldr	r0, [pc, #232]	; (8003368 <BSP_SDRAM_MspInit+0x1f8>)
 800327e:	f001 f96f 	bl	8004560 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003282:	2301      	movs	r3, #1
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800328a:	4619      	mov	r1, r3
 800328c:	4837      	ldr	r0, [pc, #220]	; (800336c <BSP_SDRAM_MspInit+0x1fc>)
 800328e:	f001 f967 	bl	8004560 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003292:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800329c:	4619      	mov	r1, r3
 800329e:	4834      	ldr	r0, [pc, #208]	; (8003370 <BSP_SDRAM_MspInit+0x200>)
 80032a0:	f001 f95e 	bl	8004560 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80032a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80032aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032ae:	4619      	mov	r1, r3
 80032b0:	4830      	ldr	r0, [pc, #192]	; (8003374 <BSP_SDRAM_MspInit+0x204>)
 80032b2:	f001 f955 	bl	8004560 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80032b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80032bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c0:	4619      	mov	r1, r3
 80032c2:	482d      	ldr	r0, [pc, #180]	; (8003378 <BSP_SDRAM_MspInit+0x208>)
 80032c4:	f001 f94c 	bl	8004560 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80032c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80032cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032d2:	4619      	mov	r1, r3
 80032d4:	4829      	ldr	r0, [pc, #164]	; (800337c <BSP_SDRAM_MspInit+0x20c>)
 80032d6:	f001 f943 	bl	8004560 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80032da:	4b29      	ldr	r3, [pc, #164]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 80032dc:	2200      	movs	r2, #0
 80032de:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80032e6:	4b26      	ldr	r3, [pc, #152]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 80032e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ec:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 80032f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 80032f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032fc:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003300:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003304:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003306:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003308:	2200      	movs	r2, #0
 800330a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 800330e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003312:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003314:	4b1a      	ldr	r3, [pc, #104]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 800331c:	2203      	movs	r2, #3
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003322:	2200      	movs	r2, #0
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <BSP_SDRAM_MspInit+0x214>)
 8003330:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	4a11      	ldr	r2, [pc, #68]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003340:	f000 fa32 	bl	80037a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003344:	480e      	ldr	r0, [pc, #56]	; (8003380 <BSP_SDRAM_MspInit+0x210>)
 8003346:	f000 f981 	bl	800364c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	210f      	movs	r1, #15
 800334e:	2038      	movs	r0, #56	; 0x38
 8003350:	f000 f936 	bl	80035c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003354:	2038      	movs	r0, #56	; 0x38
 8003356:	f000 f94f 	bl	80035f8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800335a:	bf00      	nop
 800335c:	3740      	adds	r7, #64	; 0x40
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	40020400 	.word	0x40020400
 800336c:	40020800 	.word	0x40020800
 8003370:	40020c00 	.word	0x40020c00
 8003374:	40021000 	.word	0x40021000
 8003378:	40021400 	.word	0x40021400
 800337c:	40021800 	.word	0x40021800
 8003380:	2000022c 	.word	0x2000022c
 8003384:	40026410 	.word	0x40026410

08003388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_Init+0x40>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0d      	ldr	r2, [pc, #52]	; (80033c8 <HAL_Init+0x40>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_Init+0x40>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <HAL_Init+0x40>)
 800339e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a07      	ldr	r2, [pc, #28]	; (80033c8 <HAL_Init+0x40>)
 80033aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b0:	2003      	movs	r0, #3
 80033b2:	f000 f8fa 	bl	80035aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fe fda2 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033bc:	f7fe fd74 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023c00 	.word	0x40023c00

080033cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_IncTick+0x20>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <HAL_IncTick+0x24>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4413      	add	r3, r2
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_IncTick+0x24>)
 80033de:	6013      	str	r3, [r2, #0]
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000050 	.word	0x20000050
 80033f0:	20000720 	.word	0x20000720

080033f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return uwTick;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_GetTick+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000720 	.word	0x20000720

0800340c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003414:	f7ff ffee 	bl	80033f4 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003424:	d005      	beq.n	8003432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <HAL_Delay+0x40>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003432:	bf00      	nop
 8003434:	f7ff ffde 	bl	80033f4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	429a      	cmp	r2, r3
 8003442:	d8f7      	bhi.n	8003434 <HAL_Delay+0x28>
  {
  }
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000050 	.word	0x20000050

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
         );
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff4c 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d2:	f7ff ff61 	bl	8003498 <__NVIC_GetPriorityGrouping>
 80035d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	6978      	ldr	r0, [r7, #20]
 80035de:	f7ff ffb1 	bl	8003544 <NVIC_EncodePriority>
 80035e2:	4602      	mov	r2, r0
 80035e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff80 	bl	80034f0 <__NVIC_SetPriority>
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff54 	bl	80034b4 <__NVIC_EnableIRQ>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e00e      	b.n	8003644 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	795b      	ldrb	r3, [r3, #5]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fd fcea 	bl	8001010 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003658:	f7ff fecc 	bl	80033f4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e099      	b.n	800379c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0201 	bic.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003688:	e00f      	b.n	80036aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368a:	f7ff feb3 	bl	80033f4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b05      	cmp	r3, #5
 8003696:	d908      	bls.n	80036aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2203      	movs	r2, #3
 80036a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e078      	b.n	800379c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e8      	bne.n	800368a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4b38      	ldr	r3, [pc, #224]	; (80037a4 <HAL_DMA_Init+0x158>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	2b04      	cmp	r3, #4
 8003702:	d107      	bne.n	8003714 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	4313      	orrs	r3, r2
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	2b04      	cmp	r3, #4
 800373c:	d117      	bne.n	800376e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00e      	beq.n	800376e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 faef 	bl	8003d34 <DMA_CheckFifoParam>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d008      	beq.n	800376e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2240      	movs	r2, #64	; 0x40
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800376a:	2301      	movs	r3, #1
 800376c:	e016      	b.n	800379c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 faa6 	bl	8003cc8 <DMA_CalcBaseAndBitshift>
 800377c:	4603      	mov	r3, r0
 800377e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	223f      	movs	r2, #63	; 0x3f
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	f010803f 	.word	0xf010803f

080037a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e050      	b.n	800385c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d101      	bne.n	80037ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e048      	b.n	800385c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2221      	movs	r2, #33	; 0x21
 8003808:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa5c 	bl	8003cc8 <DMA_CalcBaseAndBitshift>
 8003810:	4603      	mov	r3, r0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383c:	223f      	movs	r2, #63	; 0x3f
 800383e:	409a      	lsls	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_DMA_Start_IT+0x26>
 8003886:	2302      	movs	r3, #2
 8003888:	e040      	b.n	800390c <HAL_DMA_Start_IT+0xa8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d12f      	bne.n	80038fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f9da 	bl	8003c6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	223f      	movs	r2, #63	; 0x3f
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0216 	orr.w	r2, r2, #22
 80038d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e005      	b.n	800390a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2280      	movs	r2, #128	; 0x80
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00c      	b.n	800394c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0201 	bic.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003964:	4b92      	ldr	r3, [pc, #584]	; (8003bb0 <HAL_DMA_IRQHandler+0x258>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a92      	ldr	r2, [pc, #584]	; (8003bb4 <HAL_DMA_IRQHandler+0x25c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003982:	2208      	movs	r2, #8
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d013      	beq.n	80039c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0204 	bic.w	r2, r2, #4
 80039aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	2208      	movs	r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	2201      	movs	r2, #1
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d012      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	f043 0202 	orr.w	r2, r3, #2
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	2204      	movs	r2, #4
 8003a00:	409a      	lsls	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d012      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a34:	2210      	movs	r2, #16
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d043      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03c      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a52:	2210      	movs	r2, #16
 8003a54:	409a      	lsls	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d108      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d024      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	4798      	blx	r3
 8003a86:	e01f      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01b      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
 8003a98:	e016      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0208 	bic.w	r2, r2, #8
 8003ab6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	2220      	movs	r2, #32
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 808e 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8086 	beq.w	8003bf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	2220      	movs	r2, #32
 8003af0:	409a      	lsls	r2, r3
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d136      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0216 	bic.w	r2, r2, #22
 8003b10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x1da>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d007      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0208 	bic.w	r2, r2, #8
 8003b40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	223f      	movs	r2, #63	; 0x3f
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d07d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
        }
        return;
 8003b6e:	e078      	b.n	8003c62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d108      	bne.n	8003b9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d030      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e02b      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d027      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e022      	b.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
 8003bb0:	20000000 	.word	0x20000000
 8003bb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0210 	bic.w	r2, r2, #16
 8003bd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d032      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d022      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d307      	bcc.n	8003c3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f2      	bne.n	8003c22 <HAL_DMA_IRQHandler+0x2ca>
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c62:	bf00      	nop
    }
  }
}
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
 8003c78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d108      	bne.n	8003cac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003caa:	e007      	b.n	8003cbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	3b10      	subs	r3, #16
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <DMA_CalcBaseAndBitshift+0x64>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	091b      	lsrs	r3, r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ce2:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <DMA_CalcBaseAndBitshift+0x68>)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d909      	bls.n	8003d0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	1d1a      	adds	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	659a      	str	r2, [r3, #88]	; 0x58
 8003d08:	e007      	b.n	8003d1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	aaaaaaab 	.word	0xaaaaaaab
 8003d30:	0800d98c 	.word	0x0800d98c

08003d34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d11f      	bne.n	8003d8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d855      	bhi.n	8003e00 <DMA_CheckFifoParam+0xcc>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <DMA_CheckFifoParam+0x28>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d7f 	.word	0x08003d7f
 8003d64:	08003d6d 	.word	0x08003d6d
 8003d68:	08003e01 	.word	0x08003e01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d045      	beq.n	8003e04 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d7c:	e042      	b.n	8003e04 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d86:	d13f      	bne.n	8003e08 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d8c:	e03c      	b.n	8003e08 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d121      	bne.n	8003ddc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d836      	bhi.n	8003e0c <DMA_CheckFifoParam+0xd8>
 8003d9e:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <DMA_CheckFifoParam+0x70>)
 8003da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dbb 	.word	0x08003dbb
 8003dac:	08003db5 	.word	0x08003db5
 8003db0:	08003dcd 	.word	0x08003dcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      break;
 8003db8:	e02f      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d024      	beq.n	8003e10 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dca:	e021      	b.n	8003e10 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dd4:	d11e      	bne.n	8003e14 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dda:	e01b      	b.n	8003e14 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <DMA_CheckFifoParam+0xb4>
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d003      	beq.n	8003dee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003de6:	e018      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e015      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dfe:	e00b      	b.n	8003e18 <DMA_CheckFifoParam+0xe4>
      break;
 8003e00:	bf00      	nop
 8003e02:	e00a      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e04:	bf00      	nop
 8003e06:	e008      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e08:	bf00      	nop
 8003e0a:	e006      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e004      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;   
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <DMA_CheckFifoParam+0xe6>
      break;
 8003e18:	bf00      	nop
    }
  } 
  
  return status; 
 8003e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e03b      	b.n	8003eb2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd f952 	bl	80010f8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e78:	f023 0107 	bic.w	r1, r3, #7
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68d1      	ldr	r1, [r2, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af02      	add	r7, sp, #8
 8003ec0:	60f8      	str	r0, [r7, #12]
 8003ec2:	60b9      	str	r1, [r7, #8]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_DMA2D_Start+0x1c>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e018      	b.n	8003f08 <HAL_DMA2D_Start+0x4e>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa99 	bl	8004428 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d056      	beq.n	8003fda <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003f2c:	f7ff fa62 	bl	80033f4 <HAL_GetTick>
 8003f30:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f32:	e04b      	b.n	8003fcc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d023      	beq.n	8003f8e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	f043 0202 	orr.w	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2221      	movs	r2, #33	; 0x21
 8003f78:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0a5      	b.n	80040da <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d01a      	beq.n	8003fcc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003f96:	f7ff fa2d 	bl	80033f4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <HAL_DMA2D_PollForTransfer+0x9c>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10f      	bne.n	8003fcc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	f043 0220 	orr.w	r2, r3, #32
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e086      	b.n	80040da <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ac      	beq.n	8003f34 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d061      	beq.n	80040c0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7ff f9fa 	bl	80033f4 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004002:	e056      	b.n	80040b2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004012:	2b00      	cmp	r3, #0
 8004014:	d02e      	beq.n	8004074 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f043 0204 	orr.w	r2, r3, #4
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	f043 0202 	orr.w	r2, r3, #2
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004050:	f043 0201 	orr.w	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2229      	movs	r2, #41	; 0x29
 800405e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2204      	movs	r2, #4
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e032      	b.n	80040da <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d01a      	beq.n	80040b2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800407c:	f7ff f9ba 	bl	80033f4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d302      	bcc.n	8004092 <HAL_DMA2D_PollForTransfer+0x182>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2203      	movs	r2, #3
 80040a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e013      	b.n	80040da <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0a1      	beq.n	8004004 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2212      	movs	r2, #18
 80040c6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d026      	beq.n	8004152 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	2b00      	cmp	r3, #0
 800410c:	d021      	beq.n	8004152 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800411c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d026      	beq.n	80041aa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d021      	beq.n	80041aa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004174:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2220      	movs	r2, #32
 800417c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004182:	f043 0202 	orr.w	r2, r3, #2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2204      	movs	r2, #4
 800418e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d026      	beq.n	8004202 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d021      	beq.n	8004202 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2208      	movs	r2, #8
 80041d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	f043 0204 	orr.w	r2, r3, #4
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d013      	beq.n	8004234 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00e      	beq.n	8004234 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004224:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2204      	movs	r2, #4
 800422c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f853 	bl	80042da <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d024      	beq.n	8004288 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01f      	beq.n	8004288 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004256:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2202      	movs	r2, #2
 800425e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01f      	beq.n	80042d2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01a      	beq.n	80042d2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042aa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2210      	movs	r2, #16
 80042b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f80e 	bl	80042ee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_DMA2D_ConfigLayer+0x20>
 8004320:	2302      	movs	r3, #2
 8004322:	e079      	b.n	8004418 <HAL_DMA2D_ConfigLayer+0x114>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	3318      	adds	r3, #24
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4413      	add	r3, r2
 800433e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	4313      	orrs	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_DMA2D_ConfigLayer+0x120>)
 8004350:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b0a      	cmp	r3, #10
 8004358:	d003      	beq.n	8004362 <HAL_DMA2D_ConfigLayer+0x5e>
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b09      	cmp	r3, #9
 8004360:	d107      	bne.n	8004372 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4313      	orrs	r3, r2
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	e005      	b.n	800437e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	061b      	lsls	r3, r3, #24
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d120      	bne.n	80043c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	ea02 0103 	and.w	r1, r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	430a      	orrs	r2, r1
 800439a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b0a      	cmp	r3, #10
 80043ac:	d003      	beq.n	80043b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b09      	cmp	r3, #9
 80043b4:	d127      	bne.n	8004406 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
 80043c4:	e01f      	b.n	8004406 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	ea02 0103 	and.w	r1, r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	430a      	orrs	r2, r1
 80043dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b0a      	cmp	r3, #10
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d106      	bne.n	8004406 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004404:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	ff03000f 	.word	0xff03000f

08004428 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004428:	b480      	push	{r7}
 800442a:	b08b      	sub	sp, #44	; 0x2c
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	041a      	lsls	r2, r3, #16
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	431a      	orrs	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004460:	d174      	bne.n	800454c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004468:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004470:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004478:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d108      	bne.n	800449a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	431a      	orrs	r2, r3
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	4313      	orrs	r3, r2
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	e053      	b.n	8004542 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d106      	bne.n	80044b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	e048      	b.n	8004542 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d111      	bne.n	80044dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	0cdb      	lsrs	r3, r3, #19
 80044bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	0a9b      	lsrs	r3, r3, #10
 80044c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	02db      	lsls	r3, r3, #11
 80044d2:	4313      	orrs	r3, r2
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	e032      	b.n	8004542 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d117      	bne.n	8004514 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	0fdb      	lsrs	r3, r3, #31
 80044e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	0cdb      	lsrs	r3, r3, #19
 80044ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	0adb      	lsrs	r3, r3, #11
 80044f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	431a      	orrs	r2, r3
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	03db      	lsls	r3, r3, #15
 800450a:	4313      	orrs	r3, r2
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
 8004512:	e016      	b.n	8004542 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	0f1b      	lsrs	r3, r3, #28
 8004518:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	0d1b      	lsrs	r3, r3, #20
 800451e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	0b1b      	lsrs	r3, r3, #12
 8004524:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	011a      	lsls	r2, r3, #4
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	431a      	orrs	r2, r3
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	4313      	orrs	r3, r2
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800454a:	e003      	b.n	8004554 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	60da      	str	r2, [r3, #12]
}
 8004554:	bf00      	nop
 8004556:	372c      	adds	r7, #44	; 0x2c
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800456e:	2300      	movs	r3, #0
 8004570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e177      	b.n	800486c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800457c:	2201      	movs	r2, #1
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	f040 8166 	bne.w	8004866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d00b      	beq.n	80045ba <HAL_GPIO_Init+0x5a>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045ae:	2b11      	cmp	r3, #17
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b12      	cmp	r3, #18
 80045b8:	d130      	bne.n	800461c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f0:	2201      	movs	r2, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 0201 	and.w	r2, r3, #1
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	2203      	movs	r2, #3
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	43db      	mvns	r3, r3
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	4013      	ands	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0xfc>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b12      	cmp	r3, #18
 800465a:	d123      	bne.n	80046a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	08da      	lsrs	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3208      	adds	r2, #8
 8004664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	4313      	orrs	r3, r2
 8004694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	69b9      	ldr	r1, [r7, #24]
 80046a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80c0 	beq.w	8004866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_GPIO_Init+0x320>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	4a64      	ldr	r2, [pc, #400]	; (8004880 <HAL_GPIO_Init+0x320>)
 80046f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f4:	6453      	str	r3, [r2, #68]	; 0x44
 80046f6:	4b62      	ldr	r3, [pc, #392]	; (8004880 <HAL_GPIO_Init+0x320>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004702:	4a60      	ldr	r2, [pc, #384]	; (8004884 <HAL_GPIO_Init+0x324>)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a57      	ldr	r2, [pc, #348]	; (8004888 <HAL_GPIO_Init+0x328>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d037      	beq.n	800479e <HAL_GPIO_Init+0x23e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a56      	ldr	r2, [pc, #344]	; (800488c <HAL_GPIO_Init+0x32c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_GPIO_Init+0x23a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a55      	ldr	r2, [pc, #340]	; (8004890 <HAL_GPIO_Init+0x330>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <HAL_GPIO_Init+0x236>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a54      	ldr	r2, [pc, #336]	; (8004894 <HAL_GPIO_Init+0x334>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d025      	beq.n	8004792 <HAL_GPIO_Init+0x232>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a53      	ldr	r2, [pc, #332]	; (8004898 <HAL_GPIO_Init+0x338>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <HAL_GPIO_Init+0x22e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a52      	ldr	r2, [pc, #328]	; (800489c <HAL_GPIO_Init+0x33c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d019      	beq.n	800478a <HAL_GPIO_Init+0x22a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a51      	ldr	r2, [pc, #324]	; (80048a0 <HAL_GPIO_Init+0x340>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_GPIO_Init+0x226>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a50      	ldr	r2, [pc, #320]	; (80048a4 <HAL_GPIO_Init+0x344>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00d      	beq.n	8004782 <HAL_GPIO_Init+0x222>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4f      	ldr	r2, [pc, #316]	; (80048a8 <HAL_GPIO_Init+0x348>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <HAL_GPIO_Init+0x21e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a4e      	ldr	r2, [pc, #312]	; (80048ac <HAL_GPIO_Init+0x34c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_GPIO_Init+0x21a>
 8004776:	2309      	movs	r3, #9
 8004778:	e012      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800477a:	230a      	movs	r3, #10
 800477c:	e010      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800477e:	2308      	movs	r3, #8
 8004780:	e00e      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004782:	2307      	movs	r3, #7
 8004784:	e00c      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004786:	2306      	movs	r3, #6
 8004788:	e00a      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800478a:	2305      	movs	r3, #5
 800478c:	e008      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800478e:	2304      	movs	r3, #4
 8004790:	e006      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004792:	2303      	movs	r3, #3
 8004794:	e004      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004796:	2302      	movs	r3, #2
 8004798:	e002      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800479e:	2300      	movs	r3, #0
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	f002 0203 	and.w	r2, r2, #3
 80047a6:	0092      	lsls	r2, r2, #2
 80047a8:	4093      	lsls	r3, r2
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047b0:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_GPIO_Init+0x324>)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	3302      	adds	r3, #2
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047be:	4b3c      	ldr	r3, [pc, #240]	; (80048b0 <HAL_GPIO_Init+0x350>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047e2:	4a33      	ldr	r2, [pc, #204]	; (80048b0 <HAL_GPIO_Init+0x350>)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_GPIO_Init+0x350>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800480c:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <HAL_GPIO_Init+0x350>)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004812:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <HAL_GPIO_Init+0x350>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004836:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <HAL_GPIO_Init+0x350>)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800483c:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_GPIO_Init+0x350>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <HAL_GPIO_Init+0x350>)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3301      	adds	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b0f      	cmp	r3, #15
 8004870:	f67f ae84 	bls.w	800457c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004874:	bf00      	nop
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40023800 	.word	0x40023800
 8004884:	40013800 	.word	0x40013800
 8004888:	40020000 	.word	0x40020000
 800488c:	40020400 	.word	0x40020400
 8004890:	40020800 	.word	0x40020800
 8004894:	40020c00 	.word	0x40020c00
 8004898:	40021000 	.word	0x40021000
 800489c:	40021400 	.word	0x40021400
 80048a0:	40021800 	.word	0x40021800
 80048a4:	40021c00 	.word	0x40021c00
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40022400 	.word	0x40022400
 80048b0:	40013c00 	.word	0x40013c00

080048b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048be:	2300      	movs	r3, #0
 80048c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e0d9      	b.n	8004a84 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d0:	2201      	movs	r2, #1
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4013      	ands	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	f040 80c9 	bne.w	8004a7e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80048ec:	4a6a      	ldr	r2, [pc, #424]	; (8004a98 <HAL_GPIO_DeInit+0x1e4>)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	089b      	lsrs	r3, r3, #2
 80048f2:	3302      	adds	r3, #2
 80048f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	220f      	movs	r2, #15
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a62      	ldr	r2, [pc, #392]	; (8004a9c <HAL_GPIO_DeInit+0x1e8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d037      	beq.n	8004986 <HAL_GPIO_DeInit+0xd2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a61      	ldr	r2, [pc, #388]	; (8004aa0 <HAL_GPIO_DeInit+0x1ec>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d031      	beq.n	8004982 <HAL_GPIO_DeInit+0xce>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a60      	ldr	r2, [pc, #384]	; (8004aa4 <HAL_GPIO_DeInit+0x1f0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d02b      	beq.n	800497e <HAL_GPIO_DeInit+0xca>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a5f      	ldr	r2, [pc, #380]	; (8004aa8 <HAL_GPIO_DeInit+0x1f4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d025      	beq.n	800497a <HAL_GPIO_DeInit+0xc6>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a5e      	ldr	r2, [pc, #376]	; (8004aac <HAL_GPIO_DeInit+0x1f8>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01f      	beq.n	8004976 <HAL_GPIO_DeInit+0xc2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a5d      	ldr	r2, [pc, #372]	; (8004ab0 <HAL_GPIO_DeInit+0x1fc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d019      	beq.n	8004972 <HAL_GPIO_DeInit+0xbe>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a5c      	ldr	r2, [pc, #368]	; (8004ab4 <HAL_GPIO_DeInit+0x200>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_GPIO_DeInit+0xba>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a5b      	ldr	r2, [pc, #364]	; (8004ab8 <HAL_GPIO_DeInit+0x204>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00d      	beq.n	800496a <HAL_GPIO_DeInit+0xb6>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a5a      	ldr	r2, [pc, #360]	; (8004abc <HAL_GPIO_DeInit+0x208>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d007      	beq.n	8004966 <HAL_GPIO_DeInit+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a59      	ldr	r2, [pc, #356]	; (8004ac0 <HAL_GPIO_DeInit+0x20c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d101      	bne.n	8004962 <HAL_GPIO_DeInit+0xae>
 800495e:	2309      	movs	r3, #9
 8004960:	e012      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 8004962:	230a      	movs	r3, #10
 8004964:	e010      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 8004966:	2308      	movs	r3, #8
 8004968:	e00e      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 800496a:	2307      	movs	r3, #7
 800496c:	e00c      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 800496e:	2306      	movs	r3, #6
 8004970:	e00a      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 8004972:	2305      	movs	r3, #5
 8004974:	e008      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 8004976:	2304      	movs	r3, #4
 8004978:	e006      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 800497a:	2303      	movs	r3, #3
 800497c:	e004      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 800497e:	2302      	movs	r3, #2
 8004980:	e002      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <HAL_GPIO_DeInit+0xd4>
 8004986:	2300      	movs	r3, #0
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	f002 0203 	and.w	r2, r2, #3
 800498e:	0092      	lsls	r2, r2, #2
 8004990:	4093      	lsls	r3, r2
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	429a      	cmp	r2, r3
 8004996:	d132      	bne.n	80049fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004998:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	43db      	mvns	r3, r3
 80049a0:	4948      	ldr	r1, [pc, #288]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	4945      	ldr	r1, [pc, #276]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80049b4:	4b43      	ldr	r3, [pc, #268]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	43db      	mvns	r3, r3
 80049bc:	4941      	ldr	r1, [pc, #260]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049be:	4013      	ands	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80049c2:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	493e      	ldr	r1, [pc, #248]	; (8004ac4 <HAL_GPIO_DeInit+0x210>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	220f      	movs	r2, #15
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80049e0:	4a2d      	ldr	r2, [pc, #180]	; (8004a98 <HAL_GPIO_DeInit+0x1e4>)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	3302      	adds	r3, #2
 80049e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	43da      	mvns	r2, r3
 80049f0:	4829      	ldr	r0, [pc, #164]	; (8004a98 <HAL_GPIO_DeInit+0x1e4>)
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	089b      	lsrs	r3, r3, #2
 80049f6:	400a      	ands	r2, r1
 80049f8:	3302      	adds	r3, #2
 80049fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	2103      	movs	r1, #3
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	401a      	ands	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	08da      	lsrs	r2, r3, #3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3208      	adds	r2, #8
 8004a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	220f      	movs	r2, #15
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	08d2      	lsrs	r2, r2, #3
 8004a34:	4019      	ands	r1, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3208      	adds	r2, #8
 8004a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2103      	movs	r1, #3
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	401a      	ands	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	2101      	movs	r1, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	2103      	movs	r1, #3
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	43db      	mvns	r3, r3
 8004a78:	401a      	ands	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b0f      	cmp	r3, #15
 8004a88:	f67f af22 	bls.w	80048d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40013800 	.word	0x40013800
 8004a9c:	40020000 	.word	0x40020000
 8004aa0:	40020400 	.word	0x40020400
 8004aa4:	40020800 	.word	0x40020800
 8004aa8:	40020c00 	.word	0x40020c00
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	40021400 	.word	0x40021400
 8004ab4:	40021800 	.word	0x40021800
 8004ab8:	40021c00 	.word	0x40021c00
 8004abc:	40022000 	.word	0x40022000
 8004ac0:	40022400 	.word	0x40022400
 8004ac4:	40013c00 	.word	0x40013c00

08004ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ad8:	787b      	ldrb	r3, [r7, #1]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ae4:	e003      	b.n	8004aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ae6:	887b      	ldrh	r3, [r7, #2]
 8004ae8:	041a      	lsls	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	619a      	str	r2, [r3, #24]
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f005 f8b3 	bl	8009c7c <USB_GetMode>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	f040 80ef 	bne.w	8004cfc <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f005 f897 	bl	8009c56 <USB_ReadInterrupts>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80e5 	beq.w	8004cfa <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f005 f88e 	bl	8009c56 <USB_ReadInterrupts>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b44:	d104      	bne.n	8004b50 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004b4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f005 f87e 	bl	8009c56 <USB_ReadInterrupts>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b64:	d104      	bne.n	8004b70 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f005 f86e 	bl	8009c56 <USB_ReadInterrupts>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b84:	d104      	bne.n	8004b90 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f005 f85e 	bl	8009c56 <USB_ReadInterrupts>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d103      	bne.n	8004bac <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f005 f850 	bl	8009c56 <USB_ReadInterrupts>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc0:	d115      	bne.n	8004bee <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004bca:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d108      	bne.n	8004bee <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f006 fb75 	bl	800b2cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f005 f855 	bl	8009c98 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f005 f82f 	bl	8009c56 <USB_ReadInterrupts>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c02:	d102      	bne.n	8004c0a <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f001 f8ef 	bl	8005de8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f005 f821 	bl	8009c56 <USB_ReadInterrupts>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d106      	bne.n	8004c2c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f006 fb38 	bl	800b294 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f005 f810 	bl	8009c56 <USB_ReadInterrupts>
 8004c36:	4603      	mov	r3, r0
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c40:	d138      	bne.n	8004cb4 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f005 f860 	bl	8009d0c <USB_HC_ReadInterrupt>
 8004c4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e025      	b.n	8004ca0 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d018      	beq.n	8004c9a <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7e:	d106      	bne.n	8004c8e <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f858 	bl	8004d3c <HCD_HC_IN_IRQHandler>
 8004c8c:	e005      	b.n	8004c9a <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fc86 	bl	80055a6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d3d4      	bcc.n	8004c54 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f004 ffcc 	bl	8009c56 <USB_ReadInterrupts>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d101      	bne.n	8004ccc <HAL_HCD_IRQHandler+0x1d2>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_HCD_IRQHandler+0x1d4>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d014      	beq.n	8004cfc <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0210 	bic.w	r2, r2, #16
 8004ce0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 ffd4 	bl	8005c90 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	699a      	ldr	r2, [r3, #24]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0210 	orr.w	r2, r2, #16
 8004cf6:	619a      	str	r2, [r3, #24]
 8004cf8:	e000      	b.n	8004cfc <HAL_HCD_IRQHandler+0x202>
      return;
 8004cfa:	bf00      	nop
    }
  }
}
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_HCD_Stop+0x16>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e00d      	b.n	8004d34 <HAL_HCD_Stop+0x32>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f005 f901 	bl	8009f2c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d119      	bne.n	8004da0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d98:	f043 0302 	orr.w	r3, r3, #2
 8004d9c:	60d3      	str	r3, [r2, #12]
 8004d9e:	e0ce      	b.n	8004f3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	d12c      	bne.n	8004e12 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	440b      	add	r3, r1
 8004dda:	335d      	adds	r3, #93	; 0x5d
 8004ddc:	2207      	movs	r2, #7
 8004dde:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfa:	f043 0302 	orr.w	r3, r3, #2
 8004dfe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f004 ff8f 	bl	8009d2e <USB_HC_Halt>
 8004e10:	e095      	b.n	8004f3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d109      	bne.n	8004e3c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e34:	461a      	mov	r2, r3
 8004e36:	2320      	movs	r3, #32
 8004e38:	6093      	str	r3, [r2, #8]
 8004e3a:	e080      	b.n	8004f3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d134      	bne.n	8004ebc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e6c:	f043 0302 	orr.w	r3, r3, #2
 8004e70:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	440b      	add	r3, r1
 8004e80:	335d      	adds	r3, #93	; 0x5d
 8004e82:	2205      	movs	r2, #5
 8004e84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	461a      	mov	r2, r3
 8004e94:	2310      	movs	r3, #16
 8004e96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f004 ff3a 	bl	8009d2e <USB_HC_Halt>
 8004eba:	e040      	b.n	8004f3e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed2:	d134      	bne.n	8004f3e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eee:	f043 0302 	orr.w	r3, r3, #2
 8004ef2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 ff15 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	461a      	mov	r2, r3
 8004f12:	2310      	movs	r3, #16
 8004f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	440b      	add	r3, r1
 8004f24:	335d      	adds	r3, #93	; 0x5d
 8004f26:	2208      	movs	r2, #8
 8004f28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f36:	461a      	mov	r2, r3
 8004f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f54:	d122      	bne.n	8004f9c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 fed4 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f92:	461a      	mov	r2, r3
 8004f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f98:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f9a:	e300      	b.n	800559e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	f040 80fd 	bne.w	80051ae <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01b      	beq.n	8004ff4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	440b      	add	r3, r1
 8004fca:	3348      	adds	r3, #72	; 0x48
 8004fcc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	0159      	lsls	r1, r3, #5
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	440b      	add	r3, r1
 8004fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004fe0:	1ad1      	subs	r1, r2, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4403      	add	r3, r0
 8004ff0:	334c      	adds	r3, #76	; 0x4c
 8004ff2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	440b      	add	r3, r1
 8005002:	335d      	adds	r3, #93	; 0x5d
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	00db      	lsls	r3, r3, #3
 8005014:	440b      	add	r3, r1
 8005016:	3358      	adds	r3, #88	; 0x58
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	461a      	mov	r2, r3
 800502a:	2301      	movs	r3, #1
 800502c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	333f      	adds	r3, #63	; 0x3f
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	440b      	add	r3, r1
 8005052:	333f      	adds	r3, #63	; 0x3f
 8005054:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005056:	2b02      	cmp	r3, #2
 8005058:	d121      	bne.n	800509e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4413      	add	r3, r2
 8005062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	440a      	add	r2, r1
 8005070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fe52 	bl	8009d2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005096:	461a      	mov	r2, r3
 8005098:	2310      	movs	r3, #16
 800509a:	6093      	str	r3, [r2, #8]
 800509c:	e070      	b.n	8005180 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	440b      	add	r3, r1
 80050ac:	333f      	adds	r3, #63	; 0x3f
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d12a      	bne.n	800510a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	440b      	add	r3, r1
 80050e2:	335c      	adds	r3, #92	; 0x5c
 80050e4:	2201      	movs	r2, #1
 80050e6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	b2d8      	uxtb	r0, r3
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	440b      	add	r3, r1
 80050fa:	335c      	adds	r3, #92	; 0x5c
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	4601      	mov	r1, r0
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f006 f8f0 	bl	800b2e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005108:	e03a      	b.n	8005180 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	440b      	add	r3, r1
 8005118:	333f      	adds	r3, #63	; 0x3f
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d12f      	bne.n	8005180 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	440b      	add	r3, r1
 800512e:	335c      	adds	r3, #92	; 0x5c
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4613      	mov	r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	440b      	add	r3, r1
 8005142:	3350      	adds	r3, #80	; 0x50
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	f083 0301 	eor.w	r3, r3, #1
 800514a:	b2d8      	uxtb	r0, r3
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	440b      	add	r3, r1
 800515a:	3350      	adds	r3, #80	; 0x50
 800515c:	4602      	mov	r2, r0
 800515e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	b2d8      	uxtb	r0, r3
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	440b      	add	r3, r1
 8005172:	335c      	adds	r3, #92	; 0x5c
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	4601      	mov	r1, r0
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f006 f8b4 	bl	800b2e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	440b      	add	r3, r1
 800518e:	3350      	adds	r3, #80	; 0x50
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f083 0301 	eor.w	r3, r3, #1
 8005196:	b2d8      	uxtb	r0, r3
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	440b      	add	r3, r1
 80051a6:	3350      	adds	r3, #80	; 0x50
 80051a8:	4602      	mov	r2, r0
 80051aa:	701a      	strb	r2, [r3, #0]
}
 80051ac:	e1f7      	b.n	800559e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	f040 811a 	bne.w	80053fa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	440b      	add	r3, r1
 80051f4:	335d      	adds	r3, #93	; 0x5d
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10a      	bne.n	8005212 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	440b      	add	r3, r1
 800520a:	335c      	adds	r3, #92	; 0x5c
 800520c:	2201      	movs	r2, #1
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e0d9      	b.n	80053c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	440b      	add	r3, r1
 8005220:	335d      	adds	r3, #93	; 0x5d
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b05      	cmp	r3, #5
 8005226:	d10a      	bne.n	800523e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	440b      	add	r3, r1
 8005236:	335c      	adds	r3, #92	; 0x5c
 8005238:	2205      	movs	r2, #5
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e0c3      	b.n	80053c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	440b      	add	r3, r1
 800524c:	335d      	adds	r3, #93	; 0x5d
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b06      	cmp	r3, #6
 8005252:	d00a      	beq.n	800526a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	00db      	lsls	r3, r3, #3
 8005260:	440b      	add	r3, r1
 8005262:	335d      	adds	r3, #93	; 0x5d
 8005264:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005266:	2b08      	cmp	r3, #8
 8005268:	d156      	bne.n	8005318 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	440b      	add	r3, r1
 8005278:	3358      	adds	r3, #88	; 0x58
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	4403      	add	r3, r0
 800528c:	3358      	adds	r3, #88	; 0x58
 800528e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	440b      	add	r3, r1
 800529e:	3358      	adds	r3, #88	; 0x58
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	d914      	bls.n	80052d0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	440b      	add	r3, r1
 80052b4:	3358      	adds	r3, #88	; 0x58
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	440b      	add	r3, r1
 80052c8:	335c      	adds	r3, #92	; 0x5c
 80052ca:	2204      	movs	r2, #4
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e009      	b.n	80052e4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	335c      	adds	r3, #92	; 0x5c
 80052e0:	2202      	movs	r2, #2
 80052e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005302:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e056      	b.n	80053c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	440b      	add	r3, r1
 8005326:	335d      	adds	r3, #93	; 0x5d
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d123      	bne.n	8005376 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	440b      	add	r3, r1
 800533c:	335c      	adds	r3, #92	; 0x5c
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4413      	add	r3, r2
 800534a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005358:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005360:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4413      	add	r3, r2
 800536a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e027      	b.n	80053c6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005376:	6879      	ldr	r1, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4613      	mov	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	440b      	add	r3, r1
 8005384:	335d      	adds	r3, #93	; 0x5d
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b07      	cmp	r3, #7
 800538a:	d11c      	bne.n	80053c6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	440b      	add	r3, r1
 800539a:	3358      	adds	r3, #88	; 0x58
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4403      	add	r3, r0
 80053ae:	3358      	adds	r3, #88	; 0x58
 80053b0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	440b      	add	r3, r1
 80053c0:	335c      	adds	r3, #92	; 0x5c
 80053c2:	2204      	movs	r2, #4
 80053c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	461a      	mov	r2, r3
 80053d4:	2302      	movs	r3, #2
 80053d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	b2d8      	uxtb	r0, r3
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	440b      	add	r3, r1
 80053ea:	335c      	adds	r3, #92	; 0x5c
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	4601      	mov	r1, r0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f005 ff78 	bl	800b2e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80053f8:	e0d1      	b.n	800559e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d13e      	bne.n	800548e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	4413      	add	r3, r2
 8005418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	440a      	add	r2, r1
 8005426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800542a:	f043 0302 	orr.w	r3, r3, #2
 800542e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	3358      	adds	r3, #88	; 0x58
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	1c59      	adds	r1, r3, #1
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4403      	add	r3, r0
 8005452:	3358      	adds	r3, #88	; 0x58
 8005454:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	440b      	add	r3, r1
 8005464:	335d      	adds	r3, #93	; 0x5d
 8005466:	2206      	movs	r2, #6
 8005468:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	4611      	mov	r1, r2
 8005474:	4618      	mov	r0, r3
 8005476:	f004 fc5a 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	6093      	str	r3, [r2, #8]
}
 800548c:	e087      	b.n	800559e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d17c      	bne.n	800559e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	440b      	add	r3, r1
 80054b2:	333f      	adds	r3, #63	; 0x3f
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d122      	bne.n	8005500 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4613      	mov	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	440b      	add	r3, r1
 80054c8:	3358      	adds	r3, #88	; 0x58
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e8:	f043 0302 	orr.w	r3, r3, #2
 80054ec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f004 fc18 	bl	8009d2e <USB_HC_Halt>
 80054fe:	e045      	b.n	800558c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	440b      	add	r3, r1
 800550e:	333f      	adds	r3, #63	; 0x3f
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	440b      	add	r3, r1
 8005524:	333f      	adds	r3, #63	; 0x3f
 8005526:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005528:	2b02      	cmp	r3, #2
 800552a:	d12f      	bne.n	800558c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	440b      	add	r3, r1
 800553a:	3358      	adds	r3, #88	; 0x58
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d121      	bne.n	800558c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	440b      	add	r3, r1
 8005556:	335d      	adds	r3, #93	; 0x5d
 8005558:	2203      	movs	r2, #3
 800555a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	440a      	add	r2, r1
 8005572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005576:	f043 0302 	orr.w	r3, r3, #2
 800557a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f004 fbd1 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	461a      	mov	r2, r3
 800559a:	2310      	movs	r3, #16
 800559c:	6093      	str	r3, [r2, #8]
}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b086      	sub	sp, #24
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	460b      	mov	r3, r1
 80055b0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d119      	bne.n	800560a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e2:	461a      	mov	r2, r3
 80055e4:	2304      	movs	r3, #4
 80055e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005608:	e33e      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4413      	add	r3, r2
 8005612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b20      	cmp	r3, #32
 800561e:	d141      	bne.n	80056a4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800562c:	461a      	mov	r2, r3
 800562e:	2320      	movs	r3, #32
 8005630:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	440b      	add	r3, r1
 8005640:	333d      	adds	r3, #61	; 0x3d
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	f040 831f 	bne.w	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	333d      	adds	r3, #61	; 0x3d
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	335c      	adds	r3, #92	; 0x5c
 800566e:	2202      	movs	r2, #2
 8005670:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	440a      	add	r2, r1
 8005688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	4611      	mov	r1, r2
 800569c:	4618      	mov	r0, r3
 800569e:	f004 fb46 	bl	8009d2e <USB_HC_Halt>
}
 80056a2:	e2f1      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d13f      	bne.n	800573a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	440b      	add	r3, r1
 80056c8:	335d      	adds	r3, #93	; 0x5d
 80056ca:	2204      	movs	r2, #4
 80056cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	333d      	adds	r3, #61	; 0x3d
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	440b      	add	r3, r1
 80056f0:	3358      	adds	r3, #88	; 0x58
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	440a      	add	r2, r1
 800570c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	4611      	mov	r1, r2
 8005720:	4618      	mov	r0, r3
 8005722:	f004 fb04 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005732:	461a      	mov	r2, r3
 8005734:	2340      	movs	r3, #64	; 0x40
 8005736:	6093      	str	r3, [r2, #8]
}
 8005738:	e2a6      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800574c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005750:	d122      	bne.n	8005798 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	440a      	add	r2, r1
 8005768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	4611      	mov	r1, r2
 800577c:	4618      	mov	r0, r3
 800577e:	f004 fad6 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	4413      	add	r3, r2
 800578a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578e:	461a      	mov	r2, r3
 8005790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005794:	6093      	str	r3, [r2, #8]
}
 8005796:	e277      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d135      	bne.n	800581a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	440b      	add	r3, r1
 80057bc:	3358      	adds	r3, #88	; 0x58
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	0151      	lsls	r1, r2, #5
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	440a      	add	r2, r1
 80057d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f004 fa9e 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fe:	461a      	mov	r2, r3
 8005800:	2301      	movs	r3, #1
 8005802:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	440b      	add	r3, r1
 8005812:	335d      	adds	r3, #93	; 0x5d
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
}
 8005818:	e236      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d12b      	bne.n	8005888 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583c:	461a      	mov	r2, r3
 800583e:	2308      	movs	r3, #8
 8005840:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585c:	f043 0302 	orr.w	r3, r3, #2
 8005860:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f004 fa5e 	bl	8009d2e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	440b      	add	r3, r1
 8005880:	335d      	adds	r3, #93	; 0x5d
 8005882:	2205      	movs	r2, #5
 8005884:	701a      	strb	r2, [r3, #0]
}
 8005886:	e1ff      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b10      	cmp	r3, #16
 800589c:	d155      	bne.n	800594a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	3358      	adds	r3, #88	; 0x58
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	335d      	adds	r3, #93	; 0x5d
 80058c2:	2203      	movs	r2, #3
 80058c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	440b      	add	r3, r1
 80058d4:	333d      	adds	r3, #61	; 0x3d
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d114      	bne.n	8005906 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	440b      	add	r3, r1
 80058ea:	333c      	adds	r3, #60	; 0x3c
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	333d      	adds	r3, #61	; 0x3d
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	440a      	add	r2, r1
 800591c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005920:	f043 0302 	orr.w	r3, r3, #2
 8005924:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f004 f9fc 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	461a      	mov	r2, r3
 8005944:	2310      	movs	r3, #16
 8005946:	6093      	str	r3, [r2, #8]
}
 8005948:	e19e      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d12b      	bne.n	80059b8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	0151      	lsls	r1, r2, #5
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	440a      	add	r2, r1
 8005976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800597a:	f043 0302 	orr.w	r3, r3, #2
 800597e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f004 f9cf 	bl	8009d2e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	440b      	add	r3, r1
 800599e:	335d      	adds	r3, #93	; 0x5d
 80059a0:	2206      	movs	r2, #6
 80059a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b0:	461a      	mov	r2, r3
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	6093      	str	r3, [r2, #8]
}
 80059b6:	e167      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ce:	d135      	bne.n	8005a3c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ea:	f043 0302 	orr.w	r3, r3, #2
 80059ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 f997 	bl	8009d2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2310      	movs	r3, #16
 8005a10:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1e:	461a      	mov	r2, r3
 8005a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	440b      	add	r3, r1
 8005a34:	335d      	adds	r3, #93	; 0x5d
 8005a36:	2208      	movs	r2, #8
 8005a38:	701a      	strb	r2, [r3, #0]
}
 8005a3a:	e125      	b.n	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	f040 811a 	bne.w	8005c88 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6e:	f023 0302 	bic.w	r3, r3, #2
 8005a72:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	440b      	add	r3, r1
 8005a82:	335d      	adds	r3, #93	; 0x5d
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d137      	bne.n	8005afa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	335c      	adds	r3, #92	; 0x5c
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	440b      	add	r3, r1
 8005aac:	333f      	adds	r3, #63	; 0x3f
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d00b      	beq.n	8005acc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	440b      	add	r3, r1
 8005ac2:	333f      	adds	r3, #63	; 0x3f
 8005ac4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	f040 80c5 	bne.w	8005c56 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	440b      	add	r3, r1
 8005ada:	3351      	adds	r3, #81	; 0x51
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f083 0301 	eor.w	r3, r3, #1
 8005ae2:	b2d8      	uxtb	r0, r3
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	440b      	add	r3, r1
 8005af2:	3351      	adds	r3, #81	; 0x51
 8005af4:	4602      	mov	r2, r0
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	e0ad      	b.n	8005c56 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	335d      	adds	r3, #93	; 0x5d
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	2b03      	cmp	r3, #3
 8005b0e:	d10a      	bne.n	8005b26 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	440b      	add	r3, r1
 8005b1e:	335c      	adds	r3, #92	; 0x5c
 8005b20:	2202      	movs	r2, #2
 8005b22:	701a      	strb	r2, [r3, #0]
 8005b24:	e097      	b.n	8005c56 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	440b      	add	r3, r1
 8005b34:	335d      	adds	r3, #93	; 0x5d
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d10a      	bne.n	8005b52 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	440b      	add	r3, r1
 8005b4a:	335c      	adds	r3, #92	; 0x5c
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e081      	b.n	8005c56 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	440b      	add	r3, r1
 8005b60:	335d      	adds	r3, #93	; 0x5d
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d10a      	bne.n	8005b7e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b68:	6879      	ldr	r1, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	335c      	adds	r3, #92	; 0x5c
 8005b78:	2205      	movs	r2, #5
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	e06b      	b.n	8005c56 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	440b      	add	r3, r1
 8005b8c:	335d      	adds	r3, #93	; 0x5d
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b06      	cmp	r3, #6
 8005b92:	d00a      	beq.n	8005baa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	440b      	add	r3, r1
 8005ba2:	335d      	adds	r3, #93	; 0x5d
 8005ba4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d155      	bne.n	8005c56 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	00db      	lsls	r3, r3, #3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	3358      	adds	r3, #88	; 0x58
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	1c59      	adds	r1, r3, #1
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4403      	add	r3, r0
 8005bcc:	3358      	adds	r3, #88	; 0x58
 8005bce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005bd0:	6879      	ldr	r1, [r7, #4]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	440b      	add	r3, r1
 8005bde:	3358      	adds	r3, #88	; 0x58
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d914      	bls.n	8005c10 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3358      	adds	r3, #88	; 0x58
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	440b      	add	r3, r1
 8005c08:	335c      	adds	r3, #92	; 0x5c
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e009      	b.n	8005c24 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	440b      	add	r3, r1
 8005c1e:	335c      	adds	r3, #92	; 0x5c
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c3a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	461a      	mov	r2, r3
 8005c64:	2302      	movs	r3, #2
 8005c66:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	b2d8      	uxtb	r0, r3
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	440b      	add	r3, r1
 8005c7a:	335c      	adds	r3, #92	; 0x5c
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	4601      	mov	r1, r0
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f005 fb30 	bl	800b2e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	; 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	0c5b      	lsrs	r3, r3, #17
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	091b      	lsrs	r3, r3, #4
 8005cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cc4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d003      	beq.n	8005cd4 <HCD_RXQLVL_IRQHandler+0x44>
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	f000 8082 	beq.w	8005dd6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005cd2:	e083      	b.n	8005ddc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d07f      	beq.n	8005dda <HCD_RXQLVL_IRQHandler+0x14a>
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3344      	adds	r3, #68	; 0x44
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d074      	beq.n	8005dda <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	69ba      	ldr	r2, [r7, #24]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	440b      	add	r3, r1
 8005d02:	3344      	adds	r3, #68	; 0x44
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f003 ff7a 	bl	8009c04 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3344      	adds	r3, #68	; 0x44
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	18d1      	adds	r1, r2, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	4403      	add	r3, r0
 8005d34:	3344      	adds	r3, #68	; 0x44
 8005d36:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	440b      	add	r3, r1
 8005d46:	334c      	adds	r3, #76	; 0x4c
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	18d1      	adds	r1, r2, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4403      	add	r3, r0
 8005d5c:	334c      	adds	r3, #76	; 0x4c
 8005d5e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <HCD_RXQLVL_IRQHandler+0x154>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d031      	beq.n	8005dda <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d8c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	461a      	mov	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	440b      	add	r3, r1
 8005db6:	3350      	adds	r3, #80	; 0x50
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	f083 0301 	eor.w	r3, r3, #1
 8005dbe:	b2d8      	uxtb	r0, r3
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	440b      	add	r3, r1
 8005dce:	3350      	adds	r3, #80	; 0x50
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	701a      	strb	r2, [r3, #0]
      break;
 8005dd4:	e001      	b.n	8005dda <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e000      	b.n	8005ddc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005dda:	bf00      	nop
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3728      	adds	r7, #40	; 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	1ff80000 	.word	0x1ff80000

08005de8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e14:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d10b      	bne.n	8005e38 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f005 fa40 	bl	800b2b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d132      	bne.n	8005ea8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f043 0308 	orr.w	r3, r3, #8
 8005e48:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d126      	bne.n	8005ea2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d113      	bne.n	8005e84 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e66:	d106      	bne.n	8005e76 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f003 ff12 	bl	8009c98 <USB_InitFSLSPClkSel>
 8005e74:	e011      	b.n	8005e9a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f003 ff0b 	bl	8009c98 <USB_InitFSLSPClkSel>
 8005e82:	e00a      	b.n	8005e9a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d106      	bne.n	8005e9a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e92:	461a      	mov	r2, r3
 8005e94:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e98:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f005 fa36 	bl	800b30c <HAL_HCD_PortEnabled_Callback>
 8005ea0:	e002      	b.n	8005ea8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f005 fa40 	bl	800b328 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d103      	bne.n	8005eba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f043 0320 	orr.w	r3, r3, #32
 8005eb8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6013      	str	r3, [r2, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e11f      	b.n	8006122 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fb fb6e 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2224      	movs	r2, #36	; 0x24
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f34:	f001 f88a 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 8005f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	4a7b      	ldr	r2, [pc, #492]	; (800612c <HAL_I2C_Init+0x25c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d807      	bhi.n	8005f54 <HAL_I2C_Init+0x84>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4a7a      	ldr	r2, [pc, #488]	; (8006130 <HAL_I2C_Init+0x260>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	bf94      	ite	ls
 8005f4c:	2301      	movls	r3, #1
 8005f4e:	2300      	movhi	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e006      	b.n	8005f62 <HAL_I2C_Init+0x92>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4a77      	ldr	r2, [pc, #476]	; (8006134 <HAL_I2C_Init+0x264>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	bf94      	ite	ls
 8005f5c:	2301      	movls	r3, #1
 8005f5e:	2300      	movhi	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e0db      	b.n	8006122 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a72      	ldr	r2, [pc, #456]	; (8006138 <HAL_I2C_Init+0x268>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	0c9b      	lsrs	r3, r3, #18
 8005f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a64      	ldr	r2, [pc, #400]	; (800612c <HAL_I2C_Init+0x25c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d802      	bhi.n	8005fa4 <HAL_I2C_Init+0xd4>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	e009      	b.n	8005fb8 <HAL_I2C_Init+0xe8>
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	4a63      	ldr	r2, [pc, #396]	; (800613c <HAL_I2C_Init+0x26c>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	099b      	lsrs	r3, r3, #6
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4956      	ldr	r1, [pc, #344]	; (800612c <HAL_I2C_Init+0x25c>)
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	d80d      	bhi.n	8005ff4 <HAL_I2C_Init+0x124>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1e59      	subs	r1, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	bf38      	it	cc
 8005ff0:	2304      	movcc	r3, #4
 8005ff2:	e04f      	b.n	8006094 <HAL_I2C_Init+0x1c4>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d111      	bne.n	8006020 <HAL_I2C_Init+0x150>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	1e58      	subs	r0, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6859      	ldr	r1, [r3, #4]
 8006004:	460b      	mov	r3, r1
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	440b      	add	r3, r1
 800600a:	fbb0 f3f3 	udiv	r3, r0, r3
 800600e:	3301      	adds	r3, #1
 8006010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	e012      	b.n	8006046 <HAL_I2C_Init+0x176>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1e58      	subs	r0, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	0099      	lsls	r1, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	fbb0 f3f3 	udiv	r3, r0, r3
 8006036:	3301      	adds	r3, #1
 8006038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_I2C_Init+0x17e>
 800604a:	2301      	movs	r3, #1
 800604c:	e022      	b.n	8006094 <HAL_I2C_Init+0x1c4>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10e      	bne.n	8006074 <HAL_I2C_Init+0x1a4>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1e58      	subs	r0, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6859      	ldr	r1, [r3, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	440b      	add	r3, r1
 8006064:	fbb0 f3f3 	udiv	r3, r0, r3
 8006068:	3301      	adds	r3, #1
 800606a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	e00f      	b.n	8006094 <HAL_I2C_Init+0x1c4>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1e58      	subs	r0, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6859      	ldr	r1, [r3, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	0099      	lsls	r1, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	fbb0 f3f3 	udiv	r3, r0, r3
 800608a:	3301      	adds	r3, #1
 800608c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	6809      	ldr	r1, [r1, #0]
 8006098:	4313      	orrs	r3, r2
 800609a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69da      	ldr	r2, [r3, #28]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80060c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6911      	ldr	r1, [r2, #16]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68d2      	ldr	r2, [r2, #12]
 80060ce:	4311      	orrs	r1, r2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0201 	orr.w	r2, r2, #1
 8006102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	000186a0 	.word	0x000186a0
 8006130:	001e847f 	.word	0x001e847f
 8006134:	003d08ff 	.word	0x003d08ff
 8006138:	431bde83 	.word	0x431bde83
 800613c:	10624dd3 	.word	0x10624dd3

08006140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b20      	cmp	r3, #32
 8006154:	d129      	bne.n	80061aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2224      	movs	r2, #36	; 0x24
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0210 	bic.w	r2, r2, #16
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d12a      	bne.n	8006228 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2224      	movs	r2, #36	; 0x24
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80061f2:	89fb      	ldrh	r3, [r7, #14]
 80061f4:	f023 030f 	bic.w	r3, r3, #15
 80061f8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	4313      	orrs	r3, r2
 8006202:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	89fa      	ldrh	r2, [r7, #14]
 800620a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2220      	movs	r2, #32
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	e000      	b.n	800622a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006228:	2302      	movs	r3, #2
  }
}
 800622a:	4618      	mov	r0, r3
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e0bf      	b.n	80063ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fb fad6 	bl	8001810 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800627a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6999      	ldr	r1, [r3, #24]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006290:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 80062ac:	400b      	ands	r3, r1
 80062ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6899      	ldr	r1, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68d9      	ldr	r1, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 80062da:	400b      	ands	r3, r1
 80062dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68d9      	ldr	r1, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6919      	ldr	r1, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b33      	ldr	r3, [pc, #204]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 8006308:	400b      	ands	r3, r1
 800630a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6919      	ldr	r1, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	431a      	orrs	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6959      	ldr	r1, [r3, #20]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <HAL_LTDC_Init+0x19c>)
 8006336:	400b      	ands	r3, r1
 8006338:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6959      	ldr	r1, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006368:	041b      	lsls	r3, r3, #16
 800636a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800637a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0206 	orr.w	r2, r2, #6
 80063a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	f000f800 	.word	0xf000f800

080063d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80063d8:	b5b0      	push	{r4, r5, r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_LTDC_ConfigLayer+0x1a>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e02c      	b.n	800644c <HAL_LTDC_ConfigLayer+0x74>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2134      	movs	r1, #52	; 0x34
 8006408:	fb01 f303 	mul.w	r3, r1, r3
 800640c:	4413      	add	r3, r2
 800640e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4614      	mov	r4, r2
 8006416:	461d      	mov	r5, r3
 8006418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800641a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800641e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f83b 	bl	80064a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bdb0      	pop	{r4, r5, r7, pc}

08006454 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_LTDC_EnableDither+0x16>
 8006466:	2302      	movs	r3, #2
 8006468:	e016      	b.n	8006498 <HAL_LTDC_EnableDither+0x44>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800647a:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <HAL_LTDC_EnableDither+0x50>)
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <HAL_LTDC_EnableDither+0x50>)
 8006480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006484:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40016800 	.word	0x40016800

080064a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b089      	sub	sp, #36	; 0x24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	0c1b      	lsrs	r3, r3, #16
 80064c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c4:	4413      	add	r3, r2
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	461a      	mov	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	4413      	add	r3, r2
 80064d6:	3384      	adds	r3, #132	; 0x84
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	4611      	mov	r1, r2
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	01d2      	lsls	r2, r2, #7
 80064e4:	440a      	add	r2, r1
 80064e6:	3284      	adds	r2, #132	; 0x84
 80064e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fe:	4413      	add	r3, r2
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	440b      	add	r3, r1
 800650e:	3384      	adds	r3, #132	; 0x84
 8006510:	4619      	mov	r1, r3
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006526:	4413      	add	r3, r2
 8006528:	041b      	lsls	r3, r3, #16
 800652a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	01db      	lsls	r3, r3, #7
 8006536:	4413      	add	r3, r2
 8006538:	3384      	adds	r3, #132	; 0x84
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	4611      	mov	r1, r2
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	01d2      	lsls	r2, r2, #7
 8006546:	440a      	add	r2, r1
 8006548:	3284      	adds	r2, #132	; 0x84
 800654a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800654e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800655e:	4413      	add	r3, r2
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4619      	mov	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	01db      	lsls	r3, r3, #7
 800656c:	440b      	add	r3, r1
 800656e:	3384      	adds	r3, #132	; 0x84
 8006570:	4619      	mov	r1, r3
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	01db      	lsls	r3, r3, #7
 8006582:	4413      	add	r3, r2
 8006584:	3384      	adds	r3, #132	; 0x84
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	4611      	mov	r1, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	01d2      	lsls	r2, r2, #7
 8006592:	440a      	add	r2, r1
 8006594:	3284      	adds	r2, #132	; 0x84
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	01db      	lsls	r3, r3, #7
 80065a6:	4413      	add	r3, r2
 80065a8:	3384      	adds	r3, #132	; 0x84
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80065b8:	021b      	lsls	r3, r3, #8
 80065ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	01db      	lsls	r3, r3, #7
 80065d8:	4413      	add	r3, r2
 80065da:	3384      	adds	r3, #132	; 0x84
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	4413      	add	r3, r2
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	461a      	mov	r2, r3
 80065ee:	2300      	movs	r3, #0
 80065f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065f8:	461a      	mov	r2, r3
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	431a      	orrs	r2, r3
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	01db      	lsls	r3, r3, #7
 800660c:	440b      	add	r3, r1
 800660e:	3384      	adds	r3, #132	; 0x84
 8006610:	4619      	mov	r1, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	01db      	lsls	r3, r3, #7
 8006622:	4413      	add	r3, r2
 8006624:	3384      	adds	r3, #132	; 0x84
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	4611      	mov	r1, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	01d2      	lsls	r2, r2, #7
 8006632:	440a      	add	r2, r1
 8006634:	3284      	adds	r2, #132	; 0x84
 8006636:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800663a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	01db      	lsls	r3, r3, #7
 8006646:	4413      	add	r3, r2
 8006648:	3384      	adds	r3, #132	; 0x84
 800664a:	461a      	mov	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	695b      	ldr	r3, [r3, #20]
 8006650:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	01db      	lsls	r3, r3, #7
 800665c:	4413      	add	r3, r2
 800665e:	3384      	adds	r3, #132	; 0x84
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	4611      	mov	r1, r2
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	01d2      	lsls	r2, r2, #7
 800666c:	440a      	add	r2, r1
 800666e:	3284      	adds	r2, #132	; 0x84
 8006670:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006674:	f023 0307 	bic.w	r3, r3, #7
 8006678:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	69da      	ldr	r2, [r3, #28]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	68f9      	ldr	r1, [r7, #12]
 8006684:	6809      	ldr	r1, [r1, #0]
 8006686:	4608      	mov	r0, r1
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	01c9      	lsls	r1, r1, #7
 800668c:	4401      	add	r1, r0
 800668e:	3184      	adds	r1, #132	; 0x84
 8006690:	4313      	orrs	r3, r2
 8006692:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	461a      	mov	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	01db      	lsls	r3, r3, #7
 800669e:	4413      	add	r3, r2
 80066a0:	3384      	adds	r3, #132	; 0x84
 80066a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	461a      	mov	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	01db      	lsls	r3, r3, #7
 80066ae:	4413      	add	r3, r2
 80066b0:	3384      	adds	r3, #132	; 0x84
 80066b2:	461a      	mov	r2, r3
 80066b4:	2300      	movs	r3, #0
 80066b6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	4413      	add	r3, r2
 80066c4:	3384      	adds	r3, #132	; 0x84
 80066c6:	461a      	mov	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d102      	bne.n	80066dc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80066d6:	2304      	movs	r3, #4
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	e01b      	b.n	8006714 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d102      	bne.n	80066ea <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80066e4:	2303      	movs	r3, #3
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e014      	b.n	8006714 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00b      	beq.n	800670a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d007      	beq.n	800670a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d003      	beq.n	800670a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006706:	2b07      	cmp	r3, #7
 8006708:	d102      	bne.n	8006710 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800670a:	2302      	movs	r3, #2
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	e001      	b.n	8006714 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006710:	2301      	movs	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	01db      	lsls	r3, r3, #7
 800671e:	4413      	add	r3, r2
 8006720:	3384      	adds	r3, #132	; 0x84
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	4611      	mov	r1, r2
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	01d2      	lsls	r2, r2, #7
 800672e:	440a      	add	r2, r1
 8006730:	3284      	adds	r2, #132	; 0x84
 8006732:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006736:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	fb02 f303 	mul.w	r3, r2, r3
 8006742:	041a      	lsls	r2, r3, #16
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6859      	ldr	r1, [r3, #4]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	1acb      	subs	r3, r1, r3
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	3303      	adds	r3, #3
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6809      	ldr	r1, [r1, #0]
 800675a:	4608      	mov	r0, r1
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	01c9      	lsls	r1, r1, #7
 8006760:	4401      	add	r1, r0
 8006762:	3184      	adds	r1, #132	; 0x84
 8006764:	4313      	orrs	r3, r2
 8006766:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	01db      	lsls	r3, r3, #7
 8006772:	4413      	add	r3, r2
 8006774:	3384      	adds	r3, #132	; 0x84
 8006776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	4611      	mov	r1, r2
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	01d2      	lsls	r2, r2, #7
 8006782:	440a      	add	r2, r1
 8006784:	3284      	adds	r2, #132	; 0x84
 8006786:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	01db      	lsls	r3, r3, #7
 800679a:	4413      	add	r3, r2
 800679c:	3384      	adds	r3, #132	; 0x84
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	01db      	lsls	r3, r3, #7
 80067b0:	4413      	add	r3, r2
 80067b2:	3384      	adds	r3, #132	; 0x84
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	4611      	mov	r1, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	01d2      	lsls	r2, r2, #7
 80067c0:	440a      	add	r2, r1
 80067c2:	3284      	adds	r2, #132	; 0x84
 80067c4:	f043 0301 	orr.w	r3, r3, #1
 80067c8:	6013      	str	r3, [r2, #0]
}
 80067ca:	bf00      	nop
 80067cc:	3724      	adds	r7, #36	; 0x24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
	...

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e25b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d075      	beq.n	80068e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067f6:	4ba3      	ldr	r3, [pc, #652]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00c      	beq.n	800681c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006802:	4ba0      	ldr	r3, [pc, #640]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800680a:	2b08      	cmp	r3, #8
 800680c:	d112      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b9d      	ldr	r3, [pc, #628]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800681a:	d10b      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	4b99      	ldr	r3, [pc, #612]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05b      	beq.n	80068e0 <HAL_RCC_OscConfig+0x108>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d157      	bne.n	80068e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e236      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d106      	bne.n	800684c <HAL_RCC_OscConfig+0x74>
 800683e:	4b91      	ldr	r3, [pc, #580]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a90      	ldr	r2, [pc, #576]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e01d      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0x98>
 8006856:	4b8b      	ldr	r3, [pc, #556]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a8a      	ldr	r2, [pc, #552]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800685c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a87      	ldr	r2, [pc, #540]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 8006870:	4b84      	ldr	r3, [pc, #528]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a83      	ldr	r2, [pc, #524]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b81      	ldr	r3, [pc, #516]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a80      	ldr	r2, [pc, #512]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fc fdb0 	bl	80033f4 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006898:	f7fc fdac 	bl	80033f4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	; 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e1fb      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b76      	ldr	r3, [pc, #472]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0xc0>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fc fd9c 	bl	80033f4 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fc fd98 	bl	80033f4 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1e7      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	4b6c      	ldr	r3, [pc, #432]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0xe8>
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fa:	4b62      	ldr	r3, [pc, #392]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11c      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b5f      	ldr	r3, [pc, #380]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d116      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d001      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1bb      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692a:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4952      	ldr	r1, [pc, #328]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	e03a      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006948:	4b4f      	ldr	r3, [pc, #316]	; (8006a88 <HAL_RCC_OscConfig+0x2b0>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fc fd51 	bl	80033f4 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006956:	f7fc fd4d 	bl	80033f4 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e19c      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	4b46      	ldr	r3, [pc, #280]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4940      	ldr	r1, [pc, #256]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
 8006988:	e015      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698a:	4b3f      	ldr	r3, [pc, #252]	; (8006a88 <HAL_RCC_OscConfig+0x2b0>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fc fd30 	bl	80033f4 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006998:	f7fc fd2c 	bl	80033f4 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e17b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d030      	beq.n	8006a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ca:	4b30      	ldr	r3, [pc, #192]	; (8006a8c <HAL_RCC_OscConfig+0x2b4>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fc fd10 	bl	80033f4 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fc fd0c 	bl	80033f4 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e15b      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	4b26      	ldr	r3, [pc, #152]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0x200>
 80069f6:	e015      	b.n	8006a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f8:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <HAL_RCC_OscConfig+0x2b4>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fe:	f7fc fcf9 	bl	80033f4 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fc fcf5 	bl	80033f4 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e144      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1f0      	bne.n	8006a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80a0 	beq.w	8006b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10f      	bne.n	8006a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a50:	6413      	str	r3, [r2, #64]	; 0x40
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <HAL_RCC_OscConfig+0x2ac>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	60bb      	str	r3, [r7, #8]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_OscConfig+0x2b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d121      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a6e:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <HAL_RCC_OscConfig+0x2b8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a07      	ldr	r2, [pc, #28]	; (8006a90 <HAL_RCC_OscConfig+0x2b8>)
 8006a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7a:	f7fc fcbb 	bl	80033f4 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a80:	e011      	b.n	8006aa6 <HAL_RCC_OscConfig+0x2ce>
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800
 8006a88:	42470000 	.word	0x42470000
 8006a8c:	42470e80 	.word	0x42470e80
 8006a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fc fcae 	bl	80033f4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e0fd      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b81      	ldr	r3, [pc, #516]	; (8006cac <HAL_RCC_OscConfig+0x4d4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x2f0>
 8006aba:	4b7d      	ldr	r3, [pc, #500]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abe:	4a7c      	ldr	r2, [pc, #496]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac6:	e01c      	b.n	8006b02 <HAL_RCC_OscConfig+0x32a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b05      	cmp	r3, #5
 8006ace:	d10c      	bne.n	8006aea <HAL_RCC_OscConfig+0x312>
 8006ad0:	4b77      	ldr	r3, [pc, #476]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad4:	4a76      	ldr	r2, [pc, #472]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ad6:	f043 0304 	orr.w	r3, r3, #4
 8006ada:	6713      	str	r3, [r2, #112]	; 0x70
 8006adc:	4b74      	ldr	r3, [pc, #464]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	4a73      	ldr	r2, [pc, #460]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae8:	e00b      	b.n	8006b02 <HAL_RCC_OscConfig+0x32a>
 8006aea:	4b71      	ldr	r3, [pc, #452]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a70      	ldr	r2, [pc, #448]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	4b6e      	ldr	r3, [pc, #440]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a6d      	ldr	r2, [pc, #436]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d015      	beq.n	8006b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0a:	f7fc fc73 	bl	80033f4 <HAL_GetTick>
 8006b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b10:	e00a      	b.n	8006b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b12:	f7fc fc6f 	bl	80033f4 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e0bc      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b28:	4b61      	ldr	r3, [pc, #388]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ee      	beq.n	8006b12 <HAL_RCC_OscConfig+0x33a>
 8006b34:	e014      	b.n	8006b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b36:	f7fc fc5d 	bl	80033f4 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b3e:	f7fc fc59 	bl	80033f4 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0a6      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b54:	4b56      	ldr	r3, [pc, #344]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1ee      	bne.n	8006b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d105      	bne.n	8006b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b66:	4b52      	ldr	r3, [pc, #328]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	4a51      	ldr	r2, [pc, #324]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8092 	beq.w	8006ca0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7c:	4b4c      	ldr	r3, [pc, #304]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 030c 	and.w	r3, r3, #12
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d05c      	beq.n	8006c42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d141      	bne.n	8006c14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b90:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <HAL_RCC_OscConfig+0x4dc>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fc fc2d 	bl	80033f4 <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b9e:	f7fc fc29 	bl	80033f4 <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e078      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb0:	4b3f      	ldr	r3, [pc, #252]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1f0      	bne.n	8006b9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	019b      	lsls	r3, r3, #6
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	4933      	ldr	r1, [pc, #204]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be6:	4b33      	ldr	r3, [pc, #204]	; (8006cb4 <HAL_RCC_OscConfig+0x4dc>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bec:	f7fc fc02 	bl	80033f4 <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fc fbfe 	bl	80033f4 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e04d      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c06:	4b2a      	ldr	r3, [pc, #168]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x41c>
 8006c12:	e045      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c14:	4b27      	ldr	r3, [pc, #156]	; (8006cb4 <HAL_RCC_OscConfig+0x4dc>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1a:	f7fc fbeb 	bl	80033f4 <HAL_GetTick>
 8006c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c20:	e008      	b.n	8006c34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c22:	f7fc fbe7 	bl	80033f4 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e036      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c34:	4b1e      	ldr	r3, [pc, #120]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f0      	bne.n	8006c22 <HAL_RCC_OscConfig+0x44a>
 8006c40:	e02e      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e029      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <HAL_RCC_OscConfig+0x4d8>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d11c      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d115      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c76:	4013      	ands	r3, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10d      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40007000 	.word	0x40007000
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	42470060 	.word	0x42470060

08006cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e0cc      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b68      	ldr	r3, [pc, #416]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d90c      	bls.n	8006cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b65      	ldr	r3, [pc, #404]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b63      	ldr	r3, [pc, #396]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0b8      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d0c:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	4a58      	ldr	r2, [pc, #352]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d24:	4b53      	ldr	r3, [pc, #332]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4a52      	ldr	r2, [pc, #328]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d30:	4b50      	ldr	r3, [pc, #320]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	494d      	ldr	r1, [pc, #308]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d044      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d107      	bne.n	8006d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d56:	4b47      	ldr	r3, [pc, #284]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d119      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e07f      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d003      	beq.n	8006d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d107      	bne.n	8006d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d76:	4b3f      	ldr	r3, [pc, #252]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e06f      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e067      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f023 0203 	bic.w	r2, r3, #3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4934      	ldr	r1, [pc, #208]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006da8:	f7fc fb24 	bl	80033f4 <HAL_GetTick>
 8006dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006db0:	f7fc fb20 	bl	80033f4 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e04f      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc6:	4b2b      	ldr	r3, [pc, #172]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 020c 	and.w	r2, r3, #12
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d1eb      	bne.n	8006db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d20c      	bcs.n	8006e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dee:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <HAL_RCC_ClockConfig+0x1b8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 030f 	and.w	r3, r3, #15
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d001      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e032      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e0c:	4b19      	ldr	r3, [pc, #100]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4916      	ldr	r1, [pc, #88]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	490e      	ldr	r1, [pc, #56]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e3e:	f000 f821 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006e42:	4601      	mov	r1, r0
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	091b      	lsrs	r3, r3, #4
 8006e4a:	f003 030f 	and.w	r3, r3, #15
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <HAL_RCC_ClockConfig+0x1c0>)
 8006e50:	5cd3      	ldrb	r3, [r2, r3]
 8006e52:	fa21 f303 	lsr.w	r3, r1, r3
 8006e56:	4a09      	ldr	r2, [pc, #36]	; (8006e7c <HAL_RCC_ClockConfig+0x1c4>)
 8006e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fb f84e 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40023c00 	.word	0x40023c00
 8006e74:	40023800 	.word	0x40023800
 8006e78:	0800bebc 	.word	0x0800bebc
 8006e7c:	20000000 	.word	0x20000000
 8006e80:	2000004c 	.word	0x2000004c

08006e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	607b      	str	r3, [r7, #4]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	2300      	movs	r3, #0
 8006e94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e9a:	4b63      	ldr	r3, [pc, #396]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f003 030c 	and.w	r3, r3, #12
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d007      	beq.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x32>
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d008      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x38>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f040 80b4 	bne.w	8007018 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006eb0:	4b5e      	ldr	r3, [pc, #376]	; (800702c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006eb2:	60bb      	str	r3, [r7, #8]
       break;
 8006eb4:	e0b3      	b.n	800701e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eb6:	4b5e      	ldr	r3, [pc, #376]	; (8007030 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006eb8:	60bb      	str	r3, [r7, #8]
      break;
 8006eba:	e0b0      	b.n	800701e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ebc:	4b5a      	ldr	r3, [pc, #360]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ec6:	4b58      	ldr	r3, [pc, #352]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04a      	beq.n	8006f68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed2:	4b55      	ldr	r3, [pc, #340]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	ea03 0501 	and.w	r5, r3, r1
 8006ee8:	ea04 0602 	and.w	r6, r4, r2
 8006eec:	4629      	mov	r1, r5
 8006eee:	4632      	mov	r2, r6
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	f04f 0400 	mov.w	r4, #0
 8006ef8:	0154      	lsls	r4, r2, #5
 8006efa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006efe:	014b      	lsls	r3, r1, #5
 8006f00:	4619      	mov	r1, r3
 8006f02:	4622      	mov	r2, r4
 8006f04:	1b49      	subs	r1, r1, r5
 8006f06:	eb62 0206 	sbc.w	r2, r2, r6
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	f04f 0400 	mov.w	r4, #0
 8006f12:	0194      	lsls	r4, r2, #6
 8006f14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006f18:	018b      	lsls	r3, r1, #6
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	eb64 0402 	sbc.w	r4, r4, r2
 8006f20:	f04f 0100 	mov.w	r1, #0
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	00e2      	lsls	r2, r4, #3
 8006f2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006f2e:	00d9      	lsls	r1, r3, #3
 8006f30:	460b      	mov	r3, r1
 8006f32:	4614      	mov	r4, r2
 8006f34:	195b      	adds	r3, r3, r5
 8006f36:	eb44 0406 	adc.w	r4, r4, r6
 8006f3a:	f04f 0100 	mov.w	r1, #0
 8006f3e:	f04f 0200 	mov.w	r2, #0
 8006f42:	0262      	lsls	r2, r4, #9
 8006f44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006f48:	0259      	lsls	r1, r3, #9
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	4621      	mov	r1, r4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f04f 0400 	mov.w	r4, #0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4623      	mov	r3, r4
 8006f5c:	f7f9 f948 	bl	80001f0 <__aeabi_uldivmod>
 8006f60:	4603      	mov	r3, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e049      	b.n	8006ffc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f68:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	099b      	lsrs	r3, r3, #6
 8006f6e:	f04f 0400 	mov.w	r4, #0
 8006f72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	ea03 0501 	and.w	r5, r3, r1
 8006f7e:	ea04 0602 	and.w	r6, r4, r2
 8006f82:	4629      	mov	r1, r5
 8006f84:	4632      	mov	r2, r6
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	f04f 0400 	mov.w	r4, #0
 8006f8e:	0154      	lsls	r4, r2, #5
 8006f90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f94:	014b      	lsls	r3, r1, #5
 8006f96:	4619      	mov	r1, r3
 8006f98:	4622      	mov	r2, r4
 8006f9a:	1b49      	subs	r1, r1, r5
 8006f9c:	eb62 0206 	sbc.w	r2, r2, r6
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	f04f 0400 	mov.w	r4, #0
 8006fa8:	0194      	lsls	r4, r2, #6
 8006faa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fae:	018b      	lsls	r3, r1, #6
 8006fb0:	1a5b      	subs	r3, r3, r1
 8006fb2:	eb64 0402 	sbc.w	r4, r4, r2
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	00e2      	lsls	r2, r4, #3
 8006fc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fc4:	00d9      	lsls	r1, r3, #3
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4614      	mov	r4, r2
 8006fca:	195b      	adds	r3, r3, r5
 8006fcc:	eb44 0406 	adc.w	r4, r4, r6
 8006fd0:	f04f 0100 	mov.w	r1, #0
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	02a2      	lsls	r2, r4, #10
 8006fda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006fde:	0299      	lsls	r1, r3, #10
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f04f 0400 	mov.w	r4, #0
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4623      	mov	r3, r4
 8006ff2:	f7f9 f8fd 	bl	80001f0 <__aeabi_uldivmod>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	3301      	adds	r3, #1
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	60bb      	str	r3, [r7, #8]
      break;
 8007016:	e002      	b.n	800701e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800701a:	60bb      	str	r3, [r7, #8]
      break;
 800701c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800701e:	68bb      	ldr	r3, [r7, #8]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007028:	40023800 	.word	0x40023800
 800702c:	00f42400 	.word	0x00f42400
 8007030:	007a1200 	.word	0x007a1200

08007034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007038:	4b03      	ldr	r3, [pc, #12]	; (8007048 <HAL_RCC_GetHCLKFreq+0x14>)
 800703a:	681b      	ldr	r3, [r3, #0]
}
 800703c:	4618      	mov	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000000 	.word	0x20000000

0800704c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007050:	f7ff fff0 	bl	8007034 <HAL_RCC_GetHCLKFreq>
 8007054:	4601      	mov	r1, r0
 8007056:	4b05      	ldr	r3, [pc, #20]	; (800706c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	0a9b      	lsrs	r3, r3, #10
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	4a03      	ldr	r2, [pc, #12]	; (8007070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007062:	5cd3      	ldrb	r3, [r2, r3]
 8007064:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40023800 	.word	0x40023800
 8007070:	0800becc 	.word	0x0800becc

08007074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007078:	f7ff ffdc 	bl	8007034 <HAL_RCC_GetHCLKFreq>
 800707c:	4601      	mov	r1, r0
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0b5b      	lsrs	r3, r3, #13
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4a03      	ldr	r2, [pc, #12]	; (8007098 <HAL_RCC_GetPCLK2Freq+0x24>)
 800708a:	5cd3      	ldrb	r3, [r2, r3]
 800708c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40023800 	.word	0x40023800
 8007098:	0800becc 	.word	0x0800becc

0800709c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220f      	movs	r2, #15
 80070aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80070ac:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0203 	and.w	r2, r3, #3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80070b8:	4b0f      	ldr	r3, [pc, #60]	; (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80070c4:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80070d0:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <HAL_RCC_GetClockConfig+0x5c>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80070de:	4b07      	ldr	r3, [pc, #28]	; (80070fc <HAL_RCC_GetClockConfig+0x60>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	601a      	str	r2, [r3, #0]
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	40023800 	.word	0x40023800
 80070fc:	40023c00 	.word	0x40023c00

08007100 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007130:	2b00      	cmp	r3, #0
 8007132:	d075      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007134:	4bad      	ldr	r3, [pc, #692]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800713a:	f7fc f95b 	bl	80033f4 <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007140:	e008      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007142:	f7fc f957 	bl	80033f4 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e18b      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007154:	4ba6      	ldr	r3, [pc, #664]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	019a      	lsls	r2, r3, #6
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	071b      	lsls	r3, r3, #28
 8007178:	499d      	ldr	r1, [pc, #628]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01f      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800718c:	4b98      	ldr	r3, [pc, #608]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	019a      	lsls	r2, r3, #6
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	061b      	lsls	r3, r3, #24
 80071a6:	431a      	orrs	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	071b      	lsls	r3, r3, #28
 80071ac:	4990      	ldr	r1, [pc, #576]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071b4:	4b8e      	ldr	r3, [pc, #568]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ba:	f023 021f 	bic.w	r2, r3, #31
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	498a      	ldr	r1, [pc, #552]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	019a      	lsls	r2, r3, #6
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	061b      	lsls	r3, r3, #24
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	071b      	lsls	r3, r3, #28
 80071ec:	4980      	ldr	r1, [pc, #512]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071f4:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071fa:	f7fc f8fb 	bl	80033f4 <HAL_GetTick>
 80071fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007200:	e008      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007202:	f7fc f8f7 	bl	80033f4 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e12b      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007214:	4b76      	ldr	r3, [pc, #472]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0f0      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007234:	2b00      	cmp	r3, #0
 8007236:	d079      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007238:	4b6e      	ldr	r3, [pc, #440]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800723a:	2200      	movs	r2, #0
 800723c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800723e:	f7fc f8d9 	bl	80033f4 <HAL_GetTick>
 8007242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007244:	e008      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007246:	f7fc f8d5 	bl	80033f4 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e109      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007258:	4b65      	ldr	r3, [pc, #404]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007264:	d0ef      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 0304 	and.w	r3, r3, #4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d020      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007272:	4b5f      	ldr	r3, [pc, #380]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007278:	0f1b      	lsrs	r3, r3, #28
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	019a      	lsls	r2, r3, #6
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	061b      	lsls	r3, r3, #24
 800728c:	431a      	orrs	r2, r3
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	071b      	lsls	r3, r3, #28
 8007292:	4957      	ldr	r1, [pc, #348]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800729a:	4b55      	ldr	r3, [pc, #340]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800729c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	4950      	ldr	r1, [pc, #320]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d01e      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072c0:	4b4b      	ldr	r3, [pc, #300]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c6:	0e1b      	lsrs	r3, r3, #24
 80072c8:	f003 030f 	and.w	r3, r3, #15
 80072cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	019a      	lsls	r2, r3, #6
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	061b      	lsls	r3, r3, #24
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	071b      	lsls	r3, r3, #28
 80072e0:	4943      	ldr	r1, [pc, #268]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072e8:	4b41      	ldr	r3, [pc, #260]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	493e      	ldr	r1, [pc, #248]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072fe:	4b3d      	ldr	r3, [pc, #244]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007300:	2201      	movs	r2, #1
 8007302:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007304:	f7fc f876 	bl	80033f4 <HAL_GetTick>
 8007308:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800730a:	e008      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800730c:	f7fc f872 	bl	80033f4 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e0a6      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800731e:	4b34      	ldr	r3, [pc, #208]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800732a:	d1ef      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 808d 	beq.w	8007454 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	4b2c      	ldr	r3, [pc, #176]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	4a2b      	ldr	r2, [pc, #172]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007348:	6413      	str	r3, [r2, #64]	; 0x40
 800734a:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007356:	4b28      	ldr	r3, [pc, #160]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a27      	ldr	r2, [pc, #156]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800735c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007360:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007362:	f7fc f847 	bl	80033f4 <HAL_GetTick>
 8007366:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007368:	e008      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800736a:	f7fc f843 	bl	80033f4 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b02      	cmp	r3, #2
 8007376:	d901      	bls.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e077      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800737c:	4b1e      	ldr	r3, [pc, #120]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f0      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007388:	4b19      	ldr	r3, [pc, #100]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007390:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d039      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d032      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073a6:	4b12      	ldr	r3, [pc, #72]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073b0:	4b12      	ldr	r3, [pc, #72]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80073b2:	2201      	movs	r2, #1
 80073b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073b6:	4b11      	ldr	r3, [pc, #68]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073bc:	4a0c      	ldr	r2, [pc, #48]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d11e      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073ce:	f7fc f811 	bl	80033f4 <HAL_GetTick>
 80073d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d4:	e014      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d6:	f7fc f80d 	bl	80033f4 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d90b      	bls.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e03f      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80073ec:	42470068 	.word	0x42470068
 80073f0:	40023800 	.word	0x40023800
 80073f4:	42470070 	.word	0x42470070
 80073f8:	40007000 	.word	0x40007000
 80073fc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007400:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0e4      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007418:	d10d      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007426:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800742a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742e:	4911      	ldr	r1, [pc, #68]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007430:	4313      	orrs	r3, r2
 8007432:	608b      	str	r3, [r1, #8]
 8007434:	e005      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007436:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800743c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007440:	6093      	str	r3, [r2, #8]
 8007442:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007444:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800744e:	4909      	ldr	r1, [pc, #36]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007450:	4313      	orrs	r3, r2
 8007452:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	d004      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007466:	4b04      	ldr	r3, [pc, #16]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007468:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	40023800 	.word	0x40023800
 8007478:	424711e0 	.word	0x424711e0

0800747c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e025      	b.n	80074dc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d106      	bne.n	80074aa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7f9 ff31 	bl	800130c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f002 f9f5 	bl	80098ac <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	461a      	mov	r2, r3
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	f002 fa60 	bl	8009992 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d101      	bne.n	8007500 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80074fc:	2302      	movs	r3, #2
 80074fe:	e018      	b.n	8007532 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2202      	movs	r2, #2
 8007504:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	4618      	mov	r0, r3
 8007512:	f002 fabd 	bl	8009a90 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d104      	bne.n	8007528 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2205      	movs	r2, #5
 8007522:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007526:	e003      	b.n	8007530 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d101      	bne.n	8007554 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007550:	2302      	movs	r3, #2
 8007552:	e00e      	b.n	8007572 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f002 fad0 	bl	8009b08 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e056      	b.n	800763a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fa fc18 	bl	8001ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685a      	ldr	r2, [r3, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	431a      	orrs	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	431a      	orrs	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	ea42 0103 	orr.w	r1, r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	430a      	orrs	r2, r1
 8007602:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	f003 0104 	and.w	r1, r3, #4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007628:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e01a      	b.n	800768a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800766a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7fa fbfd 	bl	8001e6c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b088      	sub	sp, #32
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	603b      	str	r3, [r7, #0]
 800769e:	4613      	mov	r3, r2
 80076a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_SPI_Transmit+0x22>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e11e      	b.n	80078f2 <HAL_SPI_Transmit+0x260>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076bc:	f7fb fe9a 	bl	80033f4 <HAL_GetTick>
 80076c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d002      	beq.n	80076d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
 80076d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076d6:	e103      	b.n	80078e0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_SPI_Transmit+0x52>
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076e8:	e0fa      	b.n	80078e0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2203      	movs	r2, #3
 80076ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	88fa      	ldrh	r2, [r7, #6]
 8007708:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007730:	d107      	bne.n	8007742 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007740:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d007      	beq.n	8007760 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800775e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d14b      	bne.n	8007802 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <HAL_SPI_Transmit+0xe6>
 8007772:	8afb      	ldrh	r3, [r7, #22]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d13e      	bne.n	80077f6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777c:	881a      	ldrh	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	1c9a      	adds	r2, r3, #2
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800779c:	e02b      	b.n	80077f6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d112      	bne.n	80077d2 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	881a      	ldrh	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	1c9a      	adds	r2, r3, #2
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80077d0:	e011      	b.n	80077f6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077d2:	f7fb fe0f 	bl	80033f4 <HAL_GetTick>
 80077d6:	4602      	mov	r2, r0
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d803      	bhi.n	80077ea <HAL_SPI_Transmit+0x158>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e8:	d102      	bne.n	80077f0 <HAL_SPI_Transmit+0x15e>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077f4:	e074      	b.n	80078e0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1ce      	bne.n	800779e <HAL_SPI_Transmit+0x10c>
 8007800:	e04c      	b.n	800789c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <HAL_SPI_Transmit+0x17e>
 800780a:	8afb      	ldrh	r3, [r7, #22]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d140      	bne.n	8007892 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	7812      	ldrb	r2, [r2, #0]
 800781c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007836:	e02c      	b.n	8007892 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b02      	cmp	r3, #2
 8007844:	d113      	bne.n	800786e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	330c      	adds	r3, #12
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	86da      	strh	r2, [r3, #54]	; 0x36
 800786c:	e011      	b.n	8007892 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800786e:	f7fb fdc1 	bl	80033f4 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d803      	bhi.n	8007886 <HAL_SPI_Transmit+0x1f4>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d102      	bne.n	800788c <HAL_SPI_Transmit+0x1fa>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d102      	bne.n	8007892 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007890:	e026      	b.n	80078e0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1cd      	bne.n	8007838 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fbb3 	bl	800800c <SPI_EndRxTxTransaction>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2220      	movs	r2, #32
 80078b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10a      	bne.n	80078d0 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e000      	b.n	80078e0 <HAL_SPI_Transmit+0x24e>
  }

error:
 80078de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af02      	add	r7, sp, #8
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	603b      	str	r3, [r7, #0]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007916:	d112      	bne.n	800793e <HAL_SPI_Receive+0x44>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10e      	bne.n	800793e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2204      	movs	r2, #4
 8007924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007928:	88fa      	ldrh	r2, [r7, #6]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	4613      	mov	r3, r2
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 f8e9 	bl	8007b0c <HAL_SPI_TransmitReceive>
 800793a:	4603      	mov	r3, r0
 800793c:	e0e2      	b.n	8007b04 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_SPI_Receive+0x52>
 8007948:	2302      	movs	r3, #2
 800794a:	e0db      	b.n	8007b04 <HAL_SPI_Receive+0x20a>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007954:	f7fb fd4e 	bl	80033f4 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b01      	cmp	r3, #1
 8007964:	d002      	beq.n	800796c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007966:	2302      	movs	r3, #2
 8007968:	75fb      	strb	r3, [r7, #23]
    goto error;
 800796a:	e0c2      	b.n	8007af2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <HAL_SPI_Receive+0x7e>
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d102      	bne.n	800797e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800797c:	e0b9      	b.n	8007af2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2204      	movs	r2, #4
 8007982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	88fa      	ldrh	r2, [r7, #6]
 8007996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	d107      	bne.n	80079d6 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d007      	beq.n	80079f4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d162      	bne.n	8007ac2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80079fc:	e02e      	b.n	8007a5c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d115      	bne.n	8007a38 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f103 020c 	add.w	r2, r3, #12
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	7812      	ldrb	r2, [r2, #0]
 8007a1a:	b2d2      	uxtb	r2, r2
 8007a1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a36:	e011      	b.n	8007a5c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a38:	f7fb fcdc 	bl	80033f4 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d803      	bhi.n	8007a50 <HAL_SPI_Receive+0x156>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4e:	d102      	bne.n	8007a56 <HAL_SPI_Receive+0x15c>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d102      	bne.n	8007a5c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007a5a:	e04a      	b.n	8007af2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1cb      	bne.n	80079fe <HAL_SPI_Receive+0x104>
 8007a66:	e031      	b.n	8007acc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d113      	bne.n	8007a9e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a80:	b292      	uxth	r2, r2
 8007a82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	1c9a      	adds	r2, r3, #2
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	3b01      	subs	r3, #1
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a9c:	e011      	b.n	8007ac2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a9e:	f7fb fca9 	bl	80033f4 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d803      	bhi.n	8007ab6 <HAL_SPI_Receive+0x1bc>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_Receive+0x1c2>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ac0:	e017      	b.n	8007af2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1cd      	bne.n	8007a68 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fa35 	bl	8007f40 <SPI_EndRxTransaction>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d002      	beq.n	8007af0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	e000      	b.n	8007af2 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_SPI_TransmitReceive+0x26>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e18a      	b.n	8007e48 <HAL_SPI_TransmitReceive+0x33c>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b3a:	f7fb fc5b 	bl	80033f4 <HAL_GetTick>
 8007b3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007b50:	887b      	ldrh	r3, [r7, #2]
 8007b52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d00f      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x70>
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b62:	d107      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d103      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x68>
 8007b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d003      	beq.n	8007b7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
 8007b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b7a:	e15b      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x82>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_SPI_TransmitReceive+0x82>
 8007b88:	887b      	ldrh	r3, [r7, #2]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007b94:	e14e      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d003      	beq.n	8007baa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	887a      	ldrh	r2, [r7, #2]
 8007bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	887a      	ldrh	r2, [r7, #2]
 8007bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	887a      	ldrh	r2, [r7, #2]
 8007bcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	887a      	ldrh	r2, [r7, #2]
 8007bd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d007      	beq.n	8007bfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c06:	d178      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <HAL_SPI_TransmitReceive+0x10a>
 8007c10:	8b7b      	ldrh	r3, [r7, #26]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d166      	bne.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1a:	881a      	ldrh	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	1c9a      	adds	r2, r3, #2
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c3a:	e053      	b.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d11b      	bne.n	8007c82 <HAL_SPI_TransmitReceive+0x176>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d016      	beq.n	8007c82 <HAL_SPI_TransmitReceive+0x176>
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d113      	bne.n	8007c82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c5e:	881a      	ldrh	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6a:	1c9a      	adds	r2, r3, #2
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d119      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x1b8>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d014      	beq.n	8007cc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca4:	b292      	uxth	r2, r2
 8007ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cac:	1c9a      	adds	r2, r3, #2
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007cc4:	f7fb fb96 	bl	80033f4 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d807      	bhi.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d003      	beq.n	8007ce4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ce2:	e0a7      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1a6      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x130>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1a1      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x130>
 8007cf8:	e07c      	b.n	8007df4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <HAL_SPI_TransmitReceive+0x1fc>
 8007d02:	8b7b      	ldrh	r3, [r7, #26]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d16b      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d2e:	e057      	b.n	8007de0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d11c      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x26c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d017      	beq.n	8007d78 <HAL_SPI_TransmitReceive+0x26c>
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d114      	bne.n	8007d78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	330c      	adds	r3, #12
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d119      	bne.n	8007dba <HAL_SPI_TransmitReceive+0x2ae>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d014      	beq.n	8007dba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3b01      	subs	r3, #1
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007db6:	2301      	movs	r3, #1
 8007db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007dba:	f7fb fb1b 	bl	80033f4 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d803      	bhi.n	8007dd2 <HAL_SPI_TransmitReceive+0x2c6>
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d102      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0x2cc>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d103      	bne.n	8007de0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007dde:	e029      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1a2      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x224>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d19d      	bne.n	8007d30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f907 	bl	800800c <SPI_EndRxTxTransaction>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d006      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007e10:	e010      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10b      	bne.n	8007e32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	617b      	str	r3, [r7, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	e000      	b.n	8007e34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3730      	adds	r7, #48	; 0x30
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5e:	b2db      	uxtb	r3, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e7c:	e04c      	b.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e84:	d048      	beq.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007e86:	f7fb fab5 	bl	80033f4 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d902      	bls.n	8007e9c <SPI_WaitFlagStateUntilTimeout+0x30>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d13d      	bne.n	8007f18 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007eaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb4:	d111      	bne.n	8007eda <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ebe:	d004      	beq.n	8007eca <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec8:	d107      	bne.n	8007eda <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee2:	d10f      	bne.n	8007f04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e00f      	b.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	4013      	ands	r3, r2
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	bf0c      	ite	eq
 8007f28:	2301      	moveq	r3, #1
 8007f2a:	2300      	movne	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	461a      	mov	r2, r3
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d1a3      	bne.n	8007e7e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f54:	d111      	bne.n	8007f7a <SPI_EndRxTransaction+0x3a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f5e:	d004      	beq.n	8007f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f68:	d107      	bne.n	8007f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f82:	d12a      	bne.n	8007fda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8c:	d012      	beq.n	8007fb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2200      	movs	r2, #0
 8007f96:	2180      	movs	r1, #128	; 0x80
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff ff67 	bl	8007e6c <SPI_WaitFlagStateUntilTimeout>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02d      	beq.n	8008000 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa8:	f043 0220 	orr.w	r2, r3, #32
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e026      	b.n	8008002 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f7ff ff54 	bl	8007e6c <SPI_WaitFlagStateUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d01a      	beq.n	8008000 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fce:	f043 0220 	orr.w	r2, r3, #32
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e013      	b.n	8008002 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7ff ff41 	bl	8007e6c <SPI_WaitFlagStateUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d007      	beq.n	8008000 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ff4:	f043 0220 	orr.w	r2, r3, #32
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e000      	b.n	8008002 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af02      	add	r7, sp, #8
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008018:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <SPI_EndRxTxTransaction+0x7c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a1b      	ldr	r2, [pc, #108]	; (800808c <SPI_EndRxTxTransaction+0x80>)
 800801e:	fba2 2303 	umull	r2, r3, r2, r3
 8008022:	0d5b      	lsrs	r3, r3, #21
 8008024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008028:	fb02 f303 	mul.w	r3, r2, r3
 800802c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008036:	d112      	bne.n	800805e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2200      	movs	r2, #0
 8008040:	2180      	movs	r1, #128	; 0x80
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff ff12 	bl	8007e6c <SPI_WaitFlagStateUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d016      	beq.n	800807c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f043 0220 	orr.w	r2, r3, #32
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e00f      	b.n	800807e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00a      	beq.n	800807a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	3b01      	subs	r3, #1
 8008068:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008074:	2b80      	cmp	r3, #128	; 0x80
 8008076:	d0f2      	beq.n	800805e <SPI_EndRxTxTransaction+0x52>
 8008078:	e000      	b.n	800807c <SPI_EndRxTxTransaction+0x70>
        break;
 800807a:	bf00      	nop
  }

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000000 	.word	0x20000000
 800808c:	165e9f81 	.word	0x165e9f81

08008090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e01d      	b.n	80080de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d106      	bne.n	80080bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7fa f8b6 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	4619      	mov	r1, r3
 80080ce:	4610      	mov	r0, r2
 80080d0:	f000 fa14 	bl	80084fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68da      	ldr	r2, [r3, #12]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b06      	cmp	r3, #6
 800810e:	d007      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b02      	cmp	r3, #2
 8008142:	d122      	bne.n	800818a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	d11b      	bne.n	800818a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f06f 0202 	mvn.w	r2, #2
 800815a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	f003 0303 	and.w	r3, r3, #3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f9a5 	bl	80084c0 <HAL_TIM_IC_CaptureCallback>
 8008176:	e005      	b.n	8008184 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f997 	bl	80084ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9a8 	bl	80084d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b04      	cmp	r3, #4
 8008196:	d122      	bne.n	80081de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0304 	and.w	r3, r3, #4
 80081a2:	2b04      	cmp	r3, #4
 80081a4:	d11b      	bne.n	80081de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f06f 0204 	mvn.w	r2, #4
 80081ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d003      	beq.n	80081cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f97b 	bl	80084c0 <HAL_TIM_IC_CaptureCallback>
 80081ca:	e005      	b.n	80081d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f96d 	bl	80084ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f97e 	bl	80084d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d122      	bne.n	8008232 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	2b08      	cmp	r3, #8
 80081f8:	d11b      	bne.n	8008232 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f06f 0208 	mvn.w	r2, #8
 8008202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2204      	movs	r2, #4
 8008208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f951 	bl	80084c0 <HAL_TIM_IC_CaptureCallback>
 800821e:	e005      	b.n	800822c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f943 	bl	80084ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f954 	bl	80084d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b10      	cmp	r3, #16
 800823e:	d122      	bne.n	8008286 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b10      	cmp	r3, #16
 800824c:	d11b      	bne.n	8008286 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f06f 0210 	mvn.w	r2, #16
 8008256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2208      	movs	r2, #8
 800825c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f927 	bl	80084c0 <HAL_TIM_IC_CaptureCallback>
 8008272:	e005      	b.n	8008280 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f919 	bl	80084ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f92a 	bl	80084d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d10e      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d107      	bne.n	80082b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f06f 0201 	mvn.w	r2, #1
 80082aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7f9 fd43 	bl	8001d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082bc:	2b80      	cmp	r3, #128	; 0x80
 80082be:	d10e      	bne.n	80082de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ca:	2b80      	cmp	r3, #128	; 0x80
 80082cc:	d107      	bne.n	80082de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 facf 	bl	800887c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e8:	2b40      	cmp	r3, #64	; 0x40
 80082ea:	d10e      	bne.n	800830a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d107      	bne.n	800830a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f8ef 	bl	80084e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	f003 0320 	and.w	r3, r3, #32
 8008314:	2b20      	cmp	r3, #32
 8008316:	d10e      	bne.n	8008336 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b20      	cmp	r3, #32
 8008324:	d107      	bne.n	8008336 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f06f 0220 	mvn.w	r2, #32
 800832e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fa99 	bl	8008868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008336:	bf00      	nop
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_TIM_ConfigClockSource+0x18>
 8008352:	2302      	movs	r3, #2
 8008354:	e0a6      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x166>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2202      	movs	r2, #2
 8008362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008374:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800837c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b40      	cmp	r3, #64	; 0x40
 800838c:	d067      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x120>
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d80b      	bhi.n	80083aa <HAL_TIM_ConfigClockSource+0x6c>
 8008392:	2b10      	cmp	r3, #16
 8008394:	d073      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x140>
 8008396:	2b10      	cmp	r3, #16
 8008398:	d802      	bhi.n	80083a0 <HAL_TIM_ConfigClockSource+0x62>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d06f      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800839e:	e078      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d06c      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x140>
 80083a4:	2b30      	cmp	r3, #48	; 0x30
 80083a6:	d06a      	beq.n	800847e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80083a8:	e073      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083aa:	2b70      	cmp	r3, #112	; 0x70
 80083ac:	d00d      	beq.n	80083ca <HAL_TIM_ConfigClockSource+0x8c>
 80083ae:	2b70      	cmp	r3, #112	; 0x70
 80083b0:	d804      	bhi.n	80083bc <HAL_TIM_ConfigClockSource+0x7e>
 80083b2:	2b50      	cmp	r3, #80	; 0x50
 80083b4:	d033      	beq.n	800841e <HAL_TIM_ConfigClockSource+0xe0>
 80083b6:	2b60      	cmp	r3, #96	; 0x60
 80083b8:	d041      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80083ba:	e06a      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80083bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c0:	d066      	beq.n	8008490 <HAL_TIM_ConfigClockSource+0x152>
 80083c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c6:	d017      	beq.n	80083f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80083c8:	e063      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6899      	ldr	r1, [r3, #8]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f000 f9a9 	bl	8008730 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	609a      	str	r2, [r3, #8]
      break;
 80083f6:	e04c      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	6899      	ldr	r1, [r3, #8]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	f000 f992 	bl	8008730 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800841a:	609a      	str	r2, [r3, #8]
      break;
 800841c:	e039      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	461a      	mov	r2, r3
 800842c:	f000 f906 	bl	800863c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2150      	movs	r1, #80	; 0x50
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f95f 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 800843c:	e029      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6859      	ldr	r1, [r3, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	461a      	mov	r2, r3
 800844c:	f000 f925 	bl	800869a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2160      	movs	r1, #96	; 0x60
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f94f 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 800845c:	e019      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	6859      	ldr	r1, [r3, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	461a      	mov	r2, r3
 800846c:	f000 f8e6 	bl	800863c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2140      	movs	r1, #64	; 0x40
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f93f 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 800847c:	e009      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f000 f936 	bl	80086fa <TIM_ITRx_SetConfig>
      break;
 800848e:	e000      	b.n	8008492 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008490:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a40      	ldr	r2, [pc, #256]	; (8008610 <TIM_Base_SetConfig+0x114>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800851a:	d00f      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a3d      	ldr	r2, [pc, #244]	; (8008614 <TIM_Base_SetConfig+0x118>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00b      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a3c      	ldr	r2, [pc, #240]	; (8008618 <TIM_Base_SetConfig+0x11c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d007      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a3b      	ldr	r2, [pc, #236]	; (800861c <TIM_Base_SetConfig+0x120>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d003      	beq.n	800853c <TIM_Base_SetConfig+0x40>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a3a      	ldr	r2, [pc, #232]	; (8008620 <TIM_Base_SetConfig+0x124>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d108      	bne.n	800854e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2f      	ldr	r2, [pc, #188]	; (8008610 <TIM_Base_SetConfig+0x114>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d02b      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800855c:	d027      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <TIM_Base_SetConfig+0x118>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d023      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a2b      	ldr	r2, [pc, #172]	; (8008618 <TIM_Base_SetConfig+0x11c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d01f      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a2a      	ldr	r2, [pc, #168]	; (800861c <TIM_Base_SetConfig+0x120>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01b      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a29      	ldr	r2, [pc, #164]	; (8008620 <TIM_Base_SetConfig+0x124>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d017      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a28      	ldr	r2, [pc, #160]	; (8008624 <TIM_Base_SetConfig+0x128>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a27      	ldr	r2, [pc, #156]	; (8008628 <TIM_Base_SetConfig+0x12c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d00f      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a26      	ldr	r2, [pc, #152]	; (800862c <TIM_Base_SetConfig+0x130>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00b      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a25      	ldr	r2, [pc, #148]	; (8008630 <TIM_Base_SetConfig+0x134>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d007      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a24      	ldr	r2, [pc, #144]	; (8008634 <TIM_Base_SetConfig+0x138>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d003      	beq.n	80085ae <TIM_Base_SetConfig+0xb2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a23      	ldr	r2, [pc, #140]	; (8008638 <TIM_Base_SetConfig+0x13c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d108      	bne.n	80085c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a0a      	ldr	r2, [pc, #40]	; (8008610 <TIM_Base_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d003      	beq.n	80085f4 <TIM_Base_SetConfig+0xf8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a0c      	ldr	r2, [pc, #48]	; (8008620 <TIM_Base_SetConfig+0x124>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d103      	bne.n	80085fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	615a      	str	r2, [r3, #20]
}
 8008602:	bf00      	nop
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	40010000 	.word	0x40010000
 8008614:	40000400 	.word	0x40000400
 8008618:	40000800 	.word	0x40000800
 800861c:	40000c00 	.word	0x40000c00
 8008620:	40010400 	.word	0x40010400
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800
 8008630:	40001800 	.word	0x40001800
 8008634:	40001c00 	.word	0x40001c00
 8008638:	40002000 	.word	0x40002000

0800863c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800863c:	b480      	push	{r7}
 800863e:	b087      	sub	sp, #28
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f023 0201 	bic.w	r2, r3, #1
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	011b      	lsls	r3, r3, #4
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 030a 	bic.w	r3, r3, #10
 8008678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800869a:	b480      	push	{r7}
 800869c:	b087      	sub	sp, #28
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	f023 0210 	bic.w	r2, r3, #16
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	031b      	lsls	r3, r3, #12
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	4313      	orrs	r3, r2
 80086e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	697a      	ldr	r2, [r7, #20]
 80086e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	621a      	str	r2, [r3, #32]
}
 80086ee:	bf00      	nop
 80086f0:	371c      	adds	r7, #28
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b085      	sub	sp, #20
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	f043 0307 	orr.w	r3, r3, #7
 800871c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800874a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	021a      	lsls	r2, r3, #8
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	431a      	orrs	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4313      	orrs	r3, r2
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	609a      	str	r2, [r3, #8]
}
 8008764:	bf00      	nop
 8008766:	371c      	adds	r7, #28
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008784:	2302      	movs	r3, #2
 8008786:	e05a      	b.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a21      	ldr	r2, [pc, #132]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d022      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d4:	d01d      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a1d      	ldr	r2, [pc, #116]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d018      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1b      	ldr	r2, [pc, #108]	; (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a1a      	ldr	r2, [pc, #104]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a18      	ldr	r2, [pc, #96]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a17      	ldr	r2, [pc, #92]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a15      	ldr	r2, [pc, #84]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d10c      	bne.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4313      	orrs	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40010400 	.word	0x40010400
 8008860:	40014000 	.word	0x40014000
 8008864:	40001800 	.word	0x40001800

08008868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e03f      	b.n	8008922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7f9 fd02 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fc6d 	bl	80091b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	695a      	ldr	r2, [r3, #20]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2220      	movs	r2, #32
 8008914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b088      	sub	sp, #32
 800892e:	af02      	add	r7, sp, #8
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	603b      	str	r3, [r7, #0]
 8008936:	4613      	mov	r3, r2
 8008938:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b20      	cmp	r3, #32
 8008948:	f040 8083 	bne.w	8008a52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_UART_Transmit+0x2e>
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e07b      	b.n	8008a54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_UART_Transmit+0x40>
 8008966:	2302      	movs	r3, #2
 8008968:	e074      	b.n	8008a54 <HAL_UART_Transmit+0x12a>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2221      	movs	r2, #33	; 0x21
 800897c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008980:	f7fa fd38 	bl	80033f4 <HAL_GetTick>
 8008984:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	88fa      	ldrh	r2, [r7, #6]
 800898a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800899a:	e042      	b.n	8008a22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3b01      	subs	r3, #1
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b2:	d122      	bne.n	80089fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2200      	movs	r2, #0
 80089bc:	2180      	movs	r1, #128	; 0x80
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fa76 	bl	8008eb0 <UART_WaitOnFlagUntilTimeout>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e042      	b.n	8008a54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	3302      	adds	r3, #2
 80089ee:	60bb      	str	r3, [r7, #8]
 80089f0:	e017      	b.n	8008a22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	3301      	adds	r3, #1
 80089f6:	60bb      	str	r3, [r7, #8]
 80089f8:	e013      	b.n	8008a22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fa53 	bl	8008eb0 <UART_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e01f      	b.n	8008a54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	60ba      	str	r2, [r7, #8]
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1b7      	bne.n	800899c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	2200      	movs	r2, #0
 8008a34:	2140      	movs	r1, #64	; 0x40
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fa3a 	bl	8008eb0 <UART_WaitOnFlagUntilTimeout>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e006      	b.n	8008a54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e000      	b.n	8008a54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008a52:	2302      	movs	r3, #2
  }
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d166      	bne.n	8008b44 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_UART_Receive_DMA+0x26>
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e05f      	b.n	8008b46 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_UART_Receive_DMA+0x38>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e058      	b.n	8008b46 <HAL_UART_Receive_DMA+0xea>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	88fa      	ldrh	r2, [r7, #6]
 8008aa6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2222      	movs	r2, #34	; 0x22
 8008ab2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aba:	4a25      	ldr	r2, [pc, #148]	; (8008b50 <HAL_UART_Receive_DMA+0xf4>)
 8008abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac2:	4a24      	ldr	r2, [pc, #144]	; (8008b54 <HAL_UART_Receive_DMA+0xf8>)
 8008ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aca:	4a23      	ldr	r2, [pc, #140]	; (8008b58 <HAL_UART_Receive_DMA+0xfc>)
 8008acc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008ad6:	f107 0308 	add.w	r3, r7, #8
 8008ada:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	88fb      	ldrh	r3, [r7, #6]
 8008aee:	f7fa feb9 	bl	8003864 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008af2:	2300      	movs	r3, #0
 8008af4:	613b      	str	r3, [r7, #16]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	613b      	str	r3, [r7, #16]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b1e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	695a      	ldr	r2, [r3, #20]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f042 0201 	orr.w	r2, r2, #1
 8008b2e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695a      	ldr	r2, [r3, #20]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b3e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e000      	b.n	8008b46 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
  }
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	08008d99 	.word	0x08008d99
 8008b54:	08008e01 	.word	0x08008e01
 8008b58:	08008e1d 	.word	0x08008e1d

08008b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10d      	bne.n	8008bae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f003 0320 	and.w	r3, r3, #32
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d008      	beq.n	8008bae <HAL_UART_IRQHandler+0x52>
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	f003 0320 	and.w	r3, r3, #32
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa82 	bl	80090b0 <UART_Receive_IT>
      return;
 8008bac:	e0d1      	b.n	8008d52 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 80b0 	beq.w	8008d16 <HAL_UART_IRQHandler+0x1ba>
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <HAL_UART_IRQHandler+0x70>
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80a5 	beq.w	8008d16 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <HAL_UART_IRQHandler+0x90>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be4:	f043 0201 	orr.w	r2, r3, #1
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <HAL_UART_IRQHandler+0xb0>
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c04:	f043 0202 	orr.w	r2, r3, #2
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00a      	beq.n	8008c2c <HAL_UART_IRQHandler+0xd0>
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c24:	f043 0204 	orr.w	r2, r3, #4
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00f      	beq.n	8008c56 <HAL_UART_IRQHandler+0xfa>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f003 0320 	and.w	r3, r3, #32
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d104      	bne.n	8008c4a <HAL_UART_IRQHandler+0xee>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c4e:	f043 0208 	orr.w	r2, r3, #8
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d078      	beq.n	8008d50 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f003 0320 	and.w	r3, r3, #32
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d007      	beq.n	8008c78 <HAL_UART_IRQHandler+0x11c>
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	f003 0320 	and.w	r3, r3, #32
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d002      	beq.n	8008c78 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa1c 	bl	80090b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c82:	2b40      	cmp	r3, #64	; 0x40
 8008c84:	bf0c      	ite	eq
 8008c86:	2301      	moveq	r3, #1
 8008c88:	2300      	movne	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x144>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d031      	beq.n	8008d04 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f965 	bl	8008f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d123      	bne.n	8008cfc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	695a      	ldr	r2, [r3, #20]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cc2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d013      	beq.n	8008cf4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd0:	4a21      	ldr	r2, [pc, #132]	; (8008d58 <HAL_UART_IRQHandler+0x1fc>)
 8008cd2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fa fe1b 	bl	8003914 <HAL_DMA_Abort_IT>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d016      	beq.n	8008d12 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf2:	e00e      	b.n	8008d12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f845 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfa:	e00a      	b.n	8008d12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f841 	bl	8008d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d02:	e006      	b.n	8008d12 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f83d 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008d10:	e01e      	b.n	8008d50 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d12:	bf00      	nop
    return;
 8008d14:	e01c      	b.n	8008d50 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d008      	beq.n	8008d32 <HAL_UART_IRQHandler+0x1d6>
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f952 	bl	8008fd4 <UART_Transmit_IT>
    return;
 8008d30:	e00f      	b.n	8008d52 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <HAL_UART_IRQHandler+0x1f6>
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f99a 	bl	8009080 <UART_EndTransmit_IT>
    return;
 8008d4c:	bf00      	nop
 8008d4e:	e000      	b.n	8008d52 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008d50:	bf00      	nop
  }
}
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	08008fad 	.word	0x08008fad

08008d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d11e      	bne.n	8008df2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dc8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	695a      	ldr	r2, [r3, #20]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f022 0201 	bic.w	r2, r2, #1
 8008dd8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	695a      	ldr	r2, [r3, #20]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7f8 fe1a 	bl	8001a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008df8:	bf00      	nop
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff ffae 	bl	8008d70 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e14:	bf00      	nop
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e38:	2b80      	cmp	r3, #128	; 0x80
 8008e3a:	bf0c      	ite	eq
 8008e3c:	2301      	moveq	r3, #1
 8008e3e:	2300      	movne	r3, #0
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b21      	cmp	r3, #33	; 0x21
 8008e4e:	d108      	bne.n	8008e62 <UART_DMAError+0x46>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e5c:	68b8      	ldr	r0, [r7, #8]
 8008e5e:	f000 f871 	bl	8008f44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e6c:	2b40      	cmp	r3, #64	; 0x40
 8008e6e:	bf0c      	ite	eq
 8008e70:	2301      	moveq	r3, #1
 8008e72:	2300      	movne	r3, #0
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b22      	cmp	r3, #34	; 0x22
 8008e82:	d108      	bne.n	8008e96 <UART_DMAError+0x7a>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008e90:	68b8      	ldr	r0, [r7, #8]
 8008e92:	f000 f86d 	bl	8008f70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9a:	f043 0210 	orr.w	r2, r3, #16
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ea2:	68b8      	ldr	r0, [r7, #8]
 8008ea4:	f7ff ff6e 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea8:	bf00      	nop
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec0:	e02c      	b.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec8:	d028      	beq.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d007      	beq.n	8008ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ed0:	f7fa fa90 	bl	80033f4 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d21d      	bcs.n	8008f1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008eee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	695a      	ldr	r2, [r3, #20]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0201 	bic.w	r2, r2, #1
 8008efe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e00f      	b.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	4013      	ands	r3, r2
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d0c3      	beq.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008f5a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f86:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	695a      	ldr	r2, [r3, #20]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f7ff fedc 	bl	8008d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b21      	cmp	r3, #33	; 0x21
 8008fe6:	d144      	bne.n	8009072 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff0:	d11a      	bne.n	8009028 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009006:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d105      	bne.n	800901c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	1c9a      	adds	r2, r3, #2
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	621a      	str	r2, [r3, #32]
 800901a:	e00e      	b.n	800903a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	621a      	str	r2, [r3, #32]
 8009026:	e008      	b.n	800903a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a1b      	ldr	r3, [r3, #32]
 800902c:	1c59      	adds	r1, r3, #1
 800902e:	687a      	ldr	r2, [r7, #4]
 8009030:	6211      	str	r1, [r2, #32]
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b01      	subs	r3, #1
 8009042:	b29b      	uxth	r3, r3
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	4619      	mov	r1, r3
 8009048:	84d1      	strh	r1, [r2, #38]	; 0x26
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10f      	bne.n	800906e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800905c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	e000      	b.n	8009074 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009072:	2302      	movs	r3, #2
  }
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009096:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2220      	movs	r2, #32
 800909c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fe5b 	bl	8008d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b22      	cmp	r3, #34	; 0x22
 80090c2:	d171      	bne.n	80091a8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090cc:	d123      	bne.n	8009116 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10e      	bne.n	80090fa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	1c9a      	adds	r2, r3, #2
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	629a      	str	r2, [r3, #40]	; 0x28
 80090f8:	e029      	b.n	800914e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	b29b      	uxth	r3, r3
 8009102:	b2db      	uxtb	r3, r3
 8009104:	b29a      	uxth	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	629a      	str	r2, [r3, #40]	; 0x28
 8009114:	e01b      	b.n	800914e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6858      	ldr	r0, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	1c59      	adds	r1, r3, #1
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6291      	str	r1, [r2, #40]	; 0x28
 800912e:	b2c2      	uxtb	r2, r0
 8009130:	701a      	strb	r2, [r3, #0]
 8009132:	e00c      	b.n	800914e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	b2da      	uxtb	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009140:	1c58      	adds	r0, r3, #1
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	6288      	str	r0, [r1, #40]	; 0x28
 8009146:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009152:	b29b      	uxth	r3, r3
 8009154:	3b01      	subs	r3, #1
 8009156:	b29b      	uxth	r3, r3
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	4619      	mov	r1, r3
 800915c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800915e:	2b00      	cmp	r3, #0
 8009160:	d120      	bne.n	80091a4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0220 	bic.w	r2, r2, #32
 8009170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68da      	ldr	r2, [r3, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	695a      	ldr	r2, [r3, #20]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0201 	bic.w	r2, r2, #1
 8009190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f8 fc46 	bl	8001a2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	e002      	b.n	80091aa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	e000      	b.n	80091aa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80091a8:	2302      	movs	r3, #2
  }
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	430a      	orrs	r2, r1
 80091d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	431a      	orrs	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80091f6:	f023 030c 	bic.w	r3, r3, #12
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6812      	ldr	r2, [r2, #0]
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	430b      	orrs	r3, r1
 8009202:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699a      	ldr	r2, [r3, #24]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	430a      	orrs	r2, r1
 8009218:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009222:	f040 818b 	bne.w	800953c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4ac1      	ldr	r2, [pc, #772]	; (8009530 <UART_SetConfig+0x37c>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d005      	beq.n	800923c <UART_SetConfig+0x88>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4abf      	ldr	r2, [pc, #764]	; (8009534 <UART_SetConfig+0x380>)
 8009236:	4293      	cmp	r3, r2
 8009238:	f040 80bd 	bne.w	80093b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800923c:	f7fd ff1a 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
 8009240:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	461d      	mov	r5, r3
 8009246:	f04f 0600 	mov.w	r6, #0
 800924a:	46a8      	mov	r8, r5
 800924c:	46b1      	mov	r9, r6
 800924e:	eb18 0308 	adds.w	r3, r8, r8
 8009252:	eb49 0409 	adc.w	r4, r9, r9
 8009256:	4698      	mov	r8, r3
 8009258:	46a1      	mov	r9, r4
 800925a:	eb18 0805 	adds.w	r8, r8, r5
 800925e:	eb49 0906 	adc.w	r9, r9, r6
 8009262:	f04f 0100 	mov.w	r1, #0
 8009266:	f04f 0200 	mov.w	r2, #0
 800926a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800926e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009272:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009276:	4688      	mov	r8, r1
 8009278:	4691      	mov	r9, r2
 800927a:	eb18 0005 	adds.w	r0, r8, r5
 800927e:	eb49 0106 	adc.w	r1, r9, r6
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	461d      	mov	r5, r3
 8009288:	f04f 0600 	mov.w	r6, #0
 800928c:	196b      	adds	r3, r5, r5
 800928e:	eb46 0406 	adc.w	r4, r6, r6
 8009292:	461a      	mov	r2, r3
 8009294:	4623      	mov	r3, r4
 8009296:	f7f6 ffab 	bl	80001f0 <__aeabi_uldivmod>
 800929a:	4603      	mov	r3, r0
 800929c:	460c      	mov	r4, r1
 800929e:	461a      	mov	r2, r3
 80092a0:	4ba5      	ldr	r3, [pc, #660]	; (8009538 <UART_SetConfig+0x384>)
 80092a2:	fba3 2302 	umull	r2, r3, r3, r2
 80092a6:	095b      	lsrs	r3, r3, #5
 80092a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	461d      	mov	r5, r3
 80092b0:	f04f 0600 	mov.w	r6, #0
 80092b4:	46a9      	mov	r9, r5
 80092b6:	46b2      	mov	sl, r6
 80092b8:	eb19 0309 	adds.w	r3, r9, r9
 80092bc:	eb4a 040a 	adc.w	r4, sl, sl
 80092c0:	4699      	mov	r9, r3
 80092c2:	46a2      	mov	sl, r4
 80092c4:	eb19 0905 	adds.w	r9, r9, r5
 80092c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80092cc:	f04f 0100 	mov.w	r1, #0
 80092d0:	f04f 0200 	mov.w	r2, #0
 80092d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092e0:	4689      	mov	r9, r1
 80092e2:	4692      	mov	sl, r2
 80092e4:	eb19 0005 	adds.w	r0, r9, r5
 80092e8:	eb4a 0106 	adc.w	r1, sl, r6
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	461d      	mov	r5, r3
 80092f2:	f04f 0600 	mov.w	r6, #0
 80092f6:	196b      	adds	r3, r5, r5
 80092f8:	eb46 0406 	adc.w	r4, r6, r6
 80092fc:	461a      	mov	r2, r3
 80092fe:	4623      	mov	r3, r4
 8009300:	f7f6 ff76 	bl	80001f0 <__aeabi_uldivmod>
 8009304:	4603      	mov	r3, r0
 8009306:	460c      	mov	r4, r1
 8009308:	461a      	mov	r2, r3
 800930a:	4b8b      	ldr	r3, [pc, #556]	; (8009538 <UART_SetConfig+0x384>)
 800930c:	fba3 1302 	umull	r1, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	2164      	movs	r1, #100	; 0x64
 8009314:	fb01 f303 	mul.w	r3, r1, r3
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	3332      	adds	r3, #50	; 0x32
 800931e:	4a86      	ldr	r2, [pc, #536]	; (8009538 <UART_SetConfig+0x384>)
 8009320:	fba2 2303 	umull	r2, r3, r2, r3
 8009324:	095b      	lsrs	r3, r3, #5
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800932c:	4498      	add	r8, r3
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	461d      	mov	r5, r3
 8009332:	f04f 0600 	mov.w	r6, #0
 8009336:	46a9      	mov	r9, r5
 8009338:	46b2      	mov	sl, r6
 800933a:	eb19 0309 	adds.w	r3, r9, r9
 800933e:	eb4a 040a 	adc.w	r4, sl, sl
 8009342:	4699      	mov	r9, r3
 8009344:	46a2      	mov	sl, r4
 8009346:	eb19 0905 	adds.w	r9, r9, r5
 800934a:	eb4a 0a06 	adc.w	sl, sl, r6
 800934e:	f04f 0100 	mov.w	r1, #0
 8009352:	f04f 0200 	mov.w	r2, #0
 8009356:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800935a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800935e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009362:	4689      	mov	r9, r1
 8009364:	4692      	mov	sl, r2
 8009366:	eb19 0005 	adds.w	r0, r9, r5
 800936a:	eb4a 0106 	adc.w	r1, sl, r6
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	461d      	mov	r5, r3
 8009374:	f04f 0600 	mov.w	r6, #0
 8009378:	196b      	adds	r3, r5, r5
 800937a:	eb46 0406 	adc.w	r4, r6, r6
 800937e:	461a      	mov	r2, r3
 8009380:	4623      	mov	r3, r4
 8009382:	f7f6 ff35 	bl	80001f0 <__aeabi_uldivmod>
 8009386:	4603      	mov	r3, r0
 8009388:	460c      	mov	r4, r1
 800938a:	461a      	mov	r2, r3
 800938c:	4b6a      	ldr	r3, [pc, #424]	; (8009538 <UART_SetConfig+0x384>)
 800938e:	fba3 1302 	umull	r1, r3, r3, r2
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	2164      	movs	r1, #100	; 0x64
 8009396:	fb01 f303 	mul.w	r3, r1, r3
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	3332      	adds	r3, #50	; 0x32
 80093a0:	4a65      	ldr	r2, [pc, #404]	; (8009538 <UART_SetConfig+0x384>)
 80093a2:	fba2 2303 	umull	r2, r3, r2, r3
 80093a6:	095b      	lsrs	r3, r3, #5
 80093a8:	f003 0207 	and.w	r2, r3, #7
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4442      	add	r2, r8
 80093b2:	609a      	str	r2, [r3, #8]
 80093b4:	e26f      	b.n	8009896 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093b6:	f7fd fe49 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 80093ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	461d      	mov	r5, r3
 80093c0:	f04f 0600 	mov.w	r6, #0
 80093c4:	46a8      	mov	r8, r5
 80093c6:	46b1      	mov	r9, r6
 80093c8:	eb18 0308 	adds.w	r3, r8, r8
 80093cc:	eb49 0409 	adc.w	r4, r9, r9
 80093d0:	4698      	mov	r8, r3
 80093d2:	46a1      	mov	r9, r4
 80093d4:	eb18 0805 	adds.w	r8, r8, r5
 80093d8:	eb49 0906 	adc.w	r9, r9, r6
 80093dc:	f04f 0100 	mov.w	r1, #0
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80093e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80093ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80093f0:	4688      	mov	r8, r1
 80093f2:	4691      	mov	r9, r2
 80093f4:	eb18 0005 	adds.w	r0, r8, r5
 80093f8:	eb49 0106 	adc.w	r1, r9, r6
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	461d      	mov	r5, r3
 8009402:	f04f 0600 	mov.w	r6, #0
 8009406:	196b      	adds	r3, r5, r5
 8009408:	eb46 0406 	adc.w	r4, r6, r6
 800940c:	461a      	mov	r2, r3
 800940e:	4623      	mov	r3, r4
 8009410:	f7f6 feee 	bl	80001f0 <__aeabi_uldivmod>
 8009414:	4603      	mov	r3, r0
 8009416:	460c      	mov	r4, r1
 8009418:	461a      	mov	r2, r3
 800941a:	4b47      	ldr	r3, [pc, #284]	; (8009538 <UART_SetConfig+0x384>)
 800941c:	fba3 2302 	umull	r2, r3, r3, r2
 8009420:	095b      	lsrs	r3, r3, #5
 8009422:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	461d      	mov	r5, r3
 800942a:	f04f 0600 	mov.w	r6, #0
 800942e:	46a9      	mov	r9, r5
 8009430:	46b2      	mov	sl, r6
 8009432:	eb19 0309 	adds.w	r3, r9, r9
 8009436:	eb4a 040a 	adc.w	r4, sl, sl
 800943a:	4699      	mov	r9, r3
 800943c:	46a2      	mov	sl, r4
 800943e:	eb19 0905 	adds.w	r9, r9, r5
 8009442:	eb4a 0a06 	adc.w	sl, sl, r6
 8009446:	f04f 0100 	mov.w	r1, #0
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800945a:	4689      	mov	r9, r1
 800945c:	4692      	mov	sl, r2
 800945e:	eb19 0005 	adds.w	r0, r9, r5
 8009462:	eb4a 0106 	adc.w	r1, sl, r6
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	461d      	mov	r5, r3
 800946c:	f04f 0600 	mov.w	r6, #0
 8009470:	196b      	adds	r3, r5, r5
 8009472:	eb46 0406 	adc.w	r4, r6, r6
 8009476:	461a      	mov	r2, r3
 8009478:	4623      	mov	r3, r4
 800947a:	f7f6 feb9 	bl	80001f0 <__aeabi_uldivmod>
 800947e:	4603      	mov	r3, r0
 8009480:	460c      	mov	r4, r1
 8009482:	461a      	mov	r2, r3
 8009484:	4b2c      	ldr	r3, [pc, #176]	; (8009538 <UART_SetConfig+0x384>)
 8009486:	fba3 1302 	umull	r1, r3, r3, r2
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	2164      	movs	r1, #100	; 0x64
 800948e:	fb01 f303 	mul.w	r3, r1, r3
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	3332      	adds	r3, #50	; 0x32
 8009498:	4a27      	ldr	r2, [pc, #156]	; (8009538 <UART_SetConfig+0x384>)
 800949a:	fba2 2303 	umull	r2, r3, r2, r3
 800949e:	095b      	lsrs	r3, r3, #5
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094a6:	4498      	add	r8, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	461d      	mov	r5, r3
 80094ac:	f04f 0600 	mov.w	r6, #0
 80094b0:	46a9      	mov	r9, r5
 80094b2:	46b2      	mov	sl, r6
 80094b4:	eb19 0309 	adds.w	r3, r9, r9
 80094b8:	eb4a 040a 	adc.w	r4, sl, sl
 80094bc:	4699      	mov	r9, r3
 80094be:	46a2      	mov	sl, r4
 80094c0:	eb19 0905 	adds.w	r9, r9, r5
 80094c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80094c8:	f04f 0100 	mov.w	r1, #0
 80094cc:	f04f 0200 	mov.w	r2, #0
 80094d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094dc:	4689      	mov	r9, r1
 80094de:	4692      	mov	sl, r2
 80094e0:	eb19 0005 	adds.w	r0, r9, r5
 80094e4:	eb4a 0106 	adc.w	r1, sl, r6
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	461d      	mov	r5, r3
 80094ee:	f04f 0600 	mov.w	r6, #0
 80094f2:	196b      	adds	r3, r5, r5
 80094f4:	eb46 0406 	adc.w	r4, r6, r6
 80094f8:	461a      	mov	r2, r3
 80094fa:	4623      	mov	r3, r4
 80094fc:	f7f6 fe78 	bl	80001f0 <__aeabi_uldivmod>
 8009500:	4603      	mov	r3, r0
 8009502:	460c      	mov	r4, r1
 8009504:	461a      	mov	r2, r3
 8009506:	4b0c      	ldr	r3, [pc, #48]	; (8009538 <UART_SetConfig+0x384>)
 8009508:	fba3 1302 	umull	r1, r3, r3, r2
 800950c:	095b      	lsrs	r3, r3, #5
 800950e:	2164      	movs	r1, #100	; 0x64
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	3332      	adds	r3, #50	; 0x32
 800951a:	4a07      	ldr	r2, [pc, #28]	; (8009538 <UART_SetConfig+0x384>)
 800951c:	fba2 2303 	umull	r2, r3, r2, r3
 8009520:	095b      	lsrs	r3, r3, #5
 8009522:	f003 0207 	and.w	r2, r3, #7
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4442      	add	r2, r8
 800952c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800952e:	e1b2      	b.n	8009896 <UART_SetConfig+0x6e2>
 8009530:	40011000 	.word	0x40011000
 8009534:	40011400 	.word	0x40011400
 8009538:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4ad7      	ldr	r2, [pc, #860]	; (80098a0 <UART_SetConfig+0x6ec>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d005      	beq.n	8009552 <UART_SetConfig+0x39e>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4ad6      	ldr	r2, [pc, #856]	; (80098a4 <UART_SetConfig+0x6f0>)
 800954c:	4293      	cmp	r3, r2
 800954e:	f040 80d1 	bne.w	80096f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009552:	f7fd fd8f 	bl	8007074 <HAL_RCC_GetPCLK2Freq>
 8009556:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	469a      	mov	sl, r3
 800955c:	f04f 0b00 	mov.w	fp, #0
 8009560:	46d0      	mov	r8, sl
 8009562:	46d9      	mov	r9, fp
 8009564:	eb18 0308 	adds.w	r3, r8, r8
 8009568:	eb49 0409 	adc.w	r4, r9, r9
 800956c:	4698      	mov	r8, r3
 800956e:	46a1      	mov	r9, r4
 8009570:	eb18 080a 	adds.w	r8, r8, sl
 8009574:	eb49 090b 	adc.w	r9, r9, fp
 8009578:	f04f 0100 	mov.w	r1, #0
 800957c:	f04f 0200 	mov.w	r2, #0
 8009580:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009584:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009588:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800958c:	4688      	mov	r8, r1
 800958e:	4691      	mov	r9, r2
 8009590:	eb1a 0508 	adds.w	r5, sl, r8
 8009594:	eb4b 0609 	adc.w	r6, fp, r9
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4619      	mov	r1, r3
 800959e:	f04f 0200 	mov.w	r2, #0
 80095a2:	f04f 0300 	mov.w	r3, #0
 80095a6:	f04f 0400 	mov.w	r4, #0
 80095aa:	0094      	lsls	r4, r2, #2
 80095ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095b0:	008b      	lsls	r3, r1, #2
 80095b2:	461a      	mov	r2, r3
 80095b4:	4623      	mov	r3, r4
 80095b6:	4628      	mov	r0, r5
 80095b8:	4631      	mov	r1, r6
 80095ba:	f7f6 fe19 	bl	80001f0 <__aeabi_uldivmod>
 80095be:	4603      	mov	r3, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	461a      	mov	r2, r3
 80095c4:	4bb8      	ldr	r3, [pc, #736]	; (80098a8 <UART_SetConfig+0x6f4>)
 80095c6:	fba3 2302 	umull	r2, r3, r3, r2
 80095ca:	095b      	lsrs	r3, r3, #5
 80095cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	469b      	mov	fp, r3
 80095d4:	f04f 0c00 	mov.w	ip, #0
 80095d8:	46d9      	mov	r9, fp
 80095da:	46e2      	mov	sl, ip
 80095dc:	eb19 0309 	adds.w	r3, r9, r9
 80095e0:	eb4a 040a 	adc.w	r4, sl, sl
 80095e4:	4699      	mov	r9, r3
 80095e6:	46a2      	mov	sl, r4
 80095e8:	eb19 090b 	adds.w	r9, r9, fp
 80095ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80095f0:	f04f 0100 	mov.w	r1, #0
 80095f4:	f04f 0200 	mov.w	r2, #0
 80095f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009600:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009604:	4689      	mov	r9, r1
 8009606:	4692      	mov	sl, r2
 8009608:	eb1b 0509 	adds.w	r5, fp, r9
 800960c:	eb4c 060a 	adc.w	r6, ip, sl
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	4619      	mov	r1, r3
 8009616:	f04f 0200 	mov.w	r2, #0
 800961a:	f04f 0300 	mov.w	r3, #0
 800961e:	f04f 0400 	mov.w	r4, #0
 8009622:	0094      	lsls	r4, r2, #2
 8009624:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009628:	008b      	lsls	r3, r1, #2
 800962a:	461a      	mov	r2, r3
 800962c:	4623      	mov	r3, r4
 800962e:	4628      	mov	r0, r5
 8009630:	4631      	mov	r1, r6
 8009632:	f7f6 fddd 	bl	80001f0 <__aeabi_uldivmod>
 8009636:	4603      	mov	r3, r0
 8009638:	460c      	mov	r4, r1
 800963a:	461a      	mov	r2, r3
 800963c:	4b9a      	ldr	r3, [pc, #616]	; (80098a8 <UART_SetConfig+0x6f4>)
 800963e:	fba3 1302 	umull	r1, r3, r3, r2
 8009642:	095b      	lsrs	r3, r3, #5
 8009644:	2164      	movs	r1, #100	; 0x64
 8009646:	fb01 f303 	mul.w	r3, r1, r3
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	3332      	adds	r3, #50	; 0x32
 8009650:	4a95      	ldr	r2, [pc, #596]	; (80098a8 <UART_SetConfig+0x6f4>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800965c:	4498      	add	r8, r3
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	469b      	mov	fp, r3
 8009662:	f04f 0c00 	mov.w	ip, #0
 8009666:	46d9      	mov	r9, fp
 8009668:	46e2      	mov	sl, ip
 800966a:	eb19 0309 	adds.w	r3, r9, r9
 800966e:	eb4a 040a 	adc.w	r4, sl, sl
 8009672:	4699      	mov	r9, r3
 8009674:	46a2      	mov	sl, r4
 8009676:	eb19 090b 	adds.w	r9, r9, fp
 800967a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800967e:	f04f 0100 	mov.w	r1, #0
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800968a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800968e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009692:	4689      	mov	r9, r1
 8009694:	4692      	mov	sl, r2
 8009696:	eb1b 0509 	adds.w	r5, fp, r9
 800969a:	eb4c 060a 	adc.w	r6, ip, sl
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	4619      	mov	r1, r3
 80096a4:	f04f 0200 	mov.w	r2, #0
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	f04f 0400 	mov.w	r4, #0
 80096b0:	0094      	lsls	r4, r2, #2
 80096b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096b6:	008b      	lsls	r3, r1, #2
 80096b8:	461a      	mov	r2, r3
 80096ba:	4623      	mov	r3, r4
 80096bc:	4628      	mov	r0, r5
 80096be:	4631      	mov	r1, r6
 80096c0:	f7f6 fd96 	bl	80001f0 <__aeabi_uldivmod>
 80096c4:	4603      	mov	r3, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	461a      	mov	r2, r3
 80096ca:	4b77      	ldr	r3, [pc, #476]	; (80098a8 <UART_SetConfig+0x6f4>)
 80096cc:	fba3 1302 	umull	r1, r3, r3, r2
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	2164      	movs	r1, #100	; 0x64
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	011b      	lsls	r3, r3, #4
 80096dc:	3332      	adds	r3, #50	; 0x32
 80096de:	4a72      	ldr	r2, [pc, #456]	; (80098a8 <UART_SetConfig+0x6f4>)
 80096e0:	fba2 2303 	umull	r2, r3, r2, r3
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	f003 020f 	and.w	r2, r3, #15
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4442      	add	r2, r8
 80096f0:	609a      	str	r2, [r3, #8]
 80096f2:	e0d0      	b.n	8009896 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80096f4:	f7fd fcaa 	bl	800704c <HAL_RCC_GetPCLK1Freq>
 80096f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	469a      	mov	sl, r3
 80096fe:	f04f 0b00 	mov.w	fp, #0
 8009702:	46d0      	mov	r8, sl
 8009704:	46d9      	mov	r9, fp
 8009706:	eb18 0308 	adds.w	r3, r8, r8
 800970a:	eb49 0409 	adc.w	r4, r9, r9
 800970e:	4698      	mov	r8, r3
 8009710:	46a1      	mov	r9, r4
 8009712:	eb18 080a 	adds.w	r8, r8, sl
 8009716:	eb49 090b 	adc.w	r9, r9, fp
 800971a:	f04f 0100 	mov.w	r1, #0
 800971e:	f04f 0200 	mov.w	r2, #0
 8009722:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009726:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800972a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800972e:	4688      	mov	r8, r1
 8009730:	4691      	mov	r9, r2
 8009732:	eb1a 0508 	adds.w	r5, sl, r8
 8009736:	eb4b 0609 	adc.w	r6, fp, r9
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	4619      	mov	r1, r3
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	f04f 0400 	mov.w	r4, #0
 800974c:	0094      	lsls	r4, r2, #2
 800974e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009752:	008b      	lsls	r3, r1, #2
 8009754:	461a      	mov	r2, r3
 8009756:	4623      	mov	r3, r4
 8009758:	4628      	mov	r0, r5
 800975a:	4631      	mov	r1, r6
 800975c:	f7f6 fd48 	bl	80001f0 <__aeabi_uldivmod>
 8009760:	4603      	mov	r3, r0
 8009762:	460c      	mov	r4, r1
 8009764:	461a      	mov	r2, r3
 8009766:	4b50      	ldr	r3, [pc, #320]	; (80098a8 <UART_SetConfig+0x6f4>)
 8009768:	fba3 2302 	umull	r2, r3, r3, r2
 800976c:	095b      	lsrs	r3, r3, #5
 800976e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	469b      	mov	fp, r3
 8009776:	f04f 0c00 	mov.w	ip, #0
 800977a:	46d9      	mov	r9, fp
 800977c:	46e2      	mov	sl, ip
 800977e:	eb19 0309 	adds.w	r3, r9, r9
 8009782:	eb4a 040a 	adc.w	r4, sl, sl
 8009786:	4699      	mov	r9, r3
 8009788:	46a2      	mov	sl, r4
 800978a:	eb19 090b 	adds.w	r9, r9, fp
 800978e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009792:	f04f 0100 	mov.w	r1, #0
 8009796:	f04f 0200 	mov.w	r2, #0
 800979a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800979e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097a6:	4689      	mov	r9, r1
 80097a8:	4692      	mov	sl, r2
 80097aa:	eb1b 0509 	adds.w	r5, fp, r9
 80097ae:	eb4c 060a 	adc.w	r6, ip, sl
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	4619      	mov	r1, r3
 80097b8:	f04f 0200 	mov.w	r2, #0
 80097bc:	f04f 0300 	mov.w	r3, #0
 80097c0:	f04f 0400 	mov.w	r4, #0
 80097c4:	0094      	lsls	r4, r2, #2
 80097c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097ca:	008b      	lsls	r3, r1, #2
 80097cc:	461a      	mov	r2, r3
 80097ce:	4623      	mov	r3, r4
 80097d0:	4628      	mov	r0, r5
 80097d2:	4631      	mov	r1, r6
 80097d4:	f7f6 fd0c 	bl	80001f0 <__aeabi_uldivmod>
 80097d8:	4603      	mov	r3, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	461a      	mov	r2, r3
 80097de:	4b32      	ldr	r3, [pc, #200]	; (80098a8 <UART_SetConfig+0x6f4>)
 80097e0:	fba3 1302 	umull	r1, r3, r3, r2
 80097e4:	095b      	lsrs	r3, r3, #5
 80097e6:	2164      	movs	r1, #100	; 0x64
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	011b      	lsls	r3, r3, #4
 80097f0:	3332      	adds	r3, #50	; 0x32
 80097f2:	4a2d      	ldr	r2, [pc, #180]	; (80098a8 <UART_SetConfig+0x6f4>)
 80097f4:	fba2 2303 	umull	r2, r3, r2, r3
 80097f8:	095b      	lsrs	r3, r3, #5
 80097fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097fe:	4498      	add	r8, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	469b      	mov	fp, r3
 8009804:	f04f 0c00 	mov.w	ip, #0
 8009808:	46d9      	mov	r9, fp
 800980a:	46e2      	mov	sl, ip
 800980c:	eb19 0309 	adds.w	r3, r9, r9
 8009810:	eb4a 040a 	adc.w	r4, sl, sl
 8009814:	4699      	mov	r9, r3
 8009816:	46a2      	mov	sl, r4
 8009818:	eb19 090b 	adds.w	r9, r9, fp
 800981c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009820:	f04f 0100 	mov.w	r1, #0
 8009824:	f04f 0200 	mov.w	r2, #0
 8009828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800982c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009830:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009834:	4689      	mov	r9, r1
 8009836:	4692      	mov	sl, r2
 8009838:	eb1b 0509 	adds.w	r5, fp, r9
 800983c:	eb4c 060a 	adc.w	r6, ip, sl
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	4619      	mov	r1, r3
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	f04f 0300 	mov.w	r3, #0
 800984e:	f04f 0400 	mov.w	r4, #0
 8009852:	0094      	lsls	r4, r2, #2
 8009854:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009858:	008b      	lsls	r3, r1, #2
 800985a:	461a      	mov	r2, r3
 800985c:	4623      	mov	r3, r4
 800985e:	4628      	mov	r0, r5
 8009860:	4631      	mov	r1, r6
 8009862:	f7f6 fcc5 	bl	80001f0 <__aeabi_uldivmod>
 8009866:	4603      	mov	r3, r0
 8009868:	460c      	mov	r4, r1
 800986a:	461a      	mov	r2, r3
 800986c:	4b0e      	ldr	r3, [pc, #56]	; (80098a8 <UART_SetConfig+0x6f4>)
 800986e:	fba3 1302 	umull	r1, r3, r3, r2
 8009872:	095b      	lsrs	r3, r3, #5
 8009874:	2164      	movs	r1, #100	; 0x64
 8009876:	fb01 f303 	mul.w	r3, r1, r3
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	3332      	adds	r3, #50	; 0x32
 8009880:	4a09      	ldr	r2, [pc, #36]	; (80098a8 <UART_SetConfig+0x6f4>)
 8009882:	fba2 2303 	umull	r2, r3, r2, r3
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	f003 020f 	and.w	r2, r3, #15
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4442      	add	r2, r8
 8009892:	609a      	str	r2, [r3, #8]
}
 8009894:	e7ff      	b.n	8009896 <UART_SetConfig+0x6e2>
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	40011000 	.word	0x40011000
 80098a4:	40011400 	.word	0x40011400
 80098a8:	51eb851f 	.word	0x51eb851f

080098ac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d029      	beq.n	800991a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80098d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098d6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80098e0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80098e6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80098ec:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80098f2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80098f8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80098fe:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009904:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800990a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	e034      	b.n	8009984 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009926:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009930:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009936:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4313      	orrs	r3, r2
 800993c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800994a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800994e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009958:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800995e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009964:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800996a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009970:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	4313      	orrs	r3, r2
 8009976:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009992:	b480      	push	{r7}
 8009994:	b087      	sub	sp, #28
 8009996:	af00      	add	r7, sp, #0
 8009998:	60f8      	str	r0, [r7, #12]
 800999a:	60b9      	str	r1, [r7, #8]
 800999c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d02e      	beq.n	8009a0a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80099b8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099c8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80099d2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	3b01      	subs	r3, #1
 80099da:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80099dc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80099e6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80099f0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80099fa:	4313      	orrs	r3, r2
 80099fc:	697a      	ldr	r2, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	609a      	str	r2, [r3, #8]
 8009a08:	e03b      	b.n	8009a82 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a1a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a40:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a50:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a5a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009a64:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	371c      	adds	r7, #28
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009aac:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009ab6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009ac8:	f7f9 fc94 	bl	80033f4 <HAL_GetTick>
 8009acc:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009ace:	e010      	b.n	8009af2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad6:	d00c      	beq.n	8009af2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d007      	beq.n	8009aee <FMC_SDRAM_SendCommand+0x5e>
 8009ade:	f7f9 fc89 	bl	80033f4 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d201      	bcs.n	8009af2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e006      	b.n	8009b00 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	f003 0320 	and.w	r3, r3, #32
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	d0e8      	beq.n	8009ad0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	695a      	ldr	r2, [r3, #20]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr

08009b2e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b2e:	b480      	push	{r7}
 8009b30:	b083      	sub	sp, #12
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f043 0201 	orr.w	r2, r3, #1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	f023 0201 	bic.w	r2, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
	...

08009b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	019b      	lsls	r3, r3, #6
 8009b86:	f043 0220 	orr.w	r2, r3, #32
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3301      	adds	r3, #1
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4a09      	ldr	r2, [pc, #36]	; (8009bbc <USB_FlushTxFifo+0x48>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d901      	bls.n	8009ba0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e006      	b.n	8009bae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	f003 0320 	and.w	r3, r3, #32
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d0f0      	beq.n	8009b8e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	00030d40 	.word	0x00030d40

08009bc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2210      	movs	r2, #16
 8009bd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4a09      	ldr	r2, [pc, #36]	; (8009c00 <USB_FlushRxFifo+0x40>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d901      	bls.n	8009be4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e006      	b.n	8009bf2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	f003 0310 	and.w	r3, r3, #16
 8009bec:	2b10      	cmp	r3, #16
 8009bee:	d0f0      	beq.n	8009bd2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	00030d40 	.word	0x00030d40

08009c04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b089      	sub	sp, #36	; 0x24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	3303      	adds	r3, #3
 8009c1e:	089b      	lsrs	r3, r3, #2
 8009c20:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009c22:	2300      	movs	r3, #0
 8009c24:	61bb      	str	r3, [r7, #24]
 8009c26:	e00b      	b.n	8009c40 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	601a      	str	r2, [r3, #0]
    pDest++;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	3304      	adds	r3, #4
 8009c38:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	61bb      	str	r3, [r7, #24]
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d3ef      	bcc.n	8009c28 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009c48:	69fb      	ldr	r3, [r7, #28]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3724      	adds	r7, #36	; 0x24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b085      	sub	sp, #20
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	699b      	ldr	r3, [r3, #24]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	695b      	ldr	r3, [r3, #20]
 8009c88:	f003 0301 	and.w	r3, r3, #1
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d107      	bne.n	8009cea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009ce6:	6053      	str	r3, [r2, #4]
 8009ce8:	e009      	b.n	8009cfe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d106      	bne.n	8009cfe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	f241 7370 	movw	r3, #6000	; 0x1770
 8009cfc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	b29b      	uxth	r3, r3
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b087      	sub	sp, #28
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	015a      	lsls	r2, r3, #5
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	0c9b      	lsrs	r3, r3, #18
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <USB_HC_Halt+0x3a>
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d16c      	bne.n	8009e42 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d86:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d143      	bne.n	8009e1c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009db2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	0151      	lsls	r1, r2, #5
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	440a      	add	r2, r1
 8009dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dd2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	0151      	lsls	r1, r2, #5
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	440a      	add	r2, r1
 8009dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009dee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009df2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	3301      	adds	r3, #1
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e00:	d81d      	bhi.n	8009e3e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e18:	d0ec      	beq.n	8009df4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009e1a:	e080      	b.n	8009f1e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009e3a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009e3c:	e06f      	b.n	8009f1e <USB_HC_Halt+0x1f0>
          break;
 8009e3e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009e40:	e06d      	b.n	8009f1e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	0151      	lsls	r1, r2, #5
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	440a      	add	r2, r1
 8009e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e60:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d143      	bne.n	8009efa <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e90:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	0151      	lsls	r1, r2, #5
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009eb0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ecc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ed0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ede:	d81d      	bhi.n	8009f1c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ef6:	d0ec      	beq.n	8009ed2 <USB_HC_Halt+0x1a4>
 8009ef8:	e011      	b.n	8009f1e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	0151      	lsls	r1, r2, #5
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	440a      	add	r2, r1
 8009f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	e000      	b.n	8009f1e <USB_HC_Halt+0x1f0>
          break;
 8009f1c:	bf00      	nop
    }
  }

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	371c      	adds	r7, #28
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f7ff fe07 	bl	8009b50 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009f42:	2110      	movs	r1, #16
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff fe15 	bl	8009b74 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7ff fe38 	bl	8009bc0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009f50:	2300      	movs	r3, #0
 8009f52:	613b      	str	r3, [r7, #16]
 8009f54:	e01f      	b.n	8009f96 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f6c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f7c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	015a      	lsls	r2, r3, #5
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	4413      	add	r3, r2
 8009f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	3301      	adds	r3, #1
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	2b0f      	cmp	r3, #15
 8009f9a:	d9dc      	bls.n	8009f56 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	613b      	str	r3, [r7, #16]
 8009fa0:	e034      	b.n	800a00c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	015a      	lsls	r2, r3, #5
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fb8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fc0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fc8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	015a      	lsls	r2, r3, #5
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	617b      	str	r3, [r7, #20]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fe8:	d80c      	bhi.n	800a004 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a000:	d0ec      	beq.n	8009fdc <USB_StopHost+0xb0>
 800a002:	e000      	b.n	800a006 <USB_StopHost+0xda>
        break;
 800a004:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3301      	adds	r3, #1
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b0f      	cmp	r3, #15
 800a010:	d9c7      	bls.n	8009fa2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a018:	461a      	mov	r2, r3
 800a01a:	f04f 33ff 	mov.w	r3, #4294967295
 800a01e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f04f 32ff 	mov.w	r2, #4294967295
 800a026:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7ff fd80 	bl	8009b2e <USB_EnableGlobalInt>

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3718      	adds	r7, #24
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a046:	1c5a      	adds	r2, r3, #1
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f804 	bl	800a05c <USBH_HandleSof>
}
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b0b      	cmp	r3, #11
 800a06c:	d10a      	bne.n	800a084 <USBH_HandleSof+0x28>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a074:	2b00      	cmp	r3, #0
 800a076:	d005      	beq.n	800a084 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a07e:	699b      	ldr	r3, [r3, #24]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
  }
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f000 f8ae 	bl	800a214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a0b8:	bf00      	nop
}
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a0d0:	bf00      	nop
}
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a110:	2200      	movs	r2, #0
 800a112:	4619      	mov	r1, r3
 800a114:	f000 f87e 	bl	800a214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f001 f8fe 	bl	800b344 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	791b      	ldrb	r3, [r3, #4]
 800a14c:	4619      	mov	r1, r3
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f830 	bl	800a1b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	795b      	ldrb	r3, [r3, #5]
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f82a 	bl	800a1b4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a174:	2200      	movs	r2, #0
 800a176:	4619      	mov	r1, r3
 800a178:	f000 f84c 	bl	800a214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	f000 f835 	bl	800a214 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800a1aa:	2300      	movs	r3, #0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	460b      	mov	r3, r1
 800a1be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	2b0a      	cmp	r3, #10
 800a1c4:	d80d      	bhi.n	800a1e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a1c6:	78fb      	ldrb	r3, [r7, #3]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	33e0      	adds	r3, #224	; 0xe0
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	78fb      	ldrb	r3, [r7, #3]
 800a1d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a1d8:	6879      	ldr	r1, [r7, #4]
 800a1da:	33e0      	adds	r3, #224	; 0xe0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	440b      	add	r3, r1
 800a1e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a1e2:	2300      	movs	r3, #0
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1f6:	f3ef 8305 	mrs	r3, IPSR
 800a1fa:	607b      	str	r3, [r7, #4]
  return(result);
 800a1fc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	bf14      	ite	ne
 800a202:	2301      	movne	r3, #1
 800a204:	2300      	moveq	r3, #0
 800a206:	b2db      	uxtb	r3, r3
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a220:	2300      	movs	r3, #0
 800a222:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <osMessagePut+0x1e>
    ticks = 1;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a232:	f7ff ffdd 	bl	800a1f0 <inHandlerMode>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d018      	beq.n	800a26e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a23c:	f107 0210 	add.w	r2, r7, #16
 800a240:	f107 0108 	add.w	r1, r7, #8
 800a244:	2300      	movs	r3, #0
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f9a6 	bl	800a598 <xQueueGenericSendFromISR>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d001      	beq.n	800a256 <osMessagePut+0x42>
      return osErrorOS;
 800a252:	23ff      	movs	r3, #255	; 0xff
 800a254:	e018      	b.n	800a288 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d014      	beq.n	800a286 <osMessagePut+0x72>
 800a25c:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <osMessagePut+0x7c>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	e00b      	b.n	800a286 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a26e:	f107 0108 	add.w	r1, r7, #8
 800a272:	2300      	movs	r3, #0
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f894 	bl	800a3a4 <xQueueGenericSend>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d001      	beq.n	800a286 <osMessagePut+0x72>
      return osErrorOS;
 800a282:	23ff      	movs	r3, #255	; 0xff
 800a284:	e000      	b.n	800a288 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	e000ed04 	.word	0xe000ed04

0800a294 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	601a      	str	r2, [r3, #0]
}
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f2:	d103      	bne.n	800a2fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	60fb      	str	r3, [r7, #12]
 800a2fa:	e00c      	b.n	800a316 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3308      	adds	r3, #8
 800a300:	60fb      	str	r3, [r7, #12]
 800a302:	e002      	b.n	800a30a <vListInsert+0x2e>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	60fb      	str	r3, [r7, #12]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	429a      	cmp	r2, r3
 800a314:	d2f6      	bcs.n	800a304 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	601a      	str	r2, [r3, #0]
}
 800a342:	bf00      	nop
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a34e:	b480      	push	{r7}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6892      	ldr	r2, [r2, #8]
 800a364:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	6852      	ldr	r2, [r2, #4]
 800a36e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	429a      	cmp	r2, r3
 800a378:	d103      	bne.n	800a382 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
	...

0800a3a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08e      	sub	sp, #56	; 0x38
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d109      	bne.n	800a3d4 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3d2:	e7fe      	b.n	800a3d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d103      	bne.n	800a3e2 <xQueueGenericSend+0x3e>
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d101      	bne.n	800a3e6 <xQueueGenericSend+0x42>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e000      	b.n	800a3e8 <xQueueGenericSend+0x44>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d109      	bne.n	800a400 <xQueueGenericSend+0x5c>
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fe:	e7fe      	b.n	800a3fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d103      	bne.n	800a40e <xQueueGenericSend+0x6a>
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d101      	bne.n	800a412 <xQueueGenericSend+0x6e>
 800a40e:	2301      	movs	r3, #1
 800a410:	e000      	b.n	800a414 <xQueueGenericSend+0x70>
 800a412:	2300      	movs	r3, #0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d109      	bne.n	800a42c <xQueueGenericSend+0x88>
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	623b      	str	r3, [r7, #32]
 800a42a:	e7fe      	b.n	800a42a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a42c:	f000 fd26 	bl	800ae7c <xTaskGetSchedulerState>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <xQueueGenericSend+0x98>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <xQueueGenericSend+0x9c>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <xQueueGenericSend+0x9e>
 800a440:	2300      	movs	r3, #0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <xQueueGenericSend+0xb6>
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	61fb      	str	r3, [r7, #28]
 800a458:	e7fe      	b.n	800a458 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a45a:	f000 fe2d 	bl	800b0b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a466:	429a      	cmp	r2, r3
 800a468:	d302      	bcc.n	800a470 <xQueueGenericSend+0xcc>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d129      	bne.n	800a4c4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	68b9      	ldr	r1, [r7, #8]
 800a474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a476:	f000 f923 	bl	800a6c0 <prvCopyDataToQueue>
 800a47a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d010      	beq.n	800a4a6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	4618      	mov	r0, r3
 800a48a:	f000 fbf3 	bl	800ac74 <xTaskRemoveFromEventList>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d013      	beq.n	800a4bc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a494:	4b3f      	ldr	r3, [pc, #252]	; (800a594 <xQueueGenericSend+0x1f0>)
 800a496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	e00a      	b.n	800a4bc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d007      	beq.n	800a4bc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4ac:	4b39      	ldr	r3, [pc, #228]	; (800a594 <xQueueGenericSend+0x1f0>)
 800a4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a4bc:	f000 fe2a 	bl	800b114 <vPortExitCritical>
				return pdPASS;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e063      	b.n	800a58c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d103      	bne.n	800a4d2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4ca:	f000 fe23 	bl	800b114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e05c      	b.n	800a58c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4d8:	f107 0314 	add.w	r3, r7, #20
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fc2b 	bl	800ad38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4e6:	f000 fe15 	bl	800b114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4ea:	f000 f9bd 	bl	800a868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4ee:	f000 fde3 	bl	800b0b8 <vPortEnterCritical>
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f8:	b25b      	sxtb	r3, r3
 800a4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fe:	d103      	bne.n	800a508 <xQueueGenericSend+0x164>
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a50e:	b25b      	sxtb	r3, r3
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a514:	d103      	bne.n	800a51e <xQueueGenericSend+0x17a>
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a51e:	f000 fdf9 	bl	800b114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a522:	1d3a      	adds	r2, r7, #4
 800a524:	f107 0314 	add.w	r3, r7, #20
 800a528:	4611      	mov	r1, r2
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fc1a 	bl	800ad64 <xTaskCheckForTimeOut>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d124      	bne.n	800a580 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a536:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a538:	f000 f97e 	bl	800a838 <prvIsQueueFull>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d018      	beq.n	800a574 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	3310      	adds	r3, #16
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fb6e 	bl	800ac2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a552:	f000 f91f 	bl	800a794 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a556:	f000 f995 	bl	800a884 <xTaskResumeAll>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f47f af7c 	bne.w	800a45a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a562:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <xQueueGenericSend+0x1f0>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	e772      	b.n	800a45a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a576:	f000 f90d 	bl	800a794 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a57a:	f000 f983 	bl	800a884 <xTaskResumeAll>
 800a57e:	e76c      	b.n	800a45a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a582:	f000 f907 	bl	800a794 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a586:	f000 f97d 	bl	800a884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a58a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3738      	adds	r7, #56	; 0x38
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	e000ed04 	.word	0xe000ed04

0800a598 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08e      	sub	sp, #56	; 0x38
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <xQueueGenericSendFromISR+0x2c>
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c2:	e7fe      	b.n	800a5c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <xQueueGenericSendFromISR+0x3a>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <xQueueGenericSendFromISR+0x3e>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <xQueueGenericSendFromISR+0x40>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d109      	bne.n	800a5f0 <xQueueGenericSendFromISR+0x58>
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	623b      	str	r3, [r7, #32]
 800a5ee:	e7fe      	b.n	800a5ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSendFromISR+0x66>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d101      	bne.n	800a602 <xQueueGenericSendFromISR+0x6a>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e000      	b.n	800a604 <xQueueGenericSendFromISR+0x6c>
 800a602:	2300      	movs	r3, #0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <xQueueGenericSendFromISR+0x84>
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	61fb      	str	r3, [r7, #28]
 800a61a:	e7fe      	b.n	800a61a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a61c:	f000 fdfc 	bl	800b218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a620:	f3ef 8211 	mrs	r2, BASEPRI
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	61ba      	str	r2, [r7, #24]
 800a636:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a638:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a63a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a644:	429a      	cmp	r2, r3
 800a646:	d302      	bcc.n	800a64e <xQueueGenericSendFromISR+0xb6>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d12c      	bne.n	800a6a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a65e:	f000 f82f 	bl	800a6c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a662:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66a:	d112      	bne.n	800a692 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	d016      	beq.n	800a6a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	3324      	adds	r3, #36	; 0x24
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fafb 	bl	800ac74 <xTaskRemoveFromEventList>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00e      	beq.n	800a6a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00b      	beq.n	800a6a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2201      	movs	r2, #1
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	e007      	b.n	800a6a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a696:	3301      	adds	r3, #1
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	b25a      	sxtb	r2, r3
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a6a6:	e001      	b.n	800a6ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3738      	adds	r7, #56	; 0x38
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10d      	bne.n	800a6fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d14d      	bne.n	800a782 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fbe4 	bl	800aeb8 <xTaskPriorityDisinherit>
 800a6f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	609a      	str	r2, [r3, #8]
 800a6f8:	e043      	b.n	800a782 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d119      	bne.n	800a734 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6858      	ldr	r0, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a708:	461a      	mov	r2, r3
 800a70a:	68b9      	ldr	r1, [r7, #8]
 800a70c:	f000 fe8c 	bl	800b428 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a718:	441a      	add	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	429a      	cmp	r2, r3
 800a728:	d32b      	bcc.n	800a782 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	e026      	b.n	800a782 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68d8      	ldr	r0, [r3, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	461a      	mov	r2, r3
 800a73e:	68b9      	ldr	r1, [r7, #8]
 800a740:	f000 fe72 	bl	800b428 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74c:	425b      	negs	r3, r3
 800a74e:	441a      	add	r2, r3
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d207      	bcs.n	800a770 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	689a      	ldr	r2, [r3, #8]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a768:	425b      	negs	r3, r3
 800a76a:	441a      	add	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d105      	bne.n	800a782 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	3b01      	subs	r3, #1
 800a780:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a78a:	697b      	ldr	r3, [r7, #20]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a79c:	f000 fc8c 	bl	800b0b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7a8:	e011      	b.n	800a7ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d012      	beq.n	800a7d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3324      	adds	r3, #36	; 0x24
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fa5c 	bl	800ac74 <xTaskRemoveFromEventList>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7c2:	f000 fb2f 	bl	800ae24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dce9      	bgt.n	800a7aa <prvUnlockQueue+0x16>
 800a7d6:	e000      	b.n	800a7da <prvUnlockQueue+0x46>
					break;
 800a7d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	22ff      	movs	r2, #255	; 0xff
 800a7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a7e2:	f000 fc97 	bl	800b114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a7e6:	f000 fc67 	bl	800b0b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7f2:	e011      	b.n	800a818 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d012      	beq.n	800a822 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3310      	adds	r3, #16
 800a800:	4618      	mov	r0, r3
 800a802:	f000 fa37 	bl	800ac74 <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a80c:	f000 fb0a 	bl	800ae24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	3b01      	subs	r3, #1
 800a814:	b2db      	uxtb	r3, r3
 800a816:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dce9      	bgt.n	800a7f4 <prvUnlockQueue+0x60>
 800a820:	e000      	b.n	800a824 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a822:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	22ff      	movs	r2, #255	; 0xff
 800a828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a82c:	f000 fc72 	bl	800b114 <vPortExitCritical>
}
 800a830:	bf00      	nop
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a840:	f000 fc3a 	bl	800b0b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d102      	bne.n	800a856 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a850:	2301      	movs	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	e001      	b.n	800a85a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a85a:	f000 fc5b 	bl	800b114 <vPortExitCritical>

	return xReturn;
 800a85e:	68fb      	ldr	r3, [r7, #12]
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a86c:	4b04      	ldr	r3, [pc, #16]	; (800a880 <vTaskSuspendAll+0x18>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	3301      	adds	r3, #1
 800a872:	4a03      	ldr	r2, [pc, #12]	; (800a880 <vTaskSuspendAll+0x18>)
 800a874:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a876:	bf00      	nop
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	2000036c 	.word	0x2000036c

0800a884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a892:	4b41      	ldr	r3, [pc, #260]	; (800a998 <xTaskResumeAll+0x114>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d109      	bne.n	800a8ae <xTaskResumeAll+0x2a>
	__asm volatile
 800a89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	603b      	str	r3, [r7, #0]
 800a8ac:	e7fe      	b.n	800a8ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8ae:	f000 fc03 	bl	800b0b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8b2:	4b39      	ldr	r3, [pc, #228]	; (800a998 <xTaskResumeAll+0x114>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	4a37      	ldr	r2, [pc, #220]	; (800a998 <xTaskResumeAll+0x114>)
 800a8ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8bc:	4b36      	ldr	r3, [pc, #216]	; (800a998 <xTaskResumeAll+0x114>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d161      	bne.n	800a988 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8c4:	4b35      	ldr	r3, [pc, #212]	; (800a99c <xTaskResumeAll+0x118>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d05d      	beq.n	800a988 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8cc:	e02e      	b.n	800a92c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ce:	4b34      	ldr	r3, [pc, #208]	; (800a9a0 <xTaskResumeAll+0x11c>)
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3318      	adds	r3, #24
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff fd37 	bl	800a34e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7ff fd32 	bl	800a34e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	409a      	lsls	r2, r3
 800a8f2:	4b2c      	ldr	r3, [pc, #176]	; (800a9a4 <xTaskResumeAll+0x120>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	4a2a      	ldr	r2, [pc, #168]	; (800a9a4 <xTaskResumeAll+0x120>)
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4a27      	ldr	r2, [pc, #156]	; (800a9a8 <xTaskResumeAll+0x124>)
 800a90a:	441a      	add	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3304      	adds	r3, #4
 800a910:	4619      	mov	r1, r3
 800a912:	4610      	mov	r0, r2
 800a914:	f7ff fcbe 	bl	800a294 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91c:	4b23      	ldr	r3, [pc, #140]	; (800a9ac <xTaskResumeAll+0x128>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a926:	4b22      	ldr	r3, [pc, #136]	; (800a9b0 <xTaskResumeAll+0x12c>)
 800a928:	2201      	movs	r2, #1
 800a92a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a92c:	4b1c      	ldr	r3, [pc, #112]	; (800a9a0 <xTaskResumeAll+0x11c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1cc      	bne.n	800a8ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a93a:	f000 fa7f 	bl	800ae3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a93e:	4b1d      	ldr	r3, [pc, #116]	; (800a9b4 <xTaskResumeAll+0x130>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d010      	beq.n	800a96c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a94a:	f000 f837 	bl	800a9bc <xTaskIncrementTick>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a954:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <xTaskResumeAll+0x12c>)
 800a956:	2201      	movs	r2, #1
 800a958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f1      	bne.n	800a94a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a966:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <xTaskResumeAll+0x130>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <xTaskResumeAll+0x12c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a974:	2301      	movs	r3, #1
 800a976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a978:	4b0f      	ldr	r3, [pc, #60]	; (800a9b8 <xTaskResumeAll+0x134>)
 800a97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a988:	f000 fbc4 	bl	800b114 <vPortExitCritical>

	return xAlreadyYielded;
 800a98c:	68bb      	ldr	r3, [r7, #8]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	2000036c 	.word	0x2000036c
 800a99c:	2000034c 	.word	0x2000034c
 800a9a0:	20000324 	.word	0x20000324
 800a9a4:	20000354 	.word	0x20000354
 800a9a8:	20000290 	.word	0x20000290
 800a9ac:	2000028c 	.word	0x2000028c
 800a9b0:	20000360 	.word	0x20000360
 800a9b4:	2000035c 	.word	0x2000035c
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9c6:	4b4e      	ldr	r3, [pc, #312]	; (800ab00 <xTaskIncrementTick+0x144>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f040 8087 	bne.w	800aade <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9d0:	4b4c      	ldr	r3, [pc, #304]	; (800ab04 <xTaskIncrementTick+0x148>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9d8:	4a4a      	ldr	r2, [pc, #296]	; (800ab04 <xTaskIncrementTick+0x148>)
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d11f      	bne.n	800aa24 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9e4:	4b48      	ldr	r3, [pc, #288]	; (800ab08 <xTaskIncrementTick+0x14c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d009      	beq.n	800aa02 <xTaskIncrementTick+0x46>
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	e7fe      	b.n	800aa00 <xTaskIncrementTick+0x44>
 800aa02:	4b41      	ldr	r3, [pc, #260]	; (800ab08 <xTaskIncrementTick+0x14c>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	4b40      	ldr	r3, [pc, #256]	; (800ab0c <xTaskIncrementTick+0x150>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a3e      	ldr	r2, [pc, #248]	; (800ab08 <xTaskIncrementTick+0x14c>)
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	4a3e      	ldr	r2, [pc, #248]	; (800ab0c <xTaskIncrementTick+0x150>)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	4b3e      	ldr	r3, [pc, #248]	; (800ab10 <xTaskIncrementTick+0x154>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	4a3c      	ldr	r2, [pc, #240]	; (800ab10 <xTaskIncrementTick+0x154>)
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	f000 fa0c 	bl	800ae3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa24:	4b3b      	ldr	r3, [pc, #236]	; (800ab14 <xTaskIncrementTick+0x158>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d348      	bcc.n	800aac0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa2e:	4b36      	ldr	r3, [pc, #216]	; (800ab08 <xTaskIncrementTick+0x14c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa38:	4b36      	ldr	r3, [pc, #216]	; (800ab14 <xTaskIncrementTick+0x158>)
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	601a      	str	r2, [r3, #0]
					break;
 800aa40:	e03e      	b.n	800aac0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa42:	4b31      	ldr	r3, [pc, #196]	; (800ab08 <xTaskIncrementTick+0x14c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d203      	bcs.n	800aa62 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa5a:	4a2e      	ldr	r2, [pc, #184]	; (800ab14 <xTaskIncrementTick+0x158>)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa60:	e02e      	b.n	800aac0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	3304      	adds	r3, #4
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff fc71 	bl	800a34e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d004      	beq.n	800aa7e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	3318      	adds	r3, #24
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7ff fc68 	bl	800a34e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa82:	2201      	movs	r2, #1
 800aa84:	409a      	lsls	r2, r3
 800aa86:	4b24      	ldr	r3, [pc, #144]	; (800ab18 <xTaskIncrementTick+0x15c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	4a22      	ldr	r2, [pc, #136]	; (800ab18 <xTaskIncrementTick+0x15c>)
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4a1f      	ldr	r2, [pc, #124]	; (800ab1c <xTaskIncrementTick+0x160>)
 800aa9e:	441a      	add	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7ff fbf4 	bl	800a294 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab0:	4b1b      	ldr	r3, [pc, #108]	; (800ab20 <xTaskIncrementTick+0x164>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d3b9      	bcc.n	800aa2e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aabe:	e7b6      	b.n	800aa2e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aac0:	4b17      	ldr	r3, [pc, #92]	; (800ab20 <xTaskIncrementTick+0x164>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac6:	4915      	ldr	r1, [pc, #84]	; (800ab1c <xTaskIncrementTick+0x160>)
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	440b      	add	r3, r1
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d907      	bls.n	800aae8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800aad8:	2301      	movs	r3, #1
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	e004      	b.n	800aae8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aade:	4b11      	ldr	r3, [pc, #68]	; (800ab24 <xTaskIncrementTick+0x168>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	4a0f      	ldr	r2, [pc, #60]	; (800ab24 <xTaskIncrementTick+0x168>)
 800aae6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aae8:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <xTaskIncrementTick+0x16c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aaf4:	697b      	ldr	r3, [r7, #20]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	2000036c 	.word	0x2000036c
 800ab04:	20000350 	.word	0x20000350
 800ab08:	2000031c 	.word	0x2000031c
 800ab0c:	20000320 	.word	0x20000320
 800ab10:	20000364 	.word	0x20000364
 800ab14:	20000368 	.word	0x20000368
 800ab18:	20000354 	.word	0x20000354
 800ab1c:	20000290 	.word	0x20000290
 800ab20:	2000028c 	.word	0x2000028c
 800ab24:	2000035c 	.word	0x2000035c
 800ab28:	20000360 	.word	0x20000360

0800ab2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b088      	sub	sp, #32
 800ab30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab32:	4b39      	ldr	r3, [pc, #228]	; (800ac18 <vTaskSwitchContext+0xec>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab3a:	4b38      	ldr	r3, [pc, #224]	; (800ac1c <vTaskSwitchContext+0xf0>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab40:	e065      	b.n	800ac0e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800ab42:	4b36      	ldr	r3, [pc, #216]	; (800ac1c <vTaskSwitchContext+0xf0>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ab48:	4b35      	ldr	r3, [pc, #212]	; (800ac20 <vTaskSwitchContext+0xf4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	61fb      	str	r3, [r7, #28]
 800ab50:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ab54:	61bb      	str	r3, [r7, #24]
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d111      	bne.n	800ab84 <vTaskSwitchContext+0x58>
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	3304      	adds	r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d10b      	bne.n	800ab84 <vTaskSwitchContext+0x58>
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d105      	bne.n	800ab84 <vTaskSwitchContext+0x58>
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	330c      	adds	r3, #12
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d008      	beq.n	800ab96 <vTaskSwitchContext+0x6a>
 800ab84:	4b26      	ldr	r3, [pc, #152]	; (800ac20 <vTaskSwitchContext+0xf4>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	4b25      	ldr	r3, [pc, #148]	; (800ac20 <vTaskSwitchContext+0xf4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3334      	adds	r3, #52	; 0x34
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4610      	mov	r0, r2
 800ab92:	f7f6 fbc5 	bl	8001320 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab96:	4b23      	ldr	r3, [pc, #140]	; (800ac24 <vTaskSwitchContext+0xf8>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	fab3 f383 	clz	r3, r3
 800aba2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	f1c3 031f 	rsb	r3, r3, #31
 800abaa:	617b      	str	r3, [r7, #20]
 800abac:	491e      	ldr	r1, [pc, #120]	; (800ac28 <vTaskSwitchContext+0xfc>)
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	440b      	add	r3, r1
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d109      	bne.n	800abd4 <vTaskSwitchContext+0xa8>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	607b      	str	r3, [r7, #4]
 800abd2:	e7fe      	b.n	800abd2 <vTaskSwitchContext+0xa6>
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4a12      	ldr	r2, [pc, #72]	; (800ac28 <vTaskSwitchContext+0xfc>)
 800abe0:	4413      	add	r3, r2
 800abe2:	613b      	str	r3, [r7, #16]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	605a      	str	r2, [r3, #4]
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	3308      	adds	r3, #8
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d104      	bne.n	800ac04 <vTaskSwitchContext+0xd8>
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	605a      	str	r2, [r3, #4]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	4a05      	ldr	r2, [pc, #20]	; (800ac20 <vTaskSwitchContext+0xf4>)
 800ac0c:	6013      	str	r3, [r2, #0]
}
 800ac0e:	bf00      	nop
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
 800ac16:	bf00      	nop
 800ac18:	2000036c 	.word	0x2000036c
 800ac1c:	20000360 	.word	0x20000360
 800ac20:	2000028c 	.word	0x2000028c
 800ac24:	20000354 	.word	0x20000354
 800ac28:	20000290 	.word	0x20000290

0800ac2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d109      	bne.n	800ac50 <vTaskPlaceOnEventList+0x24>
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	60fb      	str	r3, [r7, #12]
 800ac4e:	e7fe      	b.n	800ac4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac50:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <vTaskPlaceOnEventList+0x44>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3318      	adds	r3, #24
 800ac56:	4619      	mov	r1, r3
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f7ff fb3f 	bl	800a2dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac5e:	2101      	movs	r1, #1
 800ac60:	6838      	ldr	r0, [r7, #0]
 800ac62:	f000 f9ad 	bl	800afc0 <prvAddCurrentTaskToDelayedList>
}
 800ac66:	bf00      	nop
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	2000028c 	.word	0x2000028c

0800ac74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <xTaskRemoveFromEventList+0x2a>
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	e7fe      	b.n	800ac9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	3318      	adds	r3, #24
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fb53 	bl	800a34e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca8:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <xTaskRemoveFromEventList+0xac>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d11c      	bne.n	800acea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7ff fb4a 	bl	800a34e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbe:	2201      	movs	r2, #1
 800acc0:	409a      	lsls	r2, r3
 800acc2:	4b18      	ldr	r3, [pc, #96]	; (800ad24 <xTaskRemoveFromEventList+0xb0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	4a16      	ldr	r2, [pc, #88]	; (800ad24 <xTaskRemoveFromEventList+0xb0>)
 800acca:	6013      	str	r3, [r2, #0]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd0:	4613      	mov	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	4413      	add	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4a13      	ldr	r2, [pc, #76]	; (800ad28 <xTaskRemoveFromEventList+0xb4>)
 800acda:	441a      	add	r2, r3
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	3304      	adds	r3, #4
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f7ff fad6 	bl	800a294 <vListInsertEnd>
 800ace8:	e005      	b.n	800acf6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	3318      	adds	r3, #24
 800acee:	4619      	mov	r1, r3
 800acf0:	480e      	ldr	r0, [pc, #56]	; (800ad2c <xTaskRemoveFromEventList+0xb8>)
 800acf2:	f7ff facf 	bl	800a294 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acfa:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <xTaskRemoveFromEventList+0xbc>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d905      	bls.n	800ad10 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad04:	2301      	movs	r3, #1
 800ad06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad08:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <xTaskRemoveFromEventList+0xc0>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	e001      	b.n	800ad14 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad14:	697b      	ldr	r3, [r7, #20]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	2000036c 	.word	0x2000036c
 800ad24:	20000354 	.word	0x20000354
 800ad28:	20000290 	.word	0x20000290
 800ad2c:	20000324 	.word	0x20000324
 800ad30:	2000028c 	.word	0x2000028c
 800ad34:	20000360 	.word	0x20000360

0800ad38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad40:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <vTaskInternalSetTimeOutState+0x24>)
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad48:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <vTaskInternalSetTimeOutState+0x28>)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	605a      	str	r2, [r3, #4]
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	20000364 	.word	0x20000364
 800ad60:	20000350 	.word	0x20000350

0800ad64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d109      	bne.n	800ad88 <xTaskCheckForTimeOut+0x24>
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	613b      	str	r3, [r7, #16]
 800ad86:	e7fe      	b.n	800ad86 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <xTaskCheckForTimeOut+0x3e>
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	60fb      	str	r3, [r7, #12]
 800ada0:	e7fe      	b.n	800ada0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ada2:	f000 f989 	bl	800b0b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ada6:	4b1d      	ldr	r3, [pc, #116]	; (800ae1c <xTaskCheckForTimeOut+0xb8>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbe:	d102      	bne.n	800adc6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	61fb      	str	r3, [r7, #28]
 800adc4:	e023      	b.n	800ae0e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	4b15      	ldr	r3, [pc, #84]	; (800ae20 <xTaskCheckForTimeOut+0xbc>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d007      	beq.n	800ade2 <xTaskCheckForTimeOut+0x7e>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	69ba      	ldr	r2, [r7, #24]
 800add8:	429a      	cmp	r2, r3
 800adda:	d302      	bcc.n	800ade2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800addc:	2301      	movs	r3, #1
 800adde:	61fb      	str	r3, [r7, #28]
 800ade0:	e015      	b.n	800ae0e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d20b      	bcs.n	800ae04 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	1ad2      	subs	r2, r2, r3
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff ff9d 	bl	800ad38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adfe:	2300      	movs	r3, #0
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	e004      	b.n	800ae0e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2200      	movs	r2, #0
 800ae08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae0e:	f000 f981 	bl	800b114 <vPortExitCritical>

	return xReturn;
 800ae12:	69fb      	ldr	r3, [r7, #28]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3720      	adds	r7, #32
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20000350 	.word	0x20000350
 800ae20:	20000364 	.word	0x20000364

0800ae24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae28:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <vTaskMissedYield+0x14>)
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	601a      	str	r2, [r3, #0]
}
 800ae2e:	bf00      	nop
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	20000360 	.word	0x20000360

0800ae3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae42:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <prvResetNextTaskUnblockTime+0x38>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d104      	bne.n	800ae56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	; (800ae78 <prvResetNextTaskUnblockTime+0x3c>)
 800ae4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ae54:	e008      	b.n	800ae68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae56:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <prvResetNextTaskUnblockTime+0x38>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4a04      	ldr	r2, [pc, #16]	; (800ae78 <prvResetNextTaskUnblockTime+0x3c>)
 800ae66:	6013      	str	r3, [r2, #0]
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr
 800ae74:	2000031c 	.word	0x2000031c
 800ae78:	20000368 	.word	0x20000368

0800ae7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <xTaskGetSchedulerState+0x34>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	e008      	b.n	800aea2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae90:	4b08      	ldr	r3, [pc, #32]	; (800aeb4 <xTaskGetSchedulerState+0x38>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d102      	bne.n	800ae9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae98:	2302      	movs	r3, #2
 800ae9a:	607b      	str	r3, [r7, #4]
 800ae9c:	e001      	b.n	800aea2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aea2:	687b      	ldr	r3, [r7, #4]
	}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	20000358 	.word	0x20000358
 800aeb4:	2000036c 	.word	0x2000036c

0800aeb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aec4:	2300      	movs	r3, #0
 800aec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d06c      	beq.n	800afa8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aece:	4b39      	ldr	r3, [pc, #228]	; (800afb4 <xTaskPriorityDisinherit+0xfc>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d009      	beq.n	800aeec <xTaskPriorityDisinherit+0x34>
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	e7fe      	b.n	800aeea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d109      	bne.n	800af08 <xTaskPriorityDisinherit+0x50>
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	60bb      	str	r3, [r7, #8]
 800af06:	e7fe      	b.n	800af06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af0c:	1e5a      	subs	r2, r3, #1
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d044      	beq.n	800afa8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af22:	2b00      	cmp	r3, #0
 800af24:	d140      	bne.n	800afa8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	3304      	adds	r3, #4
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff fa0f 	bl	800a34e <uxListRemove>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d115      	bne.n	800af62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3a:	491f      	ldr	r1, [pc, #124]	; (800afb8 <xTaskPriorityDisinherit+0x100>)
 800af3c:	4613      	mov	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	440b      	add	r3, r1
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <xTaskPriorityDisinherit+0xaa>
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	2201      	movs	r2, #1
 800af52:	fa02 f303 	lsl.w	r3, r2, r3
 800af56:	43da      	mvns	r2, r3
 800af58:	4b18      	ldr	r3, [pc, #96]	; (800afbc <xTaskPriorityDisinherit+0x104>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4013      	ands	r3, r2
 800af5e:	4a17      	ldr	r2, [pc, #92]	; (800afbc <xTaskPriorityDisinherit+0x104>)
 800af60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6e:	f1c3 0207 	rsb	r2, r3, #7
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	2201      	movs	r2, #1
 800af7c:	409a      	lsls	r2, r3
 800af7e:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <xTaskPriorityDisinherit+0x104>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4313      	orrs	r3, r2
 800af84:	4a0d      	ldr	r2, [pc, #52]	; (800afbc <xTaskPriorityDisinherit+0x104>)
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8c:	4613      	mov	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4a08      	ldr	r2, [pc, #32]	; (800afb8 <xTaskPriorityDisinherit+0x100>)
 800af96:	441a      	add	r2, r3
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	3304      	adds	r3, #4
 800af9c:	4619      	mov	r1, r3
 800af9e:	4610      	mov	r0, r2
 800afa0:	f7ff f978 	bl	800a294 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800afa8:	697b      	ldr	r3, [r7, #20]
	}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	2000028c 	.word	0x2000028c
 800afb8:	20000290 	.word	0x20000290
 800afbc:	20000354 	.word	0x20000354

0800afc0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800afca:	4b29      	ldr	r3, [pc, #164]	; (800b070 <prvAddCurrentTaskToDelayedList+0xb0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afd0:	4b28      	ldr	r3, [pc, #160]	; (800b074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3304      	adds	r3, #4
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff f9b9 	bl	800a34e <uxListRemove>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10b      	bne.n	800affa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800afe2:	4b24      	ldr	r3, [pc, #144]	; (800b074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	2201      	movs	r2, #1
 800afea:	fa02 f303 	lsl.w	r3, r2, r3
 800afee:	43da      	mvns	r2, r3
 800aff0:	4b21      	ldr	r3, [pc, #132]	; (800b078 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4013      	ands	r3, r2
 800aff6:	4a20      	ldr	r2, [pc, #128]	; (800b078 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aff8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b000:	d10a      	bne.n	800b018 <prvAddCurrentTaskToDelayedList+0x58>
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d007      	beq.n	800b018 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b008:	4b1a      	ldr	r3, [pc, #104]	; (800b074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3304      	adds	r3, #4
 800b00e:	4619      	mov	r1, r3
 800b010:	481a      	ldr	r0, [pc, #104]	; (800b07c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b012:	f7ff f93f 	bl	800a294 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b016:	e026      	b.n	800b066 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b020:	4b14      	ldr	r3, [pc, #80]	; (800b074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d209      	bcs.n	800b044 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b030:	4b13      	ldr	r3, [pc, #76]	; (800b080 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4b0f      	ldr	r3, [pc, #60]	; (800b074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	3304      	adds	r3, #4
 800b03a:	4619      	mov	r1, r3
 800b03c:	4610      	mov	r0, r2
 800b03e:	f7ff f94d 	bl	800a2dc <vListInsert>
}
 800b042:	e010      	b.n	800b066 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b044:	4b0f      	ldr	r3, [pc, #60]	; (800b084 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b0a      	ldr	r3, [pc, #40]	; (800b074 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3304      	adds	r3, #4
 800b04e:	4619      	mov	r1, r3
 800b050:	4610      	mov	r0, r2
 800b052:	f7ff f943 	bl	800a2dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b056:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d202      	bcs.n	800b066 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b060:	4a09      	ldr	r2, [pc, #36]	; (800b088 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6013      	str	r3, [r2, #0]
}
 800b066:	bf00      	nop
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20000350 	.word	0x20000350
 800b074:	2000028c 	.word	0x2000028c
 800b078:	20000354 	.word	0x20000354
 800b07c:	20000338 	.word	0x20000338
 800b080:	20000320 	.word	0x20000320
 800b084:	2000031c 	.word	0x2000031c
 800b088:	20000368 	.word	0x20000368
 800b08c:	00000000 	.word	0x00000000

0800b090 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <pxCurrentTCBConst2>)
 800b092:	6819      	ldr	r1, [r3, #0]
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	f380 8809 	msr	PSP, r0
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f04f 0000 	mov.w	r0, #0
 800b0a6:	f380 8811 	msr	BASEPRI, r0
 800b0aa:	4770      	bx	lr
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <pxCurrentTCBConst2>:
 800b0b0:	2000028c 	.word	0x2000028c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0d0:	4b0e      	ldr	r3, [pc, #56]	; (800b10c <vPortEnterCritical+0x54>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	4a0d      	ldr	r2, [pc, #52]	; (800b10c <vPortEnterCritical+0x54>)
 800b0d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0da:	4b0c      	ldr	r3, [pc, #48]	; (800b10c <vPortEnterCritical+0x54>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d10e      	bne.n	800b100 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0e2:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <vPortEnterCritical+0x58>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d009      	beq.n	800b100 <vPortEnterCritical+0x48>
 800b0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f0:	f383 8811 	msr	BASEPRI, r3
 800b0f4:	f3bf 8f6f 	isb	sy
 800b0f8:	f3bf 8f4f 	dsb	sy
 800b0fc:	603b      	str	r3, [r7, #0]
 800b0fe:	e7fe      	b.n	800b0fe <vPortEnterCritical+0x46>
	}
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20000054 	.word	0x20000054
 800b110:	e000ed04 	.word	0xe000ed04

0800b114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b11a:	4b11      	ldr	r3, [pc, #68]	; (800b160 <vPortExitCritical+0x4c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d109      	bne.n	800b136 <vPortExitCritical+0x22>
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	607b      	str	r3, [r7, #4]
 800b134:	e7fe      	b.n	800b134 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b136:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <vPortExitCritical+0x4c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	4a08      	ldr	r2, [pc, #32]	; (800b160 <vPortExitCritical+0x4c>)
 800b13e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b140:	4b07      	ldr	r3, [pc, #28]	; (800b160 <vPortExitCritical+0x4c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d104      	bne.n	800b152 <vPortExitCritical+0x3e>
 800b148:	2300      	movs	r3, #0
 800b14a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b152:	bf00      	nop
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	20000054 	.word	0x20000054
	...

0800b170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b170:	f3ef 8009 	mrs	r0, PSP
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	4b15      	ldr	r3, [pc, #84]	; (800b1d0 <pxCurrentTCBConst>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	f01e 0f10 	tst.w	lr, #16
 800b180:	bf08      	it	eq
 800b182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18a:	6010      	str	r0, [r2, #0]
 800b18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b194:	f380 8811 	msr	BASEPRI, r0
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	f3bf 8f6f 	isb	sy
 800b1a0:	f7ff fcc4 	bl	800ab2c <vTaskSwitchContext>
 800b1a4:	f04f 0000 	mov.w	r0, #0
 800b1a8:	f380 8811 	msr	BASEPRI, r0
 800b1ac:	bc09      	pop	{r0, r3}
 800b1ae:	6819      	ldr	r1, [r3, #0]
 800b1b0:	6808      	ldr	r0, [r1, #0]
 800b1b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b6:	f01e 0f10 	tst.w	lr, #16
 800b1ba:	bf08      	it	eq
 800b1bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1c0:	f380 8809 	msr	PSP, r0
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	f3af 8000 	nop.w

0800b1d0 <pxCurrentTCBConst>:
 800b1d0:	2000028c 	.word	0x2000028c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop

0800b1d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1f0:	f7ff fbe4 	bl	800a9bc <xTaskIncrementTick>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1fa:	4b06      	ldr	r3, [pc, #24]	; (800b214 <SysTick_Handler+0x3c>)
 800b1fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	2300      	movs	r3, #0
 800b204:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	e000ed04 	.word	0xe000ed04

0800b218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b21e:	f3ef 8305 	mrs	r3, IPSR
 800b222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2b0f      	cmp	r3, #15
 800b228:	d913      	bls.n	800b252 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b22a:	4a16      	ldr	r2, [pc, #88]	; (800b284 <vPortValidateInterruptPriority+0x6c>)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4413      	add	r3, r2
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b234:	4b14      	ldr	r3, [pc, #80]	; (800b288 <vPortValidateInterruptPriority+0x70>)
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	7afa      	ldrb	r2, [r7, #11]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d209      	bcs.n	800b252 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	607b      	str	r3, [r7, #4]
 800b250:	e7fe      	b.n	800b250 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b252:	4b0e      	ldr	r3, [pc, #56]	; (800b28c <vPortValidateInterruptPriority+0x74>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <vPortValidateInterruptPriority+0x78>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d909      	bls.n	800b276 <vPortValidateInterruptPriority+0x5e>
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	e7fe      	b.n	800b274 <vPortValidateInterruptPriority+0x5c>
	}
 800b276:	bf00      	nop
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	e000e3f0 	.word	0xe000e3f0
 800b288:	20000370 	.word	0x20000370
 800b28c:	e000ed0c 	.word	0xe000ed0c
 800b290:	20000374 	.word	0x20000374

0800b294 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fe fec8 	bl	800a038 <USBH_LL_IncTimer>
}
 800b2a8:	bf00      	nop
 800b2aa:	3708      	adds	r7, #8
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fe ff0c 	bl	800a0dc <USBH_LL_Connect>
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fe ff21 	bl	800a122 <USBH_LL_Disconnect>
}
 800b2e0:	bf00      	nop
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	70fb      	strb	r3, [r7, #3]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fe ff41 	bl	800a186 <USBH_LL_NotifyURBChange>
#endif
}
 800b304:	bf00      	nop
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7fe feb6 	bl	800a08c <USBH_LL_PortEnabled>
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fec2 	bl	800a0c0 <USBH_LL_PortDisabled>
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f9 fcd1 	bl	8004d02 <HAL_HCD_Stop>
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b364:	7bfb      	ldrb	r3, [r7, #15]
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f808 	bl	800b37c <USBH_Get_USB_Status>
 800b36c:	4603      	mov	r3, r0
 800b36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b370:	7bbb      	ldrb	r3, [r7, #14]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d817      	bhi.n	800b3c0 <USBH_Get_USB_Status+0x44>
 800b390:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <USBH_Get_USB_Status+0x1c>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b3a9 	.word	0x0800b3a9
 800b39c:	0800b3af 	.word	0x0800b3af
 800b3a0:	0800b3b5 	.word	0x0800b3b5
 800b3a4:	0800b3bb 	.word	0x0800b3bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	e00b      	b.n	800b3c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b2:	e008      	b.n	800b3c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	e005      	b.n	800b3c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b3be:	e002      	b.n	800b3c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c4:	bf00      	nop
  }
  return usb_status;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <__errno>:
 800b3d4:	4b01      	ldr	r3, [pc, #4]	; (800b3dc <__errno+0x8>)
 800b3d6:	6818      	ldr	r0, [r3, #0]
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	20000058 	.word	0x20000058

0800b3e0 <__libc_init_array>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4e0d      	ldr	r6, [pc, #52]	; (800b418 <__libc_init_array+0x38>)
 800b3e4:	4c0d      	ldr	r4, [pc, #52]	; (800b41c <__libc_init_array+0x3c>)
 800b3e6:	1ba4      	subs	r4, r4, r6
 800b3e8:	10a4      	asrs	r4, r4, #2
 800b3ea:	2500      	movs	r5, #0
 800b3ec:	42a5      	cmp	r5, r4
 800b3ee:	d109      	bne.n	800b404 <__libc_init_array+0x24>
 800b3f0:	4e0b      	ldr	r6, [pc, #44]	; (800b420 <__libc_init_array+0x40>)
 800b3f2:	4c0c      	ldr	r4, [pc, #48]	; (800b424 <__libc_init_array+0x44>)
 800b3f4:	f000 fc94 	bl	800bd20 <_init>
 800b3f8:	1ba4      	subs	r4, r4, r6
 800b3fa:	10a4      	asrs	r4, r4, #2
 800b3fc:	2500      	movs	r5, #0
 800b3fe:	42a5      	cmp	r5, r4
 800b400:	d105      	bne.n	800b40e <__libc_init_array+0x2e>
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b408:	4798      	blx	r3
 800b40a:	3501      	adds	r5, #1
 800b40c:	e7ee      	b.n	800b3ec <__libc_init_array+0xc>
 800b40e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b412:	4798      	blx	r3
 800b414:	3501      	adds	r5, #1
 800b416:	e7f2      	b.n	800b3fe <__libc_init_array+0x1e>
 800b418:	0800da00 	.word	0x0800da00
 800b41c:	0800da00 	.word	0x0800da00
 800b420:	0800da00 	.word	0x0800da00
 800b424:	0800da04 	.word	0x0800da04

0800b428 <memcpy>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	1e43      	subs	r3, r0, #1
 800b42c:	440a      	add	r2, r1
 800b42e:	4291      	cmp	r1, r2
 800b430:	d100      	bne.n	800b434 <memcpy+0xc>
 800b432:	bd10      	pop	{r4, pc}
 800b434:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b43c:	e7f7      	b.n	800b42e <memcpy+0x6>

0800b43e <memset>:
 800b43e:	4402      	add	r2, r0
 800b440:	4603      	mov	r3, r0
 800b442:	4293      	cmp	r3, r2
 800b444:	d100      	bne.n	800b448 <memset+0xa>
 800b446:	4770      	bx	lr
 800b448:	f803 1b01 	strb.w	r1, [r3], #1
 800b44c:	e7f9      	b.n	800b442 <memset+0x4>
	...

0800b450 <_free_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4605      	mov	r5, r0
 800b454:	2900      	cmp	r1, #0
 800b456:	d045      	beq.n	800b4e4 <_free_r+0x94>
 800b458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b45c:	1f0c      	subs	r4, r1, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bfb8      	it	lt
 800b462:	18e4      	addlt	r4, r4, r3
 800b464:	f000 fbae 	bl	800bbc4 <__malloc_lock>
 800b468:	4a1f      	ldr	r2, [pc, #124]	; (800b4e8 <_free_r+0x98>)
 800b46a:	6813      	ldr	r3, [r2, #0]
 800b46c:	4610      	mov	r0, r2
 800b46e:	b933      	cbnz	r3, 800b47e <_free_r+0x2e>
 800b470:	6063      	str	r3, [r4, #4]
 800b472:	6014      	str	r4, [r2, #0]
 800b474:	4628      	mov	r0, r5
 800b476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47a:	f000 bba4 	b.w	800bbc6 <__malloc_unlock>
 800b47e:	42a3      	cmp	r3, r4
 800b480:	d90c      	bls.n	800b49c <_free_r+0x4c>
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	1862      	adds	r2, r4, r1
 800b486:	4293      	cmp	r3, r2
 800b488:	bf04      	itt	eq
 800b48a:	681a      	ldreq	r2, [r3, #0]
 800b48c:	685b      	ldreq	r3, [r3, #4]
 800b48e:	6063      	str	r3, [r4, #4]
 800b490:	bf04      	itt	eq
 800b492:	1852      	addeq	r2, r2, r1
 800b494:	6022      	streq	r2, [r4, #0]
 800b496:	6004      	str	r4, [r0, #0]
 800b498:	e7ec      	b.n	800b474 <_free_r+0x24>
 800b49a:	4613      	mov	r3, r2
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	b10a      	cbz	r2, 800b4a4 <_free_r+0x54>
 800b4a0:	42a2      	cmp	r2, r4
 800b4a2:	d9fa      	bls.n	800b49a <_free_r+0x4a>
 800b4a4:	6819      	ldr	r1, [r3, #0]
 800b4a6:	1858      	adds	r0, r3, r1
 800b4a8:	42a0      	cmp	r0, r4
 800b4aa:	d10b      	bne.n	800b4c4 <_free_r+0x74>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	4401      	add	r1, r0
 800b4b0:	1858      	adds	r0, r3, r1
 800b4b2:	4282      	cmp	r2, r0
 800b4b4:	6019      	str	r1, [r3, #0]
 800b4b6:	d1dd      	bne.n	800b474 <_free_r+0x24>
 800b4b8:	6810      	ldr	r0, [r2, #0]
 800b4ba:	6852      	ldr	r2, [r2, #4]
 800b4bc:	605a      	str	r2, [r3, #4]
 800b4be:	4401      	add	r1, r0
 800b4c0:	6019      	str	r1, [r3, #0]
 800b4c2:	e7d7      	b.n	800b474 <_free_r+0x24>
 800b4c4:	d902      	bls.n	800b4cc <_free_r+0x7c>
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	602b      	str	r3, [r5, #0]
 800b4ca:	e7d3      	b.n	800b474 <_free_r+0x24>
 800b4cc:	6820      	ldr	r0, [r4, #0]
 800b4ce:	1821      	adds	r1, r4, r0
 800b4d0:	428a      	cmp	r2, r1
 800b4d2:	bf04      	itt	eq
 800b4d4:	6811      	ldreq	r1, [r2, #0]
 800b4d6:	6852      	ldreq	r2, [r2, #4]
 800b4d8:	6062      	str	r2, [r4, #4]
 800b4da:	bf04      	itt	eq
 800b4dc:	1809      	addeq	r1, r1, r0
 800b4de:	6021      	streq	r1, [r4, #0]
 800b4e0:	605c      	str	r4, [r3, #4]
 800b4e2:	e7c7      	b.n	800b474 <_free_r+0x24>
 800b4e4:	bd38      	pop	{r3, r4, r5, pc}
 800b4e6:	bf00      	nop
 800b4e8:	20000378 	.word	0x20000378

0800b4ec <_malloc_r>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	1ccd      	adds	r5, r1, #3
 800b4f0:	f025 0503 	bic.w	r5, r5, #3
 800b4f4:	3508      	adds	r5, #8
 800b4f6:	2d0c      	cmp	r5, #12
 800b4f8:	bf38      	it	cc
 800b4fa:	250c      	movcc	r5, #12
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	4606      	mov	r6, r0
 800b500:	db01      	blt.n	800b506 <_malloc_r+0x1a>
 800b502:	42a9      	cmp	r1, r5
 800b504:	d903      	bls.n	800b50e <_malloc_r+0x22>
 800b506:	230c      	movs	r3, #12
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	2000      	movs	r0, #0
 800b50c:	bd70      	pop	{r4, r5, r6, pc}
 800b50e:	f000 fb59 	bl	800bbc4 <__malloc_lock>
 800b512:	4a21      	ldr	r2, [pc, #132]	; (800b598 <_malloc_r+0xac>)
 800b514:	6814      	ldr	r4, [r2, #0]
 800b516:	4621      	mov	r1, r4
 800b518:	b991      	cbnz	r1, 800b540 <_malloc_r+0x54>
 800b51a:	4c20      	ldr	r4, [pc, #128]	; (800b59c <_malloc_r+0xb0>)
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	b91b      	cbnz	r3, 800b528 <_malloc_r+0x3c>
 800b520:	4630      	mov	r0, r6
 800b522:	f000 f8a1 	bl	800b668 <_sbrk_r>
 800b526:	6020      	str	r0, [r4, #0]
 800b528:	4629      	mov	r1, r5
 800b52a:	4630      	mov	r0, r6
 800b52c:	f000 f89c 	bl	800b668 <_sbrk_r>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d124      	bne.n	800b57e <_malloc_r+0x92>
 800b534:	230c      	movs	r3, #12
 800b536:	6033      	str	r3, [r6, #0]
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 fb44 	bl	800bbc6 <__malloc_unlock>
 800b53e:	e7e4      	b.n	800b50a <_malloc_r+0x1e>
 800b540:	680b      	ldr	r3, [r1, #0]
 800b542:	1b5b      	subs	r3, r3, r5
 800b544:	d418      	bmi.n	800b578 <_malloc_r+0x8c>
 800b546:	2b0b      	cmp	r3, #11
 800b548:	d90f      	bls.n	800b56a <_malloc_r+0x7e>
 800b54a:	600b      	str	r3, [r1, #0]
 800b54c:	50cd      	str	r5, [r1, r3]
 800b54e:	18cc      	adds	r4, r1, r3
 800b550:	4630      	mov	r0, r6
 800b552:	f000 fb38 	bl	800bbc6 <__malloc_unlock>
 800b556:	f104 000b 	add.w	r0, r4, #11
 800b55a:	1d23      	adds	r3, r4, #4
 800b55c:	f020 0007 	bic.w	r0, r0, #7
 800b560:	1ac3      	subs	r3, r0, r3
 800b562:	d0d3      	beq.n	800b50c <_malloc_r+0x20>
 800b564:	425a      	negs	r2, r3
 800b566:	50e2      	str	r2, [r4, r3]
 800b568:	e7d0      	b.n	800b50c <_malloc_r+0x20>
 800b56a:	428c      	cmp	r4, r1
 800b56c:	684b      	ldr	r3, [r1, #4]
 800b56e:	bf16      	itet	ne
 800b570:	6063      	strne	r3, [r4, #4]
 800b572:	6013      	streq	r3, [r2, #0]
 800b574:	460c      	movne	r4, r1
 800b576:	e7eb      	b.n	800b550 <_malloc_r+0x64>
 800b578:	460c      	mov	r4, r1
 800b57a:	6849      	ldr	r1, [r1, #4]
 800b57c:	e7cc      	b.n	800b518 <_malloc_r+0x2c>
 800b57e:	1cc4      	adds	r4, r0, #3
 800b580:	f024 0403 	bic.w	r4, r4, #3
 800b584:	42a0      	cmp	r0, r4
 800b586:	d005      	beq.n	800b594 <_malloc_r+0xa8>
 800b588:	1a21      	subs	r1, r4, r0
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 f86c 	bl	800b668 <_sbrk_r>
 800b590:	3001      	adds	r0, #1
 800b592:	d0cf      	beq.n	800b534 <_malloc_r+0x48>
 800b594:	6025      	str	r5, [r4, #0]
 800b596:	e7db      	b.n	800b550 <_malloc_r+0x64>
 800b598:	20000378 	.word	0x20000378
 800b59c:	2000037c 	.word	0x2000037c

0800b5a0 <_puts_r>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	460e      	mov	r6, r1
 800b5a4:	4605      	mov	r5, r0
 800b5a6:	b118      	cbz	r0, 800b5b0 <_puts_r+0x10>
 800b5a8:	6983      	ldr	r3, [r0, #24]
 800b5aa:	b90b      	cbnz	r3, 800b5b0 <_puts_r+0x10>
 800b5ac:	f000 fa1c 	bl	800b9e8 <__sinit>
 800b5b0:	69ab      	ldr	r3, [r5, #24]
 800b5b2:	68ac      	ldr	r4, [r5, #8]
 800b5b4:	b913      	cbnz	r3, 800b5bc <_puts_r+0x1c>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f000 fa16 	bl	800b9e8 <__sinit>
 800b5bc:	4b23      	ldr	r3, [pc, #140]	; (800b64c <_puts_r+0xac>)
 800b5be:	429c      	cmp	r4, r3
 800b5c0:	d117      	bne.n	800b5f2 <_puts_r+0x52>
 800b5c2:	686c      	ldr	r4, [r5, #4]
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	071b      	lsls	r3, r3, #28
 800b5c8:	d51d      	bpl.n	800b606 <_puts_r+0x66>
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	b1db      	cbz	r3, 800b606 <_puts_r+0x66>
 800b5ce:	3e01      	subs	r6, #1
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	60a3      	str	r3, [r4, #8]
 800b5da:	b9e9      	cbnz	r1, 800b618 <_puts_r+0x78>
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	da2e      	bge.n	800b63e <_puts_r+0x9e>
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	210a      	movs	r1, #10
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f000 f84f 	bl	800b688 <__swbuf_r>
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d011      	beq.n	800b612 <_puts_r+0x72>
 800b5ee:	200a      	movs	r0, #10
 800b5f0:	e011      	b.n	800b616 <_puts_r+0x76>
 800b5f2:	4b17      	ldr	r3, [pc, #92]	; (800b650 <_puts_r+0xb0>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	d101      	bne.n	800b5fc <_puts_r+0x5c>
 800b5f8:	68ac      	ldr	r4, [r5, #8]
 800b5fa:	e7e3      	b.n	800b5c4 <_puts_r+0x24>
 800b5fc:	4b15      	ldr	r3, [pc, #84]	; (800b654 <_puts_r+0xb4>)
 800b5fe:	429c      	cmp	r4, r3
 800b600:	bf08      	it	eq
 800b602:	68ec      	ldreq	r4, [r5, #12]
 800b604:	e7de      	b.n	800b5c4 <_puts_r+0x24>
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 f88f 	bl	800b72c <__swsetup_r>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d0dd      	beq.n	800b5ce <_puts_r+0x2e>
 800b612:	f04f 30ff 	mov.w	r0, #4294967295
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da04      	bge.n	800b626 <_puts_r+0x86>
 800b61c:	69a2      	ldr	r2, [r4, #24]
 800b61e:	429a      	cmp	r2, r3
 800b620:	dc06      	bgt.n	800b630 <_puts_r+0x90>
 800b622:	290a      	cmp	r1, #10
 800b624:	d004      	beq.n	800b630 <_puts_r+0x90>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	1c5a      	adds	r2, r3, #1
 800b62a:	6022      	str	r2, [r4, #0]
 800b62c:	7019      	strb	r1, [r3, #0]
 800b62e:	e7cf      	b.n	800b5d0 <_puts_r+0x30>
 800b630:	4622      	mov	r2, r4
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f828 	bl	800b688 <__swbuf_r>
 800b638:	3001      	adds	r0, #1
 800b63a:	d1c9      	bne.n	800b5d0 <_puts_r+0x30>
 800b63c:	e7e9      	b.n	800b612 <_puts_r+0x72>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	200a      	movs	r0, #10
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	6022      	str	r2, [r4, #0]
 800b646:	7018      	strb	r0, [r3, #0]
 800b648:	e7e5      	b.n	800b616 <_puts_r+0x76>
 800b64a:	bf00      	nop
 800b64c:	0800d9b8 	.word	0x0800d9b8
 800b650:	0800d9d8 	.word	0x0800d9d8
 800b654:	0800d998 	.word	0x0800d998

0800b658 <puts>:
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <puts+0xc>)
 800b65a:	4601      	mov	r1, r0
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f7ff bf9f 	b.w	800b5a0 <_puts_r>
 800b662:	bf00      	nop
 800b664:	20000058 	.word	0x20000058

0800b668 <_sbrk_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4c06      	ldr	r4, [pc, #24]	; (800b684 <_sbrk_r+0x1c>)
 800b66c:	2300      	movs	r3, #0
 800b66e:	4605      	mov	r5, r0
 800b670:	4608      	mov	r0, r1
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	f7f6 fd3c 	bl	80020f0 <_sbrk>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d102      	bne.n	800b682 <_sbrk_r+0x1a>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	b103      	cbz	r3, 800b682 <_sbrk_r+0x1a>
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	bd38      	pop	{r3, r4, r5, pc}
 800b684:	200009e8 	.word	0x200009e8

0800b688 <__swbuf_r>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	460e      	mov	r6, r1
 800b68c:	4614      	mov	r4, r2
 800b68e:	4605      	mov	r5, r0
 800b690:	b118      	cbz	r0, 800b69a <__swbuf_r+0x12>
 800b692:	6983      	ldr	r3, [r0, #24]
 800b694:	b90b      	cbnz	r3, 800b69a <__swbuf_r+0x12>
 800b696:	f000 f9a7 	bl	800b9e8 <__sinit>
 800b69a:	4b21      	ldr	r3, [pc, #132]	; (800b720 <__swbuf_r+0x98>)
 800b69c:	429c      	cmp	r4, r3
 800b69e:	d12a      	bne.n	800b6f6 <__swbuf_r+0x6e>
 800b6a0:	686c      	ldr	r4, [r5, #4]
 800b6a2:	69a3      	ldr	r3, [r4, #24]
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	89a3      	ldrh	r3, [r4, #12]
 800b6a8:	071a      	lsls	r2, r3, #28
 800b6aa:	d52e      	bpl.n	800b70a <__swbuf_r+0x82>
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	b363      	cbz	r3, 800b70a <__swbuf_r+0x82>
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	6820      	ldr	r0, [r4, #0]
 800b6b4:	1ac0      	subs	r0, r0, r3
 800b6b6:	6963      	ldr	r3, [r4, #20]
 800b6b8:	b2f6      	uxtb	r6, r6
 800b6ba:	4283      	cmp	r3, r0
 800b6bc:	4637      	mov	r7, r6
 800b6be:	dc04      	bgt.n	800b6ca <__swbuf_r+0x42>
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f000 f926 	bl	800b914 <_fflush_r>
 800b6c8:	bb28      	cbnz	r0, 800b716 <__swbuf_r+0x8e>
 800b6ca:	68a3      	ldr	r3, [r4, #8]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	60a3      	str	r3, [r4, #8]
 800b6d0:	6823      	ldr	r3, [r4, #0]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	6022      	str	r2, [r4, #0]
 800b6d6:	701e      	strb	r6, [r3, #0]
 800b6d8:	6963      	ldr	r3, [r4, #20]
 800b6da:	3001      	adds	r0, #1
 800b6dc:	4283      	cmp	r3, r0
 800b6de:	d004      	beq.n	800b6ea <__swbuf_r+0x62>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	07db      	lsls	r3, r3, #31
 800b6e4:	d519      	bpl.n	800b71a <__swbuf_r+0x92>
 800b6e6:	2e0a      	cmp	r6, #10
 800b6e8:	d117      	bne.n	800b71a <__swbuf_r+0x92>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f000 f911 	bl	800b914 <_fflush_r>
 800b6f2:	b190      	cbz	r0, 800b71a <__swbuf_r+0x92>
 800b6f4:	e00f      	b.n	800b716 <__swbuf_r+0x8e>
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	; (800b724 <__swbuf_r+0x9c>)
 800b6f8:	429c      	cmp	r4, r3
 800b6fa:	d101      	bne.n	800b700 <__swbuf_r+0x78>
 800b6fc:	68ac      	ldr	r4, [r5, #8]
 800b6fe:	e7d0      	b.n	800b6a2 <__swbuf_r+0x1a>
 800b700:	4b09      	ldr	r3, [pc, #36]	; (800b728 <__swbuf_r+0xa0>)
 800b702:	429c      	cmp	r4, r3
 800b704:	bf08      	it	eq
 800b706:	68ec      	ldreq	r4, [r5, #12]
 800b708:	e7cb      	b.n	800b6a2 <__swbuf_r+0x1a>
 800b70a:	4621      	mov	r1, r4
 800b70c:	4628      	mov	r0, r5
 800b70e:	f000 f80d 	bl	800b72c <__swsetup_r>
 800b712:	2800      	cmp	r0, #0
 800b714:	d0cc      	beq.n	800b6b0 <__swbuf_r+0x28>
 800b716:	f04f 37ff 	mov.w	r7, #4294967295
 800b71a:	4638      	mov	r0, r7
 800b71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b71e:	bf00      	nop
 800b720:	0800d9b8 	.word	0x0800d9b8
 800b724:	0800d9d8 	.word	0x0800d9d8
 800b728:	0800d998 	.word	0x0800d998

0800b72c <__swsetup_r>:
 800b72c:	4b32      	ldr	r3, [pc, #200]	; (800b7f8 <__swsetup_r+0xcc>)
 800b72e:	b570      	push	{r4, r5, r6, lr}
 800b730:	681d      	ldr	r5, [r3, #0]
 800b732:	4606      	mov	r6, r0
 800b734:	460c      	mov	r4, r1
 800b736:	b125      	cbz	r5, 800b742 <__swsetup_r+0x16>
 800b738:	69ab      	ldr	r3, [r5, #24]
 800b73a:	b913      	cbnz	r3, 800b742 <__swsetup_r+0x16>
 800b73c:	4628      	mov	r0, r5
 800b73e:	f000 f953 	bl	800b9e8 <__sinit>
 800b742:	4b2e      	ldr	r3, [pc, #184]	; (800b7fc <__swsetup_r+0xd0>)
 800b744:	429c      	cmp	r4, r3
 800b746:	d10f      	bne.n	800b768 <__swsetup_r+0x3c>
 800b748:	686c      	ldr	r4, [r5, #4]
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	b29a      	uxth	r2, r3
 800b750:	0715      	lsls	r5, r2, #28
 800b752:	d42c      	bmi.n	800b7ae <__swsetup_r+0x82>
 800b754:	06d0      	lsls	r0, r2, #27
 800b756:	d411      	bmi.n	800b77c <__swsetup_r+0x50>
 800b758:	2209      	movs	r2, #9
 800b75a:	6032      	str	r2, [r6, #0]
 800b75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	f04f 30ff 	mov.w	r0, #4294967295
 800b766:	e03e      	b.n	800b7e6 <__swsetup_r+0xba>
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <__swsetup_r+0xd4>)
 800b76a:	429c      	cmp	r4, r3
 800b76c:	d101      	bne.n	800b772 <__swsetup_r+0x46>
 800b76e:	68ac      	ldr	r4, [r5, #8]
 800b770:	e7eb      	b.n	800b74a <__swsetup_r+0x1e>
 800b772:	4b24      	ldr	r3, [pc, #144]	; (800b804 <__swsetup_r+0xd8>)
 800b774:	429c      	cmp	r4, r3
 800b776:	bf08      	it	eq
 800b778:	68ec      	ldreq	r4, [r5, #12]
 800b77a:	e7e6      	b.n	800b74a <__swsetup_r+0x1e>
 800b77c:	0751      	lsls	r1, r2, #29
 800b77e:	d512      	bpl.n	800b7a6 <__swsetup_r+0x7a>
 800b780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b782:	b141      	cbz	r1, 800b796 <__swsetup_r+0x6a>
 800b784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b788:	4299      	cmp	r1, r3
 800b78a:	d002      	beq.n	800b792 <__swsetup_r+0x66>
 800b78c:	4630      	mov	r0, r6
 800b78e:	f7ff fe5f 	bl	800b450 <_free_r>
 800b792:	2300      	movs	r3, #0
 800b794:	6363      	str	r3, [r4, #52]	; 0x34
 800b796:	89a3      	ldrh	r3, [r4, #12]
 800b798:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b79c:	81a3      	strh	r3, [r4, #12]
 800b79e:	2300      	movs	r3, #0
 800b7a0:	6063      	str	r3, [r4, #4]
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f043 0308 	orr.w	r3, r3, #8
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	b94b      	cbnz	r3, 800b7c6 <__swsetup_r+0x9a>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7bc:	d003      	beq.n	800b7c6 <__swsetup_r+0x9a>
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f000 f9bf 	bl	800bb44 <__smakebuf_r>
 800b7c6:	89a2      	ldrh	r2, [r4, #12]
 800b7c8:	f012 0301 	ands.w	r3, r2, #1
 800b7cc:	d00c      	beq.n	800b7e8 <__swsetup_r+0xbc>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60a3      	str	r3, [r4, #8]
 800b7d2:	6963      	ldr	r3, [r4, #20]
 800b7d4:	425b      	negs	r3, r3
 800b7d6:	61a3      	str	r3, [r4, #24]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	b953      	cbnz	r3, 800b7f2 <__swsetup_r+0xc6>
 800b7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b7e4:	d1ba      	bne.n	800b75c <__swsetup_r+0x30>
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}
 800b7e8:	0792      	lsls	r2, r2, #30
 800b7ea:	bf58      	it	pl
 800b7ec:	6963      	ldrpl	r3, [r4, #20]
 800b7ee:	60a3      	str	r3, [r4, #8]
 800b7f0:	e7f2      	b.n	800b7d8 <__swsetup_r+0xac>
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	e7f7      	b.n	800b7e6 <__swsetup_r+0xba>
 800b7f6:	bf00      	nop
 800b7f8:	20000058 	.word	0x20000058
 800b7fc:	0800d9b8 	.word	0x0800d9b8
 800b800:	0800d9d8 	.word	0x0800d9d8
 800b804:	0800d998 	.word	0x0800d998

0800b808 <__sflush_r>:
 800b808:	898a      	ldrh	r2, [r1, #12]
 800b80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b80e:	4605      	mov	r5, r0
 800b810:	0710      	lsls	r0, r2, #28
 800b812:	460c      	mov	r4, r1
 800b814:	d458      	bmi.n	800b8c8 <__sflush_r+0xc0>
 800b816:	684b      	ldr	r3, [r1, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dc05      	bgt.n	800b828 <__sflush_r+0x20>
 800b81c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b81e:	2b00      	cmp	r3, #0
 800b820:	dc02      	bgt.n	800b828 <__sflush_r+0x20>
 800b822:	2000      	movs	r0, #0
 800b824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b828:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	d0f9      	beq.n	800b822 <__sflush_r+0x1a>
 800b82e:	2300      	movs	r3, #0
 800b830:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b834:	682f      	ldr	r7, [r5, #0]
 800b836:	6a21      	ldr	r1, [r4, #32]
 800b838:	602b      	str	r3, [r5, #0]
 800b83a:	d032      	beq.n	800b8a2 <__sflush_r+0x9a>
 800b83c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	075a      	lsls	r2, r3, #29
 800b842:	d505      	bpl.n	800b850 <__sflush_r+0x48>
 800b844:	6863      	ldr	r3, [r4, #4]
 800b846:	1ac0      	subs	r0, r0, r3
 800b848:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b84a:	b10b      	cbz	r3, 800b850 <__sflush_r+0x48>
 800b84c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b84e:	1ac0      	subs	r0, r0, r3
 800b850:	2300      	movs	r3, #0
 800b852:	4602      	mov	r2, r0
 800b854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b856:	6a21      	ldr	r1, [r4, #32]
 800b858:	4628      	mov	r0, r5
 800b85a:	47b0      	blx	r6
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	d106      	bne.n	800b870 <__sflush_r+0x68>
 800b862:	6829      	ldr	r1, [r5, #0]
 800b864:	291d      	cmp	r1, #29
 800b866:	d848      	bhi.n	800b8fa <__sflush_r+0xf2>
 800b868:	4a29      	ldr	r2, [pc, #164]	; (800b910 <__sflush_r+0x108>)
 800b86a:	40ca      	lsrs	r2, r1
 800b86c:	07d6      	lsls	r6, r2, #31
 800b86e:	d544      	bpl.n	800b8fa <__sflush_r+0xf2>
 800b870:	2200      	movs	r2, #0
 800b872:	6062      	str	r2, [r4, #4]
 800b874:	04d9      	lsls	r1, r3, #19
 800b876:	6922      	ldr	r2, [r4, #16]
 800b878:	6022      	str	r2, [r4, #0]
 800b87a:	d504      	bpl.n	800b886 <__sflush_r+0x7e>
 800b87c:	1c42      	adds	r2, r0, #1
 800b87e:	d101      	bne.n	800b884 <__sflush_r+0x7c>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b903      	cbnz	r3, 800b886 <__sflush_r+0x7e>
 800b884:	6560      	str	r0, [r4, #84]	; 0x54
 800b886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b888:	602f      	str	r7, [r5, #0]
 800b88a:	2900      	cmp	r1, #0
 800b88c:	d0c9      	beq.n	800b822 <__sflush_r+0x1a>
 800b88e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b892:	4299      	cmp	r1, r3
 800b894:	d002      	beq.n	800b89c <__sflush_r+0x94>
 800b896:	4628      	mov	r0, r5
 800b898:	f7ff fdda 	bl	800b450 <_free_r>
 800b89c:	2000      	movs	r0, #0
 800b89e:	6360      	str	r0, [r4, #52]	; 0x34
 800b8a0:	e7c0      	b.n	800b824 <__sflush_r+0x1c>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	47b0      	blx	r6
 800b8a8:	1c41      	adds	r1, r0, #1
 800b8aa:	d1c8      	bne.n	800b83e <__sflush_r+0x36>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0c5      	beq.n	800b83e <__sflush_r+0x36>
 800b8b2:	2b1d      	cmp	r3, #29
 800b8b4:	d001      	beq.n	800b8ba <__sflush_r+0xb2>
 800b8b6:	2b16      	cmp	r3, #22
 800b8b8:	d101      	bne.n	800b8be <__sflush_r+0xb6>
 800b8ba:	602f      	str	r7, [r5, #0]
 800b8bc:	e7b1      	b.n	800b822 <__sflush_r+0x1a>
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8c4:	81a3      	strh	r3, [r4, #12]
 800b8c6:	e7ad      	b.n	800b824 <__sflush_r+0x1c>
 800b8c8:	690f      	ldr	r7, [r1, #16]
 800b8ca:	2f00      	cmp	r7, #0
 800b8cc:	d0a9      	beq.n	800b822 <__sflush_r+0x1a>
 800b8ce:	0793      	lsls	r3, r2, #30
 800b8d0:	680e      	ldr	r6, [r1, #0]
 800b8d2:	bf08      	it	eq
 800b8d4:	694b      	ldreq	r3, [r1, #20]
 800b8d6:	600f      	str	r7, [r1, #0]
 800b8d8:	bf18      	it	ne
 800b8da:	2300      	movne	r3, #0
 800b8dc:	eba6 0807 	sub.w	r8, r6, r7
 800b8e0:	608b      	str	r3, [r1, #8]
 800b8e2:	f1b8 0f00 	cmp.w	r8, #0
 800b8e6:	dd9c      	ble.n	800b822 <__sflush_r+0x1a>
 800b8e8:	4643      	mov	r3, r8
 800b8ea:	463a      	mov	r2, r7
 800b8ec:	6a21      	ldr	r1, [r4, #32]
 800b8ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	47b0      	blx	r6
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	dc06      	bgt.n	800b906 <__sflush_r+0xfe>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8fe:	81a3      	strh	r3, [r4, #12]
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	e78e      	b.n	800b824 <__sflush_r+0x1c>
 800b906:	4407      	add	r7, r0
 800b908:	eba8 0800 	sub.w	r8, r8, r0
 800b90c:	e7e9      	b.n	800b8e2 <__sflush_r+0xda>
 800b90e:	bf00      	nop
 800b910:	20400001 	.word	0x20400001

0800b914 <_fflush_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	690b      	ldr	r3, [r1, #16]
 800b918:	4605      	mov	r5, r0
 800b91a:	460c      	mov	r4, r1
 800b91c:	b1db      	cbz	r3, 800b956 <_fflush_r+0x42>
 800b91e:	b118      	cbz	r0, 800b928 <_fflush_r+0x14>
 800b920:	6983      	ldr	r3, [r0, #24]
 800b922:	b90b      	cbnz	r3, 800b928 <_fflush_r+0x14>
 800b924:	f000 f860 	bl	800b9e8 <__sinit>
 800b928:	4b0c      	ldr	r3, [pc, #48]	; (800b95c <_fflush_r+0x48>)
 800b92a:	429c      	cmp	r4, r3
 800b92c:	d109      	bne.n	800b942 <_fflush_r+0x2e>
 800b92e:	686c      	ldr	r4, [r5, #4]
 800b930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b934:	b17b      	cbz	r3, 800b956 <_fflush_r+0x42>
 800b936:	4621      	mov	r1, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b93e:	f7ff bf63 	b.w	800b808 <__sflush_r>
 800b942:	4b07      	ldr	r3, [pc, #28]	; (800b960 <_fflush_r+0x4c>)
 800b944:	429c      	cmp	r4, r3
 800b946:	d101      	bne.n	800b94c <_fflush_r+0x38>
 800b948:	68ac      	ldr	r4, [r5, #8]
 800b94a:	e7f1      	b.n	800b930 <_fflush_r+0x1c>
 800b94c:	4b05      	ldr	r3, [pc, #20]	; (800b964 <_fflush_r+0x50>)
 800b94e:	429c      	cmp	r4, r3
 800b950:	bf08      	it	eq
 800b952:	68ec      	ldreq	r4, [r5, #12]
 800b954:	e7ec      	b.n	800b930 <_fflush_r+0x1c>
 800b956:	2000      	movs	r0, #0
 800b958:	bd38      	pop	{r3, r4, r5, pc}
 800b95a:	bf00      	nop
 800b95c:	0800d9b8 	.word	0x0800d9b8
 800b960:	0800d9d8 	.word	0x0800d9d8
 800b964:	0800d998 	.word	0x0800d998

0800b968 <std>:
 800b968:	2300      	movs	r3, #0
 800b96a:	b510      	push	{r4, lr}
 800b96c:	4604      	mov	r4, r0
 800b96e:	e9c0 3300 	strd	r3, r3, [r0]
 800b972:	6083      	str	r3, [r0, #8]
 800b974:	8181      	strh	r1, [r0, #12]
 800b976:	6643      	str	r3, [r0, #100]	; 0x64
 800b978:	81c2      	strh	r2, [r0, #14]
 800b97a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b97e:	6183      	str	r3, [r0, #24]
 800b980:	4619      	mov	r1, r3
 800b982:	2208      	movs	r2, #8
 800b984:	305c      	adds	r0, #92	; 0x5c
 800b986:	f7ff fd5a 	bl	800b43e <memset>
 800b98a:	4b05      	ldr	r3, [pc, #20]	; (800b9a0 <std+0x38>)
 800b98c:	6263      	str	r3, [r4, #36]	; 0x24
 800b98e:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <std+0x3c>)
 800b990:	62a3      	str	r3, [r4, #40]	; 0x28
 800b992:	4b05      	ldr	r3, [pc, #20]	; (800b9a8 <std+0x40>)
 800b994:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <std+0x44>)
 800b998:	6224      	str	r4, [r4, #32]
 800b99a:	6323      	str	r3, [r4, #48]	; 0x30
 800b99c:	bd10      	pop	{r4, pc}
 800b99e:	bf00      	nop
 800b9a0:	0800bbc9 	.word	0x0800bbc9
 800b9a4:	0800bbeb 	.word	0x0800bbeb
 800b9a8:	0800bc23 	.word	0x0800bc23
 800b9ac:	0800bc47 	.word	0x0800bc47

0800b9b0 <_cleanup_r>:
 800b9b0:	4901      	ldr	r1, [pc, #4]	; (800b9b8 <_cleanup_r+0x8>)
 800b9b2:	f000 b885 	b.w	800bac0 <_fwalk_reent>
 800b9b6:	bf00      	nop
 800b9b8:	0800b915 	.word	0x0800b915

0800b9bc <__sfmoreglue>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	1e4a      	subs	r2, r1, #1
 800b9c0:	2568      	movs	r5, #104	; 0x68
 800b9c2:	4355      	muls	r5, r2
 800b9c4:	460e      	mov	r6, r1
 800b9c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9ca:	f7ff fd8f 	bl	800b4ec <_malloc_r>
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	b140      	cbz	r0, 800b9e4 <__sfmoreglue+0x28>
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b9d8:	300c      	adds	r0, #12
 800b9da:	60a0      	str	r0, [r4, #8]
 800b9dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b9e0:	f7ff fd2d 	bl	800b43e <memset>
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}

0800b9e8 <__sinit>:
 800b9e8:	6983      	ldr	r3, [r0, #24]
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	bb33      	cbnz	r3, 800ba3e <__sinit+0x56>
 800b9f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800b9f4:	6503      	str	r3, [r0, #80]	; 0x50
 800b9f6:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <__sinit+0x58>)
 800b9f8:	4a12      	ldr	r2, [pc, #72]	; (800ba44 <__sinit+0x5c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6282      	str	r2, [r0, #40]	; 0x28
 800b9fe:	4298      	cmp	r0, r3
 800ba00:	bf04      	itt	eq
 800ba02:	2301      	moveq	r3, #1
 800ba04:	6183      	streq	r3, [r0, #24]
 800ba06:	f000 f81f 	bl	800ba48 <__sfp>
 800ba0a:	6060      	str	r0, [r4, #4]
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f000 f81b 	bl	800ba48 <__sfp>
 800ba12:	60a0      	str	r0, [r4, #8]
 800ba14:	4620      	mov	r0, r4
 800ba16:	f000 f817 	bl	800ba48 <__sfp>
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	60e0      	str	r0, [r4, #12]
 800ba1e:	2104      	movs	r1, #4
 800ba20:	6860      	ldr	r0, [r4, #4]
 800ba22:	f7ff ffa1 	bl	800b968 <std>
 800ba26:	2201      	movs	r2, #1
 800ba28:	2109      	movs	r1, #9
 800ba2a:	68a0      	ldr	r0, [r4, #8]
 800ba2c:	f7ff ff9c 	bl	800b968 <std>
 800ba30:	2202      	movs	r2, #2
 800ba32:	2112      	movs	r1, #18
 800ba34:	68e0      	ldr	r0, [r4, #12]
 800ba36:	f7ff ff97 	bl	800b968 <std>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	61a3      	str	r3, [r4, #24]
 800ba3e:	bd10      	pop	{r4, pc}
 800ba40:	0800d994 	.word	0x0800d994
 800ba44:	0800b9b1 	.word	0x0800b9b1

0800ba48 <__sfp>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <__sfp+0x70>)
 800ba4c:	681e      	ldr	r6, [r3, #0]
 800ba4e:	69b3      	ldr	r3, [r6, #24]
 800ba50:	4607      	mov	r7, r0
 800ba52:	b913      	cbnz	r3, 800ba5a <__sfp+0x12>
 800ba54:	4630      	mov	r0, r6
 800ba56:	f7ff ffc7 	bl	800b9e8 <__sinit>
 800ba5a:	3648      	adds	r6, #72	; 0x48
 800ba5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	d503      	bpl.n	800ba6c <__sfp+0x24>
 800ba64:	6833      	ldr	r3, [r6, #0]
 800ba66:	b133      	cbz	r3, 800ba76 <__sfp+0x2e>
 800ba68:	6836      	ldr	r6, [r6, #0]
 800ba6a:	e7f7      	b.n	800ba5c <__sfp+0x14>
 800ba6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba70:	b16d      	cbz	r5, 800ba8e <__sfp+0x46>
 800ba72:	3468      	adds	r4, #104	; 0x68
 800ba74:	e7f4      	b.n	800ba60 <__sfp+0x18>
 800ba76:	2104      	movs	r1, #4
 800ba78:	4638      	mov	r0, r7
 800ba7a:	f7ff ff9f 	bl	800b9bc <__sfmoreglue>
 800ba7e:	6030      	str	r0, [r6, #0]
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d1f1      	bne.n	800ba68 <__sfp+0x20>
 800ba84:	230c      	movs	r3, #12
 800ba86:	603b      	str	r3, [r7, #0]
 800ba88:	4604      	mov	r4, r0
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba8e:	4b0b      	ldr	r3, [pc, #44]	; (800babc <__sfp+0x74>)
 800ba90:	6665      	str	r5, [r4, #100]	; 0x64
 800ba92:	e9c4 5500 	strd	r5, r5, [r4]
 800ba96:	60a5      	str	r5, [r4, #8]
 800ba98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ba9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800baa0:	2208      	movs	r2, #8
 800baa2:	4629      	mov	r1, r5
 800baa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800baa8:	f7ff fcc9 	bl	800b43e <memset>
 800baac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bab4:	e7e9      	b.n	800ba8a <__sfp+0x42>
 800bab6:	bf00      	nop
 800bab8:	0800d994 	.word	0x0800d994
 800babc:	ffff0001 	.word	0xffff0001

0800bac0 <_fwalk_reent>:
 800bac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac4:	4680      	mov	r8, r0
 800bac6:	4689      	mov	r9, r1
 800bac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bacc:	2600      	movs	r6, #0
 800bace:	b914      	cbnz	r4, 800bad6 <_fwalk_reent+0x16>
 800bad0:	4630      	mov	r0, r6
 800bad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bada:	3f01      	subs	r7, #1
 800badc:	d501      	bpl.n	800bae2 <_fwalk_reent+0x22>
 800bade:	6824      	ldr	r4, [r4, #0]
 800bae0:	e7f5      	b.n	800bace <_fwalk_reent+0xe>
 800bae2:	89ab      	ldrh	r3, [r5, #12]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d907      	bls.n	800baf8 <_fwalk_reent+0x38>
 800bae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baec:	3301      	adds	r3, #1
 800baee:	d003      	beq.n	800baf8 <_fwalk_reent+0x38>
 800baf0:	4629      	mov	r1, r5
 800baf2:	4640      	mov	r0, r8
 800baf4:	47c8      	blx	r9
 800baf6:	4306      	orrs	r6, r0
 800baf8:	3568      	adds	r5, #104	; 0x68
 800bafa:	e7ee      	b.n	800bada <_fwalk_reent+0x1a>

0800bafc <__swhatbuf_r>:
 800bafc:	b570      	push	{r4, r5, r6, lr}
 800bafe:	460e      	mov	r6, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	2900      	cmp	r1, #0
 800bb06:	b096      	sub	sp, #88	; 0x58
 800bb08:	4614      	mov	r4, r2
 800bb0a:	461d      	mov	r5, r3
 800bb0c:	da07      	bge.n	800bb1e <__swhatbuf_r+0x22>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	602b      	str	r3, [r5, #0]
 800bb12:	89b3      	ldrh	r3, [r6, #12]
 800bb14:	061a      	lsls	r2, r3, #24
 800bb16:	d410      	bmi.n	800bb3a <__swhatbuf_r+0x3e>
 800bb18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb1c:	e00e      	b.n	800bb3c <__swhatbuf_r+0x40>
 800bb1e:	466a      	mov	r2, sp
 800bb20:	f000 f8b8 	bl	800bc94 <_fstat_r>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	dbf2      	blt.n	800bb0e <__swhatbuf_r+0x12>
 800bb28:	9a01      	ldr	r2, [sp, #4]
 800bb2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb32:	425a      	negs	r2, r3
 800bb34:	415a      	adcs	r2, r3
 800bb36:	602a      	str	r2, [r5, #0]
 800bb38:	e7ee      	b.n	800bb18 <__swhatbuf_r+0x1c>
 800bb3a:	2340      	movs	r3, #64	; 0x40
 800bb3c:	2000      	movs	r0, #0
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	b016      	add	sp, #88	; 0x58
 800bb42:	bd70      	pop	{r4, r5, r6, pc}

0800bb44 <__smakebuf_r>:
 800bb44:	898b      	ldrh	r3, [r1, #12]
 800bb46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb48:	079d      	lsls	r5, r3, #30
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	d507      	bpl.n	800bb60 <__smakebuf_r+0x1c>
 800bb50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	6123      	str	r3, [r4, #16]
 800bb58:	2301      	movs	r3, #1
 800bb5a:	6163      	str	r3, [r4, #20]
 800bb5c:	b002      	add	sp, #8
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
 800bb60:	ab01      	add	r3, sp, #4
 800bb62:	466a      	mov	r2, sp
 800bb64:	f7ff ffca 	bl	800bafc <__swhatbuf_r>
 800bb68:	9900      	ldr	r1, [sp, #0]
 800bb6a:	4605      	mov	r5, r0
 800bb6c:	4630      	mov	r0, r6
 800bb6e:	f7ff fcbd 	bl	800b4ec <_malloc_r>
 800bb72:	b948      	cbnz	r0, 800bb88 <__smakebuf_r+0x44>
 800bb74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb78:	059a      	lsls	r2, r3, #22
 800bb7a:	d4ef      	bmi.n	800bb5c <__smakebuf_r+0x18>
 800bb7c:	f023 0303 	bic.w	r3, r3, #3
 800bb80:	f043 0302 	orr.w	r3, r3, #2
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	e7e3      	b.n	800bb50 <__smakebuf_r+0xc>
 800bb88:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <__smakebuf_r+0x7c>)
 800bb8a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	6020      	str	r0, [r4, #0]
 800bb90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	9b00      	ldr	r3, [sp, #0]
 800bb98:	6163      	str	r3, [r4, #20]
 800bb9a:	9b01      	ldr	r3, [sp, #4]
 800bb9c:	6120      	str	r0, [r4, #16]
 800bb9e:	b15b      	cbz	r3, 800bbb8 <__smakebuf_r+0x74>
 800bba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bba4:	4630      	mov	r0, r6
 800bba6:	f000 f887 	bl	800bcb8 <_isatty_r>
 800bbaa:	b128      	cbz	r0, 800bbb8 <__smakebuf_r+0x74>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	f023 0303 	bic.w	r3, r3, #3
 800bbb2:	f043 0301 	orr.w	r3, r3, #1
 800bbb6:	81a3      	strh	r3, [r4, #12]
 800bbb8:	89a3      	ldrh	r3, [r4, #12]
 800bbba:	431d      	orrs	r5, r3
 800bbbc:	81a5      	strh	r5, [r4, #12]
 800bbbe:	e7cd      	b.n	800bb5c <__smakebuf_r+0x18>
 800bbc0:	0800b9b1 	.word	0x0800b9b1

0800bbc4 <__malloc_lock>:
 800bbc4:	4770      	bx	lr

0800bbc6 <__malloc_unlock>:
 800bbc6:	4770      	bx	lr

0800bbc8 <__sread>:
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	460c      	mov	r4, r1
 800bbcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbd0:	f000 f894 	bl	800bcfc <_read_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	bfab      	itete	ge
 800bbd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bbda:	89a3      	ldrhlt	r3, [r4, #12]
 800bbdc:	181b      	addge	r3, r3, r0
 800bbde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bbe2:	bfac      	ite	ge
 800bbe4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bbe6:	81a3      	strhlt	r3, [r4, #12]
 800bbe8:	bd10      	pop	{r4, pc}

0800bbea <__swrite>:
 800bbea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbee:	461f      	mov	r7, r3
 800bbf0:	898b      	ldrh	r3, [r1, #12]
 800bbf2:	05db      	lsls	r3, r3, #23
 800bbf4:	4605      	mov	r5, r0
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	4616      	mov	r6, r2
 800bbfa:	d505      	bpl.n	800bc08 <__swrite+0x1e>
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc04:	f000 f868 	bl	800bcd8 <_lseek_r>
 800bc08:	89a3      	ldrh	r3, [r4, #12]
 800bc0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc12:	81a3      	strh	r3, [r4, #12]
 800bc14:	4632      	mov	r2, r6
 800bc16:	463b      	mov	r3, r7
 800bc18:	4628      	mov	r0, r5
 800bc1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1e:	f000 b817 	b.w	800bc50 <_write_r>

0800bc22 <__sseek>:
 800bc22:	b510      	push	{r4, lr}
 800bc24:	460c      	mov	r4, r1
 800bc26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc2a:	f000 f855 	bl	800bcd8 <_lseek_r>
 800bc2e:	1c43      	adds	r3, r0, #1
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	bf15      	itete	ne
 800bc34:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc3e:	81a3      	strheq	r3, [r4, #12]
 800bc40:	bf18      	it	ne
 800bc42:	81a3      	strhne	r3, [r4, #12]
 800bc44:	bd10      	pop	{r4, pc}

0800bc46 <__sclose>:
 800bc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4a:	f000 b813 	b.w	800bc74 <_close_r>
	...

0800bc50 <_write_r>:
 800bc50:	b538      	push	{r3, r4, r5, lr}
 800bc52:	4c07      	ldr	r4, [pc, #28]	; (800bc70 <_write_r+0x20>)
 800bc54:	4605      	mov	r5, r0
 800bc56:	4608      	mov	r0, r1
 800bc58:	4611      	mov	r1, r2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	6022      	str	r2, [r4, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	f7f5 ff08 	bl	8001a74 <_write>
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	d102      	bne.n	800bc6e <_write_r+0x1e>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	b103      	cbz	r3, 800bc6e <_write_r+0x1e>
 800bc6c:	602b      	str	r3, [r5, #0]
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	200009e8 	.word	0x200009e8

0800bc74 <_close_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4c06      	ldr	r4, [pc, #24]	; (800bc90 <_close_r+0x1c>)
 800bc78:	2300      	movs	r3, #0
 800bc7a:	4605      	mov	r5, r0
 800bc7c:	4608      	mov	r0, r1
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	f7f6 fa01 	bl	8002086 <_close>
 800bc84:	1c43      	adds	r3, r0, #1
 800bc86:	d102      	bne.n	800bc8e <_close_r+0x1a>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	b103      	cbz	r3, 800bc8e <_close_r+0x1a>
 800bc8c:	602b      	str	r3, [r5, #0]
 800bc8e:	bd38      	pop	{r3, r4, r5, pc}
 800bc90:	200009e8 	.word	0x200009e8

0800bc94 <_fstat_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4c07      	ldr	r4, [pc, #28]	; (800bcb4 <_fstat_r+0x20>)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	4608      	mov	r0, r1
 800bc9e:	4611      	mov	r1, r2
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	f7f6 f9fc 	bl	800209e <_fstat>
 800bca6:	1c43      	adds	r3, r0, #1
 800bca8:	d102      	bne.n	800bcb0 <_fstat_r+0x1c>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	b103      	cbz	r3, 800bcb0 <_fstat_r+0x1c>
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	bd38      	pop	{r3, r4, r5, pc}
 800bcb2:	bf00      	nop
 800bcb4:	200009e8 	.word	0x200009e8

0800bcb8 <_isatty_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4c06      	ldr	r4, [pc, #24]	; (800bcd4 <_isatty_r+0x1c>)
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	4608      	mov	r0, r1
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	f7f6 f9fb 	bl	80020be <_isatty>
 800bcc8:	1c43      	adds	r3, r0, #1
 800bcca:	d102      	bne.n	800bcd2 <_isatty_r+0x1a>
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	b103      	cbz	r3, 800bcd2 <_isatty_r+0x1a>
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	bd38      	pop	{r3, r4, r5, pc}
 800bcd4:	200009e8 	.word	0x200009e8

0800bcd8 <_lseek_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4c07      	ldr	r4, [pc, #28]	; (800bcf8 <_lseek_r+0x20>)
 800bcdc:	4605      	mov	r5, r0
 800bcde:	4608      	mov	r0, r1
 800bce0:	4611      	mov	r1, r2
 800bce2:	2200      	movs	r2, #0
 800bce4:	6022      	str	r2, [r4, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	f7f6 f9f4 	bl	80020d4 <_lseek>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_lseek_r+0x1e>
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_lseek_r+0x1e>
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	200009e8 	.word	0x200009e8

0800bcfc <_read_r>:
 800bcfc:	b538      	push	{r3, r4, r5, lr}
 800bcfe:	4c07      	ldr	r4, [pc, #28]	; (800bd1c <_read_r+0x20>)
 800bd00:	4605      	mov	r5, r0
 800bd02:	4608      	mov	r0, r1
 800bd04:	4611      	mov	r1, r2
 800bd06:	2200      	movs	r2, #0
 800bd08:	6022      	str	r2, [r4, #0]
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	f7f6 f99e 	bl	800204c <_read>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_read_r+0x1e>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_read_r+0x1e>
 800bd18:	602b      	str	r3, [r5, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	200009e8 	.word	0x200009e8

0800bd20 <_init>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	bf00      	nop
 800bd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd26:	bc08      	pop	{r3}
 800bd28:	469e      	mov	lr, r3
 800bd2a:	4770      	bx	lr

0800bd2c <_fini>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr
