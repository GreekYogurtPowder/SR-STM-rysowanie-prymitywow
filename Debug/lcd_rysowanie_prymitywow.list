
lcd_rysowanie_prymitywow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f894  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f40  0800fa48  0800fa48  0001fa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011988  08011988  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08011988  08011988  00021988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011990  08011990  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011990  08011990  00021990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011994  08011994  00021994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08011998  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000930  200000c4  08011a5c  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  08011a5c  000309f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031cd5  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006800  00000000  00000000  00061dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002678  00000000  00000000  000685d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002368  00000000  00000000  0006ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002db1f  00000000  00000000  0006cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000283ca  00000000  00000000  0009aacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f69a3  00000000  00000000  000c2e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b983c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9d0  00000000  00000000  001b98b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fa2c 	.word	0x0800fa2c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	0800fa2c 	.word	0x0800fa2c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b972 	b.w	8000de8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	4688      	mov	r8, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14b      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4615      	mov	r5, r2
 8000b2e:	d967      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0720 	rsb	r7, r2, #32
 8000b3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b42:	4095      	lsls	r5, r2
 8000b44:	ea47 0803 	orr.w	r8, r7, r3
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b54:	fa1f fc85 	uxth.w	ip, r5
 8000b58:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b5c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b60:	fb07 f10c 	mul.w	r1, r7, ip
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18eb      	adds	r3, r5, r3
 8000b6a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b6e:	f080 811b 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8118 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000b78:	3f02      	subs	r7, #2
 8000b7a:	442b      	add	r3, r5
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b84:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b90:	45a4      	cmp	ip, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	192c      	adds	r4, r5, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8107 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	f240 8104 	bls.w	8000dac <__udivmoddi4+0x290>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	442c      	add	r4, r5
 8000ba8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bac:	eba4 040c 	sub.w	r4, r4, ip
 8000bb0:	2700      	movs	r7, #0
 8000bb2:	b11e      	cbz	r6, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d909      	bls.n	8000bda <__udivmoddi4+0xbe>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80eb 	beq.w	8000da2 <__udivmoddi4+0x286>
 8000bcc:	2700      	movs	r7, #0
 8000bce:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd2:	4638      	mov	r0, r7
 8000bd4:	4639      	mov	r1, r7
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	fab3 f783 	clz	r7, r3
 8000bde:	2f00      	cmp	r7, #0
 8000be0:	d147      	bne.n	8000c72 <__udivmoddi4+0x156>
 8000be2:	428b      	cmp	r3, r1
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xd0>
 8000be6:	4282      	cmp	r2, r0
 8000be8:	f200 80fa 	bhi.w	8000de0 <__udivmoddi4+0x2c4>
 8000bec:	1a84      	subs	r4, r0, r2
 8000bee:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	4698      	mov	r8, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d0e0      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000bfa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bfe:	e7dd      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c00:	b902      	cbnz	r2, 8000c04 <__udivmoddi4+0xe8>
 8000c02:	deff      	udf	#255	; 0xff
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 808f 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0e:	1b49      	subs	r1, r1, r5
 8000c10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c14:	fa1f f885 	uxth.w	r8, r5
 8000c18:	2701      	movs	r7, #1
 8000c1a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c28:	fb08 f10c 	mul.w	r1, r8, ip
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c30:	18eb      	adds	r3, r5, r3
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	f200 80cd 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x14c>
 8000c58:	192c      	adds	r4, r5, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x14a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80b6 	bhi.w	8000dd2 <__udivmoddi4+0x2b6>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e79f      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c72:	f1c7 0c20 	rsb	ip, r7, #32
 8000c76:	40bb      	lsls	r3, r7
 8000c78:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c7c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c80:	fa01 f407 	lsl.w	r4, r1, r7
 8000c84:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c88:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c8c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c90:	4325      	orrs	r5, r4
 8000c92:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c96:	0c2c      	lsrs	r4, r5, #16
 8000c98:	fb08 3319 	mls	r3, r8, r9, r3
 8000c9c:	fa1f fa8e 	uxth.w	sl, lr
 8000ca0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	fa02 f207 	lsl.w	r2, r2, r7
 8000cae:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cbc:	f080 8087 	bcs.w	8000dce <__udivmoddi4+0x2b2>
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	f240 8084 	bls.w	8000dce <__udivmoddi4+0x2b2>
 8000cc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cca:	4473      	add	r3, lr
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	b2ad      	uxth	r5, r5
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cd8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cdc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce0:	45a2      	cmp	sl, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cec:	d26b      	bcs.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cee:	45a2      	cmp	sl, r4
 8000cf0:	d969      	bls.n	8000dc6 <__udivmoddi4+0x2aa>
 8000cf2:	3802      	subs	r0, #2
 8000cf4:	4474      	add	r4, lr
 8000cf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cfe:	eba4 040a 	sub.w	r4, r4, sl
 8000d02:	454c      	cmp	r4, r9
 8000d04:	46c2      	mov	sl, r8
 8000d06:	464b      	mov	r3, r9
 8000d08:	d354      	bcc.n	8000db4 <__udivmoddi4+0x298>
 8000d0a:	d051      	beq.n	8000db0 <__udivmoddi4+0x294>
 8000d0c:	2e00      	cmp	r6, #0
 8000d0e:	d069      	beq.n	8000de4 <__udivmoddi4+0x2c8>
 8000d10:	ebb1 050a 	subs.w	r5, r1, sl
 8000d14:	eb64 0403 	sbc.w	r4, r4, r3
 8000d18:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d1c:	40fd      	lsrs	r5, r7
 8000d1e:	40fc      	lsrs	r4, r7
 8000d20:	ea4c 0505 	orr.w	r5, ip, r5
 8000d24:	e9c6 5400 	strd	r5, r4, [r6]
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e747      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f703 	lsr.w	r7, r0, r3
 8000d34:	4095      	lsls	r5, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d42:	4338      	orrs	r0, r7
 8000d44:	0c01      	lsrs	r1, r0, #16
 8000d46:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4a:	fa1f f885 	uxth.w	r8, r5
 8000d4e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d56:	fb07 f308 	mul.w	r3, r7, r8
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d60:	d907      	bls.n	8000d72 <__udivmoddi4+0x256>
 8000d62:	1869      	adds	r1, r5, r1
 8000d64:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d68:	d22f      	bcs.n	8000dca <__udivmoddi4+0x2ae>
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	d92d      	bls.n	8000dca <__udivmoddi4+0x2ae>
 8000d6e:	3f02      	subs	r7, #2
 8000d70:	4429      	add	r1, r5
 8000d72:	1acb      	subs	r3, r1, r3
 8000d74:	b281      	uxth	r1, r0
 8000d76:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb00 f308 	mul.w	r3, r0, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x27e>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d90:	d217      	bcs.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d915      	bls.n	8000dc2 <__udivmoddi4+0x2a6>
 8000d96:	3802      	subs	r0, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1ac9      	subs	r1, r1, r3
 8000d9c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da0:	e73b      	b.n	8000c1a <__udivmoddi4+0xfe>
 8000da2:	4637      	mov	r7, r6
 8000da4:	4630      	mov	r0, r6
 8000da6:	e709      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da8:	4607      	mov	r7, r0
 8000daa:	e6e7      	b.n	8000b7c <__udivmoddi4+0x60>
 8000dac:	4618      	mov	r0, r3
 8000dae:	e6fb      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000db0:	4541      	cmp	r1, r8
 8000db2:	d2ab      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000db8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	e7a4      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	e7e9      	b.n	8000d9a <__udivmoddi4+0x27e>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	e795      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dca:	4667      	mov	r7, ip
 8000dcc:	e7d1      	b.n	8000d72 <__udivmoddi4+0x256>
 8000dce:	4681      	mov	r9, r0
 8000dd0:	e77c      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	442c      	add	r4, r5
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0x14c>
 8000dd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ddc:	442b      	add	r3, r5
 8000dde:	e72f      	b.n	8000c40 <__udivmoddi4+0x124>
 8000de0:	4638      	mov	r0, r7
 8000de2:	e708      	b.n	8000bf6 <__udivmoddi4+0xda>
 8000de4:	4637      	mov	r7, r6
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0xa0>

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <animationLine>:
 * @param koniec_y end Y position
 * @param odstep number of pixels beetwen next lines
 * @param czas the time between drawings
 */

void animationLine (uint16_t poczatek_x, uint16_t poczatek_y, uint16_t koniec_x, uint16_t koniec_y, uint16_t odstep, uint16_t czas) {
 8000dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000df0:	b088      	sub	sp, #32
 8000df2:	af02      	add	r7, sp, #8
 8000df4:	4604      	mov	r4, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4611      	mov	r1, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	4603      	mov	r3, r0
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	803b      	strh	r3, [r7, #0]

	//rysowanie linii od lewej prawej
	for(int i = 0; (poczatek_x + i) < koniec_x; i += odstep) {
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	e0ad      	b.n	8000f6e <animationLine+0x182>
		DrawLine(poczatek_x + i, poczatek_y, koniec_x - i, koniec_y, 2164260608 + i*10);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b218      	sxth	r0, r3
 8000e1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	b21c      	sxth	r4, r3
 8000e2e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000e40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	462b      	mov	r3, r5
 8000e48:	4622      	mov	r2, r4
 8000e4a:	f002 fb75 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 1, poczatek_y, koniec_x - i - 1 , koniec_y, 2164260608 + i*10);
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	4413      	add	r3, r2
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b218      	sxth	r0, r3
 8000e5e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b21c      	sxth	r4, r3
 8000e72:	f9b7 5000 	ldrsh.w	r5, [r7]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000e84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	462b      	mov	r3, r5
 8000e8c:	4622      	mov	r2, r4
 8000e8e:	f002 fb53 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 2, poczatek_y, koniec_x - i - 2, koniec_y, 2164260608 + i*10);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b218      	sxth	r0, r3
 8000ea2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	887a      	ldrh	r2, [r7, #2]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3b02      	subs	r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21c      	sxth	r4, r3
 8000eb6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000ec8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	462b      	mov	r3, r5
 8000ed0:	4622      	mov	r2, r4
 8000ed2:	f002 fb31 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 3, poczatek_y, koniec_x - i - 3 , koniec_y, 2164260608 + i*10);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3303      	adds	r3, #3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b218      	sxth	r0, r3
 8000ee6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	b21c      	sxth	r4, r3
 8000efa:	f9b7 5000 	ldrsh.w	r5, [r7]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4613      	mov	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4413      	add	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000f0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	462b      	mov	r3, r5
 8000f14:	4622      	mov	r2, r4
 8000f16:	f002 fb0f 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 4, poczatek_y, koniec_x - i - 4, koniec_y, 2164260608 + i*10);
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4413      	add	r3, r2
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3304      	adds	r3, #4
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b218      	sxth	r0, r3
 8000f2a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3b04      	subs	r3, #4
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	b21c      	sxth	r4, r3
 8000f3e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000f50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	462b      	mov	r3, r5
 8000f58:	4622      	mov	r2, r4
 8000f5a:	f002 faed 	bl	8003538 <DrawLine>
		HAL_Delay(czas);
 8000f5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 f883 	bl	800606c <HAL_Delay>
	for(int i = 0; (poczatek_x + i) < koniec_x; i += odstep) {
 8000f66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	88fa      	ldrh	r2, [r7, #6]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	441a      	add	r2, r3
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	f6ff af4b 	blt.w	8000e12 <animationLine+0x26>
	}

	//rysowanie linii od gory do dolu
	for(int i = 0; (poczatek_y + i) < koniec_y; i += odstep) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	e0ad      	b.n	80010de <animationLine+0x2f2>
		DrawLine(koniec_x, poczatek_y + i, poczatek_x, koniec_y - i, 2164260608 + i*10);
 8000f82:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	b219      	sxth	r1, r3
 8000f92:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	883a      	ldrh	r2, [r7, #0]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21d      	sxth	r5, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000fb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	4622      	mov	r2, r4
 8000fba:	f002 fabd 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 1, poczatek_x, koniec_y - i - 1, 2164260608 + i*10);
 8000fbe:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	b219      	sxth	r1, r3
 8000fd2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	883a      	ldrh	r2, [r7, #0]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21d      	sxth	r5, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8000ff4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	462b      	mov	r3, r5
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	f002 fa9b 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 2, poczatek_x, koniec_y - i - 2, 2164260608 + i*10);
 8001002:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	b29a      	uxth	r2, r3
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	3302      	adds	r3, #2
 8001012:	b29b      	uxth	r3, r3
 8001014:	b219      	sxth	r1, r3
 8001016:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	b29b      	uxth	r3, r3
 800101e:	883a      	ldrh	r2, [r7, #0]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	3b02      	subs	r3, #2
 8001026:	b29b      	uxth	r3, r3
 8001028:	b21d      	sxth	r5, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001038:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	462b      	mov	r3, r5
 8001040:	4622      	mov	r2, r4
 8001042:	f002 fa79 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 3, poczatek_x, koniec_y - i - 3, 2164260608 + i*10);
 8001046:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	b29a      	uxth	r2, r3
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	b29b      	uxth	r3, r3
 8001054:	3303      	adds	r3, #3
 8001056:	b29b      	uxth	r3, r3
 8001058:	b219      	sxth	r1, r3
 800105a:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	b29b      	uxth	r3, r3
 8001062:	883a      	ldrh	r2, [r7, #0]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	3b03      	subs	r3, #3
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21d      	sxth	r5, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800107c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	462b      	mov	r3, r5
 8001084:	4622      	mov	r2, r4
 8001086:	f002 fa57 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 4, poczatek_x, koniec_y - i - 4, 2164260608 + i*10);
 800108a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	b29a      	uxth	r2, r3
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	b29b      	uxth	r3, r3
 8001098:	3304      	adds	r3, #4
 800109a:	b29b      	uxth	r3, r3
 800109c:	b219      	sxth	r1, r3
 800109e:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	883a      	ldrh	r2, [r7, #0]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	3b04      	subs	r3, #4
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b21d      	sxth	r5, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80010c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	462b      	mov	r3, r5
 80010c8:	4622      	mov	r2, r4
 80010ca:	f002 fa35 	bl	8003538 <DrawLine>
		HAL_Delay(czas);
 80010ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80010d0:	4618      	mov	r0, r3
 80010d2:	f004 ffcb 	bl	800606c <HAL_Delay>
	for(int i = 0; (poczatek_y + i) < koniec_y; i += odstep) {
 80010d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4413      	add	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	88ba      	ldrh	r2, [r7, #4]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	441a      	add	r2, r3
 80010e4:	883b      	ldrh	r3, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	f6ff af4b 	blt.w	8000f82 <animationLine+0x196>
	}

	//czyszczenie linii od lewej prawej
	for(int i = 0; (poczatek_x + i) < koniec_x; i += odstep) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e099      	b.n	8001226 <animationLine+0x43a>
		DrawLine(poczatek_x + i, poczatek_y, koniec_x - i, koniec_y, BSP_LCD_GetBackColor());
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4413      	add	r3, r2
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b21c      	sxth	r4, r3
 80010fe:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	b29b      	uxth	r3, r3
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	b21e      	sxth	r6, r3
 800110e:	f9b7 8000 	ldrsh.w	r8, [r7]
 8001112:	f004 fc03 	bl	800591c <BSP_LCD_GetBackColor>
 8001116:	4603      	mov	r3, r0
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	4643      	mov	r3, r8
 800111c:	4632      	mov	r2, r6
 800111e:	4629      	mov	r1, r5
 8001120:	4620      	mov	r0, r4
 8001122:	f002 fa09 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 1, poczatek_y, koniec_x - i - 1, koniec_y, BSP_LCD_GetBackColor());
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b29a      	uxth	r2, r3
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4413      	add	r3, r2
 800112e:	b29b      	uxth	r3, r3
 8001130:	3301      	adds	r3, #1
 8001132:	b29b      	uxth	r3, r3
 8001134:	b21c      	sxth	r4, r3
 8001136:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	b29b      	uxth	r3, r3
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	b21e      	sxth	r6, r3
 800114a:	f9b7 8000 	ldrsh.w	r8, [r7]
 800114e:	f004 fbe5 	bl	800591c <BSP_LCD_GetBackColor>
 8001152:	4603      	mov	r3, r0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	4643      	mov	r3, r8
 8001158:	4632      	mov	r2, r6
 800115a:	4629      	mov	r1, r5
 800115c:	4620      	mov	r0, r4
 800115e:	f002 f9eb 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 2, poczatek_y, koniec_x - i - 2, koniec_y, BSP_LCD_GetBackColor());
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	b29a      	uxth	r2, r3
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4413      	add	r3, r2
 800116a:	b29b      	uxth	r3, r3
 800116c:	3302      	adds	r3, #2
 800116e:	b29b      	uxth	r3, r3
 8001170:	b21c      	sxth	r4, r3
 8001172:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b29b      	uxth	r3, r3
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	3b02      	subs	r3, #2
 8001182:	b29b      	uxth	r3, r3
 8001184:	b21e      	sxth	r6, r3
 8001186:	f9b7 8000 	ldrsh.w	r8, [r7]
 800118a:	f004 fbc7 	bl	800591c <BSP_LCD_GetBackColor>
 800118e:	4603      	mov	r3, r0
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	4643      	mov	r3, r8
 8001194:	4632      	mov	r2, r6
 8001196:	4629      	mov	r1, r5
 8001198:	4620      	mov	r0, r4
 800119a:	f002 f9cd 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 3, poczatek_y, koniec_x - i - 3, koniec_y, BSP_LCD_GetBackColor());
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4413      	add	r3, r2
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	3303      	adds	r3, #3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b21c      	sxth	r4, r3
 80011ae:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b03      	subs	r3, #3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b21e      	sxth	r6, r3
 80011c2:	f9b7 8000 	ldrsh.w	r8, [r7]
 80011c6:	f004 fba9 	bl	800591c <BSP_LCD_GetBackColor>
 80011ca:	4603      	mov	r3, r0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4643      	mov	r3, r8
 80011d0:	4632      	mov	r2, r6
 80011d2:	4629      	mov	r1, r5
 80011d4:	4620      	mov	r0, r4
 80011d6:	f002 f9af 	bl	8003538 <DrawLine>
		DrawLine(poczatek_x + i + 4, poczatek_y, koniec_x - i - 4, koniec_y, BSP_LCD_GetBackColor());
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	3304      	adds	r3, #4
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	b21c      	sxth	r4, r3
 80011ea:	f9b7 5004 	ldrsh.w	r5, [r7, #4]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	887a      	ldrh	r2, [r7, #2]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3b04      	subs	r3, #4
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b21e      	sxth	r6, r3
 80011fe:	f9b7 8000 	ldrsh.w	r8, [r7]
 8001202:	f004 fb8b 	bl	800591c <BSP_LCD_GetBackColor>
 8001206:	4603      	mov	r3, r0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4643      	mov	r3, r8
 800120c:	4632      	mov	r2, r6
 800120e:	4629      	mov	r1, r5
 8001210:	4620      	mov	r0, r4
 8001212:	f002 f991 	bl	8003538 <DrawLine>
		HAL_Delay(czas);
 8001216:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001218:	4618      	mov	r0, r3
 800121a:	f004 ff27 	bl	800606c <HAL_Delay>
	for(int i = 0; (poczatek_x + i) < koniec_x; i += odstep) {
 800121e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	88fa      	ldrh	r2, [r7, #6]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	441a      	add	r2, r3
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	429a      	cmp	r2, r3
 8001230:	f6ff af5f 	blt.w	80010f2 <animationLine+0x306>
	}

	//czyszczenie linii od gory do dolu
	for(int i = 0; (poczatek_y + i) < koniec_y; i += odstep) {
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	e09e      	b.n	8001378 <animationLine+0x58c>
		DrawLine(koniec_x, poczatek_y + i, poczatek_x, koniec_y - i, BSP_LCD_GetBackColor());
 800123a:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	b29a      	uxth	r2, r3
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	b21d      	sxth	r5, r3
 800124a:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	b29b      	uxth	r3, r3
 8001252:	883a      	ldrh	r2, [r7, #0]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	fa0f f883 	sxth.w	r8, r3
 800125c:	f004 fb5e 	bl	800591c <BSP_LCD_GetBackColor>
 8001260:	4603      	mov	r3, r0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4643      	mov	r3, r8
 8001266:	4632      	mov	r2, r6
 8001268:	4629      	mov	r1, r5
 800126a:	4620      	mov	r0, r4
 800126c:	f002 f964 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 1, poczatek_x, koniec_y - i - 1, BSP_LCD_GetBackColor());
 8001270:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	b29a      	uxth	r2, r3
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	b29b      	uxth	r3, r3
 800127e:	3301      	adds	r3, #1
 8001280:	b29b      	uxth	r3, r3
 8001282:	b21d      	sxth	r5, r3
 8001284:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	b29b      	uxth	r3, r3
 800128c:	883a      	ldrh	r2, [r7, #0]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b29b      	uxth	r3, r3
 8001296:	fa0f f883 	sxth.w	r8, r3
 800129a:	f004 fb3f 	bl	800591c <BSP_LCD_GetBackColor>
 800129e:	4603      	mov	r3, r0
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4643      	mov	r3, r8
 80012a4:	4632      	mov	r2, r6
 80012a6:	4629      	mov	r1, r5
 80012a8:	4620      	mov	r0, r4
 80012aa:	f002 f945 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 2, poczatek_x, koniec_y - i - 2, BSP_LCD_GetBackColor());
 80012ae:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3302      	adds	r3, #2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b21d      	sxth	r5, r3
 80012c2:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	883a      	ldrh	r2, [r7, #0]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3b02      	subs	r3, #2
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	fa0f f883 	sxth.w	r8, r3
 80012d8:	f004 fb20 	bl	800591c <BSP_LCD_GetBackColor>
 80012dc:	4603      	mov	r3, r0
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4643      	mov	r3, r8
 80012e2:	4632      	mov	r2, r6
 80012e4:	4629      	mov	r1, r5
 80012e6:	4620      	mov	r0, r4
 80012e8:	f002 f926 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 3, poczatek_x, koniec_y - i - 3, BSP_LCD_GetBackColor());
 80012ec:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3303      	adds	r3, #3
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b21d      	sxth	r5, r3
 8001300:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	b29b      	uxth	r3, r3
 8001308:	883a      	ldrh	r2, [r7, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	3b03      	subs	r3, #3
 8001310:	b29b      	uxth	r3, r3
 8001312:	fa0f f883 	sxth.w	r8, r3
 8001316:	f004 fb01 	bl	800591c <BSP_LCD_GetBackColor>
 800131a:	4603      	mov	r3, r0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4643      	mov	r3, r8
 8001320:	4632      	mov	r2, r6
 8001322:	4629      	mov	r1, r5
 8001324:	4620      	mov	r0, r4
 8001326:	f002 f907 	bl	8003538 <DrawLine>
		DrawLine(koniec_x, poczatek_y + i + 4, poczatek_x, koniec_y - i - 4, BSP_LCD_GetBackColor());
 800132a:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	b29a      	uxth	r2, r3
 8001332:	88bb      	ldrh	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	3304      	adds	r3, #4
 800133a:	b29b      	uxth	r3, r3
 800133c:	b21d      	sxth	r5, r3
 800133e:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	b29b      	uxth	r3, r3
 8001346:	883a      	ldrh	r2, [r7, #0]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	3b04      	subs	r3, #4
 800134e:	b29b      	uxth	r3, r3
 8001350:	fa0f f883 	sxth.w	r8, r3
 8001354:	f004 fae2 	bl	800591c <BSP_LCD_GetBackColor>
 8001358:	4603      	mov	r3, r0
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	4643      	mov	r3, r8
 800135e:	4632      	mov	r2, r6
 8001360:	4629      	mov	r1, r5
 8001362:	4620      	mov	r0, r4
 8001364:	f002 f8e8 	bl	8003538 <DrawLine>
		HAL_Delay(czas);
 8001368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fe7e 	bl	800606c <HAL_Delay>
	for(int i = 0; (poczatek_y + i) < koniec_y; i += odstep) {
 8001370:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	4413      	add	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	441a      	add	r2, r3
 800137e:	883b      	ldrh	r3, [r7, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	f6ff af5a 	blt.w	800123a <animationLine+0x44e>
	}

}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001390 <animationRectangle>:
 * @param dlugosc_boku_y length of the second side of a rectangle
 * @param ilosc the number of rectangles
 * @param czas the time between drawings
 */

void animationRectangle (uint16_t margines_x, uint16_t margines_y, uint16_t dlugosc_boku_x, uint16_t dlugosc_boku_y, uint16_t ilosc, uint16_t czas) {
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	4604      	mov	r4, r0
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4623      	mov	r3, r4
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	4603      	mov	r3, r0
 80013a4:	80bb      	strh	r3, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	807b      	strh	r3, [r7, #2]
 80013aa:	4613      	mov	r3, r2
 80013ac:	803b      	strh	r3, [r7, #0]

	for(int i = 0; i<ilosc; i++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e0be      	b.n	8001532 <animationRectangle+0x1a2>

		//rysowanie po przekatnej
		drawingRectangle(margines_x + i, margines_y + i, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4413      	add	r3, r2
 80013bc:	b298      	uxth	r0, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	88bb      	ldrh	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	b299      	uxth	r1, r3
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80013d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013da:	883c      	ldrh	r4, [r7, #0]
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	4623      	mov	r3, r4
 80013e2:	f001 ff27 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x - i, margines_y - i, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	88fa      	ldrh	r2, [r7, #6]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b298      	uxth	r0, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	88ba      	ldrh	r2, [r7, #4]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	b299      	uxth	r1, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001408:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800140c:	883c      	ldrh	r4, [r7, #0]
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4623      	mov	r3, r4
 8001414:	f001 ff0e 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x + i, margines_y - i, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	b29a      	uxth	r2, r3
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4413      	add	r3, r2
 8001420:	b298      	uxth	r0, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	88ba      	ldrh	r2, [r7, #4]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b299      	uxth	r1, r3
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800143a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143e:	883c      	ldrh	r4, [r7, #0]
 8001440:	887a      	ldrh	r2, [r7, #2]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4623      	mov	r3, r4
 8001446:	f001 fef5 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x - i, margines_y + i, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	b29b      	uxth	r3, r3
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	b298      	uxth	r0, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	b29a      	uxth	r2, r3
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	b299      	uxth	r1, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800146c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001470:	883c      	ldrh	r4, [r7, #0]
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4623      	mov	r3, r4
 8001478:	f001 fedc 	bl	8003234 <drawingRectangle>

		//rysowanie pionowo i poziomo
		drawingRectangle(margines_x, margines_y + i, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	b29a      	uxth	r2, r3
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	4413      	add	r3, r2
 8001484:	b299      	uxth	r1, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001494:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001498:	883c      	ldrh	r4, [r7, #0]
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	88f8      	ldrh	r0, [r7, #6]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4623      	mov	r3, r4
 80014a2:	f001 fec7 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x, margines_y - i, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	88ba      	ldrh	r2, [r7, #4]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b299      	uxth	r1, r3
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80014be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014c2:	883c      	ldrh	r4, [r7, #0]
 80014c4:	887a      	ldrh	r2, [r7, #2]
 80014c6:	88f8      	ldrh	r0, [r7, #6]
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	4623      	mov	r3, r4
 80014cc:	f001 feb2 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x + i, margines_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4413      	add	r3, r2
 80014d8:	b298      	uxth	r0, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80014e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014ec:	883c      	ldrh	r4, [r7, #0]
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	88b9      	ldrh	r1, [r7, #4]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	4623      	mov	r3, r4
 80014f6:	f001 fe9d 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x - i, margines_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	88fa      	ldrh	r2, [r7, #6]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	b298      	uxth	r0, r3
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001512:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001516:	883c      	ldrh	r4, [r7, #0]
 8001518:	887a      	ldrh	r2, [r7, #2]
 800151a:	88b9      	ldrh	r1, [r7, #4]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	4623      	mov	r3, r4
 8001520:	f001 fe88 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fda0 	bl	800606c <HAL_Delay>
	for(int i = 0; i<ilosc; i++){
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	8c3b      	ldrh	r3, [r7, #32]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	429a      	cmp	r2, r3
 8001538:	f6ff af3c 	blt.w	80013b4 <animationRectangle+0x24>
	}

	for(int i = 0; i<ilosc; i++){
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	e090      	b.n	8001664 <animationRectangle+0x2d4>

		//czyszczenie po przekatnej
		drawingRectangle(margines_x + i, margines_y + i, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	b29a      	uxth	r2, r3
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	4413      	add	r3, r2
 800154a:	b29c      	uxth	r4, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	b29a      	uxth	r2, r3
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	b29d      	uxth	r5, r3
 8001556:	f004 f9e1 	bl	800591c <BSP_LCD_GetBackColor>
 800155a:	4601      	mov	r1, r0
 800155c:	883b      	ldrh	r3, [r7, #0]
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	9100      	str	r1, [sp, #0]
 8001562:	4629      	mov	r1, r5
 8001564:	4620      	mov	r0, r4
 8001566:	f001 fe65 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x - i, margines_y - i, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	b29b      	uxth	r3, r3
 800156e:	88fa      	ldrh	r2, [r7, #6]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29c      	uxth	r4, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	b29b      	uxth	r3, r3
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b29d      	uxth	r5, r3
 800157e:	f004 f9cd 	bl	800591c <BSP_LCD_GetBackColor>
 8001582:	4601      	mov	r1, r0
 8001584:	883b      	ldrh	r3, [r7, #0]
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	9100      	str	r1, [sp, #0]
 800158a:	4629      	mov	r1, r5
 800158c:	4620      	mov	r0, r4
 800158e:	f001 fe51 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x + i, margines_y - i, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	b29a      	uxth	r2, r3
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4413      	add	r3, r2
 800159a:	b29c      	uxth	r4, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	88ba      	ldrh	r2, [r7, #4]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b29d      	uxth	r5, r3
 80015a6:	f004 f9b9 	bl	800591c <BSP_LCD_GetBackColor>
 80015aa:	4601      	mov	r1, r0
 80015ac:	883b      	ldrh	r3, [r7, #0]
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	9100      	str	r1, [sp, #0]
 80015b2:	4629      	mov	r1, r5
 80015b4:	4620      	mov	r0, r4
 80015b6:	f001 fe3d 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x - i, margines_y + i, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	88fa      	ldrh	r2, [r7, #6]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	b29c      	uxth	r4, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	88bb      	ldrh	r3, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	b29d      	uxth	r5, r3
 80015ce:	f004 f9a5 	bl	800591c <BSP_LCD_GetBackColor>
 80015d2:	4601      	mov	r1, r0
 80015d4:	883b      	ldrh	r3, [r7, #0]
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	9100      	str	r1, [sp, #0]
 80015da:	4629      	mov	r1, r5
 80015dc:	4620      	mov	r0, r4
 80015de:	f001 fe29 	bl	8003234 <drawingRectangle>

		//czyszczenie pionowo i poziomo
		drawingRectangle(margines_x, margines_y + i, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	b29c      	uxth	r4, r3
 80015ec:	f004 f996 	bl	800591c <BSP_LCD_GetBackColor>
 80015f0:	4601      	mov	r1, r0
 80015f2:	883b      	ldrh	r3, [r7, #0]
 80015f4:	887a      	ldrh	r2, [r7, #2]
 80015f6:	88f8      	ldrh	r0, [r7, #6]
 80015f8:	9100      	str	r1, [sp, #0]
 80015fa:	4621      	mov	r1, r4
 80015fc:	f001 fe1a 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x, margines_y - i, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	b29b      	uxth	r3, r3
 8001604:	88ba      	ldrh	r2, [r7, #4]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	b29c      	uxth	r4, r3
 800160a:	f004 f987 	bl	800591c <BSP_LCD_GetBackColor>
 800160e:	4601      	mov	r1, r0
 8001610:	883b      	ldrh	r3, [r7, #0]
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	88f8      	ldrh	r0, [r7, #6]
 8001616:	9100      	str	r1, [sp, #0]
 8001618:	4621      	mov	r1, r4
 800161a:	f001 fe0b 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x + i, margines_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	b29a      	uxth	r2, r3
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	4413      	add	r3, r2
 8001626:	b29c      	uxth	r4, r3
 8001628:	f004 f978 	bl	800591c <BSP_LCD_GetBackColor>
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	88b9      	ldrh	r1, [r7, #4]
 8001632:	9000      	str	r0, [sp, #0]
 8001634:	4620      	mov	r0, r4
 8001636:	f001 fdfd 	bl	8003234 <drawingRectangle>
		drawingRectangle(margines_x - i, margines_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	b29b      	uxth	r3, r3
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	b29c      	uxth	r4, r3
 8001644:	f004 f96a 	bl	800591c <BSP_LCD_GetBackColor>
 8001648:	883b      	ldrh	r3, [r7, #0]
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	88b9      	ldrh	r1, [r7, #4]
 800164e:	9000      	str	r0, [sp, #0]
 8001650:	4620      	mov	r0, r4
 8001652:	f001 fdef 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fd07 	bl	800606c <HAL_Delay>
	for(int i = 0; i<ilosc; i++){
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	3301      	adds	r3, #1
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	8c3b      	ldrh	r3, [r7, #32]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	429a      	cmp	r2, r3
 800166a:	f6ff af6a 	blt.w	8001542 <animationRectangle+0x1b2>
	}

}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bdb0      	pop	{r4, r5, r7, pc}

08001676 <animationJumpingRectangle>:
 * @param dlugosc_boku_x length of the first side of a rectangle
 * @param dlugosc_boku_y length of the second side of a rectangle
 * @param czas the time between drawings
 */

void animationJumpingRectangle (uint16_t dlugosc_boku_x, uint16_t dlugosc_boku_y, uint16_t czas) {
 8001676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167a:	b08c      	sub	sp, #48	; 0x30
 800167c:	af02      	add	r7, sp, #8
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	460b      	mov	r3, r1
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	807b      	strh	r3, [r7, #2]

	uint16_t pozycja_x = 120 - dlugosc_boku_x/2;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	085b      	lsrs	r3, r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001694:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t pozycja_y = 160 - dlugosc_boku_y/2;
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	085b      	lsrs	r3, r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80016a0:	84bb      	strh	r3, [r7, #36]	; 0x24

	for(int i = 0; i < (160 - dlugosc_boku_y/2); i++) { //Ruch w gore
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
 80016a6:	e0b7      	b.n	8001818 <animationJumpingRectangle+0x1a2>
		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80016a8:	6a3a      	ldr	r2, [r7, #32]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80016b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016ba:	88bc      	ldrh	r4, [r7, #4]
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80016c0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4623      	mov	r3, r4
 80016c6:	f001 fdb5 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, 2164260608 + i*10);
 80016ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b298      	uxth	r0, r3
 80016d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b299      	uxth	r1, r3
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	3b02      	subs	r3, #2
 80016da:	b29c      	uxth	r4, r3
 80016dc:	88bb      	ldrh	r3, [r7, #4]
 80016de:	3b02      	subs	r3, #2
 80016e0:	b29d      	uxth	r5, r3
 80016e2:	6a3a      	ldr	r2, [r7, #32]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80016f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	462b      	mov	r3, r5
 80016f8:	4622      	mov	r2, r4
 80016fa:	f001 fd9b 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, 2164260608 + i*10);
 80016fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001700:	3b02      	subs	r3, #2
 8001702:	b298      	uxth	r0, r3
 8001704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001706:	3b02      	subs	r3, #2
 8001708:	b299      	uxth	r1, r3
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	3b04      	subs	r3, #4
 800170e:	b29c      	uxth	r4, r3
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	3b04      	subs	r3, #4
 8001714:	b29d      	uxth	r5, r3
 8001716:	6a3a      	ldr	r2, [r7, #32]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	462b      	mov	r3, r5
 800172c:	4622      	mov	r2, r4
 800172e:	f001 fd81 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, 2164260608 + i*10);
 8001732:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001734:	3b03      	subs	r3, #3
 8001736:	b298      	uxth	r0, r3
 8001738:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800173a:	3303      	adds	r3, #3
 800173c:	b299      	uxth	r1, r3
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	3b06      	subs	r3, #6
 8001742:	b29c      	uxth	r4, r3
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	3b06      	subs	r3, #6
 8001748:	b29d      	uxth	r5, r3
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001758:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	462b      	mov	r3, r5
 8001760:	4622      	mov	r2, r4
 8001762:	f001 fd67 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	4618      	mov	r0, r3
 800176a:	f004 fc7f 	bl	800606c <HAL_Delay>

		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 800176e:	f004 f8d5 	bl	800591c <BSP_LCD_GetBackColor>
 8001772:	4604      	mov	r4, r0
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800177a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800177c:	9400      	str	r4, [sp, #0]
 800177e:	f001 fd59 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, BSP_LCD_GetBackColor());
 8001782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001784:	3b01      	subs	r3, #1
 8001786:	b29c      	uxth	r4, r3
 8001788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800178a:	3b01      	subs	r3, #1
 800178c:	b29d      	uxth	r5, r3
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	3b02      	subs	r3, #2
 8001792:	b29e      	uxth	r6, r3
 8001794:	88bb      	ldrh	r3, [r7, #4]
 8001796:	3b02      	subs	r3, #2
 8001798:	fa1f f883 	uxth.w	r8, r3
 800179c:	f004 f8be 	bl	800591c <BSP_LCD_GetBackColor>
 80017a0:	4603      	mov	r3, r0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4643      	mov	r3, r8
 80017a6:	4632      	mov	r2, r6
 80017a8:	4629      	mov	r1, r5
 80017aa:	4620      	mov	r0, r4
 80017ac:	f001 fd42 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, BSP_LCD_GetBackColor());
 80017b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017b2:	3b02      	subs	r3, #2
 80017b4:	b29c      	uxth	r4, r3
 80017b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017b8:	3b02      	subs	r3, #2
 80017ba:	b29d      	uxth	r5, r3
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	3b04      	subs	r3, #4
 80017c0:	b29e      	uxth	r6, r3
 80017c2:	88bb      	ldrh	r3, [r7, #4]
 80017c4:	3b04      	subs	r3, #4
 80017c6:	fa1f f883 	uxth.w	r8, r3
 80017ca:	f004 f8a7 	bl	800591c <BSP_LCD_GetBackColor>
 80017ce:	4603      	mov	r3, r0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	4643      	mov	r3, r8
 80017d4:	4632      	mov	r2, r6
 80017d6:	4629      	mov	r1, r5
 80017d8:	4620      	mov	r0, r4
 80017da:	f001 fd2b 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, BSP_LCD_GetBackColor());
 80017de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017e0:	3b03      	subs	r3, #3
 80017e2:	b29c      	uxth	r4, r3
 80017e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017e6:	3303      	adds	r3, #3
 80017e8:	b29d      	uxth	r5, r3
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	3b06      	subs	r3, #6
 80017ee:	b29e      	uxth	r6, r3
 80017f0:	88bb      	ldrh	r3, [r7, #4]
 80017f2:	3b06      	subs	r3, #6
 80017f4:	fa1f f883 	uxth.w	r8, r3
 80017f8:	f004 f890 	bl	800591c <BSP_LCD_GetBackColor>
 80017fc:	4603      	mov	r3, r0
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4643      	mov	r3, r8
 8001802:	4632      	mov	r2, r6
 8001804:	4629      	mov	r1, r5
 8001806:	4620      	mov	r0, r4
 8001808:	f001 fd14 	bl	8003234 <drawingRectangle>

		pozycja_y--;
 800180c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800180e:	3b01      	subs	r3, #1
 8001810:	84bb      	strh	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (160 - dlugosc_boku_y/2); i++) { //Ruch w gore
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	3301      	adds	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	f6ff af3f 	blt.w	80016a8 <animationJumpingRectangle+0x32>
	}

	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w dol i w prawo
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	e0c2      	b.n	80019b6 <animationJumpingRectangle+0x340>
		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800183e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001842:	88bc      	ldrh	r4, [r7, #4]
 8001844:	88fa      	ldrh	r2, [r7, #6]
 8001846:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001848:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4623      	mov	r3, r4
 800184e:	f001 fcf1 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, 2164260608 + i*10);
 8001852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001854:	3b01      	subs	r3, #1
 8001856:	b298      	uxth	r0, r3
 8001858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800185a:	3b01      	subs	r3, #1
 800185c:	b299      	uxth	r1, r3
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	3b02      	subs	r3, #2
 8001862:	b29c      	uxth	r4, r3
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	3b02      	subs	r3, #2
 8001868:	b29d      	uxth	r5, r3
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001878:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	462b      	mov	r3, r5
 8001880:	4622      	mov	r2, r4
 8001882:	f001 fcd7 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, 2164260608 + i*10);
 8001886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001888:	3b02      	subs	r3, #2
 800188a:	b298      	uxth	r0, r3
 800188c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800188e:	3b02      	subs	r3, #2
 8001890:	b299      	uxth	r1, r3
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	3b04      	subs	r3, #4
 8001896:	b29c      	uxth	r4, r3
 8001898:	88bb      	ldrh	r3, [r7, #4]
 800189a:	3b04      	subs	r3, #4
 800189c:	b29d      	uxth	r5, r3
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80018ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	462b      	mov	r3, r5
 80018b4:	4622      	mov	r2, r4
 80018b6:	f001 fcbd 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, 2164260608 + i*10);
 80018ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018bc:	3b03      	subs	r3, #3
 80018be:	b298      	uxth	r0, r3
 80018c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c2:	3303      	adds	r3, #3
 80018c4:	b299      	uxth	r1, r3
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	3b06      	subs	r3, #6
 80018ca:	b29c      	uxth	r4, r3
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	3b06      	subs	r3, #6
 80018d0:	b29d      	uxth	r5, r3
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80018e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	462b      	mov	r3, r5
 80018e8:	4622      	mov	r2, r4
 80018ea:	f001 fca3 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f004 fbbb 	bl	800606c <HAL_Delay>

		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 80018f6:	f004 f811 	bl	800591c <BSP_LCD_GetBackColor>
 80018fa:	4604      	mov	r4, r0
 80018fc:	88bb      	ldrh	r3, [r7, #4]
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001902:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001904:	9400      	str	r4, [sp, #0]
 8001906:	f001 fc95 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, BSP_LCD_GetBackColor());
 800190a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800190c:	3b01      	subs	r3, #1
 800190e:	b29c      	uxth	r4, r3
 8001910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001912:	3b01      	subs	r3, #1
 8001914:	b29d      	uxth	r5, r3
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	3b02      	subs	r3, #2
 800191a:	b29e      	uxth	r6, r3
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	3b02      	subs	r3, #2
 8001920:	fa1f f883 	uxth.w	r8, r3
 8001924:	f003 fffa 	bl	800591c <BSP_LCD_GetBackColor>
 8001928:	4603      	mov	r3, r0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4643      	mov	r3, r8
 800192e:	4632      	mov	r2, r6
 8001930:	4629      	mov	r1, r5
 8001932:	4620      	mov	r0, r4
 8001934:	f001 fc7e 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, BSP_LCD_GetBackColor());
 8001938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800193a:	3b02      	subs	r3, #2
 800193c:	b29c      	uxth	r4, r3
 800193e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001940:	3b02      	subs	r3, #2
 8001942:	b29d      	uxth	r5, r3
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	3b04      	subs	r3, #4
 8001948:	b29e      	uxth	r6, r3
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	3b04      	subs	r3, #4
 800194e:	fa1f f883 	uxth.w	r8, r3
 8001952:	f003 ffe3 	bl	800591c <BSP_LCD_GetBackColor>
 8001956:	4603      	mov	r3, r0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	4643      	mov	r3, r8
 800195c:	4632      	mov	r2, r6
 800195e:	4629      	mov	r1, r5
 8001960:	4620      	mov	r0, r4
 8001962:	f001 fc67 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, BSP_LCD_GetBackColor());
 8001966:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001968:	3b03      	subs	r3, #3
 800196a:	b29c      	uxth	r4, r3
 800196c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800196e:	3303      	adds	r3, #3
 8001970:	b29d      	uxth	r5, r3
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	3b06      	subs	r3, #6
 8001976:	b29e      	uxth	r6, r3
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	3b06      	subs	r3, #6
 800197c:	fa1f f883 	uxth.w	r8, r3
 8001980:	f003 ffcc 	bl	800591c <BSP_LCD_GetBackColor>
 8001984:	4603      	mov	r3, r0
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4643      	mov	r3, r8
 800198a:	4632      	mov	r2, r6
 800198c:	4629      	mov	r1, r5
 800198e:	4620      	mov	r0, r4
 8001990:	f001 fc50 	bl	8003234 <drawingRectangle>

		pozycja_x++;
 8001994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001996:	3301      	adds	r3, #1
 8001998:	84fb      	strh	r3, [r7, #38]	; 0x26
		pozycja_y++;
 800199a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	84bb      	strh	r3, [r7, #36]	; 0x24

		if((i % 4) == 0) {
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <animationJumpingRectangle+0x33a>
			pozycja_y++;
 80019aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	84bb      	strh	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w dol i w prawo
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	3301      	adds	r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	f6ff af34 	blt.w	8001830 <animationJumpingRectangle+0x1ba>
		}
	}

	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w dol i w lewo
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
 80019cc:	e0c2      	b.n	8001b54 <animationJumpingRectangle+0x4de>
		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80019dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019e0:	88bc      	ldrh	r4, [r7, #4]
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80019e6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	4623      	mov	r3, r4
 80019ec:	f001 fc22 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, 2164260608 + i*10);
 80019f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b298      	uxth	r0, r3
 80019f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b299      	uxth	r1, r3
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	3b02      	subs	r3, #2
 8001a00:	b29c      	uxth	r4, r3
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	3b02      	subs	r3, #2
 8001a06:	b29d      	uxth	r5, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001a16:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	462b      	mov	r3, r5
 8001a1e:	4622      	mov	r2, r4
 8001a20:	f001 fc08 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, 2164260608 + i*10);
 8001a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a26:	3b02      	subs	r3, #2
 8001a28:	b298      	uxth	r0, r3
 8001a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a2c:	3b02      	subs	r3, #2
 8001a2e:	b299      	uxth	r1, r3
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	3b04      	subs	r3, #4
 8001a34:	b29c      	uxth	r4, r3
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	3b04      	subs	r3, #4
 8001a3a:	b29d      	uxth	r5, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001a4a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	462b      	mov	r3, r5
 8001a52:	4622      	mov	r2, r4
 8001a54:	f001 fbee 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, 2164260608 + i*10);
 8001a58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a5a:	3b03      	subs	r3, #3
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a60:	3303      	adds	r3, #3
 8001a62:	b299      	uxth	r1, r3
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	3b06      	subs	r3, #6
 8001a68:	b29c      	uxth	r4, r3
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	3b06      	subs	r3, #6
 8001a6e:	b29d      	uxth	r5, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001a7e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	462b      	mov	r3, r5
 8001a86:	4622      	mov	r2, r4
 8001a88:	f001 fbd4 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 faec 	bl	800606c <HAL_Delay>

		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001a94:	f003 ff42 	bl	800591c <BSP_LCD_GetBackColor>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001aa0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001aa2:	9400      	str	r4, [sp, #0]
 8001aa4:	f001 fbc6 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, BSP_LCD_GetBackColor());
 8001aa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29c      	uxth	r4, r3
 8001aae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29d      	uxth	r5, r3
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	3b02      	subs	r3, #2
 8001ab8:	b29e      	uxth	r6, r3
 8001aba:	88bb      	ldrh	r3, [r7, #4]
 8001abc:	3b02      	subs	r3, #2
 8001abe:	fa1f f883 	uxth.w	r8, r3
 8001ac2:	f003 ff2b 	bl	800591c <BSP_LCD_GetBackColor>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4643      	mov	r3, r8
 8001acc:	4632      	mov	r2, r6
 8001ace:	4629      	mov	r1, r5
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f001 fbaf 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, BSP_LCD_GetBackColor());
 8001ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ad8:	3b02      	subs	r3, #2
 8001ada:	b29c      	uxth	r4, r3
 8001adc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ade:	3b02      	subs	r3, #2
 8001ae0:	b29d      	uxth	r5, r3
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	3b04      	subs	r3, #4
 8001ae6:	b29e      	uxth	r6, r3
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	3b04      	subs	r3, #4
 8001aec:	fa1f f883 	uxth.w	r8, r3
 8001af0:	f003 ff14 	bl	800591c <BSP_LCD_GetBackColor>
 8001af4:	4603      	mov	r3, r0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4643      	mov	r3, r8
 8001afa:	4632      	mov	r2, r6
 8001afc:	4629      	mov	r1, r5
 8001afe:	4620      	mov	r0, r4
 8001b00:	f001 fb98 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, BSP_LCD_GetBackColor());
 8001b04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b06:	3b03      	subs	r3, #3
 8001b08:	b29c      	uxth	r4, r3
 8001b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	b29d      	uxth	r5, r3
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	3b06      	subs	r3, #6
 8001b14:	b29e      	uxth	r6, r3
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	3b06      	subs	r3, #6
 8001b1a:	fa1f f883 	uxth.w	r8, r3
 8001b1e:	f003 fefd 	bl	800591c <BSP_LCD_GetBackColor>
 8001b22:	4603      	mov	r3, r0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	4643      	mov	r3, r8
 8001b28:	4632      	mov	r2, r6
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f001 fb81 	bl	8003234 <drawingRectangle>

		pozycja_x--;
 8001b32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b34:	3b01      	subs	r3, #1
 8001b36:	84fb      	strh	r3, [r7, #38]	; 0x26
		pozycja_y++;
 8001b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	84bb      	strh	r3, [r7, #36]	; 0x24

		if((i % 4) == 0) {
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <animationJumpingRectangle+0x4d8>
			pozycja_y++;
 8001b48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	84bb      	strh	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w dol i w lewo
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	3301      	adds	r3, #1
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f6ff af34 	blt.w	80019ce <animationJumpingRectangle+0x358>
		}
	}

	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w gore i w lewo
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e0c2      	b.n	8001cf2 <animationJumpingRectangle+0x67c>
		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001b7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b7e:	88bc      	ldrh	r4, [r7, #4]
 8001b80:	88fa      	ldrh	r2, [r7, #6]
 8001b82:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001b84:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	4623      	mov	r3, r4
 8001b8a:	f001 fb53 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, 2164260608 + i*10);
 8001b8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b298      	uxth	r0, r3
 8001b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	3b02      	subs	r3, #2
 8001b9e:	b29c      	uxth	r4, r3
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	3b02      	subs	r3, #2
 8001ba4:	b29d      	uxth	r5, r3
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001bb4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	462b      	mov	r3, r5
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	f001 fb39 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, 2164260608 + i*10);
 8001bc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bc4:	3b02      	subs	r3, #2
 8001bc6:	b298      	uxth	r0, r3
 8001bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bca:	3b02      	subs	r3, #2
 8001bcc:	b299      	uxth	r1, r3
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	3b04      	subs	r3, #4
 8001bd2:	b29c      	uxth	r4, r3
 8001bd4:	88bb      	ldrh	r3, [r7, #4]
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	b29d      	uxth	r5, r3
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001be8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	462b      	mov	r3, r5
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	f001 fb1f 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, 2164260608 + i*10);
 8001bf6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	b298      	uxth	r0, r3
 8001bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bfe:	3303      	adds	r3, #3
 8001c00:	b299      	uxth	r1, r3
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	3b06      	subs	r3, #6
 8001c06:	b29c      	uxth	r4, r3
 8001c08:	88bb      	ldrh	r3, [r7, #4]
 8001c0a:	3b06      	subs	r3, #6
 8001c0c:	b29d      	uxth	r5, r3
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001c1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	462b      	mov	r3, r5
 8001c24:	4622      	mov	r2, r4
 8001c26:	f001 fb05 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 fa1d 	bl	800606c <HAL_Delay>

		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001c32:	f003 fe73 	bl	800591c <BSP_LCD_GetBackColor>
 8001c36:	4604      	mov	r4, r0
 8001c38:	88bb      	ldrh	r3, [r7, #4]
 8001c3a:	88fa      	ldrh	r2, [r7, #6]
 8001c3c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001c3e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001c40:	9400      	str	r4, [sp, #0]
 8001c42:	f001 faf7 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, BSP_LCD_GetBackColor());
 8001c46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29c      	uxth	r4, r3
 8001c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29d      	uxth	r5, r3
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	3b02      	subs	r3, #2
 8001c56:	b29e      	uxth	r6, r3
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	3b02      	subs	r3, #2
 8001c5c:	fa1f f883 	uxth.w	r8, r3
 8001c60:	f003 fe5c 	bl	800591c <BSP_LCD_GetBackColor>
 8001c64:	4603      	mov	r3, r0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4643      	mov	r3, r8
 8001c6a:	4632      	mov	r2, r6
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4620      	mov	r0, r4
 8001c70:	f001 fae0 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, BSP_LCD_GetBackColor());
 8001c74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c76:	3b02      	subs	r3, #2
 8001c78:	b29c      	uxth	r4, r3
 8001c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c7c:	3b02      	subs	r3, #2
 8001c7e:	b29d      	uxth	r5, r3
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	3b04      	subs	r3, #4
 8001c84:	b29e      	uxth	r6, r3
 8001c86:	88bb      	ldrh	r3, [r7, #4]
 8001c88:	3b04      	subs	r3, #4
 8001c8a:	fa1f f883 	uxth.w	r8, r3
 8001c8e:	f003 fe45 	bl	800591c <BSP_LCD_GetBackColor>
 8001c92:	4603      	mov	r3, r0
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4643      	mov	r3, r8
 8001c98:	4632      	mov	r2, r6
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f001 fac9 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, BSP_LCD_GetBackColor());
 8001ca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	b29c      	uxth	r4, r3
 8001ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001caa:	3303      	adds	r3, #3
 8001cac:	b29d      	uxth	r5, r3
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	3b06      	subs	r3, #6
 8001cb2:	b29e      	uxth	r6, r3
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	3b06      	subs	r3, #6
 8001cb8:	fa1f f883 	uxth.w	r8, r3
 8001cbc:	f003 fe2e 	bl	800591c <BSP_LCD_GetBackColor>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	4632      	mov	r2, r6
 8001cc8:	4629      	mov	r1, r5
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f001 fab2 	bl	8003234 <drawingRectangle>

		pozycja_x--;
 8001cd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	84fb      	strh	r3, [r7, #38]	; 0x26
		pozycja_y--;
 8001cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	84bb      	strh	r3, [r7, #36]	; 0x24

		if((i % 4) == 0) {
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <animationJumpingRectangle+0x676>
			pozycja_y--;
 8001ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	84bb      	strh	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w gore i w lewo
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	f6ff af34 	blt.w	8001b6c <animationJumpingRectangle+0x4f6>
		}
	}

	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w gore i w prawo
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e0c2      	b.n	8001e90 <animationJumpingRectangle+0x81a>
		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001d18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d1c:	88bc      	ldrh	r4, [r7, #4]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001d22:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4623      	mov	r3, r4
 8001d28:	f001 fa84 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, 2164260608 + i*10);
 8001d2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b298      	uxth	r0, r3
 8001d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b299      	uxth	r1, r3
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	3b02      	subs	r3, #2
 8001d3c:	b29c      	uxth	r4, r3
 8001d3e:	88bb      	ldrh	r3, [r7, #4]
 8001d40:	3b02      	subs	r3, #2
 8001d42:	b29d      	uxth	r5, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001d52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	462b      	mov	r3, r5
 8001d5a:	4622      	mov	r2, r4
 8001d5c:	f001 fa6a 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, 2164260608 + i*10);
 8001d60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d62:	3b02      	subs	r3, #2
 8001d64:	b298      	uxth	r0, r3
 8001d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d68:	3b02      	subs	r3, #2
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	b29c      	uxth	r4, r3
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	3b04      	subs	r3, #4
 8001d76:	b29d      	uxth	r5, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001d86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	462b      	mov	r3, r5
 8001d8e:	4622      	mov	r2, r4
 8001d90:	f001 fa50 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, 2164260608 + i*10);
 8001d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d96:	3b03      	subs	r3, #3
 8001d98:	b298      	uxth	r0, r3
 8001d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d9c:	3303      	adds	r3, #3
 8001d9e:	b299      	uxth	r1, r3
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	3b06      	subs	r3, #6
 8001da4:	b29c      	uxth	r4, r3
 8001da6:	88bb      	ldrh	r3, [r7, #4]
 8001da8:	3b06      	subs	r3, #6
 8001daa:	b29d      	uxth	r5, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001dba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	f001 fa36 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001dc8:	887b      	ldrh	r3, [r7, #2]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f004 f94e 	bl	800606c <HAL_Delay>

		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001dd0:	f003 fda4 	bl	800591c <BSP_LCD_GetBackColor>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	88bb      	ldrh	r3, [r7, #4]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001ddc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001dde:	9400      	str	r4, [sp, #0]
 8001de0:	f001 fa28 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, BSP_LCD_GetBackColor());
 8001de4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001de6:	3b01      	subs	r3, #1
 8001de8:	b29c      	uxth	r4, r3
 8001dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29d      	uxth	r5, r3
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	3b02      	subs	r3, #2
 8001df4:	b29e      	uxth	r6, r3
 8001df6:	88bb      	ldrh	r3, [r7, #4]
 8001df8:	3b02      	subs	r3, #2
 8001dfa:	fa1f f883 	uxth.w	r8, r3
 8001dfe:	f003 fd8d 	bl	800591c <BSP_LCD_GetBackColor>
 8001e02:	4603      	mov	r3, r0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4643      	mov	r3, r8
 8001e08:	4632      	mov	r2, r6
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f001 fa11 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, BSP_LCD_GetBackColor());
 8001e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e14:	3b02      	subs	r3, #2
 8001e16:	b29c      	uxth	r4, r3
 8001e18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e1a:	3b02      	subs	r3, #2
 8001e1c:	b29d      	uxth	r5, r3
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	3b04      	subs	r3, #4
 8001e22:	b29e      	uxth	r6, r3
 8001e24:	88bb      	ldrh	r3, [r7, #4]
 8001e26:	3b04      	subs	r3, #4
 8001e28:	fa1f f883 	uxth.w	r8, r3
 8001e2c:	f003 fd76 	bl	800591c <BSP_LCD_GetBackColor>
 8001e30:	4603      	mov	r3, r0
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4643      	mov	r3, r8
 8001e36:	4632      	mov	r2, r6
 8001e38:	4629      	mov	r1, r5
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f001 f9fa 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, BSP_LCD_GetBackColor());
 8001e40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e42:	3b03      	subs	r3, #3
 8001e44:	b29c      	uxth	r4, r3
 8001e46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e48:	3303      	adds	r3, #3
 8001e4a:	b29d      	uxth	r5, r3
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	3b06      	subs	r3, #6
 8001e50:	b29e      	uxth	r6, r3
 8001e52:	88bb      	ldrh	r3, [r7, #4]
 8001e54:	3b06      	subs	r3, #6
 8001e56:	fa1f f883 	uxth.w	r8, r3
 8001e5a:	f003 fd5f 	bl	800591c <BSP_LCD_GetBackColor>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	4643      	mov	r3, r8
 8001e64:	4632      	mov	r2, r6
 8001e66:	4629      	mov	r1, r5
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f001 f9e3 	bl	8003234 <drawingRectangle>

		pozycja_x++;
 8001e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e70:	3301      	adds	r3, #1
 8001e72:	84fb      	strh	r3, [r7, #38]	; 0x26
		pozycja_y--;
 8001e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e76:	3b01      	subs	r3, #1
 8001e78:	84bb      	strh	r3, [r7, #36]	; 0x24

		if((i % 4) == 0) {
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <animationJumpingRectangle+0x814>
			pozycja_y--;
 8001e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e86:	3b01      	subs	r3, #1
 8001e88:	84bb      	strh	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (120 - dlugosc_boku_x/2); i++) { //Ruch w gore i w prawo
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	f6ff af34 	blt.w	8001d0a <animationJumpingRectangle+0x694>
		}
	}

	for(int i = 0; i < (160 - dlugosc_boku_y/2); i++) { //Ruch w dol
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e0b7      	b.n	8002018 <animationJumpingRectangle+0x9a2>
		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, 2164260608 + i*10);
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001eb6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001eba:	88bc      	ldrh	r4, [r7, #4]
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001ec0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	f001 f9b5 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, 2164260608 + i*10);
 8001eca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b298      	uxth	r0, r3
 8001ed0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b299      	uxth	r1, r3
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	3b02      	subs	r3, #2
 8001eda:	b29c      	uxth	r4, r3
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	3b02      	subs	r3, #2
 8001ee0:	b29d      	uxth	r5, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001ef0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	4622      	mov	r2, r4
 8001efa:	f001 f99b 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, 2164260608 + i*10);
 8001efe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f00:	3b02      	subs	r3, #2
 8001f02:	b298      	uxth	r0, r3
 8001f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f06:	3b02      	subs	r3, #2
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	3b04      	subs	r3, #4
 8001f0e:	b29c      	uxth	r4, r3
 8001f10:	88bb      	ldrh	r3, [r7, #4]
 8001f12:	3b04      	subs	r3, #4
 8001f14:	b29d      	uxth	r5, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001f24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	462b      	mov	r3, r5
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	f001 f981 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, 2164260608 + i*10);
 8001f32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f34:	3b03      	subs	r3, #3
 8001f36:	b298      	uxth	r0, r3
 8001f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	b299      	uxth	r1, r3
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	3b06      	subs	r3, #6
 8001f42:	b29c      	uxth	r4, r3
 8001f44:	88bb      	ldrh	r3, [r7, #4]
 8001f46:	3b06      	subs	r3, #6
 8001f48:	b29d      	uxth	r5, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8001f58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	462b      	mov	r3, r5
 8001f60:	4622      	mov	r2, r4
 8001f62:	f001 f967 	bl	8003234 <drawingRectangle>

		HAL_Delay(czas);
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 f87f 	bl	800606c <HAL_Delay>

		drawingRectangle(pozycja_x, pozycja_y, dlugosc_boku_x, dlugosc_boku_y, BSP_LCD_GetBackColor());
 8001f6e:	f003 fcd5 	bl	800591c <BSP_LCD_GetBackColor>
 8001f72:	4604      	mov	r4, r0
 8001f74:	88bb      	ldrh	r3, [r7, #4]
 8001f76:	88fa      	ldrh	r2, [r7, #6]
 8001f78:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001f7a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001f7c:	9400      	str	r4, [sp, #0]
 8001f7e:	f001 f959 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 1, pozycja_y - 1, dlugosc_boku_x - 2, dlugosc_boku_y - 2, BSP_LCD_GetBackColor());
 8001f82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29c      	uxth	r4, r3
 8001f88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29d      	uxth	r5, r3
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	3b02      	subs	r3, #2
 8001f92:	b29e      	uxth	r6, r3
 8001f94:	88bb      	ldrh	r3, [r7, #4]
 8001f96:	3b02      	subs	r3, #2
 8001f98:	fa1f f883 	uxth.w	r8, r3
 8001f9c:	f003 fcbe 	bl	800591c <BSP_LCD_GetBackColor>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	4643      	mov	r3, r8
 8001fa6:	4632      	mov	r2, r6
 8001fa8:	4629      	mov	r1, r5
 8001faa:	4620      	mov	r0, r4
 8001fac:	f001 f942 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 2, pozycja_y - 2, dlugosc_boku_x - 4, dlugosc_boku_y - 4, BSP_LCD_GetBackColor());
 8001fb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fb2:	3b02      	subs	r3, #2
 8001fb4:	b29c      	uxth	r4, r3
 8001fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fb8:	3b02      	subs	r3, #2
 8001fba:	b29d      	uxth	r5, r3
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	b29e      	uxth	r6, r3
 8001fc2:	88bb      	ldrh	r3, [r7, #4]
 8001fc4:	3b04      	subs	r3, #4
 8001fc6:	fa1f f883 	uxth.w	r8, r3
 8001fca:	f003 fca7 	bl	800591c <BSP_LCD_GetBackColor>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f001 f92b 	bl	8003234 <drawingRectangle>
		drawingRectangle(pozycja_x - 3, pozycja_y + 3, dlugosc_boku_x - 6, dlugosc_boku_y - 6, BSP_LCD_GetBackColor());
 8001fde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	b29c      	uxth	r4, r3
 8001fe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fe6:	3303      	adds	r3, #3
 8001fe8:	b29d      	uxth	r5, r3
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	3b06      	subs	r3, #6
 8001fee:	b29e      	uxth	r6, r3
 8001ff0:	88bb      	ldrh	r3, [r7, #4]
 8001ff2:	3b06      	subs	r3, #6
 8001ff4:	fa1f f883 	uxth.w	r8, r3
 8001ff8:	f003 fc90 	bl	800591c <BSP_LCD_GetBackColor>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	4643      	mov	r3, r8
 8002002:	4632      	mov	r2, r6
 8002004:	4629      	mov	r1, r5
 8002006:	4620      	mov	r0, r4
 8002008:	f001 f914 	bl	8003234 <drawingRectangle>

		pozycja_y++;
 800200c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800200e:	3301      	adds	r3, #1
 8002010:	84bb      	strh	r3, [r7, #36]	; 0x24
	for(int i = 0; i < (160 - dlugosc_boku_y/2); i++) { //Ruch w dol
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	429a      	cmp	r2, r3
 8002026:	f6ff af3f 	blt.w	8001ea8 <animationJumpingRectangle+0x832>
	}

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002034 <animationTriangle>:
 * @param dlugosc_boku_x length of the side of a triangle
 * @param ilosc the number of triangle
 * @param czas the time between triangle
 */

void animationTriangle (uint16_t margines_x, uint16_t margines_y, uint16_t dlugosc_boku, uint16_t ilosc, uint16_t czas) {
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	4603      	mov	r3, r0
 8002048:	80bb      	strh	r3, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	807b      	strh	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	803b      	strh	r3, [r7, #0]

	for(int i = 0; i<ilosc; i++){
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e0a6      	b.n	80021a6 <animationTriangle+0x172>

		//rysowanie po przekatnej
		drawingTriangle(margines_x + i, margines_y + i, dlugosc_boku, 2164260608 + i*10);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	4413      	add	r3, r2
 8002060:	b298      	uxth	r0, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	b29a      	uxth	r2, r3
 8002066:	88bb      	ldrh	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	b299      	uxth	r1, r3
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800207a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	f001 f940 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x - i, margines_y - i, dlugosc_boku, 2164260608 + i*10);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	b29b      	uxth	r3, r3
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b298      	uxth	r0, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	b29b      	uxth	r3, r3
 8002092:	88ba      	ldrh	r2, [r7, #4]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	b299      	uxth	r1, r3
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80020a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	f001 f92a 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x + i, margines_y - i, dlugosc_boku, 2164260608 + i*10);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	4413      	add	r3, r2
 80020b8:	b298      	uxth	r0, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	88ba      	ldrh	r2, [r7, #4]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	b299      	uxth	r1, r3
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80020d2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	f001 f914 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x - i, margines_y + i, dlugosc_boku, 2164260608 + i*10);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	88fa      	ldrh	r2, [r7, #6]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	b298      	uxth	r0, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	88bb      	ldrh	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	b299      	uxth	r1, r3
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80020fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	f001 f8fe 	bl	8003304 <drawingTriangle>

		//rysowanie pionowo i poziomo
		drawingTriangle(margines_x, margines_y + i, dlugosc_boku, 2164260608 + i*10);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	b29a      	uxth	r2, r3
 800210c:	88bb      	ldrh	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	b299      	uxth	r1, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002120:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002124:	887a      	ldrh	r2, [r7, #2]
 8002126:	88f8      	ldrh	r0, [r7, #6]
 8002128:	f001 f8ec 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x, margines_y - i, dlugosc_boku, 2164260608 + i*10);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b29b      	uxth	r3, r3
 8002130:	88ba      	ldrh	r2, [r7, #4]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	b299      	uxth	r1, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002144:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	88f8      	ldrh	r0, [r7, #6]
 800214c:	f001 f8da 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x + i, margines_y, dlugosc_boku, 2164260608 + i*10);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	b29a      	uxth	r2, r3
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	4413      	add	r3, r2
 8002158:	b298      	uxth	r0, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002168:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800216c:	887a      	ldrh	r2, [r7, #2]
 800216e:	88b9      	ldrh	r1, [r7, #4]
 8002170:	f001 f8c8 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x - i, margines_y, dlugosc_boku, 2164260608 + i*10);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	b29b      	uxth	r3, r3
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	b298      	uxth	r0, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800218c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	88b9      	ldrh	r1, [r7, #4]
 8002194:	f001 f8b6 	bl	8003304 <drawingTriangle>

		HAL_Delay(czas);
 8002198:	8c3b      	ldrh	r3, [r7, #32]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 ff66 	bl	800606c <HAL_Delay>
	for(int i = 0; i<ilosc; i++){
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	883b      	ldrh	r3, [r7, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	f6ff af54 	blt.w	8002058 <animationTriangle+0x24>
	}

	for(int i = 0; i<ilosc; i++){
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	e082      	b.n	80022bc <animationTriangle+0x288>

		//czyszczenie po przekatnej
		drawingTriangle(margines_x + i, margines_y + i, dlugosc_boku, BSP_LCD_GetBackColor());
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4413      	add	r3, r2
 80021be:	b29c      	uxth	r4, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	88bb      	ldrh	r3, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	b29d      	uxth	r5, r3
 80021ca:	f003 fba7 	bl	800591c <BSP_LCD_GetBackColor>
 80021ce:	4603      	mov	r3, r0
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	4629      	mov	r1, r5
 80021d4:	4620      	mov	r0, r4
 80021d6:	f001 f895 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x - i, margines_y - i, dlugosc_boku, BSP_LCD_GetBackColor());
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	b29c      	uxth	r4, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	88ba      	ldrh	r2, [r7, #4]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	b29d      	uxth	r5, r3
 80021ee:	f003 fb95 	bl	800591c <BSP_LCD_GetBackColor>
 80021f2:	4603      	mov	r3, r0
 80021f4:	887a      	ldrh	r2, [r7, #2]
 80021f6:	4629      	mov	r1, r5
 80021f8:	4620      	mov	r0, r4
 80021fa:	f001 f883 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x + i, margines_y - i, dlugosc_boku, BSP_LCD_GetBackColor());
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	b29a      	uxth	r2, r3
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4413      	add	r3, r2
 8002206:	b29c      	uxth	r4, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	b29b      	uxth	r3, r3
 800220c:	88ba      	ldrh	r2, [r7, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b29d      	uxth	r5, r3
 8002212:	f003 fb83 	bl	800591c <BSP_LCD_GetBackColor>
 8002216:	4603      	mov	r3, r0
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	4629      	mov	r1, r5
 800221c:	4620      	mov	r0, r4
 800221e:	f001 f871 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x - i, margines_y + i, dlugosc_boku, BSP_LCD_GetBackColor());
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	b29b      	uxth	r3, r3
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	b29c      	uxth	r4, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	b29a      	uxth	r2, r3
 8002230:	88bb      	ldrh	r3, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	b29d      	uxth	r5, r3
 8002236:	f003 fb71 	bl	800591c <BSP_LCD_GetBackColor>
 800223a:	4603      	mov	r3, r0
 800223c:	887a      	ldrh	r2, [r7, #2]
 800223e:	4629      	mov	r1, r5
 8002240:	4620      	mov	r0, r4
 8002242:	f001 f85f 	bl	8003304 <drawingTriangle>

		//czyszczenie pionowo i poziomo
		drawingTriangle(margines_x, margines_y + i, dlugosc_boku, BSP_LCD_GetBackColor());
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	b29a      	uxth	r2, r3
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	b29c      	uxth	r4, r3
 8002250:	f003 fb64 	bl	800591c <BSP_LCD_GetBackColor>
 8002254:	4603      	mov	r3, r0
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	88f8      	ldrh	r0, [r7, #6]
 800225a:	4621      	mov	r1, r4
 800225c:	f001 f852 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x, margines_y - i, dlugosc_boku, BSP_LCD_GetBackColor());
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	b29b      	uxth	r3, r3
 8002264:	88ba      	ldrh	r2, [r7, #4]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	b29c      	uxth	r4, r3
 800226a:	f003 fb57 	bl	800591c <BSP_LCD_GetBackColor>
 800226e:	4603      	mov	r3, r0
 8002270:	887a      	ldrh	r2, [r7, #2]
 8002272:	88f8      	ldrh	r0, [r7, #6]
 8002274:	4621      	mov	r1, r4
 8002276:	f001 f845 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x + i, margines_y, dlugosc_boku, BSP_LCD_GetBackColor());
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	b29a      	uxth	r2, r3
 800227e:	88fb      	ldrh	r3, [r7, #6]
 8002280:	4413      	add	r3, r2
 8002282:	b29c      	uxth	r4, r3
 8002284:	f003 fb4a 	bl	800591c <BSP_LCD_GetBackColor>
 8002288:	4603      	mov	r3, r0
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	88b9      	ldrh	r1, [r7, #4]
 800228e:	4620      	mov	r0, r4
 8002290:	f001 f838 	bl	8003304 <drawingTriangle>
		drawingTriangle(margines_x - i, margines_y, dlugosc_boku, BSP_LCD_GetBackColor());
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	b29b      	uxth	r3, r3
 8002298:	88fa      	ldrh	r2, [r7, #6]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	b29c      	uxth	r4, r3
 800229e:	f003 fb3d 	bl	800591c <BSP_LCD_GetBackColor>
 80022a2:	4603      	mov	r3, r0
 80022a4:	887a      	ldrh	r2, [r7, #2]
 80022a6:	88b9      	ldrh	r1, [r7, #4]
 80022a8:	4620      	mov	r0, r4
 80022aa:	f001 f82b 	bl	8003304 <drawingTriangle>

		HAL_Delay(czas);
 80022ae:	8c3b      	ldrh	r3, [r7, #32]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fedb 	bl	800606c <HAL_Delay>
	for(int i = 0; i<ilosc; i++){
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	883b      	ldrh	r3, [r7, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	f6ff af78 	blt.w	80021b6 <animationTriangle+0x182>
	}

}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bdb0      	pop	{r4, r5, r7, pc}

080022ce <animationCircle>:
 * @param count	the number of circles
 * @param time	the time between drawings
 */

void animationCircle (uint16_t x_pos, uint16_t y_pos, uint16_t rad, uint16_t count, uint16_t time)
{
 80022ce:	b5b0      	push	{r4, r5, r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4604      	mov	r4, r0
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	461a      	mov	r2, r3
 80022dc:	4623      	mov	r3, r4
 80022de:	80fb      	strh	r3, [r7, #6]
 80022e0:	4603      	mov	r3, r0
 80022e2:	80bb      	strh	r3, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	803b      	strh	r3, [r7, #0]

	//drawing animations with pixels
	for(int i = 0; i<count; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e0a6      	b.n	8002440 <animationCircle+0x172>
		//diagonally
		drawingCircle(x_pos + i, y_pos + i, rad, 2164260608 + i*10);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	4413      	add	r3, r2
 80022fa:	b298      	uxth	r0, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	88bb      	ldrh	r3, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	b299      	uxth	r1, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4613      	mov	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002314:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	f001 f86d 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos - i, y_pos - i, rad, 2164260608 + i*10);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	b29b      	uxth	r3, r3
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	b298      	uxth	r0, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b29b      	uxth	r3, r3
 800232c:	88ba      	ldrh	r2, [r7, #4]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b299      	uxth	r1, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002340:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002344:	887a      	ldrh	r2, [r7, #2]
 8002346:	f001 f857 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos + i, y_pos - i, rad, 2164260608 + i*10);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b29a      	uxth	r2, r3
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4413      	add	r3, r2
 8002352:	b298      	uxth	r0, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	b29b      	uxth	r3, r3
 8002358:	88ba      	ldrh	r2, [r7, #4]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	b299      	uxth	r1, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 800236c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	f001 f841 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos - i, y_pos + i, rad, 2164260608 + i*10);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	b29b      	uxth	r3, r3
 800237a:	88fa      	ldrh	r2, [r7, #6]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	b298      	uxth	r0, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	b29a      	uxth	r2, r3
 8002384:	88bb      	ldrh	r3, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	b299      	uxth	r1, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002398:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800239c:	887a      	ldrh	r2, [r7, #2]
 800239e:	f001 f82b 	bl	80033f8 <drawingCircle>

		//vertically and horizontally
		drawingCircle(x_pos, y_pos + i, rad, 2164260608 + i*10);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	b299      	uxth	r1, r3
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80023ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023be:	887a      	ldrh	r2, [r7, #2]
 80023c0:	88f8      	ldrh	r0, [r7, #6]
 80023c2:	f001 f819 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos, y_pos - i, rad, 2164260608 + i*10);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	88ba      	ldrh	r2, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	b299      	uxth	r1, r3
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 80023de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80023e2:	887a      	ldrh	r2, [r7, #2]
 80023e4:	88f8      	ldrh	r0, [r7, #6]
 80023e6:	f001 f807 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos + i, y_pos, rad, 2164260608 + i*10);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	4413      	add	r3, r2
 80023f2:	b298      	uxth	r0, r3
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002402:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	88b9      	ldrh	r1, [r7, #4]
 800240a:	f000 fff5 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos - i, y_pos, rad, 2164260608 + i*10);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	b29b      	uxth	r3, r3
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	b298      	uxth	r0, r3
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	f103 4301 	add.w	r3, r3, #2164260864	; 0x81000000
 8002426:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	88b9      	ldrh	r1, [r7, #4]
 800242e:	f000 ffe3 	bl	80033f8 <drawingCircle>

		HAL_Delay(time);
 8002432:	8c3b      	ldrh	r3, [r7, #32]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fe19 	bl	800606c <HAL_Delay>
	for(int i = 0; i<count; i++){
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3301      	adds	r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	883b      	ldrh	r3, [r7, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	f6ff af54 	blt.w	80022f2 <animationCircle+0x24>
	}

	//clearing the screen by drawing with pixels
	for(int i = 0; i<count; i++){
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	e082      	b.n	8002556 <animationCircle+0x288>
		//diagonally
		drawingCircle(x_pos + i, y_pos + i, rad, BSP_LCD_GetBackColor());
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	b29a      	uxth	r2, r3
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4413      	add	r3, r2
 8002458:	b29c      	uxth	r4, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	b29a      	uxth	r2, r3
 800245e:	88bb      	ldrh	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	b29d      	uxth	r5, r3
 8002464:	f003 fa5a 	bl	800591c <BSP_LCD_GetBackColor>
 8002468:	4603      	mov	r3, r0
 800246a:	887a      	ldrh	r2, [r7, #2]
 800246c:	4629      	mov	r1, r5
 800246e:	4620      	mov	r0, r4
 8002470:	f000 ffc2 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos - i, y_pos - i, rad, BSP_LCD_GetBackColor());
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	b29b      	uxth	r3, r3
 8002478:	88fa      	ldrh	r2, [r7, #6]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	b29c      	uxth	r4, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	b29b      	uxth	r3, r3
 8002482:	88ba      	ldrh	r2, [r7, #4]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	b29d      	uxth	r5, r3
 8002488:	f003 fa48 	bl	800591c <BSP_LCD_GetBackColor>
 800248c:	4603      	mov	r3, r0
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	4629      	mov	r1, r5
 8002492:	4620      	mov	r0, r4
 8002494:	f000 ffb0 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos + i, y_pos - i, rad, BSP_LCD_GetBackColor());
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	b29a      	uxth	r2, r3
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	4413      	add	r3, r2
 80024a0:	b29c      	uxth	r4, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	88ba      	ldrh	r2, [r7, #4]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	b29d      	uxth	r5, r3
 80024ac:	f003 fa36 	bl	800591c <BSP_LCD_GetBackColor>
 80024b0:	4603      	mov	r3, r0
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	4629      	mov	r1, r5
 80024b6:	4620      	mov	r0, r4
 80024b8:	f000 ff9e 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos - i, y_pos + i, rad, BSP_LCD_GetBackColor());
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	88fa      	ldrh	r2, [r7, #6]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b29c      	uxth	r4, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	b29d      	uxth	r5, r3
 80024d0:	f003 fa24 	bl	800591c <BSP_LCD_GetBackColor>
 80024d4:	4603      	mov	r3, r0
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	4629      	mov	r1, r5
 80024da:	4620      	mov	r0, r4
 80024dc:	f000 ff8c 	bl	80033f8 <drawingCircle>

		//vertically and horizontally
		drawingCircle(x_pos, y_pos + i, rad, BSP_LCD_GetBackColor());
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	88bb      	ldrh	r3, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	b29c      	uxth	r4, r3
 80024ea:	f003 fa17 	bl	800591c <BSP_LCD_GetBackColor>
 80024ee:	4603      	mov	r3, r0
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	88f8      	ldrh	r0, [r7, #6]
 80024f4:	4621      	mov	r1, r4
 80024f6:	f000 ff7f 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos, y_pos - i, rad, BSP_LCD_GetBackColor());
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	88ba      	ldrh	r2, [r7, #4]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	b29c      	uxth	r4, r3
 8002504:	f003 fa0a 	bl	800591c <BSP_LCD_GetBackColor>
 8002508:	4603      	mov	r3, r0
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	88f8      	ldrh	r0, [r7, #6]
 800250e:	4621      	mov	r1, r4
 8002510:	f000 ff72 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos + i, y_pos, rad, BSP_LCD_GetBackColor());
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	b29a      	uxth	r2, r3
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	4413      	add	r3, r2
 800251c:	b29c      	uxth	r4, r3
 800251e:	f003 f9fd 	bl	800591c <BSP_LCD_GetBackColor>
 8002522:	4603      	mov	r3, r0
 8002524:	887a      	ldrh	r2, [r7, #2]
 8002526:	88b9      	ldrh	r1, [r7, #4]
 8002528:	4620      	mov	r0, r4
 800252a:	f000 ff65 	bl	80033f8 <drawingCircle>
		drawingCircle(x_pos - i, y_pos, rad, BSP_LCD_GetBackColor());
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	b29b      	uxth	r3, r3
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b29c      	uxth	r4, r3
 8002538:	f003 f9f0 	bl	800591c <BSP_LCD_GetBackColor>
 800253c:	4603      	mov	r3, r0
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	88b9      	ldrh	r1, [r7, #4]
 8002542:	4620      	mov	r0, r4
 8002544:	f000 ff58 	bl	80033f8 <drawingCircle>

		HAL_Delay(time);
 8002548:	8c3b      	ldrh	r3, [r7, #32]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fd8e 	bl	800606c <HAL_Delay>
	for(int i = 0; i<count; i++){
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3301      	adds	r3, #1
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	883b      	ldrh	r3, [r7, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	f6ff af78 	blt.w	8002450 <animationCircle+0x182>
	}
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bdb0      	pop	{r4, r5, r7, pc}

08002568 <animationText>:
 * @param x_pos X position of the bottom right corner of the animation
 * @param y_pos Y position of the bottom right corner of the animation
 */

void animationText (uint16_t x_pos, uint16_t y_pos, uint16_t time)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
 8002572:	460b      	mov	r3, r1
 8002574:	80bb      	strh	r3, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	807b      	strh	r3, [r7, #2]
	uint32_t color = 2164272953;
 800257a:	4b33      	ldr	r3, [pc, #204]	; (8002648 <animationText+0xe0>)
 800257c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<10; i++){
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
 8002582:	e02c      	b.n	80025de <animationText+0x76>
		for(int j = 0; j<10; j++){
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e01f      	b.n	80025ca <animationText+0x62>
			drawingText(5, 60 + j + 30*i, color + 12345*i);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	b29a      	uxth	r2, r3
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	b29b      	uxth	r3, r3
 8002592:	4619      	mov	r1, r3
 8002594:	0109      	lsls	r1, r1, #4
 8002596:	1acb      	subs	r3, r1, r3
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	b29b      	uxth	r3, r3
 800259c:	4413      	add	r3, r2
 800259e:	b29b      	uxth	r3, r3
 80025a0:	333c      	adds	r3, #60	; 0x3c
 80025a2:	b299      	uxth	r1, r3
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f243 0239 	movw	r2, #12345	; 0x3039
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4413      	add	r3, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	2005      	movs	r0, #5
 80025b8:	f001 fa67 	bl	8003a8a <drawingText>
			HAL_Delay(500);
 80025bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025c0:	f003 fd54 	bl	800606c <HAL_Delay>
		for(int j = 0; j<10; j++){
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	dddc      	ble.n	800258a <animationText+0x22>
		}
		HAL_Delay(time);
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fd4a 	bl	800606c <HAL_Delay>
	for(int i = 0; i<10; i++){
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	3301      	adds	r3, #1
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2b09      	cmp	r3, #9
 80025e2:	ddcf      	ble.n	8002584 <animationText+0x1c>
	}
	for(int i = 0; i<5; i++){
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e026      	b.n	8002638 <animationText+0xd0>
		for(int j = 0; j<10; j++){
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	e019      	b.n	8002624 <animationText+0xbc>
			drawingText(5, 60 + 2*j + 30*i, BSP_LCD_GetBackColor());
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f103 011e 	add.w	r1, r3, #30
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	440b      	add	r3, r1
 8002600:	b29b      	uxth	r3, r3
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	b29c      	uxth	r4, r3
 8002606:	f003 f989 	bl	800591c <BSP_LCD_GetBackColor>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4621      	mov	r1, r4
 8002610:	2005      	movs	r0, #5
 8002612:	f001 fa3a 	bl	8003a8a <drawingText>
			HAL_Delay(500);
 8002616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800261a:	f003 fd27 	bl	800606c <HAL_Delay>
		for(int j = 0; j<10; j++){
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	3301      	adds	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b09      	cmp	r3, #9
 8002628:	dde2      	ble.n	80025f0 <animationText+0x88>
		}
		HAL_Delay(time);
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	4618      	mov	r0, r3
 800262e:	f003 fd1d 	bl	800606c <HAL_Delay>
	for(int i = 0; i<5; i++){
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3301      	adds	r3, #1
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b04      	cmp	r3, #4
 800263c:	ddd5      	ble.n	80025ea <animationText+0x82>
	}
}
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd90      	pop	{r4, r7, pc}
 8002646:	bf00      	nop
 8002648:	81002f39 	.word	0x81002f39
 800264c:	00000000 	.word	0x00000000

08002650 <animationRotation>:
 * @param y_pos Y position of the center of rotation
 * @param angle the angle of one rotation
 */

void animationRotation (uint16_t x_pos, uint16_t y_pos, double angle)
{
 8002650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002654:	b0bf      	sub	sp, #252	; 0xfc
 8002656:	af02      	add	r7, sp, #8
 8002658:	4603      	mov	r3, r0
 800265a:	460a      	mov	r2, r1
 800265c:	ed87 0b00 	vstr	d0, [r7]
 8002660:	81fb      	strh	r3, [r7, #14]
 8002662:	4613      	mov	r3, r2
 8002664:	81bb      	strh	r3, [r7, #12]
	double length = 70;
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	4c45      	ldr	r4, [pc, #276]	; (8002780 <animationRotation+0x130>)
 800266c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double right_top_x = 120;
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	4c43      	ldr	r4, [pc, #268]	; (8002784 <animationRotation+0x134>)
 8002676:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	double right_top_y = 160;
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	4c42      	ldr	r4, [pc, #264]	; (8002788 <animationRotation+0x138>)
 8002680:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40


	angle = angle * PI_NUM / 180;
 8002684:	a33c      	add	r3, pc, #240	; (adr r3, 8002778 <animationRotation+0x128>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800268e:	f7fd ff6b 	bl	8000568 <__aeabi_dmul>
 8002692:	4603      	mov	r3, r0
 8002694:	460c      	mov	r4, r1
 8002696:	4618      	mov	r0, r3
 8002698:	4621      	mov	r1, r4
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <animationRotation+0x13c>)
 80026a0:	f7fe f88c 	bl	80007bc <__aeabi_ddiv>
 80026a4:	4603      	mov	r3, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	e9c7 3400 	strd	r3, r4, [r7]


	double x_center = x_pos;
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd fee0 	bl	8000474 <__aeabi_ui2d>
 80026b4:	4603      	mov	r3, r0
 80026b6:	460c      	mov	r4, r1
 80026b8:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	double y_center = y_pos;
 80026bc:	89bb      	ldrh	r3, [r7, #12]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd fed8 	bl	8000474 <__aeabi_ui2d>
 80026c4:	4603      	mov	r3, r0
 80026c6:	460c      	mov	r4, r1
 80026c8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	double x_from = right_top_x;
 80026cc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80026d0:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
	double y_from = right_top_y;
 80026d4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80026d8:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
	double x_to = right_top_x;
 80026dc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80026e0:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	double y_to = y_from + length;
 80026e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026ec:	f7fd fd86 	bl	80001fc <__adddf3>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
	double x_precedente;

	double x_from1 = right_top_x;//x_to-bok
 80026f8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80026fc:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
	double y_from1 = y_to; //y_to
 8002700:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8002704:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
	double x_to1 = x_from1 - length;
 8002708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800270c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002710:	f7fd fd72 	bl	80001f8 <__aeabi_dsub>
 8002714:	4603      	mov	r3, r0
 8002716:	460c      	mov	r4, r1
 8002718:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	double y_to1 = y_to;
 800271c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8002720:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	double x_precedente1;

	double x_from2 = x_to1;//x_to-bok
 8002724:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002728:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	double y_from2 = y_to; //y_to
 800272c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8002730:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	double x_to2 = x_to1;
 8002734:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002738:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	double y_to2 = right_top_y;
 800273c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002740:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	double x_precedente2;

	double x_from3 = x_to1;//x_to-bok
 8002744:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002748:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	double y_from3 = right_top_y; //y_to
 800274c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002750:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	double x_to3 = right_top_x;
 8002754:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002758:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	double y_to3 = right_top_y;
 800275c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002760:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
//	double x_to3 = 120;
//	double y_to3 = 160;
//	double x_precedente3;


	for (int j = 0; j < 20; j++) {
 8002764:	2300      	movs	r3, #0
 8002766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002768:	f000 bd56 	b.w	8003218 <animationRotation+0xbc8>

		for (int i = 0; i < 5; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002770:	e055      	b.n	800281e <animationRotation+0x1ce>
 8002772:	bf00      	nop
 8002774:	f3af 8000 	nop.w
 8002778:	53c8d4f1 	.word	0x53c8d4f1
 800277c:	400921fb 	.word	0x400921fb
 8002780:	40518000 	.word	0x40518000
 8002784:	405e0000 	.word	0x405e0000
 8002788:	40640000 	.word	0x40640000
 800278c:	40668000 	.word	0x40668000
			DrawLine(x_from + i, y_from + i, x_to + i, y_to + i, 0x80FFFF00);
 8002790:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002792:	f7fd fe7f 	bl	8000494 <__aeabi_i2d>
 8002796:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800279a:	f7fd fd2f 	bl	80001fc <__adddf3>
 800279e:	4603      	mov	r3, r0
 80027a0:	460c      	mov	r4, r1
 80027a2:	4618      	mov	r0, r3
 80027a4:	4621      	mov	r1, r4
 80027a6:	f7fe f979 	bl	8000a9c <__aeabi_d2iz>
 80027aa:	4603      	mov	r3, r0
 80027ac:	b21c      	sxth	r4, r3
 80027ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027b0:	f7fd fe70 	bl	8000494 <__aeabi_i2d>
 80027b4:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80027b8:	f7fd fd20 	bl	80001fc <__adddf3>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7fe f96a 	bl	8000a9c <__aeabi_d2iz>
 80027c8:	4603      	mov	r3, r0
 80027ca:	b21d      	sxth	r5, r3
 80027cc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027ce:	f7fd fe61 	bl	8000494 <__aeabi_i2d>
 80027d2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80027d6:	f7fd fd11 	bl	80001fc <__adddf3>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f7fe f95b 	bl	8000a9c <__aeabi_d2iz>
 80027e6:	4603      	mov	r3, r0
 80027e8:	b21e      	sxth	r6, r3
 80027ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80027ec:	f7fd fe52 	bl	8000494 <__aeabi_i2d>
 80027f0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80027f4:	f7fd fd02 	bl	80001fc <__adddf3>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f94c 	bl	8000a9c <__aeabi_d2iz>
 8002804:	4603      	mov	r3, r0
 8002806:	b21a      	sxth	r2, r3
 8002808:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <animationRotation+0x3dc>)
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	4632      	mov	r2, r6
 8002810:	4629      	mov	r1, r5
 8002812:	4620      	mov	r0, r4
 8002814:	f000 fe90 	bl	8003538 <DrawLine>
		for (int i = 0; i < 5; i++)
 8002818:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800281a:	3301      	adds	r3, #1
 800281c:	66bb      	str	r3, [r7, #104]	; 0x68
 800281e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002820:	2b04      	cmp	r3, #4
 8002822:	ddb5      	ble.n	8002790 <animationRotation+0x140>
		x_precedente = x_from;
 8002824:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8002828:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		x_from = ((x_from - x_center) * cos(angle) - (y_from - y_center) * sin(angle) + x_center);
 800282c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002830:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8002834:	f7fd fce0 	bl	80001f8 <__aeabi_dsub>
 8002838:	4603      	mov	r3, r0
 800283a:	460c      	mov	r4, r1
 800283c:	4625      	mov	r5, r4
 800283e:	461c      	mov	r4, r3
 8002840:	ed97 0b00 	vldr	d0, [r7]
 8002844:	f00c f89c 	bl	800e980 <cos>
 8002848:	ec53 2b10 	vmov	r2, r3, d0
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fe8a 	bl	8000568 <__aeabi_dmul>
 8002854:	4603      	mov	r3, r0
 8002856:	460c      	mov	r4, r1
 8002858:	4625      	mov	r5, r4
 800285a:	461c      	mov	r4, r3
 800285c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002860:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002864:	f7fd fcc8 	bl	80001f8 <__aeabi_dsub>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4690      	mov	r8, r2
 800286e:	4699      	mov	r9, r3
 8002870:	ed97 0b00 	vldr	d0, [r7]
 8002874:	f00c f8c8 	bl	800ea08 <sin>
 8002878:	ec53 2b10 	vmov	r2, r3, d0
 800287c:	4640      	mov	r0, r8
 800287e:	4649      	mov	r1, r9
 8002880:	f7fd fe72 	bl	8000568 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4620      	mov	r0, r4
 800288a:	4629      	mov	r1, r5
 800288c:	f7fd fcb4 	bl	80001f8 <__aeabi_dsub>
 8002890:	4603      	mov	r3, r0
 8002892:	460c      	mov	r4, r1
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800289c:	f7fd fcae 	bl	80001fc <__adddf3>
 80028a0:	4603      	mov	r3, r0
 80028a2:	460c      	mov	r4, r1
 80028a4:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		y_from = ((x_precedente - x_center) * sin(angle) + (y_from - y_center) * cos(angle) + y_center);
 80028a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028b0:	f7fd fca2 	bl	80001f8 <__aeabi_dsub>
 80028b4:	4603      	mov	r3, r0
 80028b6:	460c      	mov	r4, r1
 80028b8:	4625      	mov	r5, r4
 80028ba:	461c      	mov	r4, r3
 80028bc:	ed97 0b00 	vldr	d0, [r7]
 80028c0:	f00c f8a2 	bl	800ea08 <sin>
 80028c4:	ec53 2b10 	vmov	r2, r3, d0
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fe4c 	bl	8000568 <__aeabi_dmul>
 80028d0:	4603      	mov	r3, r0
 80028d2:	460c      	mov	r4, r1
 80028d4:	4625      	mov	r5, r4
 80028d6:	461c      	mov	r4, r3
 80028d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80028e0:	f7fd fc8a 	bl	80001f8 <__aeabi_dsub>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4690      	mov	r8, r2
 80028ea:	4699      	mov	r9, r3
 80028ec:	ed97 0b00 	vldr	d0, [r7]
 80028f0:	f00c f846 	bl	800e980 <cos>
 80028f4:	ec53 2b10 	vmov	r2, r3, d0
 80028f8:	4640      	mov	r0, r8
 80028fa:	4649      	mov	r1, r9
 80028fc:	f7fd fe34 	bl	8000568 <__aeabi_dmul>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4620      	mov	r0, r4
 8002906:	4629      	mov	r1, r5
 8002908:	f7fd fc78 	bl	80001fc <__adddf3>
 800290c:	4603      	mov	r3, r0
 800290e:	460c      	mov	r4, r1
 8002910:	461a      	mov	r2, r3
 8002912:	4623      	mov	r3, r4
 8002914:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002918:	f7fd fc70 	bl	80001fc <__adddf3>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0

		x_precedente = x_to;
 8002924:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8002928:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		x_to = ((x_to - x_center) * cos(angle) - (y_to - y_center) * sin(angle) + x_center);
 800292c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002930:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002934:	f7fd fc60 	bl	80001f8 <__aeabi_dsub>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4625      	mov	r5, r4
 800293e:	461c      	mov	r4, r3
 8002940:	ed97 0b00 	vldr	d0, [r7]
 8002944:	f00c f81c 	bl	800e980 <cos>
 8002948:	ec53 2b10 	vmov	r2, r3, d0
 800294c:	4620      	mov	r0, r4
 800294e:	4629      	mov	r1, r5
 8002950:	f7fd fe0a 	bl	8000568 <__aeabi_dmul>
 8002954:	4603      	mov	r3, r0
 8002956:	460c      	mov	r4, r1
 8002958:	4625      	mov	r5, r4
 800295a:	461c      	mov	r4, r3
 800295c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002960:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8002964:	f7fd fc48 	bl	80001f8 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4690      	mov	r8, r2
 800296e:	4699      	mov	r9, r3
 8002970:	ed97 0b00 	vldr	d0, [r7]
 8002974:	f00c f848 	bl	800ea08 <sin>
 8002978:	ec53 2b10 	vmov	r2, r3, d0
 800297c:	4640      	mov	r0, r8
 800297e:	4649      	mov	r1, r9
 8002980:	f7fd fdf2 	bl	8000568 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4620      	mov	r0, r4
 800298a:	4629      	mov	r1, r5
 800298c:	f7fd fc34 	bl	80001f8 <__aeabi_dsub>
 8002990:	4603      	mov	r3, r0
 8002992:	460c      	mov	r4, r1
 8002994:	461a      	mov	r2, r3
 8002996:	4623      	mov	r3, r4
 8002998:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800299c:	f7fd fc2e 	bl	80001fc <__adddf3>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		y_to = ((x_precedente - x_center) * sin(angle) + (y_to - y_center) * cos(angle) + y_center);
 80029a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80029ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029b0:	f7fd fc22 	bl	80001f8 <__aeabi_dsub>
 80029b4:	4603      	mov	r3, r0
 80029b6:	460c      	mov	r4, r1
 80029b8:	4625      	mov	r5, r4
 80029ba:	461c      	mov	r4, r3
 80029bc:	ed97 0b00 	vldr	d0, [r7]
 80029c0:	f00c f822 	bl	800ea08 <sin>
 80029c4:	ec53 2b10 	vmov	r2, r3, d0
 80029c8:	4620      	mov	r0, r4
 80029ca:	4629      	mov	r1, r5
 80029cc:	f7fd fdcc 	bl	8000568 <__aeabi_dmul>
 80029d0:	4603      	mov	r3, r0
 80029d2:	460c      	mov	r4, r1
 80029d4:	4625      	mov	r5, r4
 80029d6:	461c      	mov	r4, r3
 80029d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80029dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80029e0:	f7fd fc0a 	bl	80001f8 <__aeabi_dsub>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4690      	mov	r8, r2
 80029ea:	4699      	mov	r9, r3
 80029ec:	ed97 0b00 	vldr	d0, [r7]
 80029f0:	f00b ffc6 	bl	800e980 <cos>
 80029f4:	ec53 2b10 	vmov	r2, r3, d0
 80029f8:	4640      	mov	r0, r8
 80029fa:	4649      	mov	r1, r9
 80029fc:	f7fd fdb4 	bl	8000568 <__aeabi_dmul>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4620      	mov	r0, r4
 8002a06:	4629      	mov	r1, r5
 8002a08:	f7fd fbf8 	bl	80001fc <__adddf3>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	460c      	mov	r4, r1
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a18:	f7fd fbf0 	bl	80001fc <__adddf3>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0

		for (int i = 0; i < 5; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	667b      	str	r3, [r7, #100]	; 0x64
 8002a28:	e049      	b.n	8002abe <animationRotation+0x46e>
 8002a2a:	bf00      	nop
 8002a2c:	80ffff00 	.word	0x80ffff00
			DrawLine(x_from1 + i, y_from1 + i, x_to1 + i, y_to1 + i, 0x80FFFF00);
 8002a30:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a32:	f7fd fd2f 	bl	8000494 <__aeabi_i2d>
 8002a36:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8002a3a:	f7fd fbdf 	bl	80001fc <__adddf3>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	460c      	mov	r4, r1
 8002a42:	4618      	mov	r0, r3
 8002a44:	4621      	mov	r1, r4
 8002a46:	f7fe f829 	bl	8000a9c <__aeabi_d2iz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	b21c      	sxth	r4, r3
 8002a4e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a50:	f7fd fd20 	bl	8000494 <__aeabi_i2d>
 8002a54:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8002a58:	f7fd fbd0 	bl	80001fc <__adddf3>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7fe f81a 	bl	8000a9c <__aeabi_d2iz>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	b21d      	sxth	r5, r3
 8002a6c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a6e:	f7fd fd11 	bl	8000494 <__aeabi_i2d>
 8002a72:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8002a76:	f7fd fbc1 	bl	80001fc <__adddf3>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fe f80b 	bl	8000a9c <__aeabi_d2iz>
 8002a86:	4603      	mov	r3, r0
 8002a88:	b21e      	sxth	r6, r3
 8002a8a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a8c:	f7fd fd02 	bl	8000494 <__aeabi_i2d>
 8002a90:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8002a94:	f7fd fbb2 	bl	80001fc <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fd fffc 	bl	8000a9c <__aeabi_d2iz>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <animationRotation+0x67c>)
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	4632      	mov	r2, r6
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f000 fd40 	bl	8003538 <DrawLine>
		for (int i = 0; i < 5; i++)
 8002ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aba:	3301      	adds	r3, #1
 8002abc:	667b      	str	r3, [r7, #100]	; 0x64
 8002abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	ddb5      	ble.n	8002a30 <animationRotation+0x3e0>

		x_precedente1 = x_from1;
 8002ac4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002ac8:	e9c7 3408 	strd	r3, r4, [r7, #32]
		x_from1 = ((x_from1 - x_center) * cos(angle) - (y_from1 - y_center) * sin(angle) + x_center);
 8002acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ad0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ad4:	f7fd fb90 	bl	80001f8 <__aeabi_dsub>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	460c      	mov	r4, r1
 8002adc:	4625      	mov	r5, r4
 8002ade:	461c      	mov	r4, r3
 8002ae0:	ed97 0b00 	vldr	d0, [r7]
 8002ae4:	f00b ff4c 	bl	800e980 <cos>
 8002ae8:	ec53 2b10 	vmov	r2, r3, d0
 8002aec:	4620      	mov	r0, r4
 8002aee:	4629      	mov	r1, r5
 8002af0:	f7fd fd3a 	bl	8000568 <__aeabi_dmul>
 8002af4:	4603      	mov	r3, r0
 8002af6:	460c      	mov	r4, r1
 8002af8:	4625      	mov	r5, r4
 8002afa:	461c      	mov	r4, r3
 8002afc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b00:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002b04:	f7fd fb78 	bl	80001f8 <__aeabi_dsub>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4690      	mov	r8, r2
 8002b0e:	4699      	mov	r9, r3
 8002b10:	ed97 0b00 	vldr	d0, [r7]
 8002b14:	f00b ff78 	bl	800ea08 <sin>
 8002b18:	ec53 2b10 	vmov	r2, r3, d0
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	4649      	mov	r1, r9
 8002b20:	f7fd fd22 	bl	8000568 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4629      	mov	r1, r5
 8002b2c:	f7fd fb64 	bl	80001f8 <__aeabi_dsub>
 8002b30:	4603      	mov	r3, r0
 8002b32:	460c      	mov	r4, r1
 8002b34:	461a      	mov	r2, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b3c:	f7fd fb5e 	bl	80001fc <__adddf3>
 8002b40:	4603      	mov	r3, r0
 8002b42:	460c      	mov	r4, r1
 8002b44:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
		y_from1 = ((x_precedente1 - x_center) * sin(angle) + (y_from1 - y_center) * cos(angle) + y_center);
 8002b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b50:	f7fd fb52 	bl	80001f8 <__aeabi_dsub>
 8002b54:	4603      	mov	r3, r0
 8002b56:	460c      	mov	r4, r1
 8002b58:	4625      	mov	r5, r4
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	ed97 0b00 	vldr	d0, [r7]
 8002b60:	f00b ff52 	bl	800ea08 <sin>
 8002b64:	ec53 2b10 	vmov	r2, r3, d0
 8002b68:	4620      	mov	r0, r4
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	f7fd fcfc 	bl	8000568 <__aeabi_dmul>
 8002b70:	4603      	mov	r3, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	4625      	mov	r5, r4
 8002b76:	461c      	mov	r4, r3
 8002b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b7c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002b80:	f7fd fb3a 	bl	80001f8 <__aeabi_dsub>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4690      	mov	r8, r2
 8002b8a:	4699      	mov	r9, r3
 8002b8c:	ed97 0b00 	vldr	d0, [r7]
 8002b90:	f00b fef6 	bl	800e980 <cos>
 8002b94:	ec53 2b10 	vmov	r2, r3, d0
 8002b98:	4640      	mov	r0, r8
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	f7fd fce4 	bl	8000568 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fb28 	bl	80001fc <__adddf3>
 8002bac:	4603      	mov	r3, r0
 8002bae:	460c      	mov	r4, r1
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bb8:	f7fd fb20 	bl	80001fc <__adddf3>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

		x_precedente1 = x_to1;
 8002bc4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002bc8:	e9c7 3408 	strd	r3, r4, [r7, #32]
		x_to1 = ((x_to1 - x_center) * cos(angle) - (y_to1 - y_center) * sin(angle) + x_center);
 8002bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bd0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002bd4:	f7fd fb10 	bl	80001f8 <__aeabi_dsub>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	4625      	mov	r5, r4
 8002bde:	461c      	mov	r4, r3
 8002be0:	ed97 0b00 	vldr	d0, [r7]
 8002be4:	f00b fecc 	bl	800e980 <cos>
 8002be8:	ec53 2b10 	vmov	r2, r3, d0
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fd fcba 	bl	8000568 <__aeabi_dmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4625      	mov	r5, r4
 8002bfa:	461c      	mov	r4, r3
 8002bfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c00:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c04:	f7fd faf8 	bl	80001f8 <__aeabi_dsub>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4690      	mov	r8, r2
 8002c0e:	4699      	mov	r9, r3
 8002c10:	ed97 0b00 	vldr	d0, [r7]
 8002c14:	f00b fef8 	bl	800ea08 <sin>
 8002c18:	ec53 2b10 	vmov	r2, r3, d0
 8002c1c:	4640      	mov	r0, r8
 8002c1e:	4649      	mov	r1, r9
 8002c20:	f7fd fca2 	bl	8000568 <__aeabi_dmul>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4620      	mov	r0, r4
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	f7fd fae4 	bl	80001f8 <__aeabi_dsub>
 8002c30:	4603      	mov	r3, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	461a      	mov	r2, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c3c:	f7fd fade 	bl	80001fc <__adddf3>
 8002c40:	4603      	mov	r3, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		y_to1 = ((x_precedente1 - x_center) * sin(angle) + (y_to1 - y_center) * cos(angle) + y_center);
 8002c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c50:	f7fd fad2 	bl	80001f8 <__aeabi_dsub>
 8002c54:	4603      	mov	r3, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4625      	mov	r5, r4
 8002c5a:	461c      	mov	r4, r3
 8002c5c:	ed97 0b00 	vldr	d0, [r7]
 8002c60:	f00b fed2 	bl	800ea08 <sin>
 8002c64:	ec53 2b10 	vmov	r2, r3, d0
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd fc7c 	bl	8000568 <__aeabi_dmul>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	4625      	mov	r5, r4
 8002c76:	461c      	mov	r4, r3
 8002c78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c7c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c80:	f7fd faba 	bl	80001f8 <__aeabi_dsub>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4690      	mov	r8, r2
 8002c8a:	4699      	mov	r9, r3
 8002c8c:	ed97 0b00 	vldr	d0, [r7]
 8002c90:	f00b fe76 	bl	800e980 <cos>
 8002c94:	ec53 2b10 	vmov	r2, r3, d0
 8002c98:	4640      	mov	r0, r8
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	f7fd fc64 	bl	8000568 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	f7fd faa8 	bl	80001fc <__adddf3>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002cb8:	f7fd faa0 	bl	80001fc <__adddf3>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0


		for (int i = 0; i < 5; i++)
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc8:	e049      	b.n	8002d5e <animationRotation+0x70e>
 8002cca:	bf00      	nop
 8002ccc:	80ffff00 	.word	0x80ffff00
			DrawLine(x_from2 + i, y_from2 + i, x_to2 + i, y_to2 + i, 0x80FFFF00);
 8002cd0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002cd2:	f7fd fbdf 	bl	8000494 <__aeabi_i2d>
 8002cd6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002cda:	f7fd fa8f 	bl	80001fc <__adddf3>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	f7fd fed9 	bl	8000a9c <__aeabi_d2iz>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b21c      	sxth	r4, r3
 8002cee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002cf0:	f7fd fbd0 	bl	8000494 <__aeabi_i2d>
 8002cf4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002cf8:	f7fd fa80 	bl	80001fc <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd feca 	bl	8000a9c <__aeabi_d2iz>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	b21d      	sxth	r5, r3
 8002d0c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002d0e:	f7fd fbc1 	bl	8000494 <__aeabi_i2d>
 8002d12:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002d16:	f7fd fa71 	bl	80001fc <__adddf3>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f7fd febb 	bl	8000a9c <__aeabi_d2iz>
 8002d26:	4603      	mov	r3, r0
 8002d28:	b21e      	sxth	r6, r3
 8002d2a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002d2c:	f7fd fbb2 	bl	8000494 <__aeabi_i2d>
 8002d30:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002d34:	f7fd fa62 	bl	80001fc <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd feac 	bl	8000a9c <__aeabi_d2iz>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b21a      	sxth	r2, r3
 8002d48:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <animationRotation+0x91c>)
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	4632      	mov	r2, r6
 8002d50:	4629      	mov	r1, r5
 8002d52:	4620      	mov	r0, r4
 8002d54:	f000 fbf0 	bl	8003538 <DrawLine>
		for (int i = 0; i < 5; i++)
 8002d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	ddb5      	ble.n	8002cd0 <animationRotation+0x680>

		x_precedente2 = x_from2;
 8002d64:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002d68:	e9c7 3406 	strd	r3, r4, [r7, #24]
		x_from2 = ((x_from2 - x_center) * cos(angle) - (y_from2 - y_center) * sin(angle) + x_center);
 8002d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d70:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8002d74:	f7fd fa40 	bl	80001f8 <__aeabi_dsub>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4625      	mov	r5, r4
 8002d7e:	461c      	mov	r4, r3
 8002d80:	ed97 0b00 	vldr	d0, [r7]
 8002d84:	f00b fdfc 	bl	800e980 <cos>
 8002d88:	ec53 2b10 	vmov	r2, r3, d0
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4629      	mov	r1, r5
 8002d90:	f7fd fbea 	bl	8000568 <__aeabi_dmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	460c      	mov	r4, r1
 8002d98:	4625      	mov	r5, r4
 8002d9a:	461c      	mov	r4, r3
 8002d9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002da0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002da4:	f7fd fa28 	bl	80001f8 <__aeabi_dsub>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4690      	mov	r8, r2
 8002dae:	4699      	mov	r9, r3
 8002db0:	ed97 0b00 	vldr	d0, [r7]
 8002db4:	f00b fe28 	bl	800ea08 <sin>
 8002db8:	ec53 2b10 	vmov	r2, r3, d0
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	f7fd fbd2 	bl	8000568 <__aeabi_dmul>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4620      	mov	r0, r4
 8002dca:	4629      	mov	r1, r5
 8002dcc:	f7fd fa14 	bl	80001f8 <__aeabi_dsub>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ddc:	f7fd fa0e 	bl	80001fc <__adddf3>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
		y_from2 = ((x_precedente2 - x_center) * sin(angle) + (y_from2 - y_center) * cos(angle) + y_center);
 8002de8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df0:	f7fd fa02 	bl	80001f8 <__aeabi_dsub>
 8002df4:	4603      	mov	r3, r0
 8002df6:	460c      	mov	r4, r1
 8002df8:	4625      	mov	r5, r4
 8002dfa:	461c      	mov	r4, r3
 8002dfc:	ed97 0b00 	vldr	d0, [r7]
 8002e00:	f00b fe02 	bl	800ea08 <sin>
 8002e04:	ec53 2b10 	vmov	r2, r3, d0
 8002e08:	4620      	mov	r0, r4
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	f7fd fbac 	bl	8000568 <__aeabi_dmul>
 8002e10:	4603      	mov	r3, r0
 8002e12:	460c      	mov	r4, r1
 8002e14:	4625      	mov	r5, r4
 8002e16:	461c      	mov	r4, r3
 8002e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e1c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002e20:	f7fd f9ea 	bl	80001f8 <__aeabi_dsub>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4690      	mov	r8, r2
 8002e2a:	4699      	mov	r9, r3
 8002e2c:	ed97 0b00 	vldr	d0, [r7]
 8002e30:	f00b fda6 	bl	800e980 <cos>
 8002e34:	ec53 2b10 	vmov	r2, r3, d0
 8002e38:	4640      	mov	r0, r8
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	f7fd fb94 	bl	8000568 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd f9d8 	bl	80001fc <__adddf3>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	461a      	mov	r2, r3
 8002e52:	4623      	mov	r3, r4
 8002e54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e58:	f7fd f9d0 	bl	80001fc <__adddf3>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

		x_precedente2 = x_to2;
 8002e64:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002e68:	e9c7 3406 	strd	r3, r4, [r7, #24]
		x_to2 = ((x_to2 - x_center) * cos(angle) - (y_to2 - y_center) * sin(angle) + x_center);
 8002e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e74:	f7fd f9c0 	bl	80001f8 <__aeabi_dsub>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	4625      	mov	r5, r4
 8002e7e:	461c      	mov	r4, r3
 8002e80:	ed97 0b00 	vldr	d0, [r7]
 8002e84:	f00b fd7c 	bl	800e980 <cos>
 8002e88:	ec53 2b10 	vmov	r2, r3, d0
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	f7fd fb6a 	bl	8000568 <__aeabi_dmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	460c      	mov	r4, r1
 8002e98:	4625      	mov	r5, r4
 8002e9a:	461c      	mov	r4, r3
 8002e9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ea0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002ea4:	f7fd f9a8 	bl	80001f8 <__aeabi_dsub>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4690      	mov	r8, r2
 8002eae:	4699      	mov	r9, r3
 8002eb0:	ed97 0b00 	vldr	d0, [r7]
 8002eb4:	f00b fda8 	bl	800ea08 <sin>
 8002eb8:	ec53 2b10 	vmov	r2, r3, d0
 8002ebc:	4640      	mov	r0, r8
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	f7fd fb52 	bl	8000568 <__aeabi_dmul>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f994 	bl	80001f8 <__aeabi_dsub>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002edc:	f7fd f98e 	bl	80001fc <__adddf3>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		y_to2 = ((x_precedente2 - x_center) * sin(angle) + (y_to2 - y_center) * cos(angle) + y_center);
 8002ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002eec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ef0:	f7fd f982 	bl	80001f8 <__aeabi_dsub>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	4625      	mov	r5, r4
 8002efa:	461c      	mov	r4, r3
 8002efc:	ed97 0b00 	vldr	d0, [r7]
 8002f00:	f00b fd82 	bl	800ea08 <sin>
 8002f04:	ec53 2b10 	vmov	r2, r3, d0
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd fb2c 	bl	8000568 <__aeabi_dmul>
 8002f10:	4603      	mov	r3, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	4625      	mov	r5, r4
 8002f16:	461c      	mov	r4, r3
 8002f18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f1c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002f20:	f7fd f96a 	bl	80001f8 <__aeabi_dsub>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4690      	mov	r8, r2
 8002f2a:	4699      	mov	r9, r3
 8002f2c:	ed97 0b00 	vldr	d0, [r7]
 8002f30:	f00b fd26 	bl	800e980 <cos>
 8002f34:	ec53 2b10 	vmov	r2, r3, d0
 8002f38:	4640      	mov	r0, r8
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	f7fd fb14 	bl	8000568 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f958 	bl	80001fc <__adddf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	461a      	mov	r2, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f58:	f7fd f950 	bl	80001fc <__adddf3>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90


		for (int i = 0; i < 5; i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f68:	e049      	b.n	8002ffe <animationRotation+0x9ae>
 8002f6a:	bf00      	nop
 8002f6c:	80ffff00 	.word	0x80ffff00
			DrawLine(x_from3 + i, y_from3 + i, x_to3 + i, y_to3 + i, 0x80FFFF00);
 8002f70:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f72:	f7fd fa8f 	bl	8000494 <__aeabi_i2d>
 8002f76:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002f7a:	f7fd f93f 	bl	80001fc <__adddf3>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	4618      	mov	r0, r3
 8002f84:	4621      	mov	r1, r4
 8002f86:	f7fd fd89 	bl	8000a9c <__aeabi_d2iz>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	b21c      	sxth	r4, r3
 8002f8e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002f90:	f7fd fa80 	bl	8000494 <__aeabi_i2d>
 8002f94:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002f98:	f7fd f930 	bl	80001fc <__adddf3>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fd7a 	bl	8000a9c <__aeabi_d2iz>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	b21d      	sxth	r5, r3
 8002fac:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002fae:	f7fd fa71 	bl	8000494 <__aeabi_i2d>
 8002fb2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002fb6:	f7fd f921 	bl	80001fc <__adddf3>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f7fd fd6b 	bl	8000a9c <__aeabi_d2iz>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b21e      	sxth	r6, r3
 8002fca:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002fcc:	f7fd fa62 	bl	8000494 <__aeabi_i2d>
 8002fd0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fd4:	f7fd f912 	bl	80001fc <__adddf3>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7fd fd5c 	bl	8000a9c <__aeabi_d2iz>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	b21a      	sxth	r2, r3
 8002fe8:	4b90      	ldr	r3, [pc, #576]	; (800322c <animationRotation+0xbdc>)
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	4632      	mov	r2, r6
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f000 faa0 	bl	8003538 <DrawLine>
		for (int i = 0; i < 5; i++)
 8002ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	2b04      	cmp	r3, #4
 8003002:	ddb5      	ble.n	8002f70 <animationRotation+0x920>

		x_precedente3 = x_from3;
 8003004:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003008:	e9c7 3404 	strd	r3, r4, [r7, #16]
		x_from3 = ((x_from3 - x_center) * cos(angle) - (y_from3 - y_center) * sin(angle) + x_center);
 800300c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003010:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003014:	f7fd f8f0 	bl	80001f8 <__aeabi_dsub>
 8003018:	4603      	mov	r3, r0
 800301a:	460c      	mov	r4, r1
 800301c:	4625      	mov	r5, r4
 800301e:	461c      	mov	r4, r3
 8003020:	ed97 0b00 	vldr	d0, [r7]
 8003024:	f00b fcac 	bl	800e980 <cos>
 8003028:	ec53 2b10 	vmov	r2, r3, d0
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd fa9a 	bl	8000568 <__aeabi_dmul>
 8003034:	4603      	mov	r3, r0
 8003036:	460c      	mov	r4, r1
 8003038:	4625      	mov	r5, r4
 800303a:	461c      	mov	r4, r3
 800303c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003040:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003044:	f7fd f8d8 	bl	80001f8 <__aeabi_dsub>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4690      	mov	r8, r2
 800304e:	4699      	mov	r9, r3
 8003050:	ed97 0b00 	vldr	d0, [r7]
 8003054:	f00b fcd8 	bl	800ea08 <sin>
 8003058:	ec53 2b10 	vmov	r2, r3, d0
 800305c:	4640      	mov	r0, r8
 800305e:	4649      	mov	r1, r9
 8003060:	f7fd fa82 	bl	8000568 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4620      	mov	r0, r4
 800306a:	4629      	mov	r1, r5
 800306c:	f7fd f8c4 	bl	80001f8 <__aeabi_dsub>
 8003070:	4603      	mov	r3, r0
 8003072:	460c      	mov	r4, r1
 8003074:	461a      	mov	r2, r3
 8003076:	4623      	mov	r3, r4
 8003078:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800307c:	f7fd f8be 	bl	80001fc <__adddf3>
 8003080:	4603      	mov	r3, r0
 8003082:	460c      	mov	r4, r1
 8003084:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
		y_from3 = ((x_precedente3 - x_center) * sin(angle) + (y_from3 - y_center) * cos(angle) + y_center);
 8003088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800308c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003090:	f7fd f8b2 	bl	80001f8 <__aeabi_dsub>
 8003094:	4603      	mov	r3, r0
 8003096:	460c      	mov	r4, r1
 8003098:	4625      	mov	r5, r4
 800309a:	461c      	mov	r4, r3
 800309c:	ed97 0b00 	vldr	d0, [r7]
 80030a0:	f00b fcb2 	bl	800ea08 <sin>
 80030a4:	ec53 2b10 	vmov	r2, r3, d0
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd fa5c 	bl	8000568 <__aeabi_dmul>
 80030b0:	4603      	mov	r3, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	4625      	mov	r5, r4
 80030b6:	461c      	mov	r4, r3
 80030b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030bc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030c0:	f7fd f89a 	bl	80001f8 <__aeabi_dsub>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4690      	mov	r8, r2
 80030ca:	4699      	mov	r9, r3
 80030cc:	ed97 0b00 	vldr	d0, [r7]
 80030d0:	f00b fc56 	bl	800e980 <cos>
 80030d4:	ec53 2b10 	vmov	r2, r3, d0
 80030d8:	4640      	mov	r0, r8
 80030da:	4649      	mov	r1, r9
 80030dc:	f7fd fa44 	bl	8000568 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4620      	mov	r0, r4
 80030e6:	4629      	mov	r1, r5
 80030e8:	f7fd f888 	bl	80001fc <__adddf3>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	461a      	mov	r2, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030f8:	f7fd f880 	bl	80001fc <__adddf3>
 80030fc:	4603      	mov	r3, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80

		x_precedente3 = x_to3;
 8003104:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003108:	e9c7 3404 	strd	r3, r4, [r7, #16]
		x_to3 = ((x_to3 - x_center) * cos(angle) - (y_to3 - y_center) * sin(angle) + x_center);
 800310c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003110:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003114:	f7fd f870 	bl	80001f8 <__aeabi_dsub>
 8003118:	4603      	mov	r3, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4625      	mov	r5, r4
 800311e:	461c      	mov	r4, r3
 8003120:	ed97 0b00 	vldr	d0, [r7]
 8003124:	f00b fc2c 	bl	800e980 <cos>
 8003128:	ec53 2b10 	vmov	r2, r3, d0
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd fa1a 	bl	8000568 <__aeabi_dmul>
 8003134:	4603      	mov	r3, r0
 8003136:	460c      	mov	r4, r1
 8003138:	4625      	mov	r5, r4
 800313a:	461c      	mov	r4, r3
 800313c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003140:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003144:	f7fd f858 	bl	80001f8 <__aeabi_dsub>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4690      	mov	r8, r2
 800314e:	4699      	mov	r9, r3
 8003150:	ed97 0b00 	vldr	d0, [r7]
 8003154:	f00b fc58 	bl	800ea08 <sin>
 8003158:	ec53 2b10 	vmov	r2, r3, d0
 800315c:	4640      	mov	r0, r8
 800315e:	4649      	mov	r1, r9
 8003160:	f7fd fa02 	bl	8000568 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4620      	mov	r0, r4
 800316a:	4629      	mov	r1, r5
 800316c:	f7fd f844 	bl	80001f8 <__aeabi_dsub>
 8003170:	4603      	mov	r3, r0
 8003172:	460c      	mov	r4, r1
 8003174:	461a      	mov	r2, r3
 8003176:	4623      	mov	r3, r4
 8003178:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800317c:	f7fd f83e 	bl	80001fc <__adddf3>
 8003180:	4603      	mov	r3, r0
 8003182:	460c      	mov	r4, r1
 8003184:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
		y_to3 = ((x_precedente3 - x_center) * sin(angle) + (y_to3 - y_center) * cos(angle) + y_center);
 8003188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800318c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003190:	f7fd f832 	bl	80001f8 <__aeabi_dsub>
 8003194:	4603      	mov	r3, r0
 8003196:	460c      	mov	r4, r1
 8003198:	4625      	mov	r5, r4
 800319a:	461c      	mov	r4, r3
 800319c:	ed97 0b00 	vldr	d0, [r7]
 80031a0:	f00b fc32 	bl	800ea08 <sin>
 80031a4:	ec53 2b10 	vmov	r2, r3, d0
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f9dc 	bl	8000568 <__aeabi_dmul>
 80031b0:	4603      	mov	r3, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	4625      	mov	r5, r4
 80031b6:	461c      	mov	r4, r3
 80031b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80031c0:	f7fd f81a 	bl	80001f8 <__aeabi_dsub>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4690      	mov	r8, r2
 80031ca:	4699      	mov	r9, r3
 80031cc:	ed97 0b00 	vldr	d0, [r7]
 80031d0:	f00b fbd6 	bl	800e980 <cos>
 80031d4:	ec53 2b10 	vmov	r2, r3, d0
 80031d8:	4640      	mov	r0, r8
 80031da:	4649      	mov	r1, r9
 80031dc:	f7fd f9c4 	bl	8000568 <__aeabi_dmul>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4620      	mov	r0, r4
 80031e6:	4629      	mov	r1, r5
 80031e8:	f7fd f808 	bl	80001fc <__adddf3>
 80031ec:	4603      	mov	r3, r0
 80031ee:	460c      	mov	r4, r1
 80031f0:	461a      	mov	r2, r3
 80031f2:	4623      	mov	r3, r4
 80031f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80031f8:	f7fd f800 	bl	80001fc <__adddf3>
 80031fc:	4603      	mov	r3, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70



		HAL_Delay(1500);
 8003204:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003208:	f002 ff30 	bl	800606c <HAL_Delay>
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 800320c:	4808      	ldr	r0, [pc, #32]	; (8003230 <animationRotation+0xbe0>)
 800320e:	f002 fbb5 	bl	800597c <BSP_LCD_Clear>
	for (int j = 0; j < 20; j++) {
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	3301      	adds	r3, #1
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321a:	2b13      	cmp	r3, #19
 800321c:	f77f aaa6 	ble.w	800276c <animationRotation+0x11c>
	}
}
 8003220:	bf00      	nop
 8003222:	37f4      	adds	r7, #244	; 0xf4
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800322a:	bf00      	nop
 800322c:	80ffff00 	.word	0x80ffff00
 8003230:	ff0000ff 	.word	0xff0000ff

08003234 <drawingRectangle>:
 * @param dlugosc_boku_x length of the first side of a rectangle
 * @param dlugosc_boku_y length of the second side of a rectangle
 * @param kolor	the color of the rectangle
 */

void drawingRectangle (uint16_t margines_x, uint16_t margines_y, uint16_t dlugosc_boku_x, uint16_t dlugosc_boku_y, uint32_t kolor) { //rysowanie prostokata
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	4604      	mov	r4, r0
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	80fb      	strh	r3, [r7, #6]
 8003246:	4603      	mov	r3, r0
 8003248:	80bb      	strh	r3, [r7, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	807b      	strh	r3, [r7, #2]
 800324e:	4613      	mov	r3, r2
 8003250:	803b      	strh	r3, [r7, #0]

    for (int wysokosc = 0; wysokosc < sizeY; wysokosc++)
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e048      	b.n	80032ea <drawingRectangle+0xb6>
    {
        for (int szerokosc = 0; szerokosc < sizeX; szerokosc++)
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	e03d      	b.n	80032da <drawingRectangle+0xa6>
        {

            if (wysokosc == margines_y || wysokosc == margines_y + dlugosc_boku_y)
 800325e:	88bb      	ldrh	r3, [r7, #4]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	429a      	cmp	r2, r3
 8003264:	d005      	beq.n	8003272 <drawingRectangle+0x3e>
 8003266:	88ba      	ldrh	r2, [r7, #4]
 8003268:	883b      	ldrh	r3, [r7, #0]
 800326a:	4413      	add	r3, r2
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	429a      	cmp	r2, r3
 8003270:	d112      	bne.n	8003298 <drawingRectangle+0x64>
            {
                if (szerokosc >= margines_x && szerokosc <= margines_x + dlugosc_boku_x)
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	db2b      	blt.n	80032d2 <drawingRectangle+0x9e>
 800327a:	88fa      	ldrh	r2, [r7, #6]
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	4413      	add	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	dc25      	bgt.n	80032d2 <drawingRectangle+0x9e>
					  BSP_LCD_DrawPixel(szerokosc, wysokosc, kolor);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	b29b      	uxth	r3, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	b291      	uxth	r1, r2
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	4618      	mov	r0, r3
 8003292:	f002 fc81 	bl	8005b98 <BSP_LCD_DrawPixel>
                if (szerokosc >= margines_x && szerokosc <= margines_x + dlugosc_boku_x)
 8003296:	e01c      	b.n	80032d2 <drawingRectangle+0x9e>

            } else if (szerokosc == margines_x || szerokosc == margines_x + dlugosc_boku_x)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	d005      	beq.n	80032ac <drawingRectangle+0x78>
 80032a0:	88fa      	ldrh	r2, [r7, #6]
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	4413      	add	r3, r2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d113      	bne.n	80032d4 <drawingRectangle+0xa0>
            {
                if (wysokosc >= margines_y && wysokosc <= margines_y + dlugosc_boku_y)
 80032ac:	88bb      	ldrh	r3, [r7, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	db0f      	blt.n	80032d4 <drawingRectangle+0xa0>
 80032b4:	88ba      	ldrh	r2, [r7, #4]
 80032b6:	883b      	ldrh	r3, [r7, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	dc09      	bgt.n	80032d4 <drawingRectangle+0xa0>
					  BSP_LCD_DrawPixel(szerokosc, wysokosc, kolor);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	b291      	uxth	r1, r2
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f002 fc64 	bl	8005b98 <BSP_LCD_DrawPixel>
 80032d0:	e000      	b.n	80032d4 <drawingRectangle+0xa0>
                if (szerokosc >= margines_x && szerokosc <= margines_x + dlugosc_boku_x)
 80032d2:	bf00      	nop
        for (int szerokosc = 0; szerokosc < sizeX; szerokosc++)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <drawingRectangle+0xc8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	dbbc      	blt.n	800325e <drawingRectangle+0x2a>
    for (int wysokosc = 0; wysokosc < sizeY; wysokosc++)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <drawingRectangle+0xcc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dbb1      	blt.n	8003258 <drawingRectangle+0x24>
            }

        }
    }
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <drawingTriangle>:
 * @param margines_y starting Y position
 * @param dlugosc_boku_x length of the side of a triangle
 * @param kolor	the color of the triangle
 */

void drawingTriangle (uint16_t margines_x, uint16_t margines_y, uint16_t dlugosc_boku, uint32_t kolor) { //rysowanie trojkata
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	4603      	mov	r3, r0
 800330e:	81fb      	strh	r3, [r7, #14]
 8003310:	460b      	mov	r3, r1
 8003312:	81bb      	strh	r3, [r7, #12]
 8003314:	4613      	mov	r3, r2
 8003316:	817b      	strh	r3, [r7, #10]

    int wskaznik_skosnej_1 = margines_x + dlugosc_boku/2;
 8003318:	89fb      	ldrh	r3, [r7, #14]
 800331a:	897a      	ldrh	r2, [r7, #10]
 800331c:	0852      	lsrs	r2, r2, #1
 800331e:	b292      	uxth	r2, r2
 8003320:	4413      	add	r3, r2
 8003322:	61fb      	str	r3, [r7, #28]
    int wskaznik_skosnej_2 = margines_x + dlugosc_boku/2;
 8003324:	89fb      	ldrh	r3, [r7, #14]
 8003326:	897a      	ldrh	r2, [r7, #10]
 8003328:	0852      	lsrs	r2, r2, #1
 800332a:	b292      	uxth	r2, r2
 800332c:	4413      	add	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]

    for (int wysokosc = 0; wysokosc < sizeY; wysokosc++)
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e053      	b.n	80033de <drawingTriangle+0xda>
    {
        for (int szerokosc = 0; szerokosc < sizeX; szerokosc++)
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	e038      	b.n	80033ae <drawingTriangle+0xaa>
        {
            if (wysokosc >= margines_y && wysokosc < margines_y + dlugosc_boku/2)
 800333c:	89bb      	ldrh	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	429a      	cmp	r2, r3
 8003342:	db17      	blt.n	8003374 <drawingTriangle+0x70>
 8003344:	89bb      	ldrh	r3, [r7, #12]
 8003346:	897a      	ldrh	r2, [r7, #10]
 8003348:	0852      	lsrs	r2, r2, #1
 800334a:	b292      	uxth	r2, r2
 800334c:	4413      	add	r3, r2
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	429a      	cmp	r2, r3
 8003352:	da0f      	bge.n	8003374 <drawingTriangle+0x70>
            {
                if (szerokosc == wskaznik_skosnej_1 || szerokosc == wskaznik_skosnej_2) //linie skosne
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	429a      	cmp	r2, r3
 800335a:	d003      	beq.n	8003364 <drawingTriangle+0x60>
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	429a      	cmp	r2, r3
 8003362:	d107      	bne.n	8003374 <drawingTriangle+0x70>
					  BSP_LCD_DrawPixel(szerokosc, wysokosc, kolor);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	b29b      	uxth	r3, r3
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	b291      	uxth	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4618      	mov	r0, r3
 8003370:	f002 fc12 	bl	8005b98 <BSP_LCD_DrawPixel>
            }

            if (wysokosc == margines_y + dlugosc_boku/2) //linia pozioma
 8003374:	89bb      	ldrh	r3, [r7, #12]
 8003376:	897a      	ldrh	r2, [r7, #10]
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	b292      	uxth	r2, r2
 800337c:	4413      	add	r3, r2
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	d111      	bne.n	80033a8 <drawingTriangle+0xa4>
            {
                if (szerokosc >= margines_x && szerokosc <= margines_x + dlugosc_boku)
 8003384:	89fb      	ldrh	r3, [r7, #14]
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	429a      	cmp	r2, r3
 800338a:	db0d      	blt.n	80033a8 <drawingTriangle+0xa4>
 800338c:	89fa      	ldrh	r2, [r7, #14]
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	4413      	add	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	429a      	cmp	r2, r3
 8003396:	dc07      	bgt.n	80033a8 <drawingTriangle+0xa4>
					  BSP_LCD_DrawPixel(szerokosc, wysokosc, kolor);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	b29b      	uxth	r3, r3
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	b291      	uxth	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 fbf8 	bl	8005b98 <BSP_LCD_DrawPixel>
        for (int szerokosc = 0; szerokosc < sizeX; szerokosc++)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	3301      	adds	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <drawingTriangle+0xec>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	dbc1      	blt.n	800333c <drawingTriangle+0x38>
            }

        }

        if (wysokosc >= margines_y && wysokosc < margines_y + dlugosc_boku)
 80033b8:	89bb      	ldrh	r3, [r7, #12]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	db0b      	blt.n	80033d8 <drawingTriangle+0xd4>
 80033c0:	89ba      	ldrh	r2, [r7, #12]
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	4413      	add	r3, r2
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	da05      	bge.n	80033d8 <drawingTriangle+0xd4>
        {
            wskaznik_skosnej_1--;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	61fb      	str	r3, [r7, #28]
            wskaznik_skosnej_2++;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61bb      	str	r3, [r7, #24]
    for (int wysokosc = 0; wysokosc < sizeY; wysokosc++)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <drawingTriangle+0xf0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	dba6      	blt.n	8003336 <drawingTriangle+0x32>
        }
    }
}
 80033e8:	bf00      	nop
 80033ea:	3720      	adds	r7, #32
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000000 	.word	0x20000000
 80033f4:	20000004 	.word	0x20000004

080033f8 <drawingCircle>:
 */

///RGB_Code: the pixel color in ARGB mode (8-8-8-8)

void drawingCircle (uint16_t x_pos, uint16_t y_pos, uint16_t rad, uint32_t color)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	4603      	mov	r3, r0
 8003402:	81fb      	strh	r3, [r7, #14]
 8003404:	460b      	mov	r3, r1
 8003406:	81bb      	strh	r3, [r7, #12]
 8003408:	4613      	mov	r3, r2
 800340a:	817b      	strh	r3, [r7, #10]
	uint16_t x_cur = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	82fb      	strh	r3, [r7, #22]
    uint16_t y_cur = rad;
 8003410:	897b      	ldrh	r3, [r7, #10]
 8003412:	82bb      	strh	r3, [r7, #20]
    int16_t c = 2 * (1 - rad);
 8003414:	897b      	ldrh	r3, [r7, #10]
 8003416:	f1c3 0301 	rsb	r3, r3, #1
 800341a:	b29b      	uxth	r3, r3
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	827b      	strh	r3, [r7, #18]

    while(x_cur <= y_cur)
 8003422:	e080      	b.n	8003526 <drawingCircle+0x12e>
    {
        BSP_LCD_DrawPixel(x_pos + x_cur, y_pos + y_cur, color);
 8003424:	89fa      	ldrh	r2, [r7, #14]
 8003426:	8afb      	ldrh	r3, [r7, #22]
 8003428:	4413      	add	r3, r2
 800342a:	b298      	uxth	r0, r3
 800342c:	89ba      	ldrh	r2, [r7, #12]
 800342e:	8abb      	ldrh	r3, [r7, #20]
 8003430:	4413      	add	r3, r2
 8003432:	b29b      	uxth	r3, r3
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4619      	mov	r1, r3
 8003438:	f002 fbae 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x_cur,y_pos + y_cur, color);
 800343c:	89fa      	ldrh	r2, [r7, #14]
 800343e:	8afb      	ldrh	r3, [r7, #22]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b298      	uxth	r0, r3
 8003444:	89ba      	ldrh	r2, [r7, #12]
 8003446:	8abb      	ldrh	r3, [r7, #20]
 8003448:	4413      	add	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4619      	mov	r1, r3
 8003450:	f002 fba2 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x_cur,y_pos + -y_cur, color);
 8003454:	89fa      	ldrh	r2, [r7, #14]
 8003456:	8afb      	ldrh	r3, [r7, #22]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	b298      	uxth	r0, r3
 800345c:	89ba      	ldrh	r2, [r7, #12]
 800345e:	8abb      	ldrh	r3, [r7, #20]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	b29b      	uxth	r3, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4619      	mov	r1, r3
 8003468:	f002 fb96 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + x_cur,y_pos + -y_cur, color);
 800346c:	89fa      	ldrh	r2, [r7, #14]
 800346e:	8afb      	ldrh	r3, [r7, #22]
 8003470:	4413      	add	r3, r2
 8003472:	b298      	uxth	r0, r3
 8003474:	89ba      	ldrh	r2, [r7, #12]
 8003476:	8abb      	ldrh	r3, [r7, #20]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4619      	mov	r1, r3
 8003480:	f002 fb8a 	bl	8005b98 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + y_cur,y_pos + x_cur, color);
 8003484:	89fa      	ldrh	r2, [r7, #14]
 8003486:	8abb      	ldrh	r3, [r7, #20]
 8003488:	4413      	add	r3, r2
 800348a:	b298      	uxth	r0, r3
 800348c:	89ba      	ldrh	r2, [r7, #12]
 800348e:	8afb      	ldrh	r3, [r7, #22]
 8003490:	4413      	add	r3, r2
 8003492:	b29b      	uxth	r3, r3
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4619      	mov	r1, r3
 8003498:	f002 fb7e 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y_cur,y_pos + x_cur, color);
 800349c:	89fa      	ldrh	r2, [r7, #14]
 800349e:	8abb      	ldrh	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b298      	uxth	r0, r3
 80034a4:	89ba      	ldrh	r2, [r7, #12]
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	4413      	add	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4619      	mov	r1, r3
 80034b0:	f002 fb72 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y_cur,y_pos + -x_cur, color);
 80034b4:	89fa      	ldrh	r2, [r7, #14]
 80034b6:	8abb      	ldrh	r3, [r7, #20]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	b298      	uxth	r0, r3
 80034bc:	89ba      	ldrh	r2, [r7, #12]
 80034be:	8afb      	ldrh	r3, [r7, #22]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f002 fb66 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + y_cur,y_pos + -x_cur, color);
 80034cc:	89fa      	ldrh	r2, [r7, #14]
 80034ce:	8abb      	ldrh	r3, [r7, #20]
 80034d0:	4413      	add	r3, r2
 80034d2:	b298      	uxth	r0, r3
 80034d4:	89ba      	ldrh	r2, [r7, #12]
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	b29b      	uxth	r3, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4619      	mov	r1, r3
 80034e0:	f002 fb5a 	bl	8005b98 <BSP_LCD_DrawPixel>

        if(2 * c > 1 - 2 * y_cur)
 80034e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034e8:	005a      	lsls	r2, r3, #1
 80034ea:	8abb      	ldrh	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	f1c3 0301 	rsb	r3, r3, #1
 80034f2:	429a      	cmp	r2, r3
 80034f4:	dd0b      	ble.n	800350e <drawingCircle+0x116>
        {
            y_cur--;
 80034f6:	8abb      	ldrh	r3, [r7, #20]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	82bb      	strh	r3, [r7, #20]
            c -= 2 * y_cur - 1;
 80034fc:	8a7a      	ldrh	r2, [r7, #18]
 80034fe:	8abb      	ldrh	r3, [r7, #20]
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	b29b      	uxth	r3, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	827b      	strh	r3, [r7, #18]
        }
        x_cur++;
 800350e:	8afb      	ldrh	r3, [r7, #22]
 8003510:	3301      	adds	r3, #1
 8003512:	82fb      	strh	r3, [r7, #22]
        c += 2 * x_cur + 1;
 8003514:	8afb      	ldrh	r3, [r7, #22]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	8a7b      	ldrh	r3, [r7, #18]
 800351c:	4413      	add	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	827b      	strh	r3, [r7, #18]
    while(x_cur <= y_cur)
 8003526:	8afa      	ldrh	r2, [r7, #22]
 8003528:	8abb      	ldrh	r3, [r7, #20]
 800352a:	429a      	cmp	r2, r3
 800352c:	f67f af7a 	bls.w	8003424 <drawingCircle+0x2c>
    }
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <DrawLine>:
 *
 * source: http://mst.mimuw.edu.pl/lecture.php?lecture=gk1&part=Ch2
 */

void DrawLine ( int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint32_t color)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	4604      	mov	r4, r0
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4623      	mov	r3, r4
 8003548:	80fb      	strh	r3, [r7, #6]
 800354a:	4603      	mov	r3, r0
 800354c:	80bb      	strh	r3, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
 8003552:	4613      	mov	r3, r2
 8003554:	803b      	strh	r3, [r7, #0]
    int16_t delta_x, delta_y, g, h, c;

    delta_x = x2-x1;
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b29b      	uxth	r3, r3
 800355e:	823b      	strh	r3, [r7, #16]
    if (delta_x > 0)
 8003560:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	dd02      	ble.n	800356e <DrawLine+0x36>
        g = +1;
 8003568:	2301      	movs	r3, #1
 800356a:	82fb      	strh	r3, [r7, #22]
 800356c:	e002      	b.n	8003574 <DrawLine+0x3c>
    else
        g = -1;
 800356e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003572:	82fb      	strh	r3, [r7, #22]
    delta_x = abs(delta_x);
 8003574:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	bfb8      	it	lt
 800357c:	425b      	neglt	r3, r3
 800357e:	823b      	strh	r3, [r7, #16]
    delta_y = y2-y1;
 8003580:	883a      	ldrh	r2, [r7, #0]
 8003582:	88bb      	ldrh	r3, [r7, #4]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	b29b      	uxth	r3, r3
 8003588:	81fb      	strh	r3, [r7, #14]
    if (delta_y > 0)
 800358a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800358e:	2b00      	cmp	r3, #0
 8003590:	dd02      	ble.n	8003598 <DrawLine+0x60>
        h = +1;
 8003592:	2301      	movs	r3, #1
 8003594:	82bb      	strh	r3, [r7, #20]
 8003596:	e002      	b.n	800359e <DrawLine+0x66>
    else
        h = -1;
 8003598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800359c:	82bb      	strh	r3, [r7, #20]
    delta_y = abs(delta_y);
 800359e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bfb8      	it	lt
 80035a6:	425b      	neglt	r3, r3
 80035a8:	81fb      	strh	r3, [r7, #14]
    if (delta_x > delta_y)
 80035aa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80035ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	dd2d      	ble.n	8003612 <DrawLine+0xda>
    {
        c = -delta_x;
 80035b6:	8a3b      	ldrh	r3, [r7, #16]
 80035b8:	425b      	negs	r3, r3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	827b      	strh	r3, [r7, #18]
        while (x1 != x2) {
 80035be:	e021      	b.n	8003604 <DrawLine+0xcc>
        BSP_LCD_DrawPixel(x1,y1, color);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	88b9      	ldrh	r1, [r7, #4]
 80035c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c6:	4618      	mov	r0, r3
 80035c8:	f002 fae6 	bl	8005b98 <BSP_LCD_DrawPixel>
        c += 2*delta_y;
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	8a7b      	ldrh	r3, [r7, #18]
 80035d4:	4413      	add	r3, r2
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	827b      	strh	r3, [r7, #18]
        if (c > 0)
 80035da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	dd0b      	ble.n	80035fa <DrawLine+0xc2>
        {
            y1 += h;
 80035e2:	88ba      	ldrh	r2, [r7, #4]
 80035e4:	8abb      	ldrh	r3, [r7, #20]
 80035e6:	4413      	add	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	80bb      	strh	r3, [r7, #4]
            c -= 2*delta_x;
 80035ec:	8a7a      	ldrh	r2, [r7, #18]
 80035ee:	8a3b      	ldrh	r3, [r7, #16]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	827b      	strh	r3, [r7, #18]
        }
        x1 += g;
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	8afb      	ldrh	r3, [r7, #22]
 80035fe:	4413      	add	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	80fb      	strh	r3, [r7, #6]
        while (x1 != x2) {
 8003604:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800360c:	429a      	cmp	r2, r3
 800360e:	d1d7      	bne.n	80035c0 <DrawLine+0x88>
                c -= 2*delta_y;
            }
            y1 += h;
        }
    }
}
 8003610:	e02c      	b.n	800366c <DrawLine+0x134>
        c = -delta_y;
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	425b      	negs	r3, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	827b      	strh	r3, [r7, #18]
        while (y1 != y2)
 800361a:	e021      	b.n	8003660 <DrawLine+0x128>
            BSP_LCD_DrawPixel(x1,y1, color);
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	88b9      	ldrh	r1, [r7, #4]
 8003620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003622:	4618      	mov	r0, r3
 8003624:	f002 fab8 	bl	8005b98 <BSP_LCD_DrawPixel>
            c += 2*delta_x;
 8003628:	8a3b      	ldrh	r3, [r7, #16]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	8a7b      	ldrh	r3, [r7, #18]
 8003630:	4413      	add	r3, r2
 8003632:	b29b      	uxth	r3, r3
 8003634:	827b      	strh	r3, [r7, #18]
            if (c > 0)
 8003636:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800363a:	2b00      	cmp	r3, #0
 800363c:	dd0b      	ble.n	8003656 <DrawLine+0x11e>
                x1 += g;
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	8afb      	ldrh	r3, [r7, #22]
 8003642:	4413      	add	r3, r2
 8003644:	b29b      	uxth	r3, r3
 8003646:	80fb      	strh	r3, [r7, #6]
                c -= 2*delta_y;
 8003648:	8a7a      	ldrh	r2, [r7, #18]
 800364a:	89fb      	ldrh	r3, [r7, #14]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	b29b      	uxth	r3, r3
 8003654:	827b      	strh	r3, [r7, #18]
            y1 += h;
 8003656:	88ba      	ldrh	r2, [r7, #4]
 8003658:	8abb      	ldrh	r3, [r7, #20]
 800365a:	4413      	add	r3, r2
 800365c:	b29b      	uxth	r3, r3
 800365e:	80bb      	strh	r3, [r7, #4]
        while (y1 != y2)
 8003660:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003664:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003668:	429a      	cmp	r2, r3
 800366a:	d1d7      	bne.n	800361c <DrawLine+0xe4>
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <drawingLetterD>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterD (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b087      	sub	sp, #28
 8003678:	af02      	add	r7, sp, #8
 800367a:	4603      	mov	r3, r0
 800367c:	603a      	str	r2, [r7, #0]
 800367e:	80fb      	strh	r3, [r7, #6]
 8003680:	460b      	mov	r3, r1
 8003682:	80bb      	strh	r3, [r7, #4]
    DrawLine(x_pos, y_pos, x_pos, y_pos-45, color);
 8003684:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003688:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800368c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003690:	88bb      	ldrh	r3, [r7, #4]
 8003692:	3b2d      	subs	r3, #45	; 0x2d
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21c      	sxth	r4, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4623      	mov	r3, r4
 800369e:	f7ff ff4b 	bl	8003538 <DrawLine>

    x_pos = (int16_t)x_pos;
    y_pos = (int16_t)(y_pos - 23);
 80036a2:	88bb      	ldrh	r3, [r7, #4]
 80036a4:	3b17      	subs	r3, #23
 80036a6:	80bb      	strh	r3, [r7, #4]
    int16_t rad = 24;
 80036a8:	2318      	movs	r3, #24
 80036aa:	813b      	strh	r3, [r7, #8]
    int16_t x = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	81fb      	strh	r3, [r7, #14]
    int16_t y = rad;
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	81bb      	strh	r3, [r7, #12]
    int16_t c = 2*(1 - rad);
 80036b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80036b8:	f1c3 0301 	rsb	r3, r3, #1
 80036bc:	b29b      	uxth	r3, r3
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	817b      	strh	r3, [r7, #10]

    while(x<=y)
 80036c4:	e057      	b.n	8003776 <drawingLetterD+0x102>
    {
        BSP_LCD_DrawPixel(x_pos + x, y_pos + y, color);
 80036c6:	89fa      	ldrh	r2, [r7, #14]
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	4413      	add	r3, r2
 80036cc:	b298      	uxth	r0, r3
 80036ce:	89ba      	ldrh	r2, [r7, #12]
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	f002 fa5d 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + x,y_pos + -y, color);
 80036de:	89fa      	ldrh	r2, [r7, #14]
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	4413      	add	r3, r2
 80036e4:	b298      	uxth	r0, r3
 80036e6:	89bb      	ldrh	r3, [r7, #12]
 80036e8:	88ba      	ldrh	r2, [r7, #4]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f002 fa51 	bl	8005b98 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + y,y_pos + x, color);
 80036f6:	89ba      	ldrh	r2, [r7, #12]
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	4413      	add	r3, r2
 80036fc:	b298      	uxth	r0, r3
 80036fe:	89fa      	ldrh	r2, [r7, #14]
 8003700:	88bb      	ldrh	r3, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	b29b      	uxth	r3, r3
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f002 fa45 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + y,y_pos + -x, color);
 800370e:	89ba      	ldrh	r2, [r7, #12]
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4413      	add	r3, r2
 8003714:	b298      	uxth	r0, r3
 8003716:	89fb      	ldrh	r3, [r7, #14]
 8003718:	88ba      	ldrh	r2, [r7, #4]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	f002 fa39 	bl	8005b98 <BSP_LCD_DrawPixel>
        if(2*c > 1-2*y){
 8003726:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800372a:	005a      	lsls	r2, r3, #1
 800372c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	f1c3 0301 	rsb	r3, r3, #1
 8003736:	429a      	cmp	r2, r3
 8003738:	dd0e      	ble.n	8003758 <drawingLetterD+0xe4>
            y--;
 800373a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29b      	uxth	r3, r3
 8003744:	81bb      	strh	r3, [r7, #12]
            c -= 2*y-1;
 8003746:	897a      	ldrh	r2, [r7, #10]
 8003748:	89bb      	ldrh	r3, [r7, #12]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	b29b      	uxth	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b29b      	uxth	r3, r3
 8003752:	3301      	adds	r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	817b      	strh	r3, [r7, #10]
        }
        x++;
 8003758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800375c:	b29b      	uxth	r3, r3
 800375e:	3301      	adds	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	81fb      	strh	r3, [r7, #14]
        c+=2*x+1;
 8003764:	89fb      	ldrh	r3, [r7, #14]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	3301      	adds	r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	817b      	strh	r3, [r7, #10]
    while(x<=y)
 8003776:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800377a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800377e:	429a      	cmp	r2, r3
 8003780:	dda1      	ble.n	80036c6 <drawingLetterD+0x52>
    }
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}

0800378a <drawingLetterC>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterC (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	603a      	str	r2, [r7, #0]
 8003794:	80fb      	strh	r3, [r7, #6]
 8003796:	460b      	mov	r3, r1
 8003798:	80bb      	strh	r3, [r7, #4]
    y_pos = y_pos - 23;
 800379a:	88bb      	ldrh	r3, [r7, #4]
 800379c:	3b17      	subs	r3, #23
 800379e:	80bb      	strh	r3, [r7, #4]

    int16_t rad = 24;
 80037a0:	2318      	movs	r3, #24
 80037a2:	813b      	strh	r3, [r7, #8]

    int16_t x = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	81fb      	strh	r3, [r7, #14]
    int16_t y = rad;
 80037a8:	893b      	ldrh	r3, [r7, #8]
 80037aa:	81bb      	strh	r3, [r7, #12]

    int16_t c = 2*(1 - rad);
 80037ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80037b0:	f1c3 0301 	rsb	r3, r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	817b      	strh	r3, [r7, #10]

    while(x<=y){
 80037bc:	e057      	b.n	800386e <drawingLetterC+0xe4>
        BSP_LCD_DrawPixel(x_pos + -x,y_pos + y, color);
 80037be:	89fb      	ldrh	r3, [r7, #14]
 80037c0:	88fa      	ldrh	r2, [r7, #6]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	b298      	uxth	r0, r3
 80037c6:	89ba      	ldrh	r2, [r7, #12]
 80037c8:	88bb      	ldrh	r3, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	4619      	mov	r1, r3
 80037d2:	f002 f9e1 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -x,y_pos + -y, color);
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	88fa      	ldrh	r2, [r7, #6]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	b298      	uxth	r0, r3
 80037de:	89bb      	ldrh	r3, [r7, #12]
 80037e0:	88ba      	ldrh	r2, [r7, #4]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4619      	mov	r1, r3
 80037ea:	f002 f9d5 	bl	8005b98 <BSP_LCD_DrawPixel>

        BSP_LCD_DrawPixel(x_pos + -y,y_pos + x, color);
 80037ee:	89bb      	ldrh	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	b298      	uxth	r0, r3
 80037f6:	89fa      	ldrh	r2, [r7, #14]
 80037f8:	88bb      	ldrh	r3, [r7, #4]
 80037fa:	4413      	add	r3, r2
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	f002 f9c9 	bl	8005b98 <BSP_LCD_DrawPixel>
        BSP_LCD_DrawPixel(x_pos + -y,y_pos + -x, color);
 8003806:	89bb      	ldrh	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	b298      	uxth	r0, r3
 800380e:	89fb      	ldrh	r3, [r7, #14]
 8003810:	88ba      	ldrh	r2, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	b29b      	uxth	r3, r3
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	f002 f9bd 	bl	8005b98 <BSP_LCD_DrawPixel>
        if(2*c > 1-2*y){
 800381e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003822:	005a      	lsls	r2, r3, #1
 8003824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	f1c3 0301 	rsb	r3, r3, #1
 800382e:	429a      	cmp	r2, r3
 8003830:	dd0e      	ble.n	8003850 <drawingLetterC+0xc6>
            y--;
 8003832:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	81bb      	strh	r3, [r7, #12]
            c -= 2*y-1;
 800383e:	897a      	ldrh	r2, [r7, #10]
 8003840:	89bb      	ldrh	r3, [r7, #12]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	b29b      	uxth	r3, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	3301      	adds	r3, #1
 800384c:	b29b      	uxth	r3, r3
 800384e:	817b      	strh	r3, [r7, #10]
        }
        x++;
 8003850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003854:	b29b      	uxth	r3, r3
 8003856:	3301      	adds	r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	81fb      	strh	r3, [r7, #14]
        c+=2*x+1;
 800385c:	89fb      	ldrh	r3, [r7, #14]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	4413      	add	r3, r2
 8003866:	b29b      	uxth	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	817b      	strh	r3, [r7, #10]
    while(x<=y){
 800386e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003872:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003876:	429a      	cmp	r2, r3
 8003878:	dda1      	ble.n	80037be <drawingLetterC+0x34>
    }
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <drawingLetterA>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterA (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8003882:	b590      	push	{r4, r7, lr}
 8003884:	b085      	sub	sp, #20
 8003886:	af02      	add	r7, sp, #8
 8003888:	4603      	mov	r3, r0
 800388a:	603a      	str	r2, [r7, #0]
 800388c:	80fb      	strh	r3, [r7, #6]
 800388e:	460b      	mov	r3, r1
 8003890:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos, x_pos+20, y_pos-45, color);
 8003892:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003896:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	3314      	adds	r3, #20
 800389e:	b29b      	uxth	r3, r3
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	88bb      	ldrh	r3, [r7, #4]
 80038a4:	3b2d      	subs	r3, #45	; 0x2d
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	b21c      	sxth	r4, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	4623      	mov	r3, r4
 80038b0:	f7ff fe42 	bl	8003538 <DrawLine>
     DrawLine(x_pos+20, y_pos-45, x_pos+40, y_pos, color);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	3314      	adds	r3, #20
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b218      	sxth	r0, r3
 80038bc:	88bb      	ldrh	r3, [r7, #4]
 80038be:	3b2d      	subs	r3, #45	; 0x2d
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	b219      	sxth	r1, r3
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	3328      	adds	r3, #40	; 0x28
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b21a      	sxth	r2, r3
 80038cc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4623      	mov	r3, r4
 80038d6:	f7ff fe2f 	bl	8003538 <DrawLine>
     DrawLine(x_pos+5, y_pos-25, x_pos+35, y_pos-25, color);
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	3305      	adds	r3, #5
 80038de:	b29b      	uxth	r3, r3
 80038e0:	b218      	sxth	r0, r3
 80038e2:	88bb      	ldrh	r3, [r7, #4]
 80038e4:	3b19      	subs	r3, #25
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	b219      	sxth	r1, r3
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	3323      	adds	r3, #35	; 0x23
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	b21a      	sxth	r2, r3
 80038f2:	88bb      	ldrh	r3, [r7, #4]
 80038f4:	3b19      	subs	r3, #25
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b21c      	sxth	r4, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	4623      	mov	r3, r4
 8003900:	f7ff fe1a 	bl	8003538 <DrawLine>
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}

0800390c <drawingLetterW>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterW (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b085      	sub	sp, #20
 8003910:	af02      	add	r7, sp, #8
 8003912:	4603      	mov	r3, r0
 8003914:	603a      	str	r2, [r7, #0]
 8003916:	80fb      	strh	r3, [r7, #6]
 8003918:	460b      	mov	r3, r1
 800391a:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos-25, x_pos+10, y_pos, color);
 800391c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003920:	88bb      	ldrh	r3, [r7, #4]
 8003922:	3b19      	subs	r3, #25
 8003924:	b29b      	uxth	r3, r3
 8003926:	b219      	sxth	r1, r3
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	330a      	adds	r3, #10
 800392c:	b29b      	uxth	r3, r3
 800392e:	b21a      	sxth	r2, r3
 8003930:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4623      	mov	r3, r4
 800393a:	f7ff fdfd 	bl	8003538 <DrawLine>
     DrawLine(x_pos+10, y_pos, x_pos+20, y_pos-20, color);
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	330a      	adds	r3, #10
 8003942:	b29b      	uxth	r3, r3
 8003944:	b218      	sxth	r0, r3
 8003946:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	3314      	adds	r3, #20
 800394e:	b29b      	uxth	r3, r3
 8003950:	b21a      	sxth	r2, r3
 8003952:	88bb      	ldrh	r3, [r7, #4]
 8003954:	3b14      	subs	r3, #20
 8003956:	b29b      	uxth	r3, r3
 8003958:	b21c      	sxth	r4, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	4623      	mov	r3, r4
 8003960:	f7ff fdea 	bl	8003538 <DrawLine>
     DrawLine(x_pos+20, y_pos-20, x_pos+30, y_pos, color);
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	3314      	adds	r3, #20
 8003968:	b29b      	uxth	r3, r3
 800396a:	b218      	sxth	r0, r3
 800396c:	88bb      	ldrh	r3, [r7, #4]
 800396e:	3b14      	subs	r3, #20
 8003970:	b29b      	uxth	r3, r3
 8003972:	b219      	sxth	r1, r3
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	331e      	adds	r3, #30
 8003978:	b29b      	uxth	r3, r3
 800397a:	b21a      	sxth	r2, r3
 800397c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4623      	mov	r3, r4
 8003986:	f7ff fdd7 	bl	8003538 <DrawLine>
     DrawLine(x_pos+30, y_pos, x_pos+40, y_pos-25, color);
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	331e      	adds	r3, #30
 800398e:	b29b      	uxth	r3, r3
 8003990:	b218      	sxth	r0, r3
 8003992:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	3328      	adds	r3, #40	; 0x28
 800399a:	b29b      	uxth	r3, r3
 800399c:	b21a      	sxth	r2, r3
 800399e:	88bb      	ldrh	r3, [r7, #4]
 80039a0:	3b19      	subs	r3, #25
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	b21c      	sxth	r4, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	4623      	mov	r3, r4
 80039ac:	f7ff fdc4 	bl	8003538 <DrawLine>
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}

080039b8 <drawingLetterN>:
 * @param x_pos X position of the bottom left corner of the letter
 * @param y_pos Y position of the bottom left corner of the letter
 */

void drawingLetterN (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 80039b8:	b590      	push	{r4, r7, lr}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af02      	add	r7, sp, #8
 80039be:	4603      	mov	r3, r0
 80039c0:	603a      	str	r2, [r7, #0]
 80039c2:	80fb      	strh	r3, [r7, #6]
 80039c4:	460b      	mov	r3, r1
 80039c6:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos-25, x_pos, y_pos, color);
 80039c8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039cc:	88bb      	ldrh	r3, [r7, #4]
 80039ce:	3b19      	subs	r3, #25
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	b219      	sxth	r1, r3
 80039d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039d8:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	4623      	mov	r3, r4
 80039e2:	f7ff fda9 	bl	8003538 <DrawLine>
     DrawLine(x_pos, y_pos-25, x_pos+15, y_pos, color);
 80039e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80039ea:	88bb      	ldrh	r3, [r7, #4]
 80039ec:	3b19      	subs	r3, #25
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b219      	sxth	r1, r3
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	330f      	adds	r3, #15
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4623      	mov	r3, r4
 8003a04:	f7ff fd98 	bl	8003538 <DrawLine>
     DrawLine(x_pos+15, y_pos, x_pos+15, y_pos-25, color);
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	330f      	adds	r3, #15
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b218      	sxth	r0, r3
 8003a10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	330f      	adds	r3, #15
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b21a      	sxth	r2, r3
 8003a1c:	88bb      	ldrh	r3, [r7, #4]
 8003a1e:	3b19      	subs	r3, #25
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b21c      	sxth	r4, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	4623      	mov	r3, r4
 8003a2a:	f7ff fd85 	bl	8003538 <DrawLine>
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}

08003a36 <drawingLetterL>:
 * @param x_pos X position of the bottom right corner of the letter
 * @param y_pos Y position of the bottom right corner of the letter
 */

void drawingLetterL (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8003a36:	b590      	push	{r4, r7, lr}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af02      	add	r7, sp, #8
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	603a      	str	r2, [r7, #0]
 8003a40:	80fb      	strh	r3, [r7, #6]
 8003a42:	460b      	mov	r3, r1
 8003a44:	80bb      	strh	r3, [r7, #4]
     DrawLine(x_pos, y_pos, x_pos, y_pos-45, color);
 8003a46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a52:	88bb      	ldrh	r3, [r7, #4]
 8003a54:	3b2d      	subs	r3, #45	; 0x2d
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	b21c      	sxth	r4, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	4623      	mov	r3, r4
 8003a60:	f7ff fd6a 	bl	8003538 <DrawLine>
     DrawLine(x_pos, y_pos, x_pos+30, y_pos, color);
 8003a64:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a68:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	331e      	adds	r3, #30
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	b21a      	sxth	r2, r3
 8003a74:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	f7ff fd5b 	bl	8003538 <DrawLine>
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}

08003a8a <drawingText>:
 * @param x_pos X position of the bottom right corner of the letter
 * @param y_pos Y position of the bottom right corner of the letter
 */

void drawingText (uint16_t x_pos, uint16_t y_pos, uint32_t color)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	603a      	str	r2, [r7, #0]
 8003a94:	80fb      	strh	r3, [r7, #6]
 8003a96:	460b      	mov	r3, r1
 8003a98:	80bb      	strh	r3, [r7, #4]
	for(int i = 0; i < 6; i++){
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e060      	b.n	8003b62 <drawingText+0xd8>
		drawingLetterA(x_pos + i, y_pos + i, color);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	b298      	uxth	r0, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	88bb      	ldrh	r3, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f7ff fee3 	bl	8003882 <drawingLetterA>
		drawingLetterW(x_pos + i + 40, y_pos + i, color);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3328      	adds	r3, #40	; 0x28
 8003ac8:	b298      	uxth	r0, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	88bb      	ldrh	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f7ff ff18 	bl	800390c <drawingLetterW>
		drawingLetterN(x_pos + i + 85, y_pos + i, color);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3355      	adds	r3, #85	; 0x55
 8003ae8:	b298      	uxth	r0, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	88bb      	ldrh	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7ff ff5e 	bl	80039b8 <drawingLetterN>
		drawingLetterL(x_pos + i + 120, y_pos + i, color);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	88fb      	ldrh	r3, [r7, #6]
 8003b02:	4413      	add	r3, r2
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3378      	adds	r3, #120	; 0x78
 8003b08:	b298      	uxth	r0, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	88bb      	ldrh	r3, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	f7ff ff8d 	bl	8003a36 <drawingLetterL>
		drawingLetterC(x_pos + i + 175, y_pos + i, color);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	88fb      	ldrh	r3, [r7, #6]
 8003b22:	4413      	add	r3, r2
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	33af      	adds	r3, #175	; 0xaf
 8003b28:	b298      	uxth	r0, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	88bb      	ldrh	r3, [r7, #4]
 8003b30:	4413      	add	r3, r2
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	f7ff fe27 	bl	800378a <drawingLetterC>
		drawingLetterD(x_pos + i + 195, y_pos + i, color);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	4413      	add	r3, r2
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	33c3      	adds	r3, #195	; 0xc3
 8003b48:	b298      	uxth	r0, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	88bb      	ldrh	r3, [r7, #4]
 8003b50:	4413      	add	r3, r2
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7ff fd8c 	bl	8003674 <drawingLetterD>
	for(int i = 0; i < 6; i++){
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	dd9b      	ble.n	8003aa0 <drawingText+0x16>
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8003b74:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <MX_CRC_Init+0x20>)
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <MX_CRC_Init+0x24>)
 8003b78:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <MX_CRC_Init+0x20>)
 8003b7c:	f002 fb7a 	bl	8006274 <HAL_CRC_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003b86:	f000 ff19 	bl	80049bc <Error_Handler>
  }

}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000388 	.word	0x20000388
 8003b94:	40023000 	.word	0x40023000

08003b98 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a0b      	ldr	r2, [pc, #44]	; (8003bd4 <HAL_CRC_MspInit+0x3c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_CRC_MspInit+0x40>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <HAL_CRC_MspInit+0x40>)
 8003bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <HAL_CRC_MspInit+0x40>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40023000 	.word	0x40023000
 8003bd8:	40023800 	.word	0x40023800

08003bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <MX_DMA_Init+0x3c>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <MX_DMA_Init+0x3c>)
 8003bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <MX_DMA_Init+0x3c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	607b      	str	r3, [r7, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	203a      	movs	r0, #58	; 0x3a
 8003c04:	f002 fb0c 	bl	8006220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c08:	203a      	movs	r0, #58	; 0x3a
 8003c0a:	f002 fb25 	bl	8006258 <HAL_NVIC_EnableIRQ>

}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800

08003c1c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8003c20:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c22:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <MX_DMA2D_Init+0x60>)
 8003c24:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003c32:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003c50:	4809      	ldr	r0, [pc, #36]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c52:	f002 ff19 	bl	8006a88 <HAL_DMA2D_Init>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8003c5c:	f000 feae 	bl	80049bc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003c60:	2101      	movs	r1, #1
 8003c62:	4805      	ldr	r0, [pc, #20]	; (8003c78 <MX_DMA2D_Init+0x5c>)
 8003c64:	f003 f97e 	bl	8006f64 <HAL_DMA2D_ConfigLayer>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8003c6e:	f000 fea5 	bl	80049bc <Error_Handler>
  }

}
 8003c72:	bf00      	nop
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20000390 	.word	0x20000390
 8003c7c:	4002b000 	.word	0x4002b000

08003c80 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_DMA2D_MspInit+0x48>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d115      	bne.n	8003cbe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c92:	2300      	movs	r3, #0
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <HAL_DMA2D_MspInit+0x4c>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <HAL_DMA2D_MspInit+0x4c>)
 8003c9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_DMA2D_MspInit+0x4c>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2105      	movs	r1, #5
 8003cb2:	205a      	movs	r0, #90	; 0x5a
 8003cb4:	f002 fab4 	bl	8006220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003cb8:	205a      	movs	r0, #90	; 0x5a
 8003cba:	f002 facd 	bl	8006258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	4002b000 	.word	0x4002b000
 8003ccc:	40023800 	.word	0x40023800

08003cd0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
 8003ce4:	615a      	str	r2, [r3, #20]
 8003ce6:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <MX_FMC_Init+0x98>)
 8003cea:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <MX_FMC_Init+0x9c>)
 8003cec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <MX_FMC_Init+0x98>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <MX_FMC_Init+0x98>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <MX_FMC_Init+0x98>)
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d02:	2210      	movs	r2, #16
 8003d04:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d08:	2240      	movs	r2, #64	; 0x40
 8003d0a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8003d0c:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d0e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003d12:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d20:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003d30:	2302      	movs	r3, #2
 8003d32:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003d34:	2307      	movs	r3, #7
 8003d36:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003d38:	2304      	movs	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8003d3c:	2307      	movs	r3, #7
 8003d3e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003d40:	2303      	movs	r3, #3
 8003d42:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003d44:	2302      	movs	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003d4c:	1d3b      	adds	r3, r7, #4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4805      	ldr	r0, [pc, #20]	; (8003d68 <MX_FMC_Init+0x98>)
 8003d52:	f006 f9c3 	bl	800a0dc <HAL_SDRAM_Init>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8003d5c:	f000 fe2e 	bl	80049bc <Error_Handler>
  }

}
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	200003d0 	.word	0x200003d0
 8003d6c:	a0000140 	.word	0xa0000140

08003d70 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003d84:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <HAL_FMC_MspInit+0x104>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d16f      	bne.n	8003e6c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003d8c:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <HAL_FMC_MspInit+0x104>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4b38      	ldr	r3, [pc, #224]	; (8003e78 <HAL_FMC_MspInit+0x108>)
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	4a37      	ldr	r2, [pc, #220]	; (8003e78 <HAL_FMC_MspInit+0x108>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6393      	str	r3, [r2, #56]	; 0x38
 8003da2:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_FMC_MspInit+0x108>)
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8003dae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003db2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	482c      	ldr	r0, [pc, #176]	; (8003e7c <HAL_FMC_MspInit+0x10c>)
 8003dca:	f003 f9f9 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dde:	230c      	movs	r3, #12
 8003de0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4826      	ldr	r0, [pc, #152]	; (8003e80 <HAL_FMC_MspInit+0x110>)
 8003de8:	f003 f9ea 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003dec:	f248 1333 	movw	r3, #33075	; 0x8133
 8003df0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df2:	2302      	movs	r3, #2
 8003df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003dfe:	230c      	movs	r3, #12
 8003e00:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e02:	1d3b      	adds	r3, r7, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	481f      	ldr	r0, [pc, #124]	; (8003e84 <HAL_FMC_MspInit+0x114>)
 8003e08:	f003 f9da 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8003e0c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003e10:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e1e:	230c      	movs	r3, #12
 8003e20:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4818      	ldr	r0, [pc, #96]	; (8003e88 <HAL_FMC_MspInit+0x118>)
 8003e28:	f003 f9ca 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8003e2c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003e30:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e32:	2302      	movs	r3, #2
 8003e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e3e:	230c      	movs	r3, #12
 8003e40:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4811      	ldr	r0, [pc, #68]	; (8003e8c <HAL_FMC_MspInit+0x11c>)
 8003e48:	f003 f9ba 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8003e4c:	2360      	movs	r3, #96	; 0x60
 8003e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	480a      	ldr	r0, [pc, #40]	; (8003e90 <HAL_FMC_MspInit+0x120>)
 8003e66:	f003 f9ab 	bl	80071c0 <HAL_GPIO_Init>
 8003e6a:	e000      	b.n	8003e6e <HAL_FMC_MspInit+0xfe>
    return;
 8003e6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	200000e0 	.word	0x200000e0
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40021400 	.word	0x40021400
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40021800 	.word	0x40021800
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40020400 	.word	0x40020400

08003e94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003e9c:	f7ff ff68 	bl	8003d70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
	...

08003ec0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	; 0x38
 8003ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	605a      	str	r2, [r3, #4]
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	60da      	str	r2, [r3, #12]
 8003ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	4b7a      	ldr	r3, [pc, #488]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a79      	ldr	r2, [pc, #484]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
 8003ef6:	4b73      	ldr	r3, [pc, #460]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b70      	ldr	r3, [pc, #448]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	4b6c      	ldr	r3, [pc, #432]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a6b      	ldr	r2, [pc, #428]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b69      	ldr	r3, [pc, #420]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a64      	ldr	r2, [pc, #400]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b62      	ldr	r3, [pc, #392]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	4a5d      	ldr	r2, [pc, #372]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	6313      	str	r3, [r2, #48]	; 0x30
 8003f56:	4b5b      	ldr	r3, [pc, #364]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a56      	ldr	r2, [pc, #344]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b54      	ldr	r3, [pc, #336]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a4f      	ldr	r2, [pc, #316]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f88:	f043 0310 	orr.w	r3, r3, #16
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0310 	and.w	r3, r3, #16
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	4a48      	ldr	r2, [pc, #288]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003fa4:	f043 0308 	orr.w	r3, r3, #8
 8003fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003faa:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <MX_GPIO_Init+0x204>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2116      	movs	r1, #22
 8003fba:	4843      	ldr	r0, [pc, #268]	; (80040c8 <MX_GPIO_Init+0x208>)
 8003fbc:	f003 fbb4 	bl	8007728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	4841      	ldr	r0, [pc, #260]	; (80040cc <MX_GPIO_Init+0x20c>)
 8003fc6:	f003 fbaf 	bl	8007728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003fd0:	483f      	ldr	r0, [pc, #252]	; (80040d0 <MX_GPIO_Init+0x210>)
 8003fd2:	f003 fba9 	bl	8007728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003fdc:	483d      	ldr	r0, [pc, #244]	; (80040d4 <MX_GPIO_Init+0x214>)
 8003fde:	f003 fba3 	bl	8007728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003fe2:	2316      	movs	r3, #22
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4833      	ldr	r0, [pc, #204]	; (80040c8 <MX_GPIO_Init+0x208>)
 8003ffa:	f003 f8e1 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003ffe:	f248 0307 	movw	r3, #32775	; 0x8007
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004004:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <MX_GPIO_Init+0x218>)
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004010:	4619      	mov	r1, r3
 8004012:	482e      	ldr	r0, [pc, #184]	; (80040cc <MX_GPIO_Init+0x20c>)
 8004014:	f003 f8d4 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800401c:	2301      	movs	r3, #1
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004024:	2300      	movs	r3, #0
 8004026:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402c:	4619      	mov	r1, r3
 800402e:	4827      	ldr	r0, [pc, #156]	; (80040cc <MX_GPIO_Init+0x20c>)
 8004030:	f003 f8c6 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8004034:	2320      	movs	r3, #32
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <MX_GPIO_Init+0x218>)
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004044:	4619      	mov	r1, r3
 8004046:	4820      	ldr	r0, [pc, #128]	; (80040c8 <MX_GPIO_Init+0x208>)
 8004048:	f003 f8ba 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800404c:	2304      	movs	r3, #4
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405c:	4619      	mov	r1, r3
 800405e:	481f      	ldr	r0, [pc, #124]	; (80040dc <MX_GPIO_Init+0x21c>)
 8004060:	f003 f8ae 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8004064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800406a:	2300      	movs	r3, #0
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8004072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004076:	4619      	mov	r1, r3
 8004078:	4815      	ldr	r0, [pc, #84]	; (80040d0 <MX_GPIO_Init+0x210>)
 800407a:	f003 f8a1 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800407e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004084:	2301      	movs	r3, #1
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408c:	2300      	movs	r3, #0
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004094:	4619      	mov	r1, r3
 8004096:	480e      	ldr	r0, [pc, #56]	; (80040d0 <MX_GPIO_Init+0x210>)
 8004098:	f003 f892 	bl	80071c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800409c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b2:	4619      	mov	r1, r3
 80040b4:	4807      	ldr	r0, [pc, #28]	; (80040d4 <MX_GPIO_Init+0x214>)
 80040b6:	f003 f883 	bl	80071c0 <HAL_GPIO_Init>

}
 80040ba:	bf00      	nop
 80040bc:	3738      	adds	r7, #56	; 0x38
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020c00 	.word	0x40020c00
 80040d4:	40021800 	.word	0x40021800
 80040d8:	10120000 	.word	0x10120000
 80040dc:	40020400 	.word	0x40020400

080040e0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <MX_I2C3_Init+0x74>)
 80040e6:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <MX_I2C3_Init+0x78>)
 80040e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80040ea:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <MX_I2C3_Init+0x74>)
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <MX_I2C3_Init+0x7c>)
 80040ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <MX_I2C3_Init+0x74>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <MX_I2C3_Init+0x74>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040fc:	4b15      	ldr	r3, [pc, #84]	; (8004154 <MX_I2C3_Init+0x74>)
 80040fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004102:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004104:	4b13      	ldr	r3, [pc, #76]	; (8004154 <MX_I2C3_Init+0x74>)
 8004106:	2200      	movs	r2, #0
 8004108:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <MX_I2C3_Init+0x74>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004110:	4b10      	ldr	r3, [pc, #64]	; (8004154 <MX_I2C3_Init+0x74>)
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <MX_I2C3_Init+0x74>)
 8004118:	2200      	movs	r2, #0
 800411a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800411c:	480d      	ldr	r0, [pc, #52]	; (8004154 <MX_I2C3_Init+0x74>)
 800411e:	f004 fd07 	bl	8008b30 <HAL_I2C_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004128:	f000 fc48 	bl	80049bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800412c:	2100      	movs	r1, #0
 800412e:	4809      	ldr	r0, [pc, #36]	; (8004154 <MX_I2C3_Init+0x74>)
 8004130:	f004 fe36 	bl	8008da0 <HAL_I2CEx_ConfigAnalogFilter>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800413a:	f000 fc3f 	bl	80049bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800413e:	2100      	movs	r1, #0
 8004140:	4804      	ldr	r0, [pc, #16]	; (8004154 <MX_I2C3_Init+0x74>)
 8004142:	f004 fe69 	bl	8008e18 <HAL_I2CEx_ConfigDigitalFilter>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800414c:	f000 fc36 	bl	80049bc <Error_Handler>
  }

}
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000404 	.word	0x20000404
 8004158:	40005c00 	.word	0x40005c00
 800415c:	000186a0 	.word	0x000186a0

08004160 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004168:	f107 0314 	add.w	r3, r7, #20
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_I2C_MspInit+0xc4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d14b      	bne.n	800421a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	4b28      	ldr	r3, [pc, #160]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	4a27      	ldr	r2, [pc, #156]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	6313      	str	r3, [r2, #48]	; 0x30
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	4a20      	ldr	r2, [pc, #128]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6313      	str	r3, [r2, #48]	; 0x30
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80041ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041c0:	2312      	movs	r3, #18
 80041c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041cc:	2304      	movs	r3, #4
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	4619      	mov	r1, r3
 80041d6:	4815      	ldr	r0, [pc, #84]	; (800422c <HAL_I2C_MspInit+0xcc>)
 80041d8:	f002 fff2 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80041dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041e2:	2312      	movs	r3, #18
 80041e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041e6:	2301      	movs	r3, #1
 80041e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ea:	2300      	movs	r3, #0
 80041ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041ee:	2304      	movs	r3, #4
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80041f2:	f107 0314 	add.w	r3, r7, #20
 80041f6:	4619      	mov	r1, r3
 80041f8:	480d      	ldr	r0, [pc, #52]	; (8004230 <HAL_I2C_MspInit+0xd0>)
 80041fa:	f002 ffe1 	bl	80071c0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	4b09      	ldr	r3, [pc, #36]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a08      	ldr	r2, [pc, #32]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 8004208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_I2C_MspInit+0xc8>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004216:	60bb      	str	r3, [r7, #8]
 8004218:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800421a:	bf00      	nop
 800421c:	3728      	adds	r7, #40	; 0x28
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40005c00 	.word	0x40005c00
 8004228:	40023800 	.word	0x40023800
 800422c:	40020800 	.word	0x40020800
 8004230:	40020000 	.word	0x40020000

08004234 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b09a      	sub	sp, #104	; 0x68
 8004238:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800423a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800423e:	2234      	movs	r2, #52	; 0x34
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f009 ff2b 	bl	800e09e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8004248:	463b      	mov	r3, r7
 800424a:	2234      	movs	r2, #52	; 0x34
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f009 ff25 	bl	800e09e <memset>

  hltdc.Instance = LTDC;
 8004254:	4b4e      	ldr	r3, [pc, #312]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004256:	4a4f      	ldr	r2, [pc, #316]	; (8004394 <MX_LTDC_Init+0x160>)
 8004258:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800425a:	4b4d      	ldr	r3, [pc, #308]	; (8004390 <MX_LTDC_Init+0x15c>)
 800425c:	2200      	movs	r2, #0
 800425e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004262:	2200      	movs	r2, #0
 8004264:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8004266:	4b4a      	ldr	r3, [pc, #296]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004268:	2200      	movs	r2, #0
 800426a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <MX_LTDC_Init+0x15c>)
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004274:	2207      	movs	r2, #7
 8004276:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8004278:	4b45      	ldr	r3, [pc, #276]	; (8004390 <MX_LTDC_Init+0x15c>)
 800427a:	2203      	movs	r2, #3
 800427c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800427e:	4b44      	ldr	r3, [pc, #272]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004280:	220e      	movs	r2, #14
 8004282:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004286:	2205      	movs	r2, #5
 8004288:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <MX_LTDC_Init+0x15c>)
 800428c:	f240 228e 	movw	r2, #654	; 0x28e
 8004290:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8004292:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004294:	f240 12e5 	movw	r2, #485	; 0x1e5
 8004298:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800429a:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <MX_LTDC_Init+0x15c>)
 800429c:	f44f 7225 	mov.w	r2, #660	; 0x294
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80042a2:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <MX_LTDC_Init+0x15c>)
 80042a4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <MX_LTDC_Init+0x15c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80042b2:	4b37      	ldr	r3, [pc, #220]	; (8004390 <MX_LTDC_Init+0x15c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80042ba:	4b35      	ldr	r3, [pc, #212]	; (8004390 <MX_LTDC_Init+0x15c>)
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80042c2:	4833      	ldr	r0, [pc, #204]	; (8004390 <MX_LTDC_Init+0x15c>)
 80042c4:	f004 fde8 	bl	8008e98 <HAL_LTDC_Init>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80042ce:	f000 fb75 	bl	80049bc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80042e2:	2300      	movs	r3, #0
 80042e4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80042ea:	2300      	movs	r3, #0
 80042ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80042ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80042f4:	2305      	movs	r3, #5
 80042f6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800431a:	2200      	movs	r2, #0
 800431c:	4619      	mov	r1, r3
 800431e:	481c      	ldr	r0, [pc, #112]	; (8004390 <MX_LTDC_Init+0x15c>)
 8004320:	f004 fe8a 	bl	8009038 <HAL_LTDC_ConfigLayer>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800432a:	f000 fb47 	bl	80049bc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800434a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800434e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8004350:	2305      	movs	r3, #5
 8004352:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8004372:	463b      	mov	r3, r7
 8004374:	2201      	movs	r2, #1
 8004376:	4619      	mov	r1, r3
 8004378:	4805      	ldr	r0, [pc, #20]	; (8004390 <MX_LTDC_Init+0x15c>)
 800437a:	f004 fe5d 	bl	8009038 <HAL_LTDC_ConfigLayer>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8004384:	f000 fb1a 	bl	80049bc <Error_Handler>
  }

}
 8004388:	bf00      	nop
 800438a:	3768      	adds	r7, #104	; 0x68
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000458 	.word	0x20000458
 8004394:	40016800 	.word	0x40016800

08004398 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08e      	sub	sp, #56	; 0x38
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a77      	ldr	r2, [pc, #476]	; (8004594 <HAL_LTDC_MspInit+0x1fc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	f040 80e8 	bne.w	800458c <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80043bc:	2300      	movs	r3, #0
 80043be:	623b      	str	r3, [r7, #32]
 80043c0:	4b75      	ldr	r3, [pc, #468]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	4a74      	ldr	r2, [pc, #464]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ca:	6453      	str	r3, [r2, #68]	; 0x44
 80043cc:	4b72      	ldr	r3, [pc, #456]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043d4:	623b      	str	r3, [r7, #32]
 80043d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
 80043dc:	4b6e      	ldr	r3, [pc, #440]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	4a6d      	ldr	r2, [pc, #436]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043e2:	f043 0320 	orr.w	r3, r3, #32
 80043e6:	6313      	str	r3, [r2, #48]	; 0x30
 80043e8:	4b6b      	ldr	r3, [pc, #428]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f4:	2300      	movs	r3, #0
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	4b67      	ldr	r3, [pc, #412]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	4a66      	ldr	r2, [pc, #408]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6313      	str	r3, [r2, #48]	; 0x30
 8004404:	4b64      	ldr	r3, [pc, #400]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	4b60      	ldr	r3, [pc, #384]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004418:	4a5f      	ldr	r2, [pc, #380]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 800441a:	f043 0302 	orr.w	r3, r3, #2
 800441e:	6313      	str	r3, [r2, #48]	; 0x30
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	4a58      	ldr	r2, [pc, #352]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443a:	6313      	str	r3, [r2, #48]	; 0x30
 800443c:	4b56      	ldr	r3, [pc, #344]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	4b52      	ldr	r3, [pc, #328]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4a51      	ldr	r2, [pc, #324]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004452:	f043 0304 	orr.w	r3, r3, #4
 8004456:	6313      	str	r3, [r2, #48]	; 0x30
 8004458:	4b4f      	ldr	r3, [pc, #316]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	4b4b      	ldr	r3, [pc, #300]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	4a4a      	ldr	r2, [pc, #296]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 800446e:	f043 0308 	orr.w	r3, r3, #8
 8004472:	6313      	str	r3, [r2, #48]	; 0x30
 8004474:	4b48      	ldr	r3, [pc, #288]	; (8004598 <HAL_LTDC_MspInit+0x200>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8004480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004486:	2302      	movs	r3, #2
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448a:	2300      	movs	r3, #0
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448e:	2300      	movs	r3, #0
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004492:	230e      	movs	r3, #14
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449a:	4619      	mov	r1, r3
 800449c:	483f      	ldr	r0, [pc, #252]	; (800459c <HAL_LTDC_MspInit+0x204>)
 800449e:	f002 fe8f 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80044a2:	f641 0358 	movw	r3, #6232	; 0x1858
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a8:	2302      	movs	r3, #2
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b0:	2300      	movs	r3, #0
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044b4:	230e      	movs	r3, #14
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044bc:	4619      	mov	r1, r3
 80044be:	4838      	ldr	r0, [pc, #224]	; (80045a0 <HAL_LTDC_MspInit+0x208>)
 80044c0:	f002 fe7e 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80044c4:	2303      	movs	r3, #3
 80044c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d0:	2300      	movs	r3, #0
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80044d4:	2309      	movs	r3, #9
 80044d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044dc:	4619      	mov	r1, r3
 80044de:	4831      	ldr	r0, [pc, #196]	; (80045a4 <HAL_LTDC_MspInit+0x20c>)
 80044e0:	f002 fe6e 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80044e4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ea:	2302      	movs	r3, #2
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f2:	2300      	movs	r3, #0
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044f6:	230e      	movs	r3, #14
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044fe:	4619      	mov	r1, r3
 8004500:	4828      	ldr	r0, [pc, #160]	; (80045a4 <HAL_LTDC_MspInit+0x20c>)
 8004502:	f002 fe5d 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8004506:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450c:	2302      	movs	r3, #2
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004510:	2300      	movs	r3, #0
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004514:	2300      	movs	r3, #0
 8004516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004518:	230e      	movs	r3, #14
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800451c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004520:	4619      	mov	r1, r3
 8004522:	4821      	ldr	r0, [pc, #132]	; (80045a8 <HAL_LTDC_MspInit+0x210>)
 8004524:	f002 fe4c 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8004528:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452e:	2302      	movs	r3, #2
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004536:	2300      	movs	r3, #0
 8004538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800453a:	230e      	movs	r3, #14
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800453e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004542:	4619      	mov	r1, r3
 8004544:	4819      	ldr	r0, [pc, #100]	; (80045ac <HAL_LTDC_MspInit+0x214>)
 8004546:	f002 fe3b 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800454a:	2348      	movs	r3, #72	; 0x48
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800454e:	2302      	movs	r3, #2
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	2300      	movs	r3, #0
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004556:	2300      	movs	r3, #0
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800455a:	230e      	movs	r3, #14
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800455e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004562:	4619      	mov	r1, r3
 8004564:	4812      	ldr	r0, [pc, #72]	; (80045b0 <HAL_LTDC_MspInit+0x218>)
 8004566:	f002 fe2b 	bl	80071c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800456a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004570:	2302      	movs	r3, #2
 8004572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004578:	2300      	movs	r3, #0
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800457c:	2309      	movs	r3, #9
 800457e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004584:	4619      	mov	r1, r3
 8004586:	4808      	ldr	r0, [pc, #32]	; (80045a8 <HAL_LTDC_MspInit+0x210>)
 8004588:	f002 fe1a 	bl	80071c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800458c:	bf00      	nop
 800458e:	3738      	adds	r7, #56	; 0x38
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40016800 	.word	0x40016800
 8004598:	40023800 	.word	0x40023800
 800459c:	40021400 	.word	0x40021400
 80045a0:	40020000 	.word	0x40020000
 80045a4:	40020400 	.word	0x40020400
 80045a8:	40021800 	.word	0x40021800
 80045ac:	40020800 	.word	0x40020800
 80045b0:	40020c00 	.word	0x40020c00

080045b4 <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <HAL_UART_RxCpltCallback+0x38>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10d      	bne.n	80045e2 <HAL_UART_RxCpltCallback+0x2e>
		receivedFlag=1;
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_UART_RxCpltCallback+0x3c>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, data, 2, 100);
 80045cc:	2364      	movs	r3, #100	; 0x64
 80045ce:	2202      	movs	r2, #2
 80045d0:	4908      	ldr	r1, [pc, #32]	; (80045f4 <HAL_UART_RxCpltCallback+0x40>)
 80045d2:	4809      	ldr	r0, [pc, #36]	; (80045f8 <HAL_UART_RxCpltCallback+0x44>)
 80045d4:	f006 ffd9 	bl	800b58a <HAL_UART_Transmit>
		//HAL_UART_Receive_IT(&huart1, data, 2);
		HAL_UART_Receive_DMA (&huart1, data, 2);
 80045d8:	2202      	movs	r2, #2
 80045da:	4906      	ldr	r1, [pc, #24]	; (80045f4 <HAL_UART_RxCpltCallback+0x40>)
 80045dc:	4806      	ldr	r0, [pc, #24]	; (80045f8 <HAL_UART_RxCpltCallback+0x44>)
 80045de:	f007 f86d 	bl	800b6bc <HAL_UART_Receive_DMA>
	}
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40011000 	.word	0x40011000
 80045f0:	200000e4 	.word	0x200000e4
 80045f4:	200005a0 	.word	0x200005a0
 80045f8:	20000560 	.word	0x20000560

080045fc <_write>:

int _write(int file, char *ptr, int len) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 50);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b29a      	uxth	r2, r3
 800460c:	2332      	movs	r3, #50	; 0x32
 800460e:	68b9      	ldr	r1, [r7, #8]
 8004610:	4803      	ldr	r0, [pc, #12]	; (8004620 <_write+0x24>)
 8004612:	f006 ffba 	bl	800b58a <HAL_UART_Transmit>
	return len;
 8004616:	687b      	ldr	r3, [r7, #4]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000560 	.word	0x20000560
 8004624:	00000000 	.word	0x00000000

08004628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800462e:	f001 fcdb 	bl	8005fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004632:	f000 f92d 	bl	8004890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004636:	f7ff fc43 	bl	8003ec0 <MX_GPIO_Init>
  MX_DMA_Init();
 800463a:	f7ff facf 	bl	8003bdc <MX_DMA_Init>
  MX_CRC_Init();
 800463e:	f7ff fa97 	bl	8003b70 <MX_CRC_Init>
  MX_DMA2D_Init();
 8004642:	f7ff faeb 	bl	8003c1c <MX_DMA2D_Init>
  MX_FMC_Init();
 8004646:	f7ff fb43 	bl	8003cd0 <MX_FMC_Init>
  MX_I2C3_Init();
 800464a:	f7ff fd49 	bl	80040e0 <MX_I2C3_Init>
  MX_SPI5_Init();
 800464e:	f000 f9bd 	bl	80049cc <MX_SPI5_Init>
  MX_TIM1_Init();
 8004652:	f000 fbc9 	bl	8004de8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004656:	f000 fc39 	bl	8004ecc <MX_USART1_UART_Init>
  MX_LTDC_Init();
 800465a:	f7ff fdeb 	bl	8004234 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */

  BSP_LCD_Init(); //Wlaczenie biblioteki
 800465e:	f001 f867 	bl	8005730 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER); //Wlaczenie pierwszej warstwy
 8004662:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004666:	2000      	movs	r0, #0
 8004668:	f001 f8e4 	bl	8005834 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER); //Wlaczenie drugiej warstwy
 800466c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8004670:	2001      	movs	r0, #1
 8004672:	f001 f8df 	bl	8005834 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER); //Wybranie warstwy aktywnej
 8004676:	2001      	movs	r0, #1
 8004678:	f001 f940 	bl	80058fc <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn(); //Wlaczenie podswietlania
 800467c:	f001 f9a6 	bl	80059cc <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE); //Kolor Tla
 8004680:	4869      	ldr	r0, [pc, #420]	; (8004828 <main+0x200>)
 8004682:	f001 f97b 	bl	800597c <BSP_LCD_Clear>

  //HAL_UART_Receive_IT(&huart1, data, 2);
  HAL_UART_Receive_DMA (&huart1, data, 2);
 8004686:	2202      	movs	r2, #2
 8004688:	4968      	ldr	r1, [pc, #416]	; (800482c <main+0x204>)
 800468a:	4869      	ldr	r0, [pc, #420]	; (8004830 <main+0x208>)
 800468c:	f007 f816 	bl	800b6bc <HAL_UART_Receive_DMA>

  //interfejs uzytkownika - uruchomienie animacji
  printf("\r\n");
 8004690:	4868      	ldr	r0, [pc, #416]	; (8004834 <main+0x20c>)
 8004692:	f009 fe11 	bl	800e2b8 <puts>
  printf("AwnLCD\r\n\n");
 8004696:	4868      	ldr	r0, [pc, #416]	; (8004838 <main+0x210>)
 8004698:	f009 fe0e 	bl	800e2b8 <puts>
  printf("Wpisz cyfre i potwierdz naciskajac klawisz ENTER\r\n");
 800469c:	4867      	ldr	r0, [pc, #412]	; (800483c <main+0x214>)
 800469e:	f009 fe0b 	bl	800e2b8 <puts>
  printf("Animacje:\r\n");
 80046a2:	4867      	ldr	r0, [pc, #412]	; (8004840 <main+0x218>)
 80046a4:	f009 fe08 	bl	800e2b8 <puts>
  printf("1. Linia\r\n");
 80046a8:	4866      	ldr	r0, [pc, #408]	; (8004844 <main+0x21c>)
 80046aa:	f009 fe05 	bl	800e2b8 <puts>
  printf("2. Trojkat\r\n");
 80046ae:	4866      	ldr	r0, [pc, #408]	; (8004848 <main+0x220>)
 80046b0:	f009 fe02 	bl	800e2b8 <puts>
  printf("3. Prostokat\r\n");
 80046b4:	4865      	ldr	r0, [pc, #404]	; (800484c <main+0x224>)
 80046b6:	f009 fdff 	bl	800e2b8 <puts>
  printf("4. Odbijajacy sie prostokat\r\n");
 80046ba:	4865      	ldr	r0, [pc, #404]	; (8004850 <main+0x228>)
 80046bc:	f009 fdfc 	bl	800e2b8 <puts>
  printf("5. Okrag\r\n");
 80046c0:	4864      	ldr	r0, [pc, #400]	; (8004854 <main+0x22c>)
 80046c2:	f009 fdf9 	bl	800e2b8 <puts>
  printf("6. Tekst\r\n");
 80046c6:	4864      	ldr	r0, [pc, #400]	; (8004858 <main+0x230>)
 80046c8:	f009 fdf6 	bl	800e2b8 <puts>
  printf("7. Rotacja kwadratu\r\n\n");
 80046cc:	4863      	ldr	r0, [pc, #396]	; (800485c <main+0x234>)
 80046ce:	f009 fdf3 	bl	800e2b8 <puts>
  printf("Wybor: \r\n");
 80046d2:	4863      	ldr	r0, [pc, #396]	; (8004860 <main+0x238>)
 80046d4:	f009 fdf0 	bl	800e2b8 <puts>

  while(1){

	  if(receivedFlag == 1){
 80046d8:	4b62      	ldr	r3, [pc, #392]	; (8004864 <main+0x23c>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d1fb      	bne.n	80046d8 <main+0xb0>
		  switch ((uint8_t)(data[0])) {
 80046e0:	4b52      	ldr	r3, [pc, #328]	; (800482c <main+0x204>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	3b31      	subs	r3, #49	; 0x31
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	f200 8092 	bhi.w	8004810 <main+0x1e8>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <main+0xcc>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004711 	.word	0x08004711
 80046f8:	0800473d 	.word	0x0800473d
 80046fc:	08004763 	.word	0x08004763
 8004700:	0800478d 	.word	0x0800478d
 8004704:	080047ab 	.word	0x080047ab
 8004708:	080047d1 	.word	0x080047d1
 800470c:	080047f1 	.word	0x080047f1
		  case '1':
			  printf("Wybrano 1 - animacja linii\r\n");
 8004710:	4855      	ldr	r0, [pc, #340]	; (8004868 <main+0x240>)
 8004712:	f009 fdd1 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8004716:	4855      	ldr	r0, [pc, #340]	; (800486c <main+0x244>)
 8004718:	f009 fdce 	bl	800e2b8 <puts>
			  animationLine(30, 30, 210, 300, 30, 1000);
 800471c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	231e      	movs	r3, #30
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800472a:	22d2      	movs	r2, #210	; 0xd2
 800472c:	211e      	movs	r1, #30
 800472e:	201e      	movs	r0, #30
 8004730:	f7fc fb5c 	bl	8000dec <animationLine>
			  printf("Koniec animacji\r\n");
 8004734:	484e      	ldr	r0, [pc, #312]	; (8004870 <main+0x248>)
 8004736:	f009 fdbf 	bl	800e2b8 <puts>
			  break;
 800473a:	e06d      	b.n	8004818 <main+0x1f0>
		  case '2':
			  printf("Wybrano 2 - animacja trojkata\r\n");
 800473c:	484d      	ldr	r0, [pc, #308]	; (8004874 <main+0x24c>)
 800473e:	f009 fdbb 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8004742:	484a      	ldr	r0, [pc, #296]	; (800486c <main+0x244>)
 8004744:	f009 fdb8 	bl	800e2b8 <puts>
			  animationTriangle(95, 147, 50, 80, 500);
 8004748:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2350      	movs	r3, #80	; 0x50
 8004750:	2232      	movs	r2, #50	; 0x32
 8004752:	2193      	movs	r1, #147	; 0x93
 8004754:	205f      	movs	r0, #95	; 0x5f
 8004756:	f7fd fc6d 	bl	8002034 <animationTriangle>
			  printf("Koniec animacji\r\n");
 800475a:	4845      	ldr	r0, [pc, #276]	; (8004870 <main+0x248>)
 800475c:	f009 fdac 	bl	800e2b8 <puts>
			  break;
 8004760:	e05a      	b.n	8004818 <main+0x1f0>
		  case '3':
			  printf("Wybrano 3 - animacja prostokata\r\n");
 8004762:	4845      	ldr	r0, [pc, #276]	; (8004878 <main+0x250>)
 8004764:	f009 fda8 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8004768:	4840      	ldr	r0, [pc, #256]	; (800486c <main+0x244>)
 800476a:	f009 fda5 	bl	800e2b8 <puts>
			  animationRectangle(100, 130, 40, 60, 80, 500);
 800476e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	2350      	movs	r3, #80	; 0x50
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	233c      	movs	r3, #60	; 0x3c
 800477a:	2228      	movs	r2, #40	; 0x28
 800477c:	2182      	movs	r1, #130	; 0x82
 800477e:	2064      	movs	r0, #100	; 0x64
 8004780:	f7fc fe06 	bl	8001390 <animationRectangle>
			  printf("Koniec animacji\r\n");
 8004784:	483a      	ldr	r0, [pc, #232]	; (8004870 <main+0x248>)
 8004786:	f009 fd97 	bl	800e2b8 <puts>
			  break;
 800478a:	e045      	b.n	8004818 <main+0x1f0>
		  case '4':
			  printf("Wybrano 4 - animacja odbijającego sie prostokata\r\n");
 800478c:	483b      	ldr	r0, [pc, #236]	; (800487c <main+0x254>)
 800478e:	f009 fd93 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 8004792:	4836      	ldr	r0, [pc, #216]	; (800486c <main+0x244>)
 8004794:	f009 fd90 	bl	800e2b8 <puts>
			  animationJumpingRectangle(80, 80, 30);
 8004798:	221e      	movs	r2, #30
 800479a:	2150      	movs	r1, #80	; 0x50
 800479c:	2050      	movs	r0, #80	; 0x50
 800479e:	f7fc ff6a 	bl	8001676 <animationJumpingRectangle>
			  printf("Koniec animacji\r\n");
 80047a2:	4833      	ldr	r0, [pc, #204]	; (8004870 <main+0x248>)
 80047a4:	f009 fd88 	bl	800e2b8 <puts>
			  break;
 80047a8:	e036      	b.n	8004818 <main+0x1f0>
		  case '5':
			  printf("Wybrano 5 - animacja okregu\r\n");
 80047aa:	4835      	ldr	r0, [pc, #212]	; (8004880 <main+0x258>)
 80047ac:	f009 fd84 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 80047b0:	482e      	ldr	r0, [pc, #184]	; (800486c <main+0x244>)
 80047b2:	f009 fd81 	bl	800e2b8 <puts>
			  animationCircle(120, 160, 40, 80, 500);
 80047b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	2350      	movs	r3, #80	; 0x50
 80047be:	2228      	movs	r2, #40	; 0x28
 80047c0:	21a0      	movs	r1, #160	; 0xa0
 80047c2:	2078      	movs	r0, #120	; 0x78
 80047c4:	f7fd fd83 	bl	80022ce <animationCircle>
			  printf("Koniec animacji\r\n");
 80047c8:	4829      	ldr	r0, [pc, #164]	; (8004870 <main+0x248>)
 80047ca:	f009 fd75 	bl	800e2b8 <puts>
			  break;
 80047ce:	e023      	b.n	8004818 <main+0x1f0>
		  case '6':
			  printf("Wybrano 6 - animacja tekstu\r\n");
 80047d0:	482c      	ldr	r0, [pc, #176]	; (8004884 <main+0x25c>)
 80047d2:	f009 fd71 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 80047d6:	4825      	ldr	r0, [pc, #148]	; (800486c <main+0x244>)
 80047d8:	f009 fd6e 	bl	800e2b8 <puts>
			  animationText(5, 60, 500);
 80047dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047e0:	213c      	movs	r1, #60	; 0x3c
 80047e2:	2005      	movs	r0, #5
 80047e4:	f7fd fec0 	bl	8002568 <animationText>
			  printf("Koniec animacji\r\n");
 80047e8:	4821      	ldr	r0, [pc, #132]	; (8004870 <main+0x248>)
 80047ea:	f009 fd65 	bl	800e2b8 <puts>
			  break;
 80047ee:	e013      	b.n	8004818 <main+0x1f0>
			case '7':
			  printf("Wybrano 7 - animacja rotacji kwadratu\r\n");
 80047f0:	4825      	ldr	r0, [pc, #148]	; (8004888 <main+0x260>)
 80047f2:	f009 fd61 	bl	800e2b8 <puts>
			  printf("Poczekaj do konca animacji\r\n");
 80047f6:	481d      	ldr	r0, [pc, #116]	; (800486c <main+0x244>)
 80047f8:	f009 fd5e 	bl	800e2b8 <puts>
			  animationRotation(120, 160, 25); //(95, 185) / (120, 160)
 80047fc:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8004820 <main+0x1f8>
 8004800:	21a0      	movs	r1, #160	; 0xa0
 8004802:	2078      	movs	r0, #120	; 0x78
 8004804:	f7fd ff24 	bl	8002650 <animationRotation>
			  printf("Koniec animacji\r\n");
 8004808:	4819      	ldr	r0, [pc, #100]	; (8004870 <main+0x248>)
 800480a:	f009 fd55 	bl	800e2b8 <puts>
			  break;
 800480e:	e003      	b.n	8004818 <main+0x1f0>
		  default:
			  printf("Nieprawidlowy wybor. Wprowadz ponownie: \r\n");
 8004810:	481e      	ldr	r0, [pc, #120]	; (800488c <main+0x264>)
 8004812:	f009 fd51 	bl	800e2b8 <puts>
			  break;
 8004816:	bf00      	nop
		  }
		  receivedFlag = 0;
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <main+0x23c>)
 800481a:	2200      	movs	r2, #0
 800481c:	701a      	strb	r2, [r3, #0]
	  if(receivedFlag == 1){
 800481e:	e75b      	b.n	80046d8 <main+0xb0>
 8004820:	00000000 	.word	0x00000000
 8004824:	40390000 	.word	0x40390000
 8004828:	ff0000ff 	.word	0xff0000ff
 800482c:	200005a0 	.word	0x200005a0
 8004830:	20000560 	.word	0x20000560
 8004834:	0800fa48 	.word	0x0800fa48
 8004838:	0800fa4c 	.word	0x0800fa4c
 800483c:	0800fa58 	.word	0x0800fa58
 8004840:	0800fa8c 	.word	0x0800fa8c
 8004844:	0800fa98 	.word	0x0800fa98
 8004848:	0800faa4 	.word	0x0800faa4
 800484c:	0800fab0 	.word	0x0800fab0
 8004850:	0800fac0 	.word	0x0800fac0
 8004854:	0800fae0 	.word	0x0800fae0
 8004858:	0800faec 	.word	0x0800faec
 800485c:	0800faf8 	.word	0x0800faf8
 8004860:	0800fb10 	.word	0x0800fb10
 8004864:	200000e4 	.word	0x200000e4
 8004868:	0800fb1c 	.word	0x0800fb1c
 800486c:	0800fb38 	.word	0x0800fb38
 8004870:	0800fb54 	.word	0x0800fb54
 8004874:	0800fb68 	.word	0x0800fb68
 8004878:	0800fb88 	.word	0x0800fb88
 800487c:	0800fbac 	.word	0x0800fbac
 8004880:	0800fbe0 	.word	0x0800fbe0
 8004884:	0800fc00 	.word	0x0800fc00
 8004888:	0800fc20 	.word	0x0800fc20
 800488c:	0800fc48 	.word	0x0800fc48

08004890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b0a0      	sub	sp, #128	; 0x80
 8004894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004896:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800489a:	2230      	movs	r2, #48	; 0x30
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f009 fbfd 	bl	800e09e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
 80048b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048b4:	f107 030c 	add.w	r3, r7, #12
 80048b8:	2230      	movs	r2, #48	; 0x30
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f009 fbee 	bl	800e09e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	4b32      	ldr	r3, [pc, #200]	; (8004990 <SystemClock_Config+0x100>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a31      	ldr	r2, [pc, #196]	; (8004990 <SystemClock_Config+0x100>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <SystemClock_Config+0x100>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048de:	2300      	movs	r3, #0
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <SystemClock_Config+0x104>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <SystemClock_Config+0x104>)
 80048e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b29      	ldr	r3, [pc, #164]	; (8004994 <SystemClock_Config+0x104>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80048fa:	2301      	movs	r3, #1
 80048fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80048fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004902:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004904:	2302      	movs	r3, #2
 8004906:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004908:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800490c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800490e:	2308      	movs	r3, #8
 8004910:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004912:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004916:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004918:	2302      	movs	r3, #2
 800491a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800491c:	2307      	movs	r3, #7
 800491e:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004924:	4618      	mov	r0, r3
 8004926:	f004 fd87 	bl	8009438 <HAL_RCC_OscConfig>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004930:	f000 f844 	bl	80049bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004934:	230f      	movs	r3, #15
 8004936:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004938:	2302      	movs	r3, #2
 800493a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800493c:	2300      	movs	r3, #0
 800493e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800494c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004950:	2105      	movs	r1, #5
 8004952:	4618      	mov	r0, r3
 8004954:	f004 ffe0 	bl	8009918 <HAL_RCC_ClockConfig>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800495e:	f000 f82d 	bl	80049bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004962:	2308      	movs	r3, #8
 8004964:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8004966:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800496a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800496c:	2302      	movs	r3, #2
 800496e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004970:	2300      	movs	r3, #0
 8004972:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004974:	f107 030c 	add.w	r3, r7, #12
 8004978:	4618      	mov	r0, r3
 800497a:	f005 f9f1 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8004984:	f000 f81a 	bl	80049bc <Error_Handler>
  }
}
 8004988:	bf00      	nop
 800498a:	3780      	adds	r7, #128	; 0x80
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40023800 	.word	0x40023800
 8004994:	40007000 	.word	0x40007000

08004998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	; (80049b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80049aa:	f001 fb3f 	bl	800602c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40001000 	.word	0x40001000

080049bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049d2:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <MX_SPI5_Init+0x6c>)
 80049d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80049d6:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 80049de:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049e4:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80049f8:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <MX_SPI5_Init+0x68>)
 80049fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049fe:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <MX_SPI5_Init+0x68>)
 8004a02:	2218      	movs	r2, #24
 8004a04:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <MX_SPI5_Init+0x68>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <MX_SPI5_Init+0x68>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <MX_SPI5_Init+0x68>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <MX_SPI5_Init+0x68>)
 8004a1a:	220a      	movs	r2, #10
 8004a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004a1e:	4805      	ldr	r0, [pc, #20]	; (8004a34 <MX_SPI5_Init+0x68>)
 8004a20:	f005 fbdb 	bl	800a1da <HAL_SPI_Init>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 8004a2a:	f7ff ffc7 	bl	80049bc <Error_Handler>
  }

}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200005a4 	.word	0x200005a4
 8004a38:	40015000 	.word	0x40015000

08004a3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <HAL_SPI_MspInit+0x84>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d12c      	bne.n	8004ab8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	4a17      	ldr	r2, [pc, #92]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a84:	f043 0320 	orr.w	r3, r3, #32
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <HAL_SPI_MspInit+0x88>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8004a96:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004aa8:	2305      	movs	r3, #5
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4805      	ldr	r0, [pc, #20]	; (8004ac8 <HAL_SPI_MspInit+0x8c>)
 8004ab4:	f002 fb84 	bl	80071c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40015000 	.word	0x40015000
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40021400 	.word	0x40021400

08004acc <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a08      	ldr	r2, [pc, #32]	; (8004afc <HAL_SPI_MspDeInit+0x30>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10a      	bne.n	8004af4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_SPI_MspDeInit+0x34>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	4a07      	ldr	r2, [pc, #28]	; (8004b00 <HAL_SPI_MspDeInit+0x34>)
 8004ae4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ae8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004aea:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004aee:	4805      	ldr	r0, [pc, #20]	; (8004b04 <HAL_SPI_MspDeInit+0x38>)
 8004af0:	f002 fd10 	bl	8007514 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40015000 	.word	0x40015000
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40021400 	.word	0x40021400

08004b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <HAL_MspInit+0x54>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b16:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <HAL_MspInit+0x54>)
 8004b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <HAL_MspInit+0x54>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_MspInit+0x54>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_MspInit+0x54>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_MspInit+0x54>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b46:	2200      	movs	r2, #0
 8004b48:	210f      	movs	r1, #15
 8004b4a:	f06f 0001 	mvn.w	r0, #1
 8004b4e:	f001 fb67 	bl	8006220 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800

08004b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08c      	sub	sp, #48	; 0x30
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004b70:	2200      	movs	r2, #0
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	2036      	movs	r0, #54	; 0x36
 8004b76:	f001 fb53 	bl	8006220 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b7a:	2036      	movs	r0, #54	; 0x36
 8004b7c:	f001 fb6c 	bl	8006258 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <HAL_InitTick+0xa4>)
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <HAL_InitTick+0xa4>)
 8004b8a:	f043 0310 	orr.w	r3, r3, #16
 8004b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b90:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <HAL_InitTick+0xa4>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004b9c:	f107 0210 	add.w	r2, r7, #16
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 f8a8 	bl	8009cfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004bac:	f005 f87e 	bl	8009cac <HAL_RCC_GetPCLK1Freq>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	4a13      	ldr	r2, [pc, #76]	; (8004c08 <HAL_InitTick+0xa8>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	0c9b      	lsrs	r3, r3, #18
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_InitTick+0xac>)
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <HAL_InitTick+0xb0>)
 8004bc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_InitTick+0xac>)
 8004bcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bd0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004bd2:	4a0e      	ldr	r2, [pc, #56]	; (8004c0c <HAL_InitTick+0xac>)
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <HAL_InitTick+0xac>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <HAL_InitTick+0xac>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004be4:	4809      	ldr	r0, [pc, #36]	; (8004c0c <HAL_InitTick+0xac>)
 8004be6:	f006 f883 	bl	800acf0 <HAL_TIM_Base_Init>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d104      	bne.n	8004bfa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004bf0:	4806      	ldr	r0, [pc, #24]	; (8004c0c <HAL_InitTick+0xac>)
 8004bf2:	f006 f8a8 	bl	800ad46 <HAL_TIM_Base_Start_IT>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	e000      	b.n	8004bfc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3730      	adds	r7, #48	; 0x30
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	431bde83 	.word	0x431bde83
 8004c0c:	200005fc 	.word	0x200005fc
 8004c10:	40001000 	.word	0x40001000

08004c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c26:	e7fe      	b.n	8004c26 <HardFault_Handler+0x4>

08004c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c2c:	e7fe      	b.n	8004c2c <MemManage_Handler+0x4>

08004c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c32:	e7fe      	b.n	8004c32 <BusFault_Handler+0x4>

08004c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c38:	e7fe      	b.n	8004c38 <UsageFault_Handler+0x4>

08004c3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <USART1_IRQHandler+0x10>)
 8004c4e:	f006 fdb5 	bl	800b7bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000560 	.word	0x20000560

08004c5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c60:	4802      	ldr	r0, [pc, #8]	; (8004c6c <TIM6_DAC_IRQHandler+0x10>)
 8004c62:	f006 f894 	bl	800ad8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200005fc 	.word	0x200005fc

08004c70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004c74:	4802      	ldr	r0, [pc, #8]	; (8004c80 <DMA2_Stream2_IRQHandler+0x10>)
 8004c76:	f001 fc9f 	bl	80065b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000500 	.word	0x20000500

08004c84 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <OTG_HS_IRQHandler+0x10>)
 8004c8a:	f002 fd66 	bl	800775a <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	2000072c 	.word	0x2000072c

08004c98 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <DMA2D_IRQHandler+0x10>)
 8004c9e:	f002 f850 	bl	8006d42 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000390 	.word	0x20000390

08004cac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e00a      	b.n	8004cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cbe:	f3af 8000 	nop.w
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	60ba      	str	r2, [r7, #8]
 8004cca:	b2ca      	uxtb	r2, r1
 8004ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dbf0      	blt.n	8004cbe <_read+0x12>
	}

return len;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
	return -1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <_isatty>:

int _isatty(int file)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
	return 1;
 8004d26:	2301      	movs	r3, #1
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <_sbrk+0x5c>)
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <_sbrk+0x60>)
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <_sbrk+0x64>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_sbrk+0x64>)
 8004d6e:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <_sbrk+0x68>)
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <_sbrk+0x64>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d207      	bcs.n	8004d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d80:	f009 f958 	bl	800e034 <__errno>
 8004d84:	4602      	mov	r2, r0
 8004d86:	230c      	movs	r3, #12
 8004d88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	e009      	b.n	8004da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <_sbrk+0x64>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <_sbrk+0x64>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <_sbrk+0x64>)
 8004da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20030000 	.word	0x20030000
 8004db0:	00000400 	.word	0x00000400
 8004db4:	200000e8 	.word	0x200000e8
 8004db8:	200009f8 	.word	0x200009f8

08004dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dc0:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <SystemInit+0x28>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	4a07      	ldr	r2, [pc, #28]	; (8004de4 <SystemInit+0x28>)
 8004dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <SystemInit+0x28>)
 8004dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dd6:	609a      	str	r2, [r3, #8]
#endif
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	e000ed00 	.word	0xe000ed00

08004de8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dee:	f107 0308 	add.w	r3, r7, #8
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e06:	4a1f      	ldr	r2, [pc, #124]	; (8004e84 <MX_TIM1_Init+0x9c>)
 8004e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e10:	4b1b      	ldr	r3, [pc, #108]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004e24:	4b16      	ldr	r3, [pc, #88]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e30:	4813      	ldr	r0, [pc, #76]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e32:	f005 ff5d 	bl	800acf0 <HAL_TIM_Base_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004e3c:	f7ff fdbe 	bl	80049bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004e46:	f107 0308 	add.w	r3, r7, #8
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e4e:	f006 f8a6 	bl	800af9e <HAL_TIM_ConfigClockSource>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004e58:	f7ff fdb0 	bl	80049bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004e64:	463b      	mov	r3, r7
 8004e66:	4619      	mov	r1, r3
 8004e68:	4805      	ldr	r0, [pc, #20]	; (8004e80 <MX_TIM1_Init+0x98>)
 8004e6a:	f006 fab1 	bl	800b3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004e74:	f7ff fda2 	bl	80049bc <Error_Handler>
  }

}
 8004e78:	bf00      	nop
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	2000063c 	.word	0x2000063c
 8004e84:	40010000 	.word	0x40010000

08004e88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <HAL_TIM_Base_MspInit+0x3c>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_TIM_Base_MspInit+0x40>)
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <HAL_TIM_Base_MspInit+0x40>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_TIM_Base_MspInit+0x40>)
 8004eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40023800 	.word	0x40023800

08004ecc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004ed2:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <MX_USART1_UART_Init+0x50>)
 8004ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f02:	4805      	ldr	r0, [pc, #20]	; (8004f18 <MX_USART1_UART_Init+0x4c>)
 8004f04:	f006 faf4 	bl	800b4f0 <HAL_UART_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f0e:	f7ff fd55 	bl	80049bc <Error_Handler>
  }

}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000560 	.word	0x20000560
 8004f1c:	40011000 	.word	0x40011000

08004f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	60da      	str	r2, [r3, #12]
 8004f36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a35      	ldr	r2, [pc, #212]	; (8005014 <HAL_UART_MspInit+0xf4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d163      	bne.n	800500a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	4b34      	ldr	r3, [pc, #208]	; (8005018 <HAL_UART_MspInit+0xf8>)
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	4a33      	ldr	r2, [pc, #204]	; (8005018 <HAL_UART_MspInit+0xf8>)
 8004f4c:	f043 0310 	orr.w	r3, r3, #16
 8004f50:	6453      	str	r3, [r2, #68]	; 0x44
 8004f52:	4b31      	ldr	r3, [pc, #196]	; (8005018 <HAL_UART_MspInit+0xf8>)
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <HAL_UART_MspInit+0xf8>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <HAL_UART_MspInit+0xf8>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6e:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <HAL_UART_MspInit+0xf8>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004f7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f80:	2302      	movs	r3, #2
 8004f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f8c:	2307      	movs	r3, #7
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	4619      	mov	r1, r3
 8004f96:	4821      	ldr	r0, [pc, #132]	; (800501c <HAL_UART_MspInit+0xfc>)
 8004f98:	f002 f912 	bl	80071c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004f9c:	4b20      	ldr	r3, [pc, #128]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <HAL_UART_MspInit+0x104>)
 8004fa0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004faa:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb0:	4b1b      	ldr	r3, [pc, #108]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fb6:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004fc4:	4b16      	ldr	r3, [pc, #88]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004fde:	4810      	ldr	r0, [pc, #64]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004fe0:	f001 f964 	bl	80062ac <HAL_DMA_Init>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004fea:	f7ff fce7 	bl	80049bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <HAL_UART_MspInit+0x100>)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	2025      	movs	r0, #37	; 0x25
 8005000:	f001 f90e 	bl	8006220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005004:	2025      	movs	r0, #37	; 0x25
 8005006:	f001 f927 	bl	8006258 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800500a:	bf00      	nop
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40011000 	.word	0x40011000
 8005018:	40023800 	.word	0x40023800
 800501c:	40020000 	.word	0x40020000
 8005020:	20000500 	.word	0x20000500
 8005024:	40026440 	.word	0x40026440

08005028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005060 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800502c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800502e:	e003      	b.n	8005038 <LoopCopyDataInit>

08005030 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005032:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005034:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005036:	3104      	adds	r1, #4

08005038 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005038:	480b      	ldr	r0, [pc, #44]	; (8005068 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800503c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800503e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005040:	d3f6      	bcc.n	8005030 <CopyDataInit>
  ldr  r2, =_sbss
 8005042:	4a0b      	ldr	r2, [pc, #44]	; (8005070 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005044:	e002      	b.n	800504c <LoopFillZerobss>

08005046 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005046:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005048:	f842 3b04 	str.w	r3, [r2], #4

0800504c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800504e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005050:	d3f9      	bcc.n	8005046 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005052:	f7ff feb3 	bl	8004dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005056:	f008 fff3 	bl	800e040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800505a:	f7ff fae5 	bl	8004628 <main>
  bx  lr    
 800505e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005060:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005064:	08011998 	.word	0x08011998
  ldr  r0, =_sdata
 8005068:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800506c:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8005070:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8005074:	200009f4 	.word	0x200009f4

08005078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005078:	e7fe      	b.n	8005078 <ADC_IRQHandler>

0800507a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800507e:	f000 fa5d 	bl	800553c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8005082:	20ca      	movs	r0, #202	; 0xca
 8005084:	f000 f95d 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8005088:	20c3      	movs	r0, #195	; 0xc3
 800508a:	f000 f967 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800508e:	2008      	movs	r0, #8
 8005090:	f000 f964 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8005094:	2050      	movs	r0, #80	; 0x50
 8005096:	f000 f961 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800509a:	20cf      	movs	r0, #207	; 0xcf
 800509c:	f000 f951 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80050a0:	2000      	movs	r0, #0
 80050a2:	f000 f95b 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80050a6:	20c1      	movs	r0, #193	; 0xc1
 80050a8:	f000 f958 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80050ac:	2030      	movs	r0, #48	; 0x30
 80050ae:	f000 f955 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80050b2:	20ed      	movs	r0, #237	; 0xed
 80050b4:	f000 f945 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80050b8:	2064      	movs	r0, #100	; 0x64
 80050ba:	f000 f94f 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80050be:	2003      	movs	r0, #3
 80050c0:	f000 f94c 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80050c4:	2012      	movs	r0, #18
 80050c6:	f000 f949 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80050ca:	2081      	movs	r0, #129	; 0x81
 80050cc:	f000 f946 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80050d0:	20e8      	movs	r0, #232	; 0xe8
 80050d2:	f000 f936 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80050d6:	2085      	movs	r0, #133	; 0x85
 80050d8:	f000 f940 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80050dc:	2000      	movs	r0, #0
 80050de:	f000 f93d 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80050e2:	2078      	movs	r0, #120	; 0x78
 80050e4:	f000 f93a 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80050e8:	20cb      	movs	r0, #203	; 0xcb
 80050ea:	f000 f92a 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80050ee:	2039      	movs	r0, #57	; 0x39
 80050f0:	f000 f934 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80050f4:	202c      	movs	r0, #44	; 0x2c
 80050f6:	f000 f931 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80050fa:	2000      	movs	r0, #0
 80050fc:	f000 f92e 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8005100:	2034      	movs	r0, #52	; 0x34
 8005102:	f000 f92b 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8005106:	2002      	movs	r0, #2
 8005108:	f000 f928 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800510c:	20f7      	movs	r0, #247	; 0xf7
 800510e:	f000 f918 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8005112:	2020      	movs	r0, #32
 8005114:	f000 f922 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8005118:	20ea      	movs	r0, #234	; 0xea
 800511a:	f000 f912 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800511e:	2000      	movs	r0, #0
 8005120:	f000 f91c 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8005124:	2000      	movs	r0, #0
 8005126:	f000 f919 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800512a:	20b1      	movs	r0, #177	; 0xb1
 800512c:	f000 f909 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8005130:	2000      	movs	r0, #0
 8005132:	f000 f913 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8005136:	201b      	movs	r0, #27
 8005138:	f000 f910 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800513c:	20b6      	movs	r0, #182	; 0xb6
 800513e:	f000 f900 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8005142:	200a      	movs	r0, #10
 8005144:	f000 f90a 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8005148:	20a2      	movs	r0, #162	; 0xa2
 800514a:	f000 f907 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800514e:	20c0      	movs	r0, #192	; 0xc0
 8005150:	f000 f8f7 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8005154:	2010      	movs	r0, #16
 8005156:	f000 f901 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800515a:	20c1      	movs	r0, #193	; 0xc1
 800515c:	f000 f8f1 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8005160:	2010      	movs	r0, #16
 8005162:	f000 f8fb 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8005166:	20c5      	movs	r0, #197	; 0xc5
 8005168:	f000 f8eb 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800516c:	2045      	movs	r0, #69	; 0x45
 800516e:	f000 f8f5 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8005172:	2015      	movs	r0, #21
 8005174:	f000 f8f2 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8005178:	20c7      	movs	r0, #199	; 0xc7
 800517a:	f000 f8e2 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800517e:	2090      	movs	r0, #144	; 0x90
 8005180:	f000 f8ec 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8005184:	2036      	movs	r0, #54	; 0x36
 8005186:	f000 f8dc 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800518a:	20c8      	movs	r0, #200	; 0xc8
 800518c:	f000 f8e6 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8005190:	20f2      	movs	r0, #242	; 0xf2
 8005192:	f000 f8d6 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8005196:	2000      	movs	r0, #0
 8005198:	f000 f8e0 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800519c:	20b0      	movs	r0, #176	; 0xb0
 800519e:	f000 f8d0 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80051a2:	20c2      	movs	r0, #194	; 0xc2
 80051a4:	f000 f8da 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80051a8:	20b6      	movs	r0, #182	; 0xb6
 80051aa:	f000 f8ca 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80051ae:	200a      	movs	r0, #10
 80051b0:	f000 f8d4 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80051b4:	20a7      	movs	r0, #167	; 0xa7
 80051b6:	f000 f8d1 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80051ba:	2027      	movs	r0, #39	; 0x27
 80051bc:	f000 f8ce 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80051c0:	2004      	movs	r0, #4
 80051c2:	f000 f8cb 	bl	800535c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80051c6:	202a      	movs	r0, #42	; 0x2a
 80051c8:	f000 f8bb 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f000 f8c5 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80051d2:	2000      	movs	r0, #0
 80051d4:	f000 f8c2 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80051d8:	2000      	movs	r0, #0
 80051da:	f000 f8bf 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80051de:	20ef      	movs	r0, #239	; 0xef
 80051e0:	f000 f8bc 	bl	800535c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80051e4:	202b      	movs	r0, #43	; 0x2b
 80051e6:	f000 f8ac 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f000 f8b6 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80051f0:	2000      	movs	r0, #0
 80051f2:	f000 f8b3 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80051f6:	2001      	movs	r0, #1
 80051f8:	f000 f8b0 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80051fc:	203f      	movs	r0, #63	; 0x3f
 80051fe:	f000 f8ad 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8005202:	20f6      	movs	r0, #246	; 0xf6
 8005204:	f000 f89d 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8005208:	2001      	movs	r0, #1
 800520a:	f000 f8a7 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800520e:	2000      	movs	r0, #0
 8005210:	f000 f8a4 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8005214:	2006      	movs	r0, #6
 8005216:	f000 f8a1 	bl	800535c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800521a:	202c      	movs	r0, #44	; 0x2c
 800521c:	f000 f891 	bl	8005342 <ili9341_WriteReg>
  LCD_Delay(200);
 8005220:	20c8      	movs	r0, #200	; 0xc8
 8005222:	f000 fa79 	bl	8005718 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8005226:	2026      	movs	r0, #38	; 0x26
 8005228:	f000 f88b 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800522c:	2001      	movs	r0, #1
 800522e:	f000 f895 	bl	800535c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8005232:	20e0      	movs	r0, #224	; 0xe0
 8005234:	f000 f885 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8005238:	200f      	movs	r0, #15
 800523a:	f000 f88f 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800523e:	2029      	movs	r0, #41	; 0x29
 8005240:	f000 f88c 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8005244:	2024      	movs	r0, #36	; 0x24
 8005246:	f000 f889 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800524a:	200c      	movs	r0, #12
 800524c:	f000 f886 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8005250:	200e      	movs	r0, #14
 8005252:	f000 f883 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8005256:	2009      	movs	r0, #9
 8005258:	f000 f880 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800525c:	204e      	movs	r0, #78	; 0x4e
 800525e:	f000 f87d 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8005262:	2078      	movs	r0, #120	; 0x78
 8005264:	f000 f87a 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8005268:	203c      	movs	r0, #60	; 0x3c
 800526a:	f000 f877 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800526e:	2009      	movs	r0, #9
 8005270:	f000 f874 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8005274:	2013      	movs	r0, #19
 8005276:	f000 f871 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800527a:	2005      	movs	r0, #5
 800527c:	f000 f86e 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8005280:	2017      	movs	r0, #23
 8005282:	f000 f86b 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8005286:	2011      	movs	r0, #17
 8005288:	f000 f868 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800528c:	2000      	movs	r0, #0
 800528e:	f000 f865 	bl	800535c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8005292:	20e1      	movs	r0, #225	; 0xe1
 8005294:	f000 f855 	bl	8005342 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8005298:	2000      	movs	r0, #0
 800529a:	f000 f85f 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800529e:	2016      	movs	r0, #22
 80052a0:	f000 f85c 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80052a4:	201b      	movs	r0, #27
 80052a6:	f000 f859 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80052aa:	2004      	movs	r0, #4
 80052ac:	f000 f856 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80052b0:	2011      	movs	r0, #17
 80052b2:	f000 f853 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80052b6:	2007      	movs	r0, #7
 80052b8:	f000 f850 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80052bc:	2031      	movs	r0, #49	; 0x31
 80052be:	f000 f84d 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80052c2:	2033      	movs	r0, #51	; 0x33
 80052c4:	f000 f84a 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80052c8:	2042      	movs	r0, #66	; 0x42
 80052ca:	f000 f847 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80052ce:	2005      	movs	r0, #5
 80052d0:	f000 f844 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80052d4:	200c      	movs	r0, #12
 80052d6:	f000 f841 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80052da:	200a      	movs	r0, #10
 80052dc:	f000 f83e 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80052e0:	2028      	movs	r0, #40	; 0x28
 80052e2:	f000 f83b 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80052e6:	202f      	movs	r0, #47	; 0x2f
 80052e8:	f000 f838 	bl	800535c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80052ec:	200f      	movs	r0, #15
 80052ee:	f000 f835 	bl	800535c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80052f2:	2011      	movs	r0, #17
 80052f4:	f000 f825 	bl	8005342 <ili9341_WriteReg>
  LCD_Delay(200);
 80052f8:	20c8      	movs	r0, #200	; 0xc8
 80052fa:	f000 fa0d 	bl	8005718 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80052fe:	2029      	movs	r0, #41	; 0x29
 8005300:	f000 f81f 	bl	8005342 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8005304:	202c      	movs	r0, #44	; 0x2c
 8005306:	f000 f81c 	bl	8005342 <ili9341_WriteReg>
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}

0800530e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8005312:	f000 f913 	bl	800553c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8005316:	2103      	movs	r1, #3
 8005318:	20d3      	movs	r0, #211	; 0xd3
 800531a:	f000 f82c 	bl	8005376 <ili9341_ReadData>
 800531e:	4603      	mov	r3, r0
 8005320:	b29b      	uxth	r3, r3
}
 8005322:	4618      	mov	r0, r3
 8005324:	bd80      	pop	{r7, pc}

08005326 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800532a:	2029      	movs	r0, #41	; 0x29
 800532c:	f000 f809 	bl	8005342 <ili9341_WriteReg>
}
 8005330:	bf00      	nop
 8005332:	bd80      	pop	{r7, pc}

08005334 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8005338:	2028      	movs	r0, #40	; 0x28
 800533a:	f000 f802 	bl	8005342 <ili9341_WriteReg>
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}

08005342 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	4603      	mov	r3, r0
 800534a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f98e 	bl	8005670 <LCD_IO_WriteReg>
}
 8005354:	bf00      	nop
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f95f 	bl	800562c <LCD_IO_WriteData>
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	4603      	mov	r3, r0
 800537e:	460a      	mov	r2, r1
 8005380:	80fb      	strh	r3, [r7, #6]
 8005382:	4613      	mov	r3, r2
 8005384:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8005386:	797a      	ldrb	r2, [r7, #5]
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f991 	bl	80056b4 <LCD_IO_ReadData>
 8005392:	4603      	mov	r3, r0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80053a0:	23f0      	movs	r3, #240	; 0xf0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80053b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80053c4:	4819      	ldr	r0, [pc, #100]	; (800542c <SPIx_Init+0x6c>)
 80053c6:	f005 fb73 	bl	800aab0 <HAL_SPI_GetState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d12b      	bne.n	8005428 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <SPIx_Init+0x6c>)
 80053d2:	4a17      	ldr	r2, [pc, #92]	; (8005430 <SPIx_Init+0x70>)
 80053d4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <SPIx_Init+0x6c>)
 80053d8:	2218      	movs	r2, #24
 80053da:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80053dc:	4b13      	ldr	r3, [pc, #76]	; (800542c <SPIx_Init+0x6c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <SPIx_Init+0x6c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <SPIx_Init+0x6c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <SPIx_Init+0x6c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <SPIx_Init+0x6c>)
 80053f6:	2207      	movs	r2, #7
 80053f8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80053fa:	4b0c      	ldr	r3, [pc, #48]	; (800542c <SPIx_Init+0x6c>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <SPIx_Init+0x6c>)
 8005402:	2200      	movs	r2, #0
 8005404:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <SPIx_Init+0x6c>)
 8005408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800540e:	4b07      	ldr	r3, [pc, #28]	; (800542c <SPIx_Init+0x6c>)
 8005410:	2200      	movs	r2, #0
 8005412:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <SPIx_Init+0x6c>)
 8005416:	f44f 7282 	mov.w	r2, #260	; 0x104
 800541a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800541c:	4803      	ldr	r0, [pc, #12]	; (800542c <SPIx_Init+0x6c>)
 800541e:	f000 f853 	bl	80054c8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8005422:	4802      	ldr	r0, [pc, #8]	; (800542c <SPIx_Init+0x6c>)
 8005424:	f004 fed9 	bl	800a1da <HAL_SPI_Init>
  } 
}
 8005428:	bf00      	nop
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200000ec 	.word	0x200000ec
 8005430:	40015000 	.word	0x40015000

08005434 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	b29a      	uxth	r2, r3
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <SPIx_Read+0x38>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f107 0108 	add.w	r1, r7, #8
 800544e:	4808      	ldr	r0, [pc, #32]	; (8005470 <SPIx_Read+0x3c>)
 8005450:	f005 f883 	bl	800a55a <HAL_SPI_Receive>
 8005454:	4603      	mov	r3, r0
 8005456:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005458:	7bfb      	ldrb	r3, [r7, #15]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800545e:	f000 f827 	bl	80054b0 <SPIx_Error>
  }
  
  return readvalue;
 8005462:	68bb      	ldr	r3, [r7, #8]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000044 	.word	0x20000044
 8005470:	200000ec 	.word	0x200000ec

08005474 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8005482:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <SPIx_Write+0x34>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	1db9      	adds	r1, r7, #6
 8005488:	2201      	movs	r2, #1
 800548a:	4808      	ldr	r0, [pc, #32]	; (80054ac <SPIx_Write+0x38>)
 800548c:	f004 ff31 	bl	800a2f2 <HAL_SPI_Transmit>
 8005490:	4603      	mov	r3, r0
 8005492:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800549a:	f000 f809 	bl	80054b0 <SPIx_Error>
  }
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000044 	.word	0x20000044
 80054ac:	200000ec 	.word	0x200000ec

080054b0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80054b4:	4803      	ldr	r0, [pc, #12]	; (80054c4 <SPIx_Error+0x14>)
 80054b6:	f004 fef4 	bl	800a2a2 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80054ba:	f7ff ff81 	bl	80053c0 <SPIx_Init>
}
 80054be:	bf00      	nop
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200000ec 	.word	0x200000ec

080054c8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	4b17      	ldr	r3, [pc, #92]	; (8005534 <SPIx_MspInit+0x6c>)
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	4a16      	ldr	r2, [pc, #88]	; (8005534 <SPIx_MspInit+0x6c>)
 80054da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054de:	6453      	str	r3, [r2, #68]	; 0x44
 80054e0:	4b14      	ldr	r3, [pc, #80]	; (8005534 <SPIx_MspInit+0x6c>)
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <SPIx_MspInit+0x6c>)
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	4a0f      	ldr	r2, [pc, #60]	; (8005534 <SPIx_MspInit+0x6c>)
 80054f6:	f043 0320 	orr.w	r3, r3, #32
 80054fa:	6313      	str	r3, [r2, #48]	; 0x30
 80054fc:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <SPIx_MspInit+0x6c>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8005508:	f44f 7360 	mov.w	r3, #896	; 0x380
 800550c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800550e:	2302      	movs	r3, #2
 8005510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8005512:	2302      	movs	r3, #2
 8005514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8005516:	2301      	movs	r3, #1
 8005518:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800551a:	2305      	movs	r3, #5
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4619      	mov	r1, r3
 8005524:	4804      	ldr	r0, [pc, #16]	; (8005538 <SPIx_MspInit+0x70>)
 8005526:	f001 fe4b 	bl	80071c0 <HAL_GPIO_Init>
}
 800552a:	bf00      	nop
 800552c:	3728      	adds	r7, #40	; 0x28
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	40021400 	.word	0x40021400

0800553c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <LCD_IO_Init+0xe0>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d164      	bne.n	8005614 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800554a:	4b34      	ldr	r3, [pc, #208]	; (800561c <LCD_IO_Init+0xe0>)
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8005550:	2300      	movs	r3, #0
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	4b32      	ldr	r3, [pc, #200]	; (8005620 <LCD_IO_Init+0xe4>)
 8005556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005558:	4a31      	ldr	r2, [pc, #196]	; (8005620 <LCD_IO_Init+0xe4>)
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6313      	str	r3, [r2, #48]	; 0x30
 8005560:	4b2f      	ldr	r3, [pc, #188]	; (8005620 <LCD_IO_Init+0xe4>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	60bb      	str	r3, [r7, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800556c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8005572:	2301      	movs	r3, #1
 8005574:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800557a:	2302      	movs	r3, #2
 800557c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800557e:	f107 030c 	add.w	r3, r7, #12
 8005582:	4619      	mov	r1, r3
 8005584:	4827      	ldr	r0, [pc, #156]	; (8005624 <LCD_IO_Init+0xe8>)
 8005586:	f001 fe1b 	bl	80071c0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	607b      	str	r3, [r7, #4]
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <LCD_IO_Init+0xe4>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	4a23      	ldr	r2, [pc, #140]	; (8005620 <LCD_IO_Init+0xe4>)
 8005594:	f043 0308 	orr.w	r3, r3, #8
 8005598:	6313      	str	r3, [r2, #48]	; 0x30
 800559a:	4b21      	ldr	r3, [pc, #132]	; (8005620 <LCD_IO_Init+0xe4>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80055a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80055ac:	2301      	movs	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80055b4:	2302      	movs	r3, #2
 80055b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	4619      	mov	r1, r3
 80055be:	4819      	ldr	r0, [pc, #100]	; (8005624 <LCD_IO_Init+0xe8>)
 80055c0:	f001 fdfe 	bl	80071c0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80055c4:	2300      	movs	r3, #0
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4b15      	ldr	r3, [pc, #84]	; (8005620 <LCD_IO_Init+0xe4>)
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <LCD_IO_Init+0xe4>)
 80055ce:	f043 0304 	orr.w	r3, r3, #4
 80055d2:	6313      	str	r3, [r2, #48]	; 0x30
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <LCD_IO_Init+0xe4>)
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80055e0:	2304      	movs	r3, #4
 80055e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80055e4:	2301      	movs	r3, #1
 80055e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80055ec:	2302      	movs	r3, #2
 80055ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	4619      	mov	r1, r3
 80055f6:	480c      	ldr	r0, [pc, #48]	; (8005628 <LCD_IO_Init+0xec>)
 80055f8:	f001 fde2 	bl	80071c0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80055fc:	2200      	movs	r2, #0
 80055fe:	2104      	movs	r1, #4
 8005600:	4809      	ldr	r0, [pc, #36]	; (8005628 <LCD_IO_Init+0xec>)
 8005602:	f002 f891 	bl	8007728 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8005606:	2201      	movs	r2, #1
 8005608:	2104      	movs	r1, #4
 800560a:	4807      	ldr	r0, [pc, #28]	; (8005628 <LCD_IO_Init+0xec>)
 800560c:	f002 f88c 	bl	8007728 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8005610:	f7ff fed6 	bl	80053c0 <SPIx_Init>
  }
}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000144 	.word	0x20000144
 8005620:	40023800 	.word	0x40023800
 8005624:	40020c00 	.word	0x40020c00
 8005628:	40020800 	.word	0x40020800

0800562c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8005636:	2201      	movs	r2, #1
 8005638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800563c:	480a      	ldr	r0, [pc, #40]	; (8005668 <LCD_IO_WriteData+0x3c>)
 800563e:	f002 f873 	bl	8007728 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8005642:	2200      	movs	r2, #0
 8005644:	2104      	movs	r1, #4
 8005646:	4809      	ldr	r0, [pc, #36]	; (800566c <LCD_IO_WriteData+0x40>)
 8005648:	f002 f86e 	bl	8007728 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ff10 	bl	8005474 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8005654:	2201      	movs	r2, #1
 8005656:	2104      	movs	r1, #4
 8005658:	4804      	ldr	r0, [pc, #16]	; (800566c <LCD_IO_WriteData+0x40>)
 800565a:	f002 f865 	bl	8007728 <HAL_GPIO_WritePin>
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40020c00 	.word	0x40020c00
 800566c:	40020800 	.word	0x40020800

08005670 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800567a:	2200      	movs	r2, #0
 800567c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005680:	480a      	ldr	r0, [pc, #40]	; (80056ac <LCD_IO_WriteReg+0x3c>)
 8005682:	f002 f851 	bl	8007728 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8005686:	2200      	movs	r2, #0
 8005688:	2104      	movs	r1, #4
 800568a:	4809      	ldr	r0, [pc, #36]	; (80056b0 <LCD_IO_WriteReg+0x40>)
 800568c:	f002 f84c 	bl	8007728 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	b29b      	uxth	r3, r3
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff feed 	bl	8005474 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800569a:	2201      	movs	r2, #1
 800569c:	2104      	movs	r1, #4
 800569e:	4804      	ldr	r0, [pc, #16]	; (80056b0 <LCD_IO_WriteReg+0x40>)
 80056a0:	f002 f842 	bl	8007728 <HAL_GPIO_WritePin>
}
 80056a4:	bf00      	nop
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40020c00 	.word	0x40020c00
 80056b0:	40020800 	.word	0x40020800

080056b4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	460a      	mov	r2, r1
 80056be:	80fb      	strh	r3, [r7, #6]
 80056c0:	4613      	mov	r3, r2
 80056c2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80056c8:	2200      	movs	r2, #0
 80056ca:	2104      	movs	r1, #4
 80056cc:	4810      	ldr	r0, [pc, #64]	; (8005710 <LCD_IO_ReadData+0x5c>)
 80056ce:	f002 f82b 	bl	8007728 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80056d2:	2200      	movs	r2, #0
 80056d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056d8:	480e      	ldr	r0, [pc, #56]	; (8005714 <LCD_IO_ReadData+0x60>)
 80056da:	f002 f825 	bl	8007728 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fec7 	bl	8005474 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80056e6:	797b      	ldrb	r3, [r7, #5]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff fea3 	bl	8005434 <SPIx_Read>
 80056ee:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80056f0:	2201      	movs	r2, #1
 80056f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056f6:	4807      	ldr	r0, [pc, #28]	; (8005714 <LCD_IO_ReadData+0x60>)
 80056f8:	f002 f816 	bl	8007728 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80056fc:	2201      	movs	r2, #1
 80056fe:	2104      	movs	r1, #4
 8005700:	4803      	ldr	r0, [pc, #12]	; (8005710 <LCD_IO_ReadData+0x5c>)
 8005702:	f002 f811 	bl	8007728 <HAL_GPIO_WritePin>
  
  return readvalue;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40020800 	.word	0x40020800
 8005714:	40020c00 	.word	0x40020c00

08005718 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fca3 	bl	800606c <HAL_Delay>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8005734:	4b2d      	ldr	r3, [pc, #180]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005736:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <BSP_LCD_Init+0xc0>)
 8005738:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800573a:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <BSP_LCD_Init+0xbc>)
 800573c:	2209      	movs	r2, #9
 800573e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8005740:	4b2a      	ldr	r3, [pc, #168]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005742:	2201      	movs	r2, #1
 8005744:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8005746:	4b29      	ldr	r3, [pc, #164]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005748:	221d      	movs	r2, #29
 800574a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800574c:	4b27      	ldr	r3, [pc, #156]	; (80057ec <BSP_LCD_Init+0xbc>)
 800574e:	2203      	movs	r2, #3
 8005750:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8005752:	4b26      	ldr	r3, [pc, #152]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005754:	f240 120d 	movw	r2, #269	; 0x10d
 8005758:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800575a:	4b24      	ldr	r3, [pc, #144]	; (80057ec <BSP_LCD_Init+0xbc>)
 800575c:	f240 1243 	movw	r2, #323	; 0x143
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8005762:	4b22      	ldr	r3, [pc, #136]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005764:	f240 1217 	movw	r2, #279	; 0x117
 8005768:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800576a:	4b20      	ldr	r3, [pc, #128]	; (80057ec <BSP_LCD_Init+0xbc>)
 800576c:	f240 1247 	movw	r2, #327	; 0x147
 8005770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8005772:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800577a:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <BSP_LCD_Init+0xbc>)
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8005782:	4b1a      	ldr	r3, [pc, #104]	; (80057ec <BSP_LCD_Init+0xbc>)
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <BSP_LCD_Init+0xc4>)
 800578c:	2208      	movs	r2, #8
 800578e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005790:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <BSP_LCD_Init+0xc4>)
 8005792:	22c0      	movs	r2, #192	; 0xc0
 8005794:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8005796:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <BSP_LCD_Init+0xc4>)
 8005798:	2204      	movs	r2, #4
 800579a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <BSP_LCD_Init+0xc4>)
 800579e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80057a4:	4813      	ldr	r0, [pc, #76]	; (80057f4 <BSP_LCD_Init+0xc4>)
 80057a6:	f004 fadb 	bl	8009d60 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80057aa:	4b10      	ldr	r3, [pc, #64]	; (80057ec <BSP_LCD_Init+0xbc>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <BSP_LCD_Init+0xbc>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80057b6:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <BSP_LCD_Init+0xbc>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80057bc:	4b0b      	ldr	r3, [pc, #44]	; (80057ec <BSP_LCD_Init+0xbc>)
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80057c2:	f000 f913 	bl	80059ec <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80057c6:	4809      	ldr	r0, [pc, #36]	; (80057ec <BSP_LCD_Init+0xbc>)
 80057c8:	f003 fb66 	bl	8008e98 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <BSP_LCD_Init+0xc8>)
 80057ce:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <BSP_LCD_Init+0xcc>)
 80057d0:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80057d2:	4b09      	ldr	r3, [pc, #36]	; (80057f8 <BSP_LCD_Init+0xc8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80057da:	f000 fa3b 	bl	8005c54 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80057de:	4808      	ldr	r0, [pc, #32]	; (8005800 <BSP_LCD_Init+0xd0>)
 80057e0:	f000 f8b2 	bl	8005948 <BSP_LCD_SetFont>

  return LCD_OK;
 80057e4:	2300      	movs	r3, #0
}  
 80057e6:	4618      	mov	r0, r3
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	2000067c 	.word	0x2000067c
 80057f0:	40016800 	.word	0x40016800
 80057f4:	20000188 	.word	0x20000188
 80057f8:	20000724 	.word	0x20000724
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	20000048 	.word	0x20000048

08005804 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <BSP_LCD_GetXSize+0x14>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	4798      	blx	r3
 8005810:	4603      	mov	r3, r0
}
 8005812:	4618      	mov	r0, r3
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000724 	.word	0x20000724

0800581c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8005820:	4b03      	ldr	r3, [pc, #12]	; (8005830 <BSP_LCD_GetYSize+0x14>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	4798      	blx	r3
 8005828:	4603      	mov	r3, r0
}
 800582a:	4618      	mov	r0, r3
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000724 	.word	0x20000724

08005834 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8005834:	b580      	push	{r7, lr}
 8005836:	b090      	sub	sp, #64	; 0x40
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	6039      	str	r1, [r7, #0]
 800583e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8005844:	f7ff ffde 	bl	8005804 <BSP_LCD_GetXSize>
 8005848:	4603      	mov	r3, r0
 800584a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005850:	f7ff ffe4 	bl	800581c <BSP_LCD_GetYSize>
 8005854:	4603      	mov	r3, r0
 8005856:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8005860:	23ff      	movs	r3, #255	; 0xff
 8005862:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800587a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005880:	2307      	movs	r3, #7
 8005882:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8005884:	f7ff ffbe 	bl	8005804 <BSP_LCD_GetXSize>
 8005888:	4603      	mov	r3, r0
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800588c:	f7ff ffc6 	bl	800581c <BSP_LCD_GetYSize>
 8005890:	4603      	mov	r3, r0
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	f107 030c 	add.w	r3, r7, #12
 800589a:	4619      	mov	r1, r3
 800589c:	4814      	ldr	r0, [pc, #80]	; (80058f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800589e:	f003 fbcb 	bl	8009038 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	4913      	ldr	r1, [pc, #76]	; (80058f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3304      	adds	r3, #4
 80058b2:	f04f 32ff 	mov.w	r2, #4294967295
 80058b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	490e      	ldr	r1, [pc, #56]	; (80058f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80058bc:	4613      	mov	r3, r2
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3308      	adds	r3, #8
 80058c8:	4a0b      	ldr	r2, [pc, #44]	; (80058f8 <BSP_LCD_LayerDefaultInit+0xc4>)
 80058ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80058cc:	88fa      	ldrh	r2, [r7, #6]
 80058ce:	4909      	ldr	r1, [pc, #36]	; (80058f4 <BSP_LCD_LayerDefaultInit+0xc0>)
 80058d0:	4613      	mov	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	4413      	add	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80058de:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80058e0:	4803      	ldr	r0, [pc, #12]	; (80058f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80058e2:	f003 fbe7 	bl	80090b4 <HAL_LTDC_EnableDither>
}
 80058e6:	bf00      	nop
 80058e8:	3740      	adds	r7, #64	; 0x40
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000067c 	.word	0x2000067c
 80058f4:	200001bc 	.word	0x200001bc
 80058f8:	20000048 	.word	0x20000048

080058fc <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005904:	4a04      	ldr	r2, [pc, #16]	; (8005918 <BSP_LCD_SelectLayer+0x1c>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6013      	str	r3, [r2, #0]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	200001b8 	.word	0x200001b8

0800591c <BSP_LCD_GetBackColor>:
/**
  * @brief  Gets the LCD Background color. 
  * @retval Background color  
  */
uint32_t BSP_LCD_GetBackColor(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].BackColor;
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <BSP_LCD_GetBackColor+0x24>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4907      	ldr	r1, [pc, #28]	; (8005944 <BSP_LCD_GetBackColor+0x28>)
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	3304      	adds	r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
}
 8005934:	4618      	mov	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	200001b8 	.word	0x200001b8
 8005944:	200001bc 	.word	0x200001bc

08005948 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <BSP_LCD_SetFont+0x2c>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4908      	ldr	r1, [pc, #32]	; (8005978 <BSP_LCD_SetFont+0x30>)
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	3308      	adds	r3, #8
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200001b8 	.word	0x200001b8
 8005978:	200001bc 	.word	0x200001bc

0800597c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800597c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800597e:	b085      	sub	sp, #20
 8005980:	af02      	add	r7, sp, #8
 8005982:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <BSP_LCD_Clear+0x48>)
 8005986:	681c      	ldr	r4, [r3, #0]
 8005988:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <BSP_LCD_Clear+0x48>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <BSP_LCD_Clear+0x4c>)
 800598e:	2134      	movs	r1, #52	; 0x34
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	4413      	add	r3, r2
 8005996:	335c      	adds	r3, #92	; 0x5c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461d      	mov	r5, r3
 800599c:	f7ff ff32 	bl	8005804 <BSP_LCD_GetXSize>
 80059a0:	4606      	mov	r6, r0
 80059a2:	f7ff ff3b 	bl	800581c <BSP_LCD_GetYSize>
 80059a6:	4602      	mov	r2, r0
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	4632      	mov	r2, r6
 80059b4:	4629      	mov	r1, r5
 80059b6:	4620      	mov	r0, r4
 80059b8:	f000 f914 	bl	8005be4 <FillBuffer>
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c4:	200001b8 	.word	0x200001b8
 80059c8:	2000067c 	.word	0x2000067c

080059cc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <BSP_LCD_DisplayOn+0x1c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80059da:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <BSP_LCD_DisplayOn+0x1c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	4798      	blx	r3
  }
}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000724 	.word	0x20000724

080059ec <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08e      	sub	sp, #56	; 0x38
 80059f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	4a60      	ldr	r2, [pc, #384]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 80059fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a00:	6453      	str	r3, [r2, #68]	; 0x44
 8005a02:	4b5e      	ldr	r3, [pc, #376]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a0a:	623b      	str	r3, [r7, #32]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	4b5a      	ldr	r3, [pc, #360]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	4a59      	ldr	r2, [pc, #356]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1e:	4b57      	ldr	r3, [pc, #348]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	4b53      	ldr	r3, [pc, #332]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	4a52      	ldr	r2, [pc, #328]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	6313      	str	r3, [r2, #48]	; 0x30
 8005a3a:	4b50      	ldr	r3, [pc, #320]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]
 8005a4a:	4b4c      	ldr	r3, [pc, #304]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4a4b      	ldr	r2, [pc, #300]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b49      	ldr	r3, [pc, #292]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	4b45      	ldr	r3, [pc, #276]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a44      	ldr	r2, [pc, #272]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a6c:	f043 0304 	orr.w	r3, r3, #4
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
 8005a72:	4b42      	ldr	r3, [pc, #264]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	4b3e      	ldr	r3, [pc, #248]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a3d      	ldr	r2, [pc, #244]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
 8005a9e:	4b37      	ldr	r3, [pc, #220]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	4a36      	ldr	r2, [pc, #216]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005aa4:	f043 0320 	orr.w	r3, r3, #32
 8005aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aaa:	4b34      	ldr	r3, [pc, #208]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	60bb      	str	r3, [r7, #8]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	607b      	str	r3, [r7, #4]
 8005aba:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	4a2f      	ldr	r2, [pc, #188]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ac6:	4b2d      	ldr	r3, [pc, #180]	; (8005b7c <BSP_LCD_MspInit+0x190>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	607b      	str	r3, [r7, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8005ad2:	f641 0358 	movw	r3, #6232	; 0x1858
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8005ae4:	230e      	movs	r3, #14
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8005ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aec:	4619      	mov	r1, r3
 8005aee:	4824      	ldr	r0, [pc, #144]	; (8005b80 <BSP_LCD_MspInit+0x194>)
 8005af0:	f001 fb66 	bl	80071c0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8005af4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afe:	4619      	mov	r1, r3
 8005b00:	4820      	ldr	r0, [pc, #128]	; (8005b84 <BSP_LCD_MspInit+0x198>)
 8005b02:	f001 fb5d 	bl	80071c0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8005b06:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8005b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b10:	4619      	mov	r1, r3
 8005b12:	481d      	ldr	r0, [pc, #116]	; (8005b88 <BSP_LCD_MspInit+0x19c>)
 8005b14:	f001 fb54 	bl	80071c0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8005b18:	2348      	movs	r3, #72	; 0x48
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b20:	4619      	mov	r1, r3
 8005b22:	481a      	ldr	r0, [pc, #104]	; (8005b8c <BSP_LCD_MspInit+0x1a0>)
 8005b24:	f001 fb4c 	bl	80071c0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8005b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8005b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b32:	4619      	mov	r1, r3
 8005b34:	4816      	ldr	r0, [pc, #88]	; (8005b90 <BSP_LCD_MspInit+0x1a4>)
 8005b36:	f001 fb43 	bl	80071c0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8005b3a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b44:	4619      	mov	r1, r3
 8005b46:	4813      	ldr	r0, [pc, #76]	; (8005b94 <BSP_LCD_MspInit+0x1a8>)
 8005b48:	f001 fb3a 	bl	80071c0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8005b50:	2309      	movs	r3, #9
 8005b52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b58:	4619      	mov	r1, r3
 8005b5a:	480a      	ldr	r0, [pc, #40]	; (8005b84 <BSP_LCD_MspInit+0x198>)
 8005b5c:	f001 fb30 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8005b60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4809      	ldr	r0, [pc, #36]	; (8005b94 <BSP_LCD_MspInit+0x1a8>)
 8005b6e:	f001 fb27 	bl	80071c0 <HAL_GPIO_Init>
}
 8005b72:	bf00      	nop
 8005b74:	3738      	adds	r7, #56	; 0x38
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40020000 	.word	0x40020000
 8005b84:	40020400 	.word	0x40020400
 8005b88:	40020800 	.word	0x40020800
 8005b8c:	40020c00 	.word	0x40020c00
 8005b90:	40021400 	.word	0x40021400
 8005b94:	40021800 	.word	0x40021800

08005b98 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8005b98:	b5b0      	push	{r4, r5, r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	603a      	str	r2, [r7, #0]
 8005ba2:	80fb      	strh	r3, [r7, #6]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <BSP_LCD_DrawPixel+0x44>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <BSP_LCD_DrawPixel+0x48>)
 8005bae:	2134      	movs	r1, #52	; 0x34
 8005bb0:	fb01 f303 	mul.w	r3, r1, r3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	335c      	adds	r3, #92	; 0x5c
 8005bb8:	681c      	ldr	r4, [r3, #0]
 8005bba:	88bd      	ldrh	r5, [r7, #4]
 8005bbc:	f7ff fe22 	bl	8005804 <BSP_LCD_GetXSize>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	fb03 f205 	mul.w	r2, r3, r5
 8005bc6:	88fb      	ldrh	r3, [r7, #6]
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4423      	add	r3, r4
 8005bce:	461a      	mov	r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bdb0      	pop	{r4, r5, r7, pc}
 8005bdc:	200001b8 	.word	0x200001b8
 8005be0:	2000067c 	.word	0x2000067c

08005be4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8005bf2:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <FillBuffer+0x68>)
 8005bf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005bf8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <FillBuffer+0x68>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8005c00:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <FillBuffer+0x68>)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <FillBuffer+0x68>)
 8005c08:	4a11      	ldr	r2, [pc, #68]	; (8005c50 <FillBuffer+0x6c>)
 8005c0a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8005c0c:	480f      	ldr	r0, [pc, #60]	; (8005c4c <FillBuffer+0x68>)
 8005c0e:	f000 ff3b 	bl	8006a88 <HAL_DMA2D_Init>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	480c      	ldr	r0, [pc, #48]	; (8005c4c <FillBuffer+0x68>)
 8005c1c:	f001 f9a2 	bl	8006f64 <HAL_DMA2D_ConfigLayer>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69f9      	ldr	r1, [r7, #28]
 8005c30:	4806      	ldr	r0, [pc, #24]	; (8005c4c <FillBuffer+0x68>)
 8005c32:	f000 ff72 	bl	8006b1a <HAL_DMA2D_Start>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8005c3c:	210a      	movs	r1, #10
 8005c3e:	4803      	ldr	r0, [pc, #12]	; (8005c4c <FillBuffer+0x68>)
 8005c40:	f000 ff96 	bl	8006b70 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20000148 	.word	0x20000148
 8005c50:	4002b000 	.word	0x4002b000

08005c54 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005c58:	4b29      	ldr	r3, [pc, #164]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <BSP_SDRAM_Init+0xb0>)
 8005c5c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8005c5e:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c60:	2202      	movs	r2, #2
 8005c62:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8005c64:	4b28      	ldr	r3, [pc, #160]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c66:	2207      	movs	r2, #7
 8005c68:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8005c6a:	4b27      	ldr	r3, [pc, #156]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8005c70:	4b25      	ldr	r3, [pc, #148]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c72:	2207      	movs	r2, #7
 8005c74:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8005c76:	4b24      	ldr	r3, [pc, #144]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c78:	2202      	movs	r2, #2
 8005c7a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8005c7c:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c7e:	2202      	movs	r2, #2
 8005c80:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005c84:	2202      	movs	r2, #2
 8005c86:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005c94:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005c96:	2204      	movs	r2, #4
 8005c98:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005c9a:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005c9c:	2210      	movs	r2, #16
 8005c9e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005ca2:	2240      	movs	r2, #64	; 0x40
 8005ca4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005ca8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005cac:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005cae:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005cb4:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cba:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005cc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	480c      	ldr	r0, [pc, #48]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005cce:	f000 f87f 	bl	8005dd0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8005cd2:	490d      	ldr	r1, [pc, #52]	; (8005d08 <BSP_SDRAM_Init+0xb4>)
 8005cd4:	480a      	ldr	r0, [pc, #40]	; (8005d00 <BSP_SDRAM_Init+0xac>)
 8005cd6:	f004 fa01 	bl	800a0dc <HAL_SDRAM_Init>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <BSP_SDRAM_Init+0xb8>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e002      	b.n	8005cee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <BSP_SDRAM_Init+0xb8>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005cee:	f240 506a 	movw	r0, #1386	; 0x56a
 8005cf2:	f000 f80d 	bl	8005d10 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005cf6:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <BSP_SDRAM_Init+0xb8>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	200001d4 	.word	0x200001d4
 8005d04:	a0000140 	.word	0xa0000140
 8005d08:	20000208 	.word	0x20000208
 8005d0c:	20000050 	.word	0x20000050

08005d10 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8005d1c:	4b2a      	ldr	r3, [pc, #168]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d22:	4b29      	ldr	r3, [pc, #164]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d24:	2208      	movs	r2, #8
 8005d26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005d28:	4b27      	ldr	r3, [pc, #156]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d2e:	4b26      	ldr	r3, [pc, #152]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d38:	4923      	ldr	r1, [pc, #140]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d3a:	4824      	ldr	r0, [pc, #144]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d3c:	f004 fa02 	bl	800a144 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005d40:	2001      	movs	r0, #1
 8005d42:	f000 f993 	bl	800606c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8005d46:	4b20      	ldr	r3, [pc, #128]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d48:	2202      	movs	r2, #2
 8005d4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d4c:	4b1e      	ldr	r3, [pc, #120]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d4e:	2208      	movs	r2, #8
 8005d50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005d52:	4b1d      	ldr	r3, [pc, #116]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d58:	4b1b      	ldr	r3, [pc, #108]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8005d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d62:	4919      	ldr	r1, [pc, #100]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d64:	4819      	ldr	r0, [pc, #100]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d66:	f004 f9ed 	bl	800a144 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005d6a:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d70:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d72:	2208      	movs	r2, #8
 8005d74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d78:	2204      	movs	r2, #4
 8005d7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8005d7c:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d86:	4910      	ldr	r1, [pc, #64]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d88:	4810      	ldr	r0, [pc, #64]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005d8a:	f004 f9db 	bl	800a144 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005d8e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8005d92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8005d94:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d96:	2204      	movs	r2, #4
 8005d98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8005da0:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005da2:	2201      	movs	r2, #1
 8005da4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a07      	ldr	r2, [pc, #28]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005daa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8005dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005db0:	4905      	ldr	r1, [pc, #20]	; (8005dc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005db2:	4806      	ldr	r0, [pc, #24]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005db4:	f004 f9c6 	bl	800a144 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8005db8:	6879      	ldr	r1, [r7, #4]
 8005dba:	4804      	ldr	r0, [pc, #16]	; (8005dcc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005dbc:	f004 f9ed 	bl	800a19a <HAL_SDRAM_ProgramRefreshRate>
}
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000224 	.word	0x20000224
 8005dcc:	200001d4 	.word	0x200001d4

08005dd0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b090      	sub	sp, #64	; 0x40
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80ec 	beq.w	8005fba <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005de2:	2300      	movs	r3, #0
 8005de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de6:	4b77      	ldr	r3, [pc, #476]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	4a76      	ldr	r2, [pc, #472]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	6393      	str	r3, [r2, #56]	; 0x38
 8005df2:	4b74      	ldr	r3, [pc, #464]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005dfe:	2300      	movs	r3, #0
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	4b70      	ldr	r3, [pc, #448]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	4a6f      	ldr	r2, [pc, #444]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0e:	4b6d      	ldr	r3, [pc, #436]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	623b      	str	r3, [r7, #32]
 8005e1e:	4b69      	ldr	r3, [pc, #420]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a68      	ldr	r2, [pc, #416]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e24:	f043 0302 	orr.w	r3, r3, #2
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b66      	ldr	r3, [pc, #408]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	623b      	str	r3, [r7, #32]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	4b62      	ldr	r3, [pc, #392]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3e:	4a61      	ldr	r2, [pc, #388]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e40:	f043 0304 	orr.w	r3, r3, #4
 8005e44:	6313      	str	r3, [r2, #48]	; 0x30
 8005e46:	4b5f      	ldr	r3, [pc, #380]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e52:	2300      	movs	r3, #0
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	4b5b      	ldr	r3, [pc, #364]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	4a5a      	ldr	r2, [pc, #360]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	6313      	str	r3, [r2, #48]	; 0x30
 8005e62:	4b58      	ldr	r3, [pc, #352]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	61bb      	str	r3, [r7, #24]
 8005e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	4b54      	ldr	r3, [pc, #336]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	4a53      	ldr	r2, [pc, #332]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e78:	f043 0310 	orr.w	r3, r3, #16
 8005e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e7e:	4b51      	ldr	r3, [pc, #324]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	613b      	str	r3, [r7, #16]
 8005e8e:	4b4d      	ldr	r3, [pc, #308]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	4a4c      	ldr	r2, [pc, #304]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e94:	f043 0320 	orr.w	r3, r3, #32
 8005e98:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9a:	4b4a      	ldr	r3, [pc, #296]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b46      	ldr	r3, [pc, #280]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	4a45      	ldr	r2, [pc, #276]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb6:	4b43      	ldr	r3, [pc, #268]	; (8005fc4 <BSP_SDRAM_MspInit+0x1f4>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8005ece:	230c      	movs	r3, #12
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8005ed2:	2360      	movs	r3, #96	; 0x60
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8005ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eda:	4619      	mov	r1, r3
 8005edc:	483a      	ldr	r0, [pc, #232]	; (8005fc8 <BSP_SDRAM_MspInit+0x1f8>)
 8005ede:	f001 f96f 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8005ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005eea:	4619      	mov	r1, r3
 8005eec:	4837      	ldr	r0, [pc, #220]	; (8005fcc <BSP_SDRAM_MspInit+0x1fc>)
 8005eee:	f001 f967 	bl	80071c0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8005ef2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8005ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005efc:	4619      	mov	r1, r3
 8005efe:	4834      	ldr	r0, [pc, #208]	; (8005fd0 <BSP_SDRAM_MspInit+0x200>)
 8005f00:	f001 f95e 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8005f04:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8005f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4830      	ldr	r0, [pc, #192]	; (8005fd4 <BSP_SDRAM_MspInit+0x204>)
 8005f12:	f001 f955 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8005f16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8005f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f20:	4619      	mov	r1, r3
 8005f22:	482d      	ldr	r0, [pc, #180]	; (8005fd8 <BSP_SDRAM_MspInit+0x208>)
 8005f24:	f001 f94c 	bl	80071c0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8005f28:	f248 1333 	movw	r3, #33075	; 0x8133
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8005f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f32:	4619      	mov	r1, r3
 8005f34:	4829      	ldr	r0, [pc, #164]	; (8005fdc <BSP_SDRAM_MspInit+0x20c>)
 8005f36:	f001 f943 	bl	80071c0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005f3a:	4b29      	ldr	r3, [pc, #164]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005f40:	4b27      	ldr	r3, [pc, #156]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005f46:	4b26      	ldr	r3, [pc, #152]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8005f4e:	4b24      	ldr	r3, [pc, #144]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f54:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f56:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f5c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005f5e:	4b20      	ldr	r3, [pc, #128]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f64:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f72:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005f7a:	4b19      	ldr	r3, [pc, #100]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005f80:	4b17      	ldr	r3, [pc, #92]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005f86:	4b16      	ldr	r3, [pc, #88]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8005f8c:	4b14      	ldr	r3, [pc, #80]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f8e:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <BSP_SDRAM_MspInit+0x214>)
 8005f90:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
 8005f98:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8005f9e:	4810      	ldr	r0, [pc, #64]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005fa0:	f000 fa32 	bl	8006408 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8005fa4:	480e      	ldr	r0, [pc, #56]	; (8005fe0 <BSP_SDRAM_MspInit+0x210>)
 8005fa6:	f000 f981 	bl	80062ac <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	210f      	movs	r1, #15
 8005fae:	2038      	movs	r0, #56	; 0x38
 8005fb0:	f000 f936 	bl	8006220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005fb4:	2038      	movs	r0, #56	; 0x38
 8005fb6:	f000 f94f 	bl	8006258 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8005fba:	bf00      	nop
 8005fbc:	3740      	adds	r7, #64	; 0x40
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	40020400 	.word	0x40020400
 8005fcc:	40020800 	.word	0x40020800
 8005fd0:	40020c00 	.word	0x40020c00
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40021400 	.word	0x40021400
 8005fdc:	40021800 	.word	0x40021800
 8005fe0:	20000234 	.word	0x20000234
 8005fe4:	40026410 	.word	0x40026410

08005fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fec:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <HAL_Init+0x40>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0d      	ldr	r2, [pc, #52]	; (8006028 <HAL_Init+0x40>)
 8005ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ff8:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_Init+0x40>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <HAL_Init+0x40>)
 8005ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006004:	4b08      	ldr	r3, [pc, #32]	; (8006028 <HAL_Init+0x40>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a07      	ldr	r2, [pc, #28]	; (8006028 <HAL_Init+0x40>)
 800600a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006010:	2003      	movs	r0, #3
 8006012:	f000 f8fa 	bl	800620a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006016:	2000      	movs	r0, #0
 8006018:	f7fe fda2 	bl	8004b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800601c:	f7fe fd74 	bl	8004b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40023c00 	.word	0x40023c00

0800602c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006030:	4b06      	ldr	r3, [pc, #24]	; (800604c <HAL_IncTick+0x20>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	461a      	mov	r2, r3
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_IncTick+0x24>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4413      	add	r3, r2
 800603c:	4a04      	ldr	r2, [pc, #16]	; (8006050 <HAL_IncTick+0x24>)
 800603e:	6013      	str	r3, [r2, #0]
}
 8006040:	bf00      	nop
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000058 	.word	0x20000058
 8006050:	20000728 	.word	0x20000728

08006054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  return uwTick;
 8006058:	4b03      	ldr	r3, [pc, #12]	; (8006068 <HAL_GetTick+0x14>)
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000728 	.word	0x20000728

0800606c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006074:	f7ff ffee 	bl	8006054 <HAL_GetTick>
 8006078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d005      	beq.n	8006092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006086:	4b09      	ldr	r3, [pc, #36]	; (80060ac <HAL_Delay+0x40>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006092:	bf00      	nop
 8006094:	f7ff ffde 	bl	8006054 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d8f7      	bhi.n	8006094 <HAL_Delay+0x28>
  {
  }
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000058 	.word	0x20000058

080060b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80060c0:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <__NVIC_SetPriorityGrouping+0x44>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060cc:	4013      	ands	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <__NVIC_SetPriorityGrouping+0x44>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	60d3      	str	r3, [r2, #12]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	e000ed00 	.word	0xe000ed00

080060f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <__NVIC_GetPriorityGrouping+0x18>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	0a1b      	lsrs	r3, r3, #8
 8006102:	f003 0307 	and.w	r3, r3, #7
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	2b00      	cmp	r3, #0
 8006124:	db0b      	blt.n	800613e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	f003 021f 	and.w	r2, r3, #31
 800612c:	4907      	ldr	r1, [pc, #28]	; (800614c <__NVIC_EnableIRQ+0x38>)
 800612e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	2001      	movs	r0, #1
 8006136:	fa00 f202 	lsl.w	r2, r0, r2
 800613a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800613e:	bf00      	nop
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	e000e100 	.word	0xe000e100

08006150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	4603      	mov	r3, r0
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800615c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db0a      	blt.n	800617a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	490c      	ldr	r1, [pc, #48]	; (800619c <__NVIC_SetPriority+0x4c>)
 800616a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800616e:	0112      	lsls	r2, r2, #4
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	440b      	add	r3, r1
 8006174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006178:	e00a      	b.n	8006190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	4908      	ldr	r1, [pc, #32]	; (80061a0 <__NVIC_SetPriority+0x50>)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	3b04      	subs	r3, #4
 8006188:	0112      	lsls	r2, r2, #4
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	440b      	add	r3, r1
 800618e:	761a      	strb	r2, [r3, #24]
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	e000e100 	.word	0xe000e100
 80061a0:	e000ed00 	.word	0xe000ed00

080061a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b089      	sub	sp, #36	; 0x24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f1c3 0307 	rsb	r3, r3, #7
 80061be:	2b04      	cmp	r3, #4
 80061c0:	bf28      	it	cs
 80061c2:	2304      	movcs	r3, #4
 80061c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	3304      	adds	r3, #4
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d902      	bls.n	80061d4 <NVIC_EncodePriority+0x30>
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	3b03      	subs	r3, #3
 80061d2:	e000      	b.n	80061d6 <NVIC_EncodePriority+0x32>
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d8:	f04f 32ff 	mov.w	r2, #4294967295
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	43da      	mvns	r2, r3
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	401a      	ands	r2, r3
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061ec:	f04f 31ff 	mov.w	r1, #4294967295
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	fa01 f303 	lsl.w	r3, r1, r3
 80061f6:	43d9      	mvns	r1, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061fc:	4313      	orrs	r3, r2
         );
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3724      	adds	r7, #36	; 0x24
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff ff4c 	bl	80060b0 <__NVIC_SetPriorityGrouping>
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006232:	f7ff ff61 	bl	80060f8 <__NVIC_GetPriorityGrouping>
 8006236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	6978      	ldr	r0, [r7, #20]
 800623e:	f7ff ffb1 	bl	80061a4 <NVIC_EncodePriority>
 8006242:	4602      	mov	r2, r0
 8006244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006248:	4611      	mov	r1, r2
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff ff80 	bl	8006150 <__NVIC_SetPriority>
}
 8006250:	bf00      	nop
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff ff54 	bl	8006114 <__NVIC_EnableIRQ>
}
 800626c:	bf00      	nop
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e00e      	b.n	80062a4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	795b      	ldrb	r3, [r3, #5]
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d105      	bne.n	800629c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fd fc7e 	bl	8003b98 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062b8:	f7ff fecc 	bl	8006054 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e099      	b.n	80063fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062e8:	e00f      	b.n	800630a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062ea:	f7ff feb3 	bl	8006054 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b05      	cmp	r3, #5
 80062f6:	d908      	bls.n	800630a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2203      	movs	r2, #3
 8006302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e078      	b.n	80063fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e8      	bne.n	80062ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4b38      	ldr	r3, [pc, #224]	; (8006404 <HAL_DMA_Init+0x158>)
 8006324:	4013      	ands	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800634e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	2b04      	cmp	r3, #4
 8006362:	d107      	bne.n	8006374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	4313      	orrs	r3, r2
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	2b04      	cmp	r3, #4
 800639c:	d117      	bne.n	80063ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00e      	beq.n	80063ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 faef 	bl	8006994 <DMA_CheckFifoParam>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2240      	movs	r2, #64	; 0x40
 80063c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063ca:	2301      	movs	r3, #1
 80063cc:	e016      	b.n	80063fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 faa6 	bl	8006928 <DMA_CalcBaseAndBitshift>
 80063dc:	4603      	mov	r3, r0
 80063de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	223f      	movs	r2, #63	; 0x3f
 80063e6:	409a      	lsls	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	f010803f 	.word	0xf010803f

08006408 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e050      	b.n	80064bc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d101      	bne.n	800642a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006426:	2302      	movs	r3, #2
 8006428:	e048      	b.n	80064bc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2200      	movs	r2, #0
 8006458:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2200      	movs	r2, #0
 8006460:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2221      	movs	r2, #33	; 0x21
 8006468:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa5c 	bl	8006928 <DMA_CalcBaseAndBitshift>
 8006470:	4603      	mov	r3, r0
 8006472:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800649c:	223f      	movs	r2, #63	; 0x3f
 800649e:	409a      	lsls	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_DMA_Start_IT+0x26>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e040      	b.n	800656c <HAL_DMA_Start_IT+0xa8>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d12f      	bne.n	800655e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f9da 	bl	80068cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651c:	223f      	movs	r2, #63	; 0x3f
 800651e:	409a      	lsls	r2, r3
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0216 	orr.w	r2, r2, #22
 8006532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0208 	orr.w	r2, r2, #8
 800654a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	e005      	b.n	800656a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800656a:	7dfb      	ldrb	r3, [r7, #23]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d004      	beq.n	8006592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2280      	movs	r2, #128	; 0x80
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e00c      	b.n	80065ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0201 	bic.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065c4:	4b92      	ldr	r3, [pc, #584]	; (8006810 <HAL_DMA_IRQHandler+0x258>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a92      	ldr	r2, [pc, #584]	; (8006814 <HAL_DMA_IRQHandler+0x25c>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0a9b      	lsrs	r3, r3, #10
 80065d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	2208      	movs	r2, #8
 80065e4:	409a      	lsls	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d013      	beq.n	8006624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	2208      	movs	r2, #8
 8006612:	409a      	lsls	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006646:	2201      	movs	r2, #1
 8006648:	409a      	lsls	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	f043 0202 	orr.w	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665e:	2204      	movs	r2, #4
 8006660:	409a      	lsls	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d012      	beq.n	8006690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	2204      	movs	r2, #4
 800667e:	409a      	lsls	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f043 0204 	orr.w	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	2210      	movs	r2, #16
 8006696:	409a      	lsls	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d043      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03c      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	2210      	movs	r2, #16
 80066b4:	409a      	lsls	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d018      	beq.n	80066fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d108      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d024      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
 80066e6:	e01f      	b.n	8006728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01b      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
 80066f8:	e016      	b.n	8006728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0208 	bic.w	r2, r2, #8
 8006716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672c:	2220      	movs	r2, #32
 800672e:	409a      	lsls	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4013      	ands	r3, r2
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 808e 	beq.w	8006856 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8086 	beq.w	8006856 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	2220      	movs	r2, #32
 8006750:	409a      	lsls	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b05      	cmp	r3, #5
 8006760:	d136      	bne.n	80067d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0216 	bic.w	r2, r2, #22
 8006770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <HAL_DMA_IRQHandler+0x1da>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0208 	bic.w	r2, r2, #8
 80067a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	223f      	movs	r2, #63	; 0x3f
 80067a8:	409a      	lsls	r2, r3
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d07d      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
        }
        return;
 80067ce:	e078      	b.n	80068c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01c      	beq.n	8006818 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d030      	beq.n	8006856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
 80067fc:	e02b      	b.n	8006856 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d027      	beq.n	8006856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	e022      	b.n	8006856 <HAL_DMA_IRQHandler+0x29e>
 8006810:	20000008 	.word	0x20000008
 8006814:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0210 	bic.w	r2, r2, #16
 8006834:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	2b00      	cmp	r3, #0
 800685c:	d032      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d022      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2205      	movs	r2, #5
 800686e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	3301      	adds	r3, #1
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d307      	bcc.n	800689e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f2      	bne.n	8006882 <HAL_DMA_IRQHandler+0x2ca>
 800689c:	e000      	b.n	80068a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800689e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
 80068c0:	e000      	b.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80068c2:	bf00      	nop
    }
  }
}
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d108      	bne.n	800690c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800690a:	e007      	b.n	800691c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	3b10      	subs	r3, #16
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <DMA_CalcBaseAndBitshift+0x64>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	091b      	lsrs	r3, r3, #4
 8006940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006942:	4a13      	ldr	r2, [pc, #76]	; (8006990 <DMA_CalcBaseAndBitshift+0x68>)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d909      	bls.n	800696a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	1d1a      	adds	r2, r3, #4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	659a      	str	r2, [r3, #88]	; 0x58
 8006968:	e007      	b.n	800697a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	aaaaaaab 	.word	0xaaaaaaab
 8006990:	08011744 	.word	0x08011744

08006994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d11f      	bne.n	80069ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d855      	bhi.n	8006a60 <DMA_CheckFifoParam+0xcc>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <DMA_CheckFifoParam+0x28>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069df 	.word	0x080069df
 80069c4:	080069cd 	.word	0x080069cd
 80069c8:	08006a61 	.word	0x08006a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d045      	beq.n	8006a64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069dc:	e042      	b.n	8006a64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069e6:	d13f      	bne.n	8006a68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ec:	e03c      	b.n	8006a68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	d121      	bne.n	8006a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d836      	bhi.n	8006a6c <DMA_CheckFifoParam+0xd8>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <DMA_CheckFifoParam+0x70>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a1b 	.word	0x08006a1b
 8006a0c:	08006a15 	.word	0x08006a15
 8006a10:	08006a2d 	.word	0x08006a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
      break;
 8006a18:	e02f      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d024      	beq.n	8006a70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a2a:	e021      	b.n	8006a70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a34:	d11e      	bne.n	8006a74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a3a:	e01b      	b.n	8006a74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d902      	bls.n	8006a48 <DMA_CheckFifoParam+0xb4>
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d003      	beq.n	8006a4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a46:	e018      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4c:	e015      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a5e:	e00b      	b.n	8006a78 <DMA_CheckFifoParam+0xe4>
      break;
 8006a60:	bf00      	nop
 8006a62:	e00a      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;
 8006a64:	bf00      	nop
 8006a66:	e008      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;
 8006a68:	bf00      	nop
 8006a6a:	e006      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;   
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;
 8006a78:	bf00      	nop
    }
  } 
  
  return status; 
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e03b      	b.n	8006b12 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fd f8e6 	bl	8003c80 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad8:	f023 0107 	bic.w	r1, r3, #7
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006af2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68d1      	ldr	r1, [r2, #12]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	430b      	orrs	r3, r1
 8006b00:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af02      	add	r7, sp, #8
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_DMA2D_Start+0x1c>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e018      	b.n	8006b68 <HAL_DMA2D_Start+0x4e>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fa99 	bl	8007088 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0201 	orr.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d056      	beq.n	8006c3a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006b8c:	f7ff fa62 	bl	8006054 <HAL_GetTick>
 8006b90:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006b92:	e04b      	b.n	8006c2c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d023      	beq.n	8006bee <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	f043 0202 	orr.w	r2, r3, #2
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	f043 0201 	orr.w	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2221      	movs	r2, #33	; 0x21
 8006bd8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2204      	movs	r2, #4
 8006bde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e0a5      	b.n	8006d3a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d01a      	beq.n	8006c2c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006bf6:	f7ff fa2d 	bl	8006054 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d302      	bcc.n	8006c0c <HAL_DMA2D_PollForTransfer+0x9c>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10f      	bne.n	8006c2c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c10:	f043 0220 	orr.w	r2, r3, #32
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e086      	b.n	8006d3a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0ac      	beq.n	8006b94 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d061      	beq.n	8006d20 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c5c:	f7ff f9fa 	bl	8006054 <HAL_GetTick>
 8006c60:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c62:	e056      	b.n	8006d12 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d02e      	beq.n	8006cd4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c84:	f043 0204 	orr.w	r2, r3, #4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c9a:	f043 0202 	orr.w	r2, r3, #2
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2229      	movs	r2, #41	; 0x29
 8006cbe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2204      	movs	r2, #4
 8006cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e032      	b.n	8006d3a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d01a      	beq.n	8006d12 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006cdc:	f7ff f9ba 	bl	8006054 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d302      	bcc.n	8006cf2 <HAL_DMA2D_PollForTransfer+0x182>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10f      	bne.n	8006d12 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf6:	f043 0220 	orr.w	r2, r3, #32
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2203      	movs	r2, #3
 8006d02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e013      	b.n	8006d3a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0a1      	beq.n	8006c64 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2212      	movs	r2, #18
 8006d26:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b084      	sub	sp, #16
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d026      	beq.n	8006db2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d021      	beq.n	8006db2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d7c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	f043 0201 	orr.w	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2204      	movs	r2, #4
 8006d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d026      	beq.n	8006e0a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d021      	beq.n	8006e0a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dd4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	f043 0202 	orr.w	r2, r3, #2
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2204      	movs	r2, #4
 8006dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d003      	beq.n	8006e0a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d026      	beq.n	8006e62 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d021      	beq.n	8006e62 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2208      	movs	r2, #8
 8006e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3a:	f043 0204 	orr.w	r2, r3, #4
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2204      	movs	r2, #4
 8006e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d013      	beq.n	8006e94 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00e      	beq.n	8006e94 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e84:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f853 	bl	8006f3a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d024      	beq.n	8006ee8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01f      	beq.n	8006ee8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006eb6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d01f      	beq.n	8006f32 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f0a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2210      	movs	r2, #16
 8006f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f80e 	bl	8006f4e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006f32:	bf00      	nop
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_DMA2D_ConfigLayer+0x20>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e079      	b.n	8007078 <HAL_DMA2D_ConfigLayer+0x114>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	3318      	adds	r3, #24
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	041b      	lsls	r3, r3, #16
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006fae:	4b35      	ldr	r3, [pc, #212]	; (8007084 <HAL_DMA2D_ConfigLayer+0x120>)
 8006fb0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2b0a      	cmp	r3, #10
 8006fb8:	d003      	beq.n	8006fc2 <HAL_DMA2D_ConfigLayer+0x5e>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	d107      	bne.n	8006fd2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	e005      	b.n	8006fde <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d120      	bne.n	8007026 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	43db      	mvns	r3, r3
 8006fee:	ea02 0103 	and.w	r1, r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b0a      	cmp	r3, #10
 800700c:	d003      	beq.n	8007016 <HAL_DMA2D_ConfigLayer+0xb2>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b09      	cmp	r3, #9
 8007014:	d127      	bne.n	8007066 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007022:	629a      	str	r2, [r3, #40]	; 0x28
 8007024:	e01f      	b.n	8007066 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	43db      	mvns	r3, r3
 8007030:	ea02 0103 	and.w	r1, r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	430a      	orrs	r2, r1
 800703c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b0a      	cmp	r3, #10
 800704e:	d003      	beq.n	8007058 <HAL_DMA2D_ConfigLayer+0xf4>
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b09      	cmp	r3, #9
 8007056:	d106      	bne.n	8007066 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007064:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	371c      	adds	r7, #28
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	ff03000f 	.word	0xff03000f

08007088 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8007088:	b480      	push	{r7}
 800708a:	b08b      	sub	sp, #44	; 0x2c
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	041a      	lsls	r2, r3, #16
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	431a      	orrs	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80070c0:	d174      	bne.n	80071ac <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80070c8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070d0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070d8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d108      	bne.n	80070fa <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	431a      	orrs	r2, r3
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	627b      	str	r3, [r7, #36]	; 0x24
 80070f8:	e053      	b.n	80071a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d106      	bne.n	8007110 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4313      	orrs	r3, r2
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
 800710e:	e048      	b.n	80071a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d111      	bne.n	800713c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	0cdb      	lsrs	r3, r3, #19
 800711c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	0a9b      	lsrs	r3, r3, #10
 8007122:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	08db      	lsrs	r3, r3, #3
 8007128:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	02db      	lsls	r3, r3, #11
 8007132:	4313      	orrs	r3, r2
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
 800713a:	e032      	b.n	80071a2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b03      	cmp	r3, #3
 8007142:	d117      	bne.n	8007174 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	0fdb      	lsrs	r3, r3, #31
 8007148:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	0cdb      	lsrs	r3, r3, #19
 800714e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	0adb      	lsrs	r3, r3, #11
 8007154:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	08db      	lsrs	r3, r3, #3
 800715a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	029b      	lsls	r3, r3, #10
 8007164:	431a      	orrs	r2, r3
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	03db      	lsls	r3, r3, #15
 800716a:	4313      	orrs	r3, r2
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
 8007172:	e016      	b.n	80071a2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	0f1b      	lsrs	r3, r3, #28
 8007178:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	0d1b      	lsrs	r3, r3, #20
 800717e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	0b1b      	lsrs	r3, r3, #12
 8007184:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	091b      	lsrs	r3, r3, #4
 800718a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	011a      	lsls	r2, r3, #4
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	431a      	orrs	r2, r3
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	4313      	orrs	r3, r2
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80071aa:	e003      	b.n	80071b4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	60da      	str	r2, [r3, #12]
}
 80071b4:	bf00      	nop
 80071b6:	372c      	adds	r7, #44	; 0x2c
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b089      	sub	sp, #36	; 0x24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	e177      	b.n	80074cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071dc:	2201      	movs	r2, #1
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	fa02 f303 	lsl.w	r3, r2, r3
 80071e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4013      	ands	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	f040 8166 	bne.w	80074c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d00b      	beq.n	800721a <HAL_GPIO_Init+0x5a>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d007      	beq.n	800721a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800720e:	2b11      	cmp	r3, #17
 8007210:	d003      	beq.n	800721a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	2b12      	cmp	r3, #18
 8007218:	d130      	bne.n	800727c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	2203      	movs	r2, #3
 8007226:	fa02 f303 	lsl.w	r3, r2, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4013      	ands	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	4313      	orrs	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007250:	2201      	movs	r2, #1
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	43db      	mvns	r3, r3
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	4013      	ands	r3, r2
 800725e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	f003 0201 	and.w	r2, r3, #1
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	4313      	orrs	r3, r2
 8007274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	2203      	movs	r2, #3
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	4013      	ands	r3, r2
 8007292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d003      	beq.n	80072bc <HAL_GPIO_Init+0xfc>
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2b12      	cmp	r3, #18
 80072ba:	d123      	bne.n	8007304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	08da      	lsrs	r2, r3, #3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3208      	adds	r2, #8
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f003 0307 	and.w	r3, r3, #7
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	220f      	movs	r2, #15
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	43db      	mvns	r3, r3
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4013      	ands	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	08da      	lsrs	r2, r3, #3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3208      	adds	r2, #8
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	2203      	movs	r2, #3
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f003 0203 	and.w	r2, r3, #3
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4313      	orrs	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80c0 	beq.w	80074c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	4b65      	ldr	r3, [pc, #404]	; (80074e0 <HAL_GPIO_Init+0x320>)
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	4a64      	ldr	r2, [pc, #400]	; (80074e0 <HAL_GPIO_Init+0x320>)
 8007350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007354:	6453      	str	r3, [r2, #68]	; 0x44
 8007356:	4b62      	ldr	r3, [pc, #392]	; (80074e0 <HAL_GPIO_Init+0x320>)
 8007358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007362:	4a60      	ldr	r2, [pc, #384]	; (80074e4 <HAL_GPIO_Init+0x324>)
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	089b      	lsrs	r3, r3, #2
 8007368:	3302      	adds	r3, #2
 800736a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800736e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	220f      	movs	r2, #15
 800737a:	fa02 f303 	lsl.w	r3, r2, r3
 800737e:	43db      	mvns	r3, r3
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	4013      	ands	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a57      	ldr	r2, [pc, #348]	; (80074e8 <HAL_GPIO_Init+0x328>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d037      	beq.n	80073fe <HAL_GPIO_Init+0x23e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a56      	ldr	r2, [pc, #344]	; (80074ec <HAL_GPIO_Init+0x32c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d031      	beq.n	80073fa <HAL_GPIO_Init+0x23a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a55      	ldr	r2, [pc, #340]	; (80074f0 <HAL_GPIO_Init+0x330>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d02b      	beq.n	80073f6 <HAL_GPIO_Init+0x236>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a54      	ldr	r2, [pc, #336]	; (80074f4 <HAL_GPIO_Init+0x334>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d025      	beq.n	80073f2 <HAL_GPIO_Init+0x232>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a53      	ldr	r2, [pc, #332]	; (80074f8 <HAL_GPIO_Init+0x338>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d01f      	beq.n	80073ee <HAL_GPIO_Init+0x22e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a52      	ldr	r2, [pc, #328]	; (80074fc <HAL_GPIO_Init+0x33c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d019      	beq.n	80073ea <HAL_GPIO_Init+0x22a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a51      	ldr	r2, [pc, #324]	; (8007500 <HAL_GPIO_Init+0x340>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <HAL_GPIO_Init+0x226>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a50      	ldr	r2, [pc, #320]	; (8007504 <HAL_GPIO_Init+0x344>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00d      	beq.n	80073e2 <HAL_GPIO_Init+0x222>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a4f      	ldr	r2, [pc, #316]	; (8007508 <HAL_GPIO_Init+0x348>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d007      	beq.n	80073de <HAL_GPIO_Init+0x21e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a4e      	ldr	r2, [pc, #312]	; (800750c <HAL_GPIO_Init+0x34c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <HAL_GPIO_Init+0x21a>
 80073d6:	2309      	movs	r3, #9
 80073d8:	e012      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073da:	230a      	movs	r3, #10
 80073dc:	e010      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073de:	2308      	movs	r3, #8
 80073e0:	e00e      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073e2:	2307      	movs	r3, #7
 80073e4:	e00c      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073e6:	2306      	movs	r3, #6
 80073e8:	e00a      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073ea:	2305      	movs	r3, #5
 80073ec:	e008      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073ee:	2304      	movs	r3, #4
 80073f0:	e006      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073f2:	2303      	movs	r3, #3
 80073f4:	e004      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e002      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <HAL_GPIO_Init+0x240>
 80073fe:	2300      	movs	r3, #0
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	f002 0203 	and.w	r2, r2, #3
 8007406:	0092      	lsls	r2, r2, #2
 8007408:	4093      	lsls	r3, r2
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4313      	orrs	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007410:	4934      	ldr	r1, [pc, #208]	; (80074e4 <HAL_GPIO_Init+0x324>)
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	089b      	lsrs	r3, r3, #2
 8007416:	3302      	adds	r3, #2
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800741e:	4b3c      	ldr	r3, [pc, #240]	; (8007510 <HAL_GPIO_Init+0x350>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	43db      	mvns	r3, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4013      	ands	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007442:	4a33      	ldr	r2, [pc, #204]	; (8007510 <HAL_GPIO_Init+0x350>)
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007448:	4b31      	ldr	r3, [pc, #196]	; (8007510 <HAL_GPIO_Init+0x350>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	43db      	mvns	r3, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4013      	ands	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800746c:	4a28      	ldr	r2, [pc, #160]	; (8007510 <HAL_GPIO_Init+0x350>)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007472:	4b27      	ldr	r3, [pc, #156]	; (8007510 <HAL_GPIO_Init+0x350>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	43db      	mvns	r3, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4013      	ands	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <HAL_GPIO_Init+0x350>)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800749c:	4b1c      	ldr	r3, [pc, #112]	; (8007510 <HAL_GPIO_Init+0x350>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4013      	ands	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074c0:	4a13      	ldr	r2, [pc, #76]	; (8007510 <HAL_GPIO_Init+0x350>)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	3301      	adds	r3, #1
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	f67f ae84 	bls.w	80071dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80074d4:	bf00      	nop
 80074d6:	3724      	adds	r7, #36	; 0x24
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	40023800 	.word	0x40023800
 80074e4:	40013800 	.word	0x40013800
 80074e8:	40020000 	.word	0x40020000
 80074ec:	40020400 	.word	0x40020400
 80074f0:	40020800 	.word	0x40020800
 80074f4:	40020c00 	.word	0x40020c00
 80074f8:	40021000 	.word	0x40021000
 80074fc:	40021400 	.word	0x40021400
 8007500:	40021800 	.word	0x40021800
 8007504:	40021c00 	.word	0x40021c00
 8007508:	40022000 	.word	0x40022000
 800750c:	40022400 	.word	0x40022400
 8007510:	40013c00 	.word	0x40013c00

08007514 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007526:	2300      	movs	r3, #0
 8007528:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	e0d9      	b.n	80076e4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007530:	2201      	movs	r2, #1
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4013      	ands	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	f040 80c9 	bne.w	80076de <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800754c:	4a6a      	ldr	r2, [pc, #424]	; (80076f8 <HAL_GPIO_DeInit+0x1e4>)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	089b      	lsrs	r3, r3, #2
 8007552:	3302      	adds	r3, #2
 8007554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007558:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	220f      	movs	r2, #15
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a62      	ldr	r2, [pc, #392]	; (80076fc <HAL_GPIO_DeInit+0x1e8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d037      	beq.n	80075e6 <HAL_GPIO_DeInit+0xd2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a61      	ldr	r2, [pc, #388]	; (8007700 <HAL_GPIO_DeInit+0x1ec>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d031      	beq.n	80075e2 <HAL_GPIO_DeInit+0xce>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a60      	ldr	r2, [pc, #384]	; (8007704 <HAL_GPIO_DeInit+0x1f0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d02b      	beq.n	80075de <HAL_GPIO_DeInit+0xca>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a5f      	ldr	r2, [pc, #380]	; (8007708 <HAL_GPIO_DeInit+0x1f4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d025      	beq.n	80075da <HAL_GPIO_DeInit+0xc6>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a5e      	ldr	r2, [pc, #376]	; (800770c <HAL_GPIO_DeInit+0x1f8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d01f      	beq.n	80075d6 <HAL_GPIO_DeInit+0xc2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a5d      	ldr	r2, [pc, #372]	; (8007710 <HAL_GPIO_DeInit+0x1fc>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d019      	beq.n	80075d2 <HAL_GPIO_DeInit+0xbe>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a5c      	ldr	r2, [pc, #368]	; (8007714 <HAL_GPIO_DeInit+0x200>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <HAL_GPIO_DeInit+0xba>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a5b      	ldr	r2, [pc, #364]	; (8007718 <HAL_GPIO_DeInit+0x204>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00d      	beq.n	80075ca <HAL_GPIO_DeInit+0xb6>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a5a      	ldr	r2, [pc, #360]	; (800771c <HAL_GPIO_DeInit+0x208>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d007      	beq.n	80075c6 <HAL_GPIO_DeInit+0xb2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a59      	ldr	r2, [pc, #356]	; (8007720 <HAL_GPIO_DeInit+0x20c>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d101      	bne.n	80075c2 <HAL_GPIO_DeInit+0xae>
 80075be:	2309      	movs	r3, #9
 80075c0:	e012      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075c2:	230a      	movs	r3, #10
 80075c4:	e010      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075c6:	2308      	movs	r3, #8
 80075c8:	e00e      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075ca:	2307      	movs	r3, #7
 80075cc:	e00c      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075ce:	2306      	movs	r3, #6
 80075d0:	e00a      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075d2:	2305      	movs	r3, #5
 80075d4:	e008      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075d6:	2304      	movs	r3, #4
 80075d8:	e006      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075da:	2303      	movs	r3, #3
 80075dc:	e004      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075de:	2302      	movs	r3, #2
 80075e0:	e002      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075e2:	2301      	movs	r3, #1
 80075e4:	e000      	b.n	80075e8 <HAL_GPIO_DeInit+0xd4>
 80075e6:	2300      	movs	r3, #0
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	f002 0203 	and.w	r2, r2, #3
 80075ee:	0092      	lsls	r2, r2, #2
 80075f0:	4093      	lsls	r3, r2
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d132      	bne.n	800765e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80075f8:	4b4a      	ldr	r3, [pc, #296]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	43db      	mvns	r3, r3
 8007600:	4948      	ldr	r1, [pc, #288]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 8007602:	4013      	ands	r3, r2
 8007604:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007606:	4b47      	ldr	r3, [pc, #284]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	43db      	mvns	r3, r3
 800760e:	4945      	ldr	r1, [pc, #276]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 8007610:	4013      	ands	r3, r2
 8007612:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007614:	4b43      	ldr	r3, [pc, #268]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	43db      	mvns	r3, r3
 800761c:	4941      	ldr	r1, [pc, #260]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 800761e:	4013      	ands	r3, r2
 8007620:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007622:	4b40      	ldr	r3, [pc, #256]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	43db      	mvns	r3, r3
 800762a:	493e      	ldr	r1, [pc, #248]	; (8007724 <HAL_GPIO_DeInit+0x210>)
 800762c:	4013      	ands	r3, r2
 800762e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	220f      	movs	r2, #15
 800763a:	fa02 f303 	lsl.w	r3, r2, r3
 800763e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007640:	4a2d      	ldr	r2, [pc, #180]	; (80076f8 <HAL_GPIO_DeInit+0x1e4>)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	089b      	lsrs	r3, r3, #2
 8007646:	3302      	adds	r3, #2
 8007648:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	43da      	mvns	r2, r3
 8007650:	4829      	ldr	r0, [pc, #164]	; (80076f8 <HAL_GPIO_DeInit+0x1e4>)
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	089b      	lsrs	r3, r3, #2
 8007656:	400a      	ands	r2, r1
 8007658:	3302      	adds	r3, #2
 800765a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	2103      	movs	r1, #3
 8007668:	fa01 f303 	lsl.w	r3, r1, r3
 800766c:	43db      	mvns	r3, r3
 800766e:	401a      	ands	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	08da      	lsrs	r2, r3, #3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3208      	adds	r2, #8
 800767c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	220f      	movs	r2, #15
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43db      	mvns	r3, r3
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	08d2      	lsrs	r2, r2, #3
 8007694:	4019      	ands	r1, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	3208      	adds	r2, #8
 800769a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	2103      	movs	r1, #3
 80076a8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ac:	43db      	mvns	r3, r3
 80076ae:	401a      	ands	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	2101      	movs	r1, #1
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	43db      	mvns	r3, r3
 80076c2:	401a      	ands	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	2103      	movs	r1, #3
 80076d2:	fa01 f303 	lsl.w	r3, r1, r3
 80076d6:	43db      	mvns	r3, r3
 80076d8:	401a      	ands	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3301      	adds	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	f67f af22 	bls.w	8007530 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80076ec:	bf00      	nop
 80076ee:	371c      	adds	r7, #28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr
 80076f8:	40013800 	.word	0x40013800
 80076fc:	40020000 	.word	0x40020000
 8007700:	40020400 	.word	0x40020400
 8007704:	40020800 	.word	0x40020800
 8007708:	40020c00 	.word	0x40020c00
 800770c:	40021000 	.word	0x40021000
 8007710:	40021400 	.word	0x40021400
 8007714:	40021800 	.word	0x40021800
 8007718:	40021c00 	.word	0x40021c00
 800771c:	40022000 	.word	0x40022000
 8007720:	40022400 	.word	0x40022400
 8007724:	40013c00 	.word	0x40013c00

08007728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	807b      	strh	r3, [r7, #2]
 8007734:	4613      	mov	r3, r2
 8007736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007738:	787b      	ldrb	r3, [r7, #1]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800773e:	887a      	ldrh	r2, [r7, #2]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007744:	e003      	b.n	800774e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007746:	887b      	ldrh	r3, [r7, #2]
 8007748:	041a      	lsls	r2, r3, #16
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	619a      	str	r2, [r3, #24]
}
 800774e:	bf00      	nop
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f005 f8b3 	bl	800c8dc <USB_GetMode>
 8007776:	4603      	mov	r3, r0
 8007778:	2b01      	cmp	r3, #1
 800777a:	f040 80ef 	bne.w	800795c <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f005 f897 	bl	800c8b6 <USB_ReadInterrupts>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80e5 	beq.w	800795a <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4618      	mov	r0, r3
 8007796:	f005 f88e 	bl	800c8b6 <USB_ReadInterrupts>
 800779a:	4603      	mov	r3, r0
 800779c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077a4:	d104      	bne.n	80077b0 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80077ae:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f005 f87e 	bl	800c8b6 <USB_ReadInterrupts>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077c4:	d104      	bne.n	80077d0 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80077ce:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f005 f86e 	bl	800c8b6 <USB_ReadInterrupts>
 80077da:	4603      	mov	r3, r0
 80077dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077e4:	d104      	bne.n	80077f0 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80077ee:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f005 f85e 	bl	800c8b6 <USB_ReadInterrupts>
 80077fa:	4603      	mov	r3, r0
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b02      	cmp	r3, #2
 8007802:	d103      	bne.n	800780c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2202      	movs	r2, #2
 800780a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f005 f850 	bl	800c8b6 <USB_ReadInterrupts>
 8007816:	4603      	mov	r3, r0
 8007818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800781c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007820:	d115      	bne.n	800784e <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800782a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f006 fb75 	bl	800df2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f005 f855 	bl	800c8f8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4618      	mov	r0, r3
 8007854:	f005 f82f 	bl	800c8b6 <USB_ReadInterrupts>
 8007858:	4603      	mov	r3, r0
 800785a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800785e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007862:	d102      	bne.n	800786a <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f8ef 	bl	8008a48 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f005 f821 	bl	800c8b6 <USB_ReadInterrupts>
 8007874:	4603      	mov	r3, r0
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b08      	cmp	r3, #8
 800787c:	d106      	bne.n	800788c <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f006 fb38 	bl	800def4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2208      	movs	r2, #8
 800788a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f005 f810 	bl	800c8b6 <USB_ReadInterrupts>
 8007896:	4603      	mov	r3, r0
 8007898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078a0:	d138      	bne.n	8007914 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f005 f860 	bl	800c96c <USB_HC_ReadInterrupt>
 80078ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	e025      	b.n	8007900 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
 80078c0:	f003 0301 	and.w	r3, r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d018      	beq.n	80078fa <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078de:	d106      	bne.n	80078ee <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f858 	bl	800799c <HCD_HC_IN_IRQHandler>
 80078ec:	e005      	b.n	80078fa <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fc86 	bl	8008206 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	3301      	adds	r3, #1
 80078fe:	617b      	str	r3, [r7, #20]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	429a      	cmp	r2, r3
 8007908:	d3d4      	bcc.n	80078b4 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007912:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f004 ffcc 	bl	800c8b6 <USB_ReadInterrupts>
 800791e:	4603      	mov	r3, r0
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b10      	cmp	r3, #16
 8007926:	d101      	bne.n	800792c <HAL_HCD_IRQHandler+0x1d2>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <HAL_HCD_IRQHandler+0x1d4>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d014      	beq.n	800795c <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f022 0210 	bic.w	r2, r2, #16
 8007940:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 ffd4 	bl	80088f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0210 	orr.w	r2, r2, #16
 8007956:	619a      	str	r2, [r3, #24]
 8007958:	e000      	b.n	800795c <HAL_HCD_IRQHandler+0x202>
      return;
 800795a:	bf00      	nop
    }
  }
}
 800795c:	3718      	adds	r7, #24
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_HCD_Stop+0x16>
 8007974:	2302      	movs	r3, #2
 8007976:	e00d      	b.n	8007994 <HAL_HCD_Stop+0x32>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f005 f901 	bl	800cb8c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d119      	bne.n	8007a00 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	461a      	mov	r2, r3
 80079da:	2304      	movs	r3, #4
 80079dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	0151      	lsls	r1, r2, #5
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	440a      	add	r2, r1
 80079f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079f8:	f043 0302 	orr.w	r3, r3, #2
 80079fc:	60d3      	str	r3, [r2, #12]
 80079fe:	e0ce      	b.n	8007b9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a16:	d12c      	bne.n	8007a72 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a24:	461a      	mov	r2, r3
 8007a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4613      	mov	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	440b      	add	r3, r1
 8007a3a:	335d      	adds	r3, #93	; 0x5d
 8007a3c:	2207      	movs	r2, #7
 8007a3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a5a:	f043 0302 	orr.w	r3, r3, #2
 8007a5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f004 ff8f 	bl	800c98e <USB_HC_Halt>
 8007a70:	e095      	b.n	8007b9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d109      	bne.n	8007a9c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a94:	461a      	mov	r2, r3
 8007a96:	2320      	movs	r3, #32
 8007a98:	6093      	str	r3, [r2, #8]
 8007a9a:	e080      	b.n	8007b9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 0308 	and.w	r3, r3, #8
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d134      	bne.n	8007b1c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007acc:	f043 0302 	orr.w	r3, r3, #2
 8007ad0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	440b      	add	r3, r1
 8007ae0:	335d      	adds	r3, #93	; 0x5d
 8007ae2:	2205      	movs	r2, #5
 8007ae4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af2:	461a      	mov	r2, r3
 8007af4:	2310      	movs	r3, #16
 8007af6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b04:	461a      	mov	r2, r3
 8007b06:	2308      	movs	r3, #8
 8007b08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f004 ff3a 	bl	800c98e <USB_HC_Halt>
 8007b1a:	e040      	b.n	8007b9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b32:	d134      	bne.n	8007b9e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b4e:	f043 0302 	orr.w	r3, r3, #2
 8007b52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f004 ff15 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b70:	461a      	mov	r2, r3
 8007b72:	2310      	movs	r3, #16
 8007b74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	440b      	add	r3, r1
 8007b84:	335d      	adds	r3, #93	; 0x5d
 8007b86:	2208      	movs	r2, #8
 8007b88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b96:	461a      	mov	r2, r3
 8007b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b9c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb4:	d122      	bne.n	8007bfc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	015a      	lsls	r2, r3, #5
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	0151      	lsls	r1, r2, #5
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	440a      	add	r2, r1
 8007bcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd0:	f043 0302 	orr.w	r3, r3, #2
 8007bd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	4611      	mov	r1, r2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f004 fed4 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007bfa:	e300      	b.n	80081fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	f040 80fd 	bne.w	8007e0e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01b      	beq.n	8007c54 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	4613      	mov	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	440b      	add	r3, r1
 8007c2a:	3348      	adds	r3, #72	; 0x48
 8007c2c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	0159      	lsls	r1, r3, #5
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	440b      	add	r3, r1
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	691b      	ldr	r3, [r3, #16]
 8007c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007c40:	1ad1      	subs	r1, r2, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	4613      	mov	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	4413      	add	r3, r2
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	4403      	add	r3, r0
 8007c50:	334c      	adds	r3, #76	; 0x4c
 8007c52:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	440b      	add	r3, r1
 8007c62:	335d      	adds	r3, #93	; 0x5d
 8007c64:	2201      	movs	r2, #1
 8007c66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	440b      	add	r3, r1
 8007c76:	3358      	adds	r3, #88	; 0x58
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c88:	461a      	mov	r2, r3
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	440b      	add	r3, r1
 8007c9c:	333f      	adds	r3, #63	; 0x3f
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	440b      	add	r3, r1
 8007cb2:	333f      	adds	r3, #63	; 0x3f
 8007cb4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d121      	bne.n	8007cfe <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	0151      	lsls	r1, r2, #5
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	440a      	add	r2, r1
 8007cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd4:	f043 0302 	orr.w	r3, r3, #2
 8007cd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f004 fe52 	bl	800c98e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	6093      	str	r3, [r2, #8]
 8007cfc:	e070      	b.n	8007de0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4613      	mov	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4413      	add	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	440b      	add	r3, r1
 8007d0c:	333f      	adds	r3, #63	; 0x3f
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d12a      	bne.n	8007d6a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	0151      	lsls	r1, r2, #5
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	440a      	add	r2, r1
 8007d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d32:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	440b      	add	r3, r1
 8007d42:	335c      	adds	r3, #92	; 0x5c
 8007d44:	2201      	movs	r2, #1
 8007d46:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	b2d8      	uxtb	r0, r3
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	440b      	add	r3, r1
 8007d5a:	335c      	adds	r3, #92	; 0x5c
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	4601      	mov	r1, r0
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f006 f8f0 	bl	800df48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007d68:	e03a      	b.n	8007de0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	00db      	lsls	r3, r3, #3
 8007d76:	440b      	add	r3, r1
 8007d78:	333f      	adds	r3, #63	; 0x3f
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d12f      	bne.n	8007de0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	440b      	add	r3, r1
 8007d8e:	335c      	adds	r3, #92	; 0x5c
 8007d90:	2201      	movs	r2, #1
 8007d92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007d94:	6879      	ldr	r1, [r7, #4]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	440b      	add	r3, r1
 8007da2:	3350      	adds	r3, #80	; 0x50
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f083 0301 	eor.w	r3, r3, #1
 8007daa:	b2d8      	uxtb	r0, r3
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	440b      	add	r3, r1
 8007dba:	3350      	adds	r3, #80	; 0x50
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	b2d8      	uxtb	r0, r3
 8007dc4:	6879      	ldr	r1, [r7, #4]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	00db      	lsls	r3, r3, #3
 8007dd0:	440b      	add	r3, r1
 8007dd2:	335c      	adds	r3, #92	; 0x5c
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4601      	mov	r1, r0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f006 f8b4 	bl	800df48 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	440b      	add	r3, r1
 8007dee:	3350      	adds	r3, #80	; 0x50
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f083 0301 	eor.w	r3, r3, #1
 8007df6:	b2d8      	uxtb	r0, r3
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	440b      	add	r3, r1
 8007e06:	3350      	adds	r3, #80	; 0x50
 8007e08:	4602      	mov	r2, r0
 8007e0a:	701a      	strb	r2, [r3, #0]
}
 8007e0c:	e1f7      	b.n	80081fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	f040 811a 	bne.w	800805a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e40:	f023 0302 	bic.w	r3, r3, #2
 8007e44:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	440b      	add	r3, r1
 8007e54:	335d      	adds	r3, #93	; 0x5d
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d10a      	bne.n	8007e72 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	440b      	add	r3, r1
 8007e6a:	335c      	adds	r3, #92	; 0x5c
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	e0d9      	b.n	8008026 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	440b      	add	r3, r1
 8007e80:	335d      	adds	r3, #93	; 0x5d
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b05      	cmp	r3, #5
 8007e86:	d10a      	bne.n	8007e9e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007e88:	6879      	ldr	r1, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	00db      	lsls	r3, r3, #3
 8007e94:	440b      	add	r3, r1
 8007e96:	335c      	adds	r3, #92	; 0x5c
 8007e98:	2205      	movs	r2, #5
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e0c3      	b.n	8008026 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	00db      	lsls	r3, r3, #3
 8007eaa:	440b      	add	r3, r1
 8007eac:	335d      	adds	r3, #93	; 0x5d
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b06      	cmp	r3, #6
 8007eb2:	d00a      	beq.n	8007eca <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	440b      	add	r3, r1
 8007ec2:	335d      	adds	r3, #93	; 0x5d
 8007ec4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d156      	bne.n	8007f78 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	440b      	add	r3, r1
 8007ed8:	3358      	adds	r3, #88	; 0x58
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	1c59      	adds	r1, r3, #1
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	4403      	add	r3, r0
 8007eec:	3358      	adds	r3, #88	; 0x58
 8007eee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	440b      	add	r3, r1
 8007efe:	3358      	adds	r3, #88	; 0x58
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d914      	bls.n	8007f30 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	440b      	add	r3, r1
 8007f14:	3358      	adds	r3, #88	; 0x58
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	440b      	add	r3, r1
 8007f28:	335c      	adds	r3, #92	; 0x5c
 8007f2a:	2204      	movs	r2, #4
 8007f2c:	701a      	strb	r2, [r3, #0]
 8007f2e:	e009      	b.n	8007f44 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007f30:	6879      	ldr	r1, [r7, #4]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	440b      	add	r3, r1
 8007f3e:	335c      	adds	r3, #92	; 0x5c
 8007f40:	2202      	movs	r2, #2
 8007f42:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f5a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f62:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	015a      	lsls	r2, r3, #5
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f70:	461a      	mov	r2, r3
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	e056      	b.n	8008026 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	440b      	add	r3, r1
 8007f86:	335d      	adds	r3, #93	; 0x5d
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	d123      	bne.n	8007fd6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	440b      	add	r3, r1
 8007f9c:	335c      	adds	r3, #92	; 0x5c
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fb8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fc0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	015a      	lsls	r2, r3, #5
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4413      	add	r3, r2
 8007fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e027      	b.n	8008026 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	440b      	add	r3, r1
 8007fe4:	335d      	adds	r3, #93	; 0x5d
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b07      	cmp	r3, #7
 8007fea:	d11c      	bne.n	8008026 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	440b      	add	r3, r1
 8007ffa:	3358      	adds	r3, #88	; 0x58
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	4403      	add	r3, r0
 800800e:	3358      	adds	r3, #88	; 0x58
 8008010:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	440b      	add	r3, r1
 8008020:	335c      	adds	r3, #92	; 0x5c
 8008022:	2204      	movs	r2, #4
 8008024:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	4413      	add	r3, r2
 800802e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008032:	461a      	mov	r2, r3
 8008034:	2302      	movs	r3, #2
 8008036:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	b2d8      	uxtb	r0, r3
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4613      	mov	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	440b      	add	r3, r1
 800804a:	335c      	adds	r3, #92	; 0x5c
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	4601      	mov	r1, r0
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f005 ff78 	bl	800df48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008058:	e0d1      	b.n	80081fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	2b80      	cmp	r3, #128	; 0x80
 800806e:	d13e      	bne.n	80080ee <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	4413      	add	r3, r2
 8008078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	0151      	lsls	r1, r2, #5
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	440a      	add	r2, r1
 8008086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800808a:	f043 0302 	orr.w	r3, r3, #2
 800808e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	440b      	add	r3, r1
 800809e:	3358      	adds	r3, #88	; 0x58
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	00db      	lsls	r3, r3, #3
 80080b0:	4403      	add	r3, r0
 80080b2:	3358      	adds	r3, #88	; 0x58
 80080b4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80080b6:	6879      	ldr	r1, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4613      	mov	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	440b      	add	r3, r1
 80080c4:	335d      	adds	r3, #93	; 0x5d
 80080c6:	2206      	movs	r2, #6
 80080c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	b2d2      	uxtb	r2, r2
 80080d2:	4611      	mov	r1, r2
 80080d4:	4618      	mov	r0, r3
 80080d6:	f004 fc5a 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e6:	461a      	mov	r2, r3
 80080e8:	2380      	movs	r3, #128	; 0x80
 80080ea:	6093      	str	r3, [r2, #8]
}
 80080ec:	e087      	b.n	80081fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	015a      	lsls	r2, r3, #5
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	4413      	add	r3, r2
 80080f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	2b10      	cmp	r3, #16
 8008102:	d17c      	bne.n	80081fe <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	440b      	add	r3, r1
 8008112:	333f      	adds	r3, #63	; 0x3f
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d122      	bne.n	8008160 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	440b      	add	r3, r1
 8008128:	3358      	adds	r3, #88	; 0x58
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	440a      	add	r2, r1
 8008144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008148:	f043 0302 	orr.w	r3, r3, #2
 800814c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	4611      	mov	r1, r2
 8008158:	4618      	mov	r0, r3
 800815a:	f004 fc18 	bl	800c98e <USB_HC_Halt>
 800815e:	e045      	b.n	80081ec <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	440b      	add	r3, r1
 800816e:	333f      	adds	r3, #63	; 0x3f
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00a      	beq.n	800818c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4613      	mov	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	440b      	add	r3, r1
 8008184:	333f      	adds	r3, #63	; 0x3f
 8008186:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8008188:	2b02      	cmp	r3, #2
 800818a:	d12f      	bne.n	80081ec <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	440b      	add	r3, r1
 800819a:	3358      	adds	r3, #88	; 0x58
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d121      	bne.n	80081ec <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4613      	mov	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4413      	add	r3, r2
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	440b      	add	r3, r1
 80081b6:	335d      	adds	r3, #93	; 0x5d
 80081b8:	2203      	movs	r2, #3
 80081ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081d6:	f043 0302 	orr.w	r3, r3, #2
 80081da:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	4611      	mov	r1, r2
 80081e6:	4618      	mov	r0, r3
 80081e8:	f004 fbd1 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081f8:	461a      	mov	r2, r3
 80081fa:	2310      	movs	r3, #16
 80081fc:	6093      	str	r3, [r2, #8]
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b086      	sub	sp, #24
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	4413      	add	r3, r2
 8008228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b04      	cmp	r3, #4
 8008234:	d119      	bne.n	800826a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	4413      	add	r3, r2
 800823e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008242:	461a      	mov	r2, r3
 8008244:	2304      	movs	r3, #4
 8008246:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	4413      	add	r3, r2
 8008250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	440a      	add	r2, r1
 800825e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008262:	f043 0302 	orr.w	r3, r3, #2
 8008266:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8008268:	e33e      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	4413      	add	r3, r2
 8008272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d141      	bne.n	8008304 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4413      	add	r3, r2
 8008288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800828c:	461a      	mov	r2, r3
 800828e:	2320      	movs	r3, #32
 8008290:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4613      	mov	r3, r2
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	440b      	add	r3, r1
 80082a0:	333d      	adds	r3, #61	; 0x3d
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	f040 831f 	bne.w	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	440b      	add	r3, r1
 80082b8:	333d      	adds	r3, #61	; 0x3d
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80082be:	6879      	ldr	r1, [r7, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	00db      	lsls	r3, r3, #3
 80082ca:	440b      	add	r3, r1
 80082cc:	335c      	adds	r3, #92	; 0x5c
 80082ce:	2202      	movs	r2, #2
 80082d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082ec:	f043 0302 	orr.w	r3, r3, #2
 80082f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	4611      	mov	r1, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f004 fb46 	bl	800c98e <USB_HC_Halt>
}
 8008302:	e2f1      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4413      	add	r3, r2
 800830c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d13f      	bne.n	800839a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	440b      	add	r3, r1
 8008328:	335d      	adds	r3, #93	; 0x5d
 800832a:	2204      	movs	r2, #4
 800832c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	440b      	add	r3, r1
 800833c:	333d      	adds	r3, #61	; 0x3d
 800833e:	2201      	movs	r2, #1
 8008340:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	00db      	lsls	r3, r3, #3
 800834e:	440b      	add	r3, r1
 8008350:	3358      	adds	r3, #88	; 0x58
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4413      	add	r3, r2
 800835e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	440a      	add	r2, r1
 800836c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008370:	f043 0302 	orr.w	r3, r3, #2
 8008374:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	b2d2      	uxtb	r2, r2
 800837e:	4611      	mov	r1, r2
 8008380:	4618      	mov	r0, r3
 8008382:	f004 fb04 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	015a      	lsls	r2, r3, #5
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4413      	add	r3, r2
 800838e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008392:	461a      	mov	r2, r3
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	6093      	str	r3, [r2, #8]
}
 8008398:	e2a6      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b0:	d122      	bne.n	80083f8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	0151      	lsls	r1, r2, #5
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	440a      	add	r2, r1
 80083c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083cc:	f043 0302 	orr.w	r3, r3, #2
 80083d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	b2d2      	uxtb	r2, r2
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f004 fad6 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ee:	461a      	mov	r2, r3
 80083f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f4:	6093      	str	r3, [r2, #8]
}
 80083f6:	e277      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b01      	cmp	r3, #1
 800840c:	d135      	bne.n	800847a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	00db      	lsls	r3, r3, #3
 800841a:	440b      	add	r3, r1
 800841c:	3358      	adds	r3, #88	; 0x58
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	4413      	add	r3, r2
 800842a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	440a      	add	r2, r1
 8008438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800843c:	f043 0302 	orr.w	r3, r3, #2
 8008440:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f004 fa9e 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4413      	add	r3, r2
 800845a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800845e:	461a      	mov	r2, r3
 8008460:	2301      	movs	r3, #1
 8008462:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	440b      	add	r3, r1
 8008472:	335d      	adds	r3, #93	; 0x5d
 8008474:	2201      	movs	r2, #1
 8008476:	701a      	strb	r2, [r3, #0]
}
 8008478:	e236      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	4413      	add	r3, r2
 8008482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f003 0308 	and.w	r3, r3, #8
 800848c:	2b08      	cmp	r3, #8
 800848e:	d12b      	bne.n	80084e8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800849c:	461a      	mov	r2, r3
 800849e:	2308      	movs	r3, #8
 80084a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	0151      	lsls	r1, r2, #5
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	440a      	add	r2, r1
 80084b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80084bc:	f043 0302 	orr.w	r3, r3, #2
 80084c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f004 fa5e 	bl	800c98e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	440b      	add	r3, r1
 80084e0:	335d      	adds	r3, #93	; 0x5d
 80084e2:	2205      	movs	r2, #5
 80084e4:	701a      	strb	r2, [r3, #0]
}
 80084e6:	e1ff      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b10      	cmp	r3, #16
 80084fc:	d155      	bne.n	80085aa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4613      	mov	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	440b      	add	r3, r1
 800850c:	3358      	adds	r3, #88	; 0x58
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	440b      	add	r3, r1
 8008520:	335d      	adds	r3, #93	; 0x5d
 8008522:	2203      	movs	r2, #3
 8008524:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	440b      	add	r3, r1
 8008534:	333d      	adds	r3, #61	; 0x3d
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d114      	bne.n	8008566 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	440b      	add	r3, r1
 800854a:	333c      	adds	r3, #60	; 0x3c
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8008552:	6879      	ldr	r1, [r7, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	440b      	add	r3, r1
 8008560:	333d      	adds	r3, #61	; 0x3d
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4413      	add	r3, r2
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	440a      	add	r2, r1
 800857c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008580:	f043 0302 	orr.w	r3, r3, #2
 8008584:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	b2d2      	uxtb	r2, r2
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f004 f9fc 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	4413      	add	r3, r2
 800859e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a2:	461a      	mov	r2, r3
 80085a4:	2310      	movs	r3, #16
 80085a6:	6093      	str	r3, [r2, #8]
}
 80085a8:	e19e      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085bc:	2b80      	cmp	r3, #128	; 0x80
 80085be:	d12b      	bne.n	8008618 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	0151      	lsls	r1, r2, #5
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	440a      	add	r2, r1
 80085d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085da:	f043 0302 	orr.w	r3, r3, #2
 80085de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f004 f9cf 	bl	800c98e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4613      	mov	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	440b      	add	r3, r1
 80085fe:	335d      	adds	r3, #93	; 0x5d
 8008600:	2206      	movs	r2, #6
 8008602:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	4413      	add	r3, r2
 800860c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008610:	461a      	mov	r2, r3
 8008612:	2380      	movs	r3, #128	; 0x80
 8008614:	6093      	str	r3, [r2, #8]
}
 8008616:	e167      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	4413      	add	r3, r2
 8008620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800862e:	d135      	bne.n	800869c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864a:	f043 0302 	orr.w	r3, r3, #2
 800864e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	b2d2      	uxtb	r2, r2
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f004 f997 	bl	800c98e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866c:	461a      	mov	r2, r3
 800866e:	2310      	movs	r3, #16
 8008670:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	4413      	add	r3, r2
 800867a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867e:	461a      	mov	r2, r3
 8008680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008684:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	440b      	add	r3, r1
 8008694:	335d      	adds	r3, #93	; 0x5d
 8008696:	2208      	movs	r2, #8
 8008698:	701a      	strb	r2, [r3, #0]
}
 800869a:	e125      	b.n	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	f040 811a 	bne.w	80088e8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ce:	f023 0302 	bic.w	r3, r3, #2
 80086d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	00db      	lsls	r3, r3, #3
 80086e0:	440b      	add	r3, r1
 80086e2:	335d      	adds	r3, #93	; 0x5d
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d137      	bne.n	800875a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4613      	mov	r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4413      	add	r3, r2
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	440b      	add	r3, r1
 80086f8:	335c      	adds	r3, #92	; 0x5c
 80086fa:	2201      	movs	r2, #1
 80086fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80086fe:	6879      	ldr	r1, [r7, #4]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	440b      	add	r3, r1
 800870c:	333f      	adds	r3, #63	; 0x3f
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d00b      	beq.n	800872c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8008714:	6879      	ldr	r1, [r7, #4]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	440b      	add	r3, r1
 8008722:	333f      	adds	r3, #63	; 0x3f
 8008724:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8008726:	2b03      	cmp	r3, #3
 8008728:	f040 80c5 	bne.w	80088b6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	440b      	add	r3, r1
 800873a:	3351      	adds	r3, #81	; 0x51
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f083 0301 	eor.w	r3, r3, #1
 8008742:	b2d8      	uxtb	r0, r3
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	440b      	add	r3, r1
 8008752:	3351      	adds	r3, #81	; 0x51
 8008754:	4602      	mov	r2, r0
 8008756:	701a      	strb	r2, [r3, #0]
 8008758:	e0ad      	b.n	80088b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	440b      	add	r3, r1
 8008768:	335d      	adds	r3, #93	; 0x5d
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b03      	cmp	r3, #3
 800876e:	d10a      	bne.n	8008786 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	00db      	lsls	r3, r3, #3
 800877c:	440b      	add	r3, r1
 800877e:	335c      	adds	r3, #92	; 0x5c
 8008780:	2202      	movs	r2, #2
 8008782:	701a      	strb	r2, [r3, #0]
 8008784:	e097      	b.n	80088b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4613      	mov	r3, r2
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	4413      	add	r3, r2
 8008790:	00db      	lsls	r3, r3, #3
 8008792:	440b      	add	r3, r1
 8008794:	335d      	adds	r3, #93	; 0x5d
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b04      	cmp	r3, #4
 800879a:	d10a      	bne.n	80087b2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	440b      	add	r3, r1
 80087aa:	335c      	adds	r3, #92	; 0x5c
 80087ac:	2202      	movs	r2, #2
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	e081      	b.n	80088b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	440b      	add	r3, r1
 80087c0:	335d      	adds	r3, #93	; 0x5d
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b05      	cmp	r3, #5
 80087c6:	d10a      	bne.n	80087de <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4613      	mov	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	440b      	add	r3, r1
 80087d6:	335c      	adds	r3, #92	; 0x5c
 80087d8:	2205      	movs	r2, #5
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e06b      	b.n	80088b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	00db      	lsls	r3, r3, #3
 80087ea:	440b      	add	r3, r1
 80087ec:	335d      	adds	r3, #93	; 0x5d
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b06      	cmp	r3, #6
 80087f2:	d00a      	beq.n	800880a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	00db      	lsls	r3, r3, #3
 8008800:	440b      	add	r3, r1
 8008802:	335d      	adds	r3, #93	; 0x5d
 8008804:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8008806:	2b08      	cmp	r3, #8
 8008808:	d155      	bne.n	80088b6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	440b      	add	r3, r1
 8008818:	3358      	adds	r3, #88	; 0x58
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	1c59      	adds	r1, r3, #1
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	4403      	add	r3, r0
 800882c:	3358      	adds	r3, #88	; 0x58
 800882e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	440b      	add	r3, r1
 800883e:	3358      	adds	r3, #88	; 0x58
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b03      	cmp	r3, #3
 8008844:	d914      	bls.n	8008870 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	00db      	lsls	r3, r3, #3
 8008852:	440b      	add	r3, r1
 8008854:	3358      	adds	r3, #88	; 0x58
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	440b      	add	r3, r1
 8008868:	335c      	adds	r3, #92	; 0x5c
 800886a:	2204      	movs	r2, #4
 800886c:	701a      	strb	r2, [r3, #0]
 800886e:	e009      	b.n	8008884 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	440b      	add	r3, r1
 800887e:	335c      	adds	r3, #92	; 0x5c
 8008880:	2202      	movs	r2, #2
 8008882:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	4413      	add	r3, r2
 800888c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800889a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b0:	461a      	mov	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c2:	461a      	mov	r2, r3
 80088c4:	2302      	movs	r3, #2
 80088c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	b2d8      	uxtb	r0, r3
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	440b      	add	r3, r1
 80088da:	335c      	adds	r3, #92	; 0x5c
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	4601      	mov	r1, r0
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f005 fb30 	bl	800df48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80088e8:	bf00      	nop
 80088ea:	3718      	adds	r7, #24
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08a      	sub	sp, #40	; 0x28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	0c5b      	lsrs	r3, r3, #17
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	091b      	lsrs	r3, r3, #4
 8008920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008924:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d003      	beq.n	8008934 <HCD_RXQLVL_IRQHandler+0x44>
 800892c:	2b05      	cmp	r3, #5
 800892e:	f000 8082 	beq.w	8008a36 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8008932:	e083      	b.n	8008a3c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d07f      	beq.n	8008a3a <HCD_RXQLVL_IRQHandler+0x14a>
 800893a:	6879      	ldr	r1, [r7, #4]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	440b      	add	r3, r1
 8008948:	3344      	adds	r3, #68	; 0x44
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d074      	beq.n	8008a3a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	440b      	add	r3, r1
 8008962:	3344      	adds	r3, #68	; 0x44
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	b292      	uxth	r2, r2
 800896a:	4619      	mov	r1, r3
 800896c:	f003 ff7a 	bl	800c864 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	4613      	mov	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	440b      	add	r3, r1
 800897e:	3344      	adds	r3, #68	; 0x44
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	18d1      	adds	r1, r2, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	00db      	lsls	r3, r3, #3
 8008992:	4403      	add	r3, r0
 8008994:	3344      	adds	r3, #68	; 0x44
 8008996:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	440b      	add	r3, r1
 80089a6:	334c      	adds	r3, #76	; 0x4c
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	18d1      	adds	r1, r2, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	69ba      	ldr	r2, [r7, #24]
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	4403      	add	r3, r0
 80089bc:	334c      	adds	r3, #76	; 0x4c
 80089be:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089cc:	691a      	ldr	r2, [r3, #16]
 80089ce:	4b1d      	ldr	r3, [pc, #116]	; (8008a44 <HCD_RXQLVL_IRQHandler+0x154>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d031      	beq.n	8008a3a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80089ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	440b      	add	r3, r1
 8008a16:	3350      	adds	r3, #80	; 0x50
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f083 0301 	eor.w	r3, r3, #1
 8008a1e:	b2d8      	uxtb	r0, r3
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	440b      	add	r3, r1
 8008a2e:	3350      	adds	r3, #80	; 0x50
 8008a30:	4602      	mov	r2, r0
 8008a32:	701a      	strb	r2, [r3, #0]
      break;
 8008a34:	e001      	b.n	8008a3a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8008a36:	bf00      	nop
 8008a38:	e000      	b.n	8008a3c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008a3a:	bf00      	nop
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	3728      	adds	r7, #40	; 0x28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	1ff80000 	.word	0x1ff80000

08008a48 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a74:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d10b      	bne.n	8008a98 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d102      	bne.n	8008a90 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f005 fa40 	bl	800df10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f043 0302 	orr.w	r3, r3, #2
 8008a96:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b08      	cmp	r3, #8
 8008aa0:	d132      	bne.n	8008b08 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f043 0308 	orr.w	r3, r3, #8
 8008aa8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b04      	cmp	r3, #4
 8008ab2:	d126      	bne.n	8008b02 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d113      	bne.n	8008ae4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ac6:	d106      	bne.n	8008ad6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2102      	movs	r1, #2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f003 ff12 	bl	800c8f8 <USB_InitFSLSPClkSel>
 8008ad4:	e011      	b.n	8008afa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2101      	movs	r1, #1
 8008adc:	4618      	mov	r0, r3
 8008ade:	f003 ff0b 	bl	800c8f8 <USB_InitFSLSPClkSel>
 8008ae2:	e00a      	b.n	8008afa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d106      	bne.n	8008afa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008af2:	461a      	mov	r2, r3
 8008af4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008af8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f005 fa36 	bl	800df6c <HAL_HCD_PortEnabled_Callback>
 8008b00:	e002      	b.n	8008b08 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f005 fa40 	bl	800df88 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d103      	bne.n	8008b1a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f043 0320 	orr.w	r3, r3, #32
 8008b18:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b20:	461a      	mov	r2, r3
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6013      	str	r3, [r2, #0]
}
 8008b26:	bf00      	nop
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e11f      	b.n	8008d82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7fb fb02 	bl	8004160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2224      	movs	r2, #36	; 0x24
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0201 	bic.w	r2, r2, #1
 8008b72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b94:	f001 f88a 	bl	8009cac <HAL_RCC_GetPCLK1Freq>
 8008b98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4a7b      	ldr	r2, [pc, #492]	; (8008d8c <HAL_I2C_Init+0x25c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d807      	bhi.n	8008bb4 <HAL_I2C_Init+0x84>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4a7a      	ldr	r2, [pc, #488]	; (8008d90 <HAL_I2C_Init+0x260>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bf94      	ite	ls
 8008bac:	2301      	movls	r3, #1
 8008bae:	2300      	movhi	r3, #0
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	e006      	b.n	8008bc2 <HAL_I2C_Init+0x92>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4a77      	ldr	r2, [pc, #476]	; (8008d94 <HAL_I2C_Init+0x264>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bf94      	ite	ls
 8008bbc:	2301      	movls	r3, #1
 8008bbe:	2300      	movhi	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e0db      	b.n	8008d82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a72      	ldr	r2, [pc, #456]	; (8008d98 <HAL_I2C_Init+0x268>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	0c9b      	lsrs	r3, r3, #18
 8008bd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6a1b      	ldr	r3, [r3, #32]
 8008bf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a64      	ldr	r2, [pc, #400]	; (8008d8c <HAL_I2C_Init+0x25c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d802      	bhi.n	8008c04 <HAL_I2C_Init+0xd4>
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	3301      	adds	r3, #1
 8008c02:	e009      	b.n	8008c18 <HAL_I2C_Init+0xe8>
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c0a:	fb02 f303 	mul.w	r3, r2, r3
 8008c0e:	4a63      	ldr	r2, [pc, #396]	; (8008d9c <HAL_I2C_Init+0x26c>)
 8008c10:	fba2 2303 	umull	r2, r3, r2, r3
 8008c14:	099b      	lsrs	r3, r3, #6
 8008c16:	3301      	adds	r3, #1
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6812      	ldr	r2, [r2, #0]
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008c2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	4956      	ldr	r1, [pc, #344]	; (8008d8c <HAL_I2C_Init+0x25c>)
 8008c34:	428b      	cmp	r3, r1
 8008c36:	d80d      	bhi.n	8008c54 <HAL_I2C_Init+0x124>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	1e59      	subs	r1, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c46:	3301      	adds	r3, #1
 8008c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c4c:	2b04      	cmp	r3, #4
 8008c4e:	bf38      	it	cc
 8008c50:	2304      	movcc	r3, #4
 8008c52:	e04f      	b.n	8008cf4 <HAL_I2C_Init+0x1c4>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d111      	bne.n	8008c80 <HAL_I2C_Init+0x150>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	1e58      	subs	r0, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6859      	ldr	r1, [r3, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	440b      	add	r3, r1
 8008c6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c6e:	3301      	adds	r3, #1
 8008c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bf0c      	ite	eq
 8008c78:	2301      	moveq	r3, #1
 8008c7a:	2300      	movne	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	e012      	b.n	8008ca6 <HAL_I2C_Init+0x176>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1e58      	subs	r0, r3, #1
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6859      	ldr	r1, [r3, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	0099      	lsls	r1, r3, #2
 8008c90:	440b      	add	r3, r1
 8008c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <HAL_I2C_Init+0x17e>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e022      	b.n	8008cf4 <HAL_I2C_Init+0x1c4>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10e      	bne.n	8008cd4 <HAL_I2C_Init+0x1a4>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	1e58      	subs	r0, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6859      	ldr	r1, [r3, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	440b      	add	r3, r1
 8008cc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cc8:	3301      	adds	r3, #1
 8008cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd2:	e00f      	b.n	8008cf4 <HAL_I2C_Init+0x1c4>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	1e58      	subs	r0, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	0099      	lsls	r1, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cea:	3301      	adds	r3, #1
 8008cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cf4:	6879      	ldr	r1, [r7, #4]
 8008cf6:	6809      	ldr	r1, [r1, #0]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	69da      	ldr	r2, [r3, #28]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6911      	ldr	r1, [r2, #16]
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	68d2      	ldr	r2, [r2, #12]
 8008d2e:	4311      	orrs	r1, r2
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	430b      	orrs	r3, r1
 8008d36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	695a      	ldr	r2, [r3, #20]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2220      	movs	r2, #32
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	000186a0 	.word	0x000186a0
 8008d90:	001e847f 	.word	0x001e847f
 8008d94:	003d08ff 	.word	0x003d08ff
 8008d98:	431bde83 	.word	0x431bde83
 8008d9c:	10624dd3 	.word	0x10624dd3

08008da0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b20      	cmp	r3, #32
 8008db4:	d129      	bne.n	8008e0a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2224      	movs	r2, #36	; 0x24
 8008dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0210 	bic.w	r2, r2, #16
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	430a      	orrs	r2, r1
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f042 0201 	orr.w	r2, r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e000      	b.n	8008e0c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008e0a:	2302      	movs	r3, #2
  }
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	d12a      	bne.n	8008e88 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2224      	movs	r2, #36	; 0x24
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008e52:	89fb      	ldrh	r3, [r7, #14]
 8008e54:	f023 030f 	bic.w	r3, r3, #15
 8008e58:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	89fb      	ldrh	r3, [r7, #14]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	89fa      	ldrh	r2, [r7, #14]
 8008e6a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f042 0201 	orr.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2220      	movs	r2, #32
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	e000      	b.n	8008e8a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008e88:	2302      	movs	r3, #2
  }
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
	...

08008e98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e0bf      	b.n	800902a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d106      	bne.n	8008ec4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7fb fa6a 	bl	8004398 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008eda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008ef0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6899      	ldr	r1, [r3, #8]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4b4a      	ldr	r3, [pc, #296]	; (8009034 <HAL_LTDC_Init+0x19c>)
 8008f0c:	400b      	ands	r3, r1
 8008f0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6899      	ldr	r1, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68d9      	ldr	r1, [r3, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	4b3e      	ldr	r3, [pc, #248]	; (8009034 <HAL_LTDC_Init+0x19c>)
 8008f3a:	400b      	ands	r3, r1
 8008f3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	041b      	lsls	r3, r3, #16
 8008f44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68d9      	ldr	r1, [r3, #12]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6919      	ldr	r1, [r3, #16]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	4b33      	ldr	r3, [pc, #204]	; (8009034 <HAL_LTDC_Init+0x19c>)
 8008f68:	400b      	ands	r3, r1
 8008f6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	041b      	lsls	r3, r3, #16
 8008f72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6919      	ldr	r1, [r3, #16]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6959      	ldr	r1, [r3, #20]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	4b27      	ldr	r3, [pc, #156]	; (8009034 <HAL_LTDC_Init+0x19c>)
 8008f96:	400b      	ands	r3, r1
 8008f98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	041b      	lsls	r3, r3, #16
 8008fa0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6959      	ldr	r1, [r3, #20]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008fbe:	021b      	lsls	r3, r3, #8
 8008fc0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008fc8:	041b      	lsls	r3, r3, #16
 8008fca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f042 0206 	orr.w	r2, r2, #6
 8009006:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	f000f800 	.word	0xf000f800

08009038 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009038:	b5b0      	push	{r4, r5, r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_LTDC_ConfigLayer+0x1a>
 800904e:	2302      	movs	r3, #2
 8009050:	e02c      	b.n	80090ac <HAL_LTDC_ConfigLayer+0x74>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2202      	movs	r2, #2
 800905e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2134      	movs	r1, #52	; 0x34
 8009068:	fb01 f303 	mul.w	r3, r1, r3
 800906c:	4413      	add	r3, r2
 800906e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4614      	mov	r4, r2
 8009076:	461d      	mov	r5, r3
 8009078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800907a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800907c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800907e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f83b 	bl	8009108 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2201      	movs	r2, #1
 8009098:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bdb0      	pop	{r4, r5, r7, pc}

080090b4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_LTDC_EnableDither+0x16>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e016      	b.n	80090f8 <HAL_LTDC_EnableDither+0x44>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2202      	movs	r2, #2
 80090d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80090da:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <HAL_LTDC_EnableDither+0x50>)
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	4a09      	ldr	r2, [pc, #36]	; (8009104 <HAL_LTDC_EnableDither+0x50>)
 80090e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090e4:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	40016800 	.word	0x40016800

08009108 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009108:	b480      	push	{r7}
 800910a:	b089      	sub	sp, #36	; 0x24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	0c1b      	lsrs	r3, r3, #16
 8009120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009124:	4413      	add	r3, r2
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	01db      	lsls	r3, r3, #7
 8009134:	4413      	add	r3, r2
 8009136:	3384      	adds	r3, #132	; 0x84
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	6812      	ldr	r2, [r2, #0]
 800913e:	4611      	mov	r1, r2
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	01d2      	lsls	r2, r2, #7
 8009144:	440a      	add	r2, r1
 8009146:	3284      	adds	r2, #132	; 0x84
 8009148:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800914c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800915e:	4413      	add	r3, r2
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4619      	mov	r1, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	01db      	lsls	r3, r3, #7
 800916c:	440b      	add	r3, r1
 800916e:	3384      	adds	r3, #132	; 0x84
 8009170:	4619      	mov	r1, r3
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	4313      	orrs	r3, r2
 8009176:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009186:	4413      	add	r3, r2
 8009188:	041b      	lsls	r3, r3, #16
 800918a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	01db      	lsls	r3, r3, #7
 8009196:	4413      	add	r3, r2
 8009198:	3384      	adds	r3, #132	; 0x84
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	6812      	ldr	r2, [r2, #0]
 80091a0:	4611      	mov	r1, r2
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	01d2      	lsls	r2, r2, #7
 80091a6:	440a      	add	r2, r1
 80091a8:	3284      	adds	r2, #132	; 0x84
 80091aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80091ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091be:	4413      	add	r3, r2
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4619      	mov	r1, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	01db      	lsls	r3, r3, #7
 80091cc:	440b      	add	r3, r1
 80091ce:	3384      	adds	r3, #132	; 0x84
 80091d0:	4619      	mov	r1, r3
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	4313      	orrs	r3, r2
 80091d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	01db      	lsls	r3, r3, #7
 80091e2:	4413      	add	r3, r2
 80091e4:	3384      	adds	r3, #132	; 0x84
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	4611      	mov	r1, r2
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	01d2      	lsls	r2, r2, #7
 80091f2:	440a      	add	r2, r1
 80091f4:	3284      	adds	r2, #132	; 0x84
 80091f6:	f023 0307 	bic.w	r3, r3, #7
 80091fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	01db      	lsls	r3, r3, #7
 8009206:	4413      	add	r3, r2
 8009208:	3384      	adds	r3, #132	; 0x84
 800920a:	461a      	mov	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009218:	021b      	lsls	r3, r3, #8
 800921a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	061b      	lsls	r3, r3, #24
 800922c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	461a      	mov	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	01db      	lsls	r3, r3, #7
 8009238:	4413      	add	r3, r2
 800923a:	3384      	adds	r3, #132	; 0x84
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	01db      	lsls	r3, r3, #7
 8009248:	4413      	add	r3, r2
 800924a:	3384      	adds	r3, #132	; 0x84
 800924c:	461a      	mov	r2, r3
 800924e:	2300      	movs	r3, #0
 8009250:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009258:	461a      	mov	r2, r3
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	431a      	orrs	r2, r3
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	431a      	orrs	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4619      	mov	r1, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	01db      	lsls	r3, r3, #7
 800926c:	440b      	add	r3, r1
 800926e:	3384      	adds	r3, #132	; 0x84
 8009270:	4619      	mov	r1, r3
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	4313      	orrs	r3, r2
 8009276:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	461a      	mov	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	01db      	lsls	r3, r3, #7
 8009282:	4413      	add	r3, r2
 8009284:	3384      	adds	r3, #132	; 0x84
 8009286:	695b      	ldr	r3, [r3, #20]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	4611      	mov	r1, r2
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	01d2      	lsls	r2, r2, #7
 8009292:	440a      	add	r2, r1
 8009294:	3284      	adds	r2, #132	; 0x84
 8009296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800929a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	01db      	lsls	r3, r3, #7
 80092a6:	4413      	add	r3, r2
 80092a8:	3384      	adds	r3, #132	; 0x84
 80092aa:	461a      	mov	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	695b      	ldr	r3, [r3, #20]
 80092b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	01db      	lsls	r3, r3, #7
 80092bc:	4413      	add	r3, r2
 80092be:	3384      	adds	r3, #132	; 0x84
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	4611      	mov	r1, r2
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	01d2      	lsls	r2, r2, #7
 80092cc:	440a      	add	r2, r1
 80092ce:	3284      	adds	r2, #132	; 0x84
 80092d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80092d4:	f023 0307 	bic.w	r3, r3, #7
 80092d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	69da      	ldr	r2, [r3, #28]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	68f9      	ldr	r1, [r7, #12]
 80092e4:	6809      	ldr	r1, [r1, #0]
 80092e6:	4608      	mov	r0, r1
 80092e8:	6879      	ldr	r1, [r7, #4]
 80092ea:	01c9      	lsls	r1, r1, #7
 80092ec:	4401      	add	r1, r0
 80092ee:	3184      	adds	r1, #132	; 0x84
 80092f0:	4313      	orrs	r3, r2
 80092f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	01db      	lsls	r3, r3, #7
 80092fe:	4413      	add	r3, r2
 8009300:	3384      	adds	r3, #132	; 0x84
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	01db      	lsls	r3, r3, #7
 800930e:	4413      	add	r3, r2
 8009310:	3384      	adds	r3, #132	; 0x84
 8009312:	461a      	mov	r2, r3
 8009314:	2300      	movs	r3, #0
 8009316:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	461a      	mov	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	01db      	lsls	r3, r3, #7
 8009322:	4413      	add	r3, r2
 8009324:	3384      	adds	r3, #132	; 0x84
 8009326:	461a      	mov	r2, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d102      	bne.n	800933c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8009336:	2304      	movs	r3, #4
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	e01b      	b.n	8009374 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d102      	bne.n	800934a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8009344:	2303      	movs	r3, #3
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	e014      	b.n	8009374 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	2b04      	cmp	r3, #4
 8009350:	d00b      	beq.n	800936a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009356:	2b02      	cmp	r3, #2
 8009358:	d007      	beq.n	800936a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800935e:	2b03      	cmp	r3, #3
 8009360:	d003      	beq.n	800936a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009366:	2b07      	cmp	r3, #7
 8009368:	d102      	bne.n	8009370 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800936a:	2302      	movs	r3, #2
 800936c:	61fb      	str	r3, [r7, #28]
 800936e:	e001      	b.n	8009374 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8009370:	2301      	movs	r3, #1
 8009372:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	01db      	lsls	r3, r3, #7
 800937e:	4413      	add	r3, r2
 8009380:	3384      	adds	r3, #132	; 0x84
 8009382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	4611      	mov	r1, r2
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	01d2      	lsls	r2, r2, #7
 800938e:	440a      	add	r2, r1
 8009390:	3284      	adds	r2, #132	; 0x84
 8009392:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009396:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939c:	69fa      	ldr	r2, [r7, #28]
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	041a      	lsls	r2, r3, #16
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	6859      	ldr	r1, [r3, #4]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	1acb      	subs	r3, r1, r3
 80093ae:	69f9      	ldr	r1, [r7, #28]
 80093b0:	fb01 f303 	mul.w	r3, r1, r3
 80093b4:	3303      	adds	r3, #3
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	6809      	ldr	r1, [r1, #0]
 80093ba:	4608      	mov	r0, r1
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	01c9      	lsls	r1, r1, #7
 80093c0:	4401      	add	r1, r0
 80093c2:	3184      	adds	r1, #132	; 0x84
 80093c4:	4313      	orrs	r3, r2
 80093c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	461a      	mov	r2, r3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	01db      	lsls	r3, r3, #7
 80093d2:	4413      	add	r3, r2
 80093d4:	3384      	adds	r3, #132	; 0x84
 80093d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	6812      	ldr	r2, [r2, #0]
 80093dc:	4611      	mov	r1, r2
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	01d2      	lsls	r2, r2, #7
 80093e2:	440a      	add	r2, r1
 80093e4:	3284      	adds	r2, #132	; 0x84
 80093e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80093ea:	f023 0307 	bic.w	r3, r3, #7
 80093ee:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	01db      	lsls	r3, r3, #7
 80093fa:	4413      	add	r3, r2
 80093fc:	3384      	adds	r3, #132	; 0x84
 80093fe:	461a      	mov	r2, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	461a      	mov	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	01db      	lsls	r3, r3, #7
 8009410:	4413      	add	r3, r2
 8009412:	3384      	adds	r3, #132	; 0x84
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	6812      	ldr	r2, [r2, #0]
 800941a:	4611      	mov	r1, r2
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	01d2      	lsls	r2, r2, #7
 8009420:	440a      	add	r2, r1
 8009422:	3284      	adds	r2, #132	; 0x84
 8009424:	f043 0301 	orr.w	r3, r3, #1
 8009428:	6013      	str	r3, [r2, #0]
}
 800942a:	bf00      	nop
 800942c:	3724      	adds	r7, #36	; 0x24
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
	...

08009438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e25b      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d075      	beq.n	8009542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009456:	4ba3      	ldr	r3, [pc, #652]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 030c 	and.w	r3, r3, #12
 800945e:	2b04      	cmp	r3, #4
 8009460:	d00c      	beq.n	800947c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009462:	4ba0      	ldr	r3, [pc, #640]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800946a:	2b08      	cmp	r3, #8
 800946c:	d112      	bne.n	8009494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800946e:	4b9d      	ldr	r3, [pc, #628]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800947a:	d10b      	bne.n	8009494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800947c:	4b99      	ldr	r3, [pc, #612]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d05b      	beq.n	8009540 <HAL_RCC_OscConfig+0x108>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d157      	bne.n	8009540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e236      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800949c:	d106      	bne.n	80094ac <HAL_RCC_OscConfig+0x74>
 800949e:	4b91      	ldr	r3, [pc, #580]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a90      	ldr	r2, [pc, #576]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	e01d      	b.n	80094e8 <HAL_RCC_OscConfig+0xb0>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094b4:	d10c      	bne.n	80094d0 <HAL_RCC_OscConfig+0x98>
 80094b6:	4b8b      	ldr	r3, [pc, #556]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a8a      	ldr	r2, [pc, #552]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	4b88      	ldr	r3, [pc, #544]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a87      	ldr	r2, [pc, #540]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	e00b      	b.n	80094e8 <HAL_RCC_OscConfig+0xb0>
 80094d0:	4b84      	ldr	r3, [pc, #528]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a83      	ldr	r2, [pc, #524]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	4b81      	ldr	r3, [pc, #516]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a80      	ldr	r2, [pc, #512]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80094e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d013      	beq.n	8009518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094f0:	f7fc fdb0 	bl	8006054 <HAL_GetTick>
 80094f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094f6:	e008      	b.n	800950a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094f8:	f7fc fdac 	bl	8006054 <HAL_GetTick>
 80094fc:	4602      	mov	r2, r0
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	2b64      	cmp	r3, #100	; 0x64
 8009504:	d901      	bls.n	800950a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e1fb      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800950a:	4b76      	ldr	r3, [pc, #472]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0f0      	beq.n	80094f8 <HAL_RCC_OscConfig+0xc0>
 8009516:	e014      	b.n	8009542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009518:	f7fc fd9c 	bl	8006054 <HAL_GetTick>
 800951c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800951e:	e008      	b.n	8009532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009520:	f7fc fd98 	bl	8006054 <HAL_GetTick>
 8009524:	4602      	mov	r2, r0
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	2b64      	cmp	r3, #100	; 0x64
 800952c:	d901      	bls.n	8009532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e1e7      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009532:	4b6c      	ldr	r3, [pc, #432]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f0      	bne.n	8009520 <HAL_RCC_OscConfig+0xe8>
 800953e:	e000      	b.n	8009542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0302 	and.w	r3, r3, #2
 800954a:	2b00      	cmp	r3, #0
 800954c:	d063      	beq.n	8009616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800954e:	4b65      	ldr	r3, [pc, #404]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 030c 	and.w	r3, r3, #12
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00b      	beq.n	8009572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800955a:	4b62      	ldr	r3, [pc, #392]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009562:	2b08      	cmp	r3, #8
 8009564:	d11c      	bne.n	80095a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009566:	4b5f      	ldr	r3, [pc, #380]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d116      	bne.n	80095a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009572:	4b5c      	ldr	r3, [pc, #368]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <HAL_RCC_OscConfig+0x152>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d001      	beq.n	800958a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e1bb      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800958a:	4b56      	ldr	r3, [pc, #344]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	00db      	lsls	r3, r3, #3
 8009598:	4952      	ldr	r1, [pc, #328]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800959a:	4313      	orrs	r3, r2
 800959c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800959e:	e03a      	b.n	8009616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d020      	beq.n	80095ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095a8:	4b4f      	ldr	r3, [pc, #316]	; (80096e8 <HAL_RCC_OscConfig+0x2b0>)
 80095aa:	2201      	movs	r2, #1
 80095ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ae:	f7fc fd51 	bl	8006054 <HAL_GetTick>
 80095b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095b4:	e008      	b.n	80095c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095b6:	f7fc fd4d 	bl	8006054 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	d901      	bls.n	80095c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e19c      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095c8:	4b46      	ldr	r3, [pc, #280]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0f0      	beq.n	80095b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095d4:	4b43      	ldr	r3, [pc, #268]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	4940      	ldr	r1, [pc, #256]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	600b      	str	r3, [r1, #0]
 80095e8:	e015      	b.n	8009616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095ea:	4b3f      	ldr	r3, [pc, #252]	; (80096e8 <HAL_RCC_OscConfig+0x2b0>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f0:	f7fc fd30 	bl	8006054 <HAL_GetTick>
 80095f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095f8:	f7fc fd2c 	bl	8006054 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e17b      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800960a:	4b36      	ldr	r3, [pc, #216]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1f0      	bne.n	80095f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0308 	and.w	r3, r3, #8
 800961e:	2b00      	cmp	r3, #0
 8009620:	d030      	beq.n	8009684 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d016      	beq.n	8009658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800962a:	4b30      	ldr	r3, [pc, #192]	; (80096ec <HAL_RCC_OscConfig+0x2b4>)
 800962c:	2201      	movs	r2, #1
 800962e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009630:	f7fc fd10 	bl	8006054 <HAL_GetTick>
 8009634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009636:	e008      	b.n	800964a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009638:	f7fc fd0c 	bl	8006054 <HAL_GetTick>
 800963c:	4602      	mov	r2, r0
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	1ad3      	subs	r3, r2, r3
 8009642:	2b02      	cmp	r3, #2
 8009644:	d901      	bls.n	800964a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009646:	2303      	movs	r3, #3
 8009648:	e15b      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800964a:	4b26      	ldr	r3, [pc, #152]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800964c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0f0      	beq.n	8009638 <HAL_RCC_OscConfig+0x200>
 8009656:	e015      	b.n	8009684 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009658:	4b24      	ldr	r3, [pc, #144]	; (80096ec <HAL_RCC_OscConfig+0x2b4>)
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800965e:	f7fc fcf9 	bl	8006054 <HAL_GetTick>
 8009662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009664:	e008      	b.n	8009678 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009666:	f7fc fcf5 	bl	8006054 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b02      	cmp	r3, #2
 8009672:	d901      	bls.n	8009678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e144      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009678:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 800967a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800967c:	f003 0302 	and.w	r3, r3, #2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1f0      	bne.n	8009666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 0304 	and.w	r3, r3, #4
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 80a0 	beq.w	80097d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009696:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10f      	bne.n	80096c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096a2:	2300      	movs	r3, #0
 80096a4:	60bb      	str	r3, [r7, #8]
 80096a6:	4b0f      	ldr	r3, [pc, #60]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	4a0e      	ldr	r2, [pc, #56]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80096ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b0:	6413      	str	r3, [r2, #64]	; 0x40
 80096b2:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <HAL_RCC_OscConfig+0x2ac>)
 80096b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ba:	60bb      	str	r3, [r7, #8]
 80096bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096be:	2301      	movs	r3, #1
 80096c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096c2:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <HAL_RCC_OscConfig+0x2b8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d121      	bne.n	8009712 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096ce:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <HAL_RCC_OscConfig+0x2b8>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a07      	ldr	r2, [pc, #28]	; (80096f0 <HAL_RCC_OscConfig+0x2b8>)
 80096d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096da:	f7fc fcbb 	bl	8006054 <HAL_GetTick>
 80096de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096e0:	e011      	b.n	8009706 <HAL_RCC_OscConfig+0x2ce>
 80096e2:	bf00      	nop
 80096e4:	40023800 	.word	0x40023800
 80096e8:	42470000 	.word	0x42470000
 80096ec:	42470e80 	.word	0x42470e80
 80096f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096f4:	f7fc fcae 	bl	8006054 <HAL_GetTick>
 80096f8:	4602      	mov	r2, r0
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	2b02      	cmp	r3, #2
 8009700:	d901      	bls.n	8009706 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e0fd      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009706:	4b81      	ldr	r3, [pc, #516]	; (800990c <HAL_RCC_OscConfig+0x4d4>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0f0      	beq.n	80096f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d106      	bne.n	8009728 <HAL_RCC_OscConfig+0x2f0>
 800971a:	4b7d      	ldr	r3, [pc, #500]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	4a7c      	ldr	r2, [pc, #496]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	6713      	str	r3, [r2, #112]	; 0x70
 8009726:	e01c      	b.n	8009762 <HAL_RCC_OscConfig+0x32a>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	2b05      	cmp	r3, #5
 800972e:	d10c      	bne.n	800974a <HAL_RCC_OscConfig+0x312>
 8009730:	4b77      	ldr	r3, [pc, #476]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009734:	4a76      	ldr	r2, [pc, #472]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009736:	f043 0304 	orr.w	r3, r3, #4
 800973a:	6713      	str	r3, [r2, #112]	; 0x70
 800973c:	4b74      	ldr	r3, [pc, #464]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 800973e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009740:	4a73      	ldr	r2, [pc, #460]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	6713      	str	r3, [r2, #112]	; 0x70
 8009748:	e00b      	b.n	8009762 <HAL_RCC_OscConfig+0x32a>
 800974a:	4b71      	ldr	r3, [pc, #452]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 800974c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974e:	4a70      	ldr	r2, [pc, #448]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009750:	f023 0301 	bic.w	r3, r3, #1
 8009754:	6713      	str	r3, [r2, #112]	; 0x70
 8009756:	4b6e      	ldr	r3, [pc, #440]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975a:	4a6d      	ldr	r2, [pc, #436]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 800975c:	f023 0304 	bic.w	r3, r3, #4
 8009760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d015      	beq.n	8009796 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800976a:	f7fc fc73 	bl	8006054 <HAL_GetTick>
 800976e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009770:	e00a      	b.n	8009788 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009772:	f7fc fc6f 	bl	8006054 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009780:	4293      	cmp	r3, r2
 8009782:	d901      	bls.n	8009788 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e0bc      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009788:	4b61      	ldr	r3, [pc, #388]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 800978a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978c:	f003 0302 	and.w	r3, r3, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0ee      	beq.n	8009772 <HAL_RCC_OscConfig+0x33a>
 8009794:	e014      	b.n	80097c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009796:	f7fc fc5d 	bl	8006054 <HAL_GetTick>
 800979a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800979c:	e00a      	b.n	80097b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800979e:	f7fc fc59 	bl	8006054 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d901      	bls.n	80097b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e0a6      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097b4:	4b56      	ldr	r3, [pc, #344]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 80097b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1ee      	bne.n	800979e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d105      	bne.n	80097d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097c6:	4b52      	ldr	r3, [pc, #328]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	4a51      	ldr	r2, [pc, #324]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 80097cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 8092 	beq.w	8009900 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097dc:	4b4c      	ldr	r3, [pc, #304]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	f003 030c 	and.w	r3, r3, #12
 80097e4:	2b08      	cmp	r3, #8
 80097e6:	d05c      	beq.n	80098a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d141      	bne.n	8009874 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097f0:	4b48      	ldr	r3, [pc, #288]	; (8009914 <HAL_RCC_OscConfig+0x4dc>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097f6:	f7fc fc2d 	bl	8006054 <HAL_GetTick>
 80097fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097fc:	e008      	b.n	8009810 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097fe:	f7fc fc29 	bl	8006054 <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	2b02      	cmp	r3, #2
 800980a:	d901      	bls.n	8009810 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e078      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009810:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1f0      	bne.n	80097fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a1b      	ldr	r3, [r3, #32]
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	019b      	lsls	r3, r3, #6
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	085b      	lsrs	r3, r3, #1
 8009834:	3b01      	subs	r3, #1
 8009836:	041b      	lsls	r3, r3, #16
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	061b      	lsls	r3, r3, #24
 8009840:	4933      	ldr	r1, [pc, #204]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009842:	4313      	orrs	r3, r2
 8009844:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009846:	4b33      	ldr	r3, [pc, #204]	; (8009914 <HAL_RCC_OscConfig+0x4dc>)
 8009848:	2201      	movs	r2, #1
 800984a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800984c:	f7fc fc02 	bl	8006054 <HAL_GetTick>
 8009850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009852:	e008      	b.n	8009866 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009854:	f7fc fbfe 	bl	8006054 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b02      	cmp	r3, #2
 8009860:	d901      	bls.n	8009866 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e04d      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009866:	4b2a      	ldr	r3, [pc, #168]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0f0      	beq.n	8009854 <HAL_RCC_OscConfig+0x41c>
 8009872:	e045      	b.n	8009900 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009874:	4b27      	ldr	r3, [pc, #156]	; (8009914 <HAL_RCC_OscConfig+0x4dc>)
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800987a:	f7fc fbeb 	bl	8006054 <HAL_GetTick>
 800987e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009880:	e008      	b.n	8009894 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009882:	f7fc fbe7 	bl	8006054 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d901      	bls.n	8009894 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e036      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009894:	4b1e      	ldr	r3, [pc, #120]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1f0      	bne.n	8009882 <HAL_RCC_OscConfig+0x44a>
 80098a0:	e02e      	b.n	8009900 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e029      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80098ae:	4b18      	ldr	r3, [pc, #96]	; (8009910 <HAL_RCC_OscConfig+0x4d8>)
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69db      	ldr	r3, [r3, #28]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d11c      	bne.n	80098fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d115      	bne.n	80098fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80098d6:	4013      	ands	r3, r2
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80098dc:	4293      	cmp	r3, r2
 80098de:	d10d      	bne.n	80098fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d106      	bne.n	80098fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d001      	beq.n	8009900 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e000      	b.n	8009902 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	40007000 	.word	0x40007000
 8009910:	40023800 	.word	0x40023800
 8009914:	42470060 	.word	0x42470060

08009918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e0cc      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800992c:	4b68      	ldr	r3, [pc, #416]	; (8009ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 030f 	and.w	r3, r3, #15
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d90c      	bls.n	8009954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800993a:	4b65      	ldr	r3, [pc, #404]	; (8009ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009942:	4b63      	ldr	r3, [pc, #396]	; (8009ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 030f 	and.w	r3, r3, #15
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	429a      	cmp	r2, r3
 800994e:	d001      	beq.n	8009954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e0b8      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0302 	and.w	r3, r3, #2
 800995c:	2b00      	cmp	r3, #0
 800995e:	d020      	beq.n	80099a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800996c:	4b59      	ldr	r3, [pc, #356]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	4a58      	ldr	r2, [pc, #352]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0308 	and.w	r3, r3, #8
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009984:	4b53      	ldr	r3, [pc, #332]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	4a52      	ldr	r2, [pc, #328]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800998a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800998e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009990:	4b50      	ldr	r3, [pc, #320]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	494d      	ldr	r1, [pc, #308]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d044      	beq.n	8009a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d107      	bne.n	80099c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099b6:	4b47      	ldr	r3, [pc, #284]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d119      	bne.n	80099f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e07f      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d003      	beq.n	80099d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d107      	bne.n	80099e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099d6:	4b3f      	ldr	r3, [pc, #252]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e06f      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099e6:	4b3b      	ldr	r3, [pc, #236]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e067      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099f6:	4b37      	ldr	r3, [pc, #220]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f023 0203 	bic.w	r2, r3, #3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	4934      	ldr	r1, [pc, #208]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a08:	f7fc fb24 	bl	8006054 <HAL_GetTick>
 8009a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a0e:	e00a      	b.n	8009a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a10:	f7fc fb20 	bl	8006054 <HAL_GetTick>
 8009a14:	4602      	mov	r2, r0
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	1ad3      	subs	r3, r2, r3
 8009a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d901      	bls.n	8009a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e04f      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a26:	4b2b      	ldr	r3, [pc, #172]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f003 020c 	and.w	r2, r3, #12
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d1eb      	bne.n	8009a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009a38:	4b25      	ldr	r3, [pc, #148]	; (8009ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 030f 	and.w	r3, r3, #15
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d20c      	bcs.n	8009a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a46:	4b22      	ldr	r3, [pc, #136]	; (8009ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a4e:	4b20      	ldr	r3, [pc, #128]	; (8009ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d001      	beq.n	8009a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e032      	b.n	8009ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d008      	beq.n	8009a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a6c:	4b19      	ldr	r3, [pc, #100]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	4916      	ldr	r1, [pc, #88]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d009      	beq.n	8009a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a8a:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	490e      	ldr	r1, [pc, #56]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a9e:	f000 f821 	bl	8009ae4 <HAL_RCC_GetSysClockFreq>
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	091b      	lsrs	r3, r3, #4
 8009aaa:	f003 030f 	and.w	r3, r3, #15
 8009aae:	4a0a      	ldr	r2, [pc, #40]	; (8009ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8009ab0:	5cd3      	ldrb	r3, [r2, r3]
 8009ab2:	fa21 f303 	lsr.w	r3, r1, r3
 8009ab6:	4a09      	ldr	r2, [pc, #36]	; (8009adc <HAL_RCC_ClockConfig+0x1c4>)
 8009ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009aba:	4b09      	ldr	r3, [pc, #36]	; (8009ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fb f84e 	bl	8004b60 <HAL_InitTick>

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	40023c00 	.word	0x40023c00
 8009ad4:	40023800 	.word	0x40023800
 8009ad8:	0800fc74 	.word	0x0800fc74
 8009adc:	20000008 	.word	0x20000008
 8009ae0:	20000054 	.word	0x20000054

08009ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	607b      	str	r3, [r7, #4]
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
 8009af2:	2300      	movs	r3, #0
 8009af4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009afa:	4b63      	ldr	r3, [pc, #396]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f003 030c 	and.w	r3, r3, #12
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d007      	beq.n	8009b16 <HAL_RCC_GetSysClockFreq+0x32>
 8009b06:	2b08      	cmp	r3, #8
 8009b08:	d008      	beq.n	8009b1c <HAL_RCC_GetSysClockFreq+0x38>
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f040 80b4 	bne.w	8009c78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b10:	4b5e      	ldr	r3, [pc, #376]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009b12:	60bb      	str	r3, [r7, #8]
       break;
 8009b14:	e0b3      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b16:	4b5e      	ldr	r3, [pc, #376]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009b18:	60bb      	str	r3, [r7, #8]
      break;
 8009b1a:	e0b0      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b1c:	4b5a      	ldr	r3, [pc, #360]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b26:	4b58      	ldr	r3, [pc, #352]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d04a      	beq.n	8009bc8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b32:	4b55      	ldr	r3, [pc, #340]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	099b      	lsrs	r3, r3, #6
 8009b38:	f04f 0400 	mov.w	r4, #0
 8009b3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	ea03 0501 	and.w	r5, r3, r1
 8009b48:	ea04 0602 	and.w	r6, r4, r2
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4632      	mov	r2, r6
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	f04f 0400 	mov.w	r4, #0
 8009b58:	0154      	lsls	r4, r2, #5
 8009b5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009b5e:	014b      	lsls	r3, r1, #5
 8009b60:	4619      	mov	r1, r3
 8009b62:	4622      	mov	r2, r4
 8009b64:	1b49      	subs	r1, r1, r5
 8009b66:	eb62 0206 	sbc.w	r2, r2, r6
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	f04f 0400 	mov.w	r4, #0
 8009b72:	0194      	lsls	r4, r2, #6
 8009b74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009b78:	018b      	lsls	r3, r1, #6
 8009b7a:	1a5b      	subs	r3, r3, r1
 8009b7c:	eb64 0402 	sbc.w	r4, r4, r2
 8009b80:	f04f 0100 	mov.w	r1, #0
 8009b84:	f04f 0200 	mov.w	r2, #0
 8009b88:	00e2      	lsls	r2, r4, #3
 8009b8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009b8e:	00d9      	lsls	r1, r3, #3
 8009b90:	460b      	mov	r3, r1
 8009b92:	4614      	mov	r4, r2
 8009b94:	195b      	adds	r3, r3, r5
 8009b96:	eb44 0406 	adc.w	r4, r4, r6
 8009b9a:	f04f 0100 	mov.w	r1, #0
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	0262      	lsls	r2, r4, #9
 8009ba4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009ba8:	0259      	lsls	r1, r3, #9
 8009baa:	460b      	mov	r3, r1
 8009bac:	4614      	mov	r4, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f04f 0400 	mov.w	r4, #0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	4623      	mov	r3, r4
 8009bbc:	f7f6 ff96 	bl	8000aec <__aeabi_uldivmod>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	e049      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bc8:	4b2f      	ldr	r3, [pc, #188]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	099b      	lsrs	r3, r3, #6
 8009bce:	f04f 0400 	mov.w	r4, #0
 8009bd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009bd6:	f04f 0200 	mov.w	r2, #0
 8009bda:	ea03 0501 	and.w	r5, r3, r1
 8009bde:	ea04 0602 	and.w	r6, r4, r2
 8009be2:	4629      	mov	r1, r5
 8009be4:	4632      	mov	r2, r6
 8009be6:	f04f 0300 	mov.w	r3, #0
 8009bea:	f04f 0400 	mov.w	r4, #0
 8009bee:	0154      	lsls	r4, r2, #5
 8009bf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009bf4:	014b      	lsls	r3, r1, #5
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	1b49      	subs	r1, r1, r5
 8009bfc:	eb62 0206 	sbc.w	r2, r2, r6
 8009c00:	f04f 0300 	mov.w	r3, #0
 8009c04:	f04f 0400 	mov.w	r4, #0
 8009c08:	0194      	lsls	r4, r2, #6
 8009c0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009c0e:	018b      	lsls	r3, r1, #6
 8009c10:	1a5b      	subs	r3, r3, r1
 8009c12:	eb64 0402 	sbc.w	r4, r4, r2
 8009c16:	f04f 0100 	mov.w	r1, #0
 8009c1a:	f04f 0200 	mov.w	r2, #0
 8009c1e:	00e2      	lsls	r2, r4, #3
 8009c20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009c24:	00d9      	lsls	r1, r3, #3
 8009c26:	460b      	mov	r3, r1
 8009c28:	4614      	mov	r4, r2
 8009c2a:	195b      	adds	r3, r3, r5
 8009c2c:	eb44 0406 	adc.w	r4, r4, r6
 8009c30:	f04f 0100 	mov.w	r1, #0
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	02a2      	lsls	r2, r4, #10
 8009c3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009c3e:	0299      	lsls	r1, r3, #10
 8009c40:	460b      	mov	r3, r1
 8009c42:	4614      	mov	r4, r2
 8009c44:	4618      	mov	r0, r3
 8009c46:	4621      	mov	r1, r4
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f04f 0400 	mov.w	r4, #0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	4623      	mov	r3, r4
 8009c52:	f7f6 ff4b 	bl	8000aec <__aeabi_uldivmod>
 8009c56:	4603      	mov	r3, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	0c1b      	lsrs	r3, r3, #16
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	3301      	adds	r3, #1
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c74:	60bb      	str	r3, [r7, #8]
      break;
 8009c76:	e002      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009c7a:	60bb      	str	r3, [r7, #8]
      break;
 8009c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c88:	40023800 	.word	0x40023800
 8009c8c:	00f42400 	.word	0x00f42400
 8009c90:	007a1200 	.word	0x007a1200

08009c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c98:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20000008 	.word	0x20000008

08009cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009cb0:	f7ff fff0 	bl	8009c94 <HAL_RCC_GetHCLKFreq>
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	4b05      	ldr	r3, [pc, #20]	; (8009ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	0a9b      	lsrs	r3, r3, #10
 8009cbc:	f003 0307 	and.w	r3, r3, #7
 8009cc0:	4a03      	ldr	r2, [pc, #12]	; (8009cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cc2:	5cd3      	ldrb	r3, [r2, r3]
 8009cc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40023800 	.word	0x40023800
 8009cd0:	0800fc84 	.word	0x0800fc84

08009cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009cd8:	f7ff ffdc 	bl	8009c94 <HAL_RCC_GetHCLKFreq>
 8009cdc:	4601      	mov	r1, r0
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	0b5b      	lsrs	r3, r3, #13
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	4a03      	ldr	r2, [pc, #12]	; (8009cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009cea:	5cd3      	ldrb	r3, [r2, r3]
 8009cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	0800fc84 	.word	0x0800fc84

08009cfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	220f      	movs	r2, #15
 8009d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <HAL_RCC_GetClockConfig+0x5c>)
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	f003 0203 	and.w	r2, r3, #3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009d18:	4b0f      	ldr	r3, [pc, #60]	; (8009d58 <HAL_RCC_GetClockConfig+0x5c>)
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009d24:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <HAL_RCC_GetClockConfig+0x5c>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009d30:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <HAL_RCC_GetClockConfig+0x5c>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	08db      	lsrs	r3, r3, #3
 8009d36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009d3e:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <HAL_RCC_GetClockConfig+0x60>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 020f 	and.w	r2, r3, #15
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	601a      	str	r2, [r3, #0]
}
 8009d4a:	bf00      	nop
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40023800 	.word	0x40023800
 8009d5c:	40023c00 	.word	0x40023c00

08009d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10b      	bne.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d075      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009d94:	4bad      	ldr	r3, [pc, #692]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d9a:	f7fc f95b 	bl	8006054 <HAL_GetTick>
 8009d9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009da0:	e008      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009da2:	f7fc f957 	bl	8006054 <HAL_GetTick>
 8009da6:	4602      	mov	r2, r0
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d901      	bls.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e18b      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009db4:	4ba6      	ldr	r3, [pc, #664]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1f0      	bne.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	019a      	lsls	r2, r3, #6
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	071b      	lsls	r3, r3, #28
 8009dd8:	499d      	ldr	r1, [pc, #628]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d01f      	beq.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009dec:	4b98      	ldr	r3, [pc, #608]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df2:	0f1b      	lsrs	r3, r3, #28
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	019a      	lsls	r2, r3, #6
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	061b      	lsls	r3, r3, #24
 8009e06:	431a      	orrs	r2, r3
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	071b      	lsls	r3, r3, #28
 8009e0c:	4990      	ldr	r1, [pc, #576]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009e14:	4b8e      	ldr	r3, [pc, #568]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1a:	f023 021f 	bic.w	r2, r3, #31
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	498a      	ldr	r1, [pc, #552]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e26:	4313      	orrs	r3, r2
 8009e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00d      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	019a      	lsls	r2, r3, #6
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	061b      	lsls	r3, r3, #24
 8009e44:	431a      	orrs	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	071b      	lsls	r3, r3, #28
 8009e4c:	4980      	ldr	r1, [pc, #512]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009e54:	4b7d      	ldr	r3, [pc, #500]	; (800a04c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009e56:	2201      	movs	r2, #1
 8009e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009e5a:	f7fc f8fb 	bl	8006054 <HAL_GetTick>
 8009e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e60:	e008      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009e62:	f7fc f8f7 	bl	8006054 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e12b      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e74:	4b76      	ldr	r3, [pc, #472]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0f0      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0304 	and.w	r3, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d105      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d079      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e98:	4b6e      	ldr	r3, [pc, #440]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009e9e:	f7fc f8d9 	bl	8006054 <HAL_GetTick>
 8009ea2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009ea6:	f7fc f8d5 	bl	8006054 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d901      	bls.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e109      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009eb8:	4b65      	ldr	r3, [pc, #404]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ec4:	d0ef      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0304 	and.w	r3, r3, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d020      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009ed2:	4b5f      	ldr	r3, [pc, #380]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	0f1b      	lsrs	r3, r3, #28
 8009eda:	f003 0307 	and.w	r3, r3, #7
 8009ede:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	019a      	lsls	r2, r3, #6
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	061b      	lsls	r3, r3, #24
 8009eec:	431a      	orrs	r2, r3
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	071b      	lsls	r3, r3, #28
 8009ef2:	4957      	ldr	r1, [pc, #348]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009efa:	4b55      	ldr	r3, [pc, #340]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a1b      	ldr	r3, [r3, #32]
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	021b      	lsls	r3, r3, #8
 8009f0c:	4950      	ldr	r1, [pc, #320]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 0308 	and.w	r3, r3, #8
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01e      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009f20:	4b4b      	ldr	r3, [pc, #300]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f26:	0e1b      	lsrs	r3, r3, #24
 8009f28:	f003 030f 	and.w	r3, r3, #15
 8009f2c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	019a      	lsls	r2, r3, #6
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	431a      	orrs	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	699b      	ldr	r3, [r3, #24]
 8009f3e:	071b      	lsls	r3, r3, #28
 8009f40:	4943      	ldr	r1, [pc, #268]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009f48:	4b41      	ldr	r3, [pc, #260]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	493e      	ldr	r1, [pc, #248]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009f5e:	4b3d      	ldr	r3, [pc, #244]	; (800a054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f64:	f7fc f876 	bl	8006054 <HAL_GetTick>
 8009f68:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f6a:	e008      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009f6c:	f7fc f872 	bl	8006054 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d901      	bls.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e0a6      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f7e:	4b34      	ldr	r3, [pc, #208]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f8a:	d1ef      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 808d 	beq.w	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	4b2c      	ldr	r3, [pc, #176]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	4a2b      	ldr	r2, [pc, #172]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8009faa:	4b29      	ldr	r3, [pc, #164]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009fb6:	4b28      	ldr	r3, [pc, #160]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a27      	ldr	r2, [pc, #156]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fc2:	f7fc f847 	bl	8006054 <HAL_GetTick>
 8009fc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fc8:	e008      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009fca:	f7fc f843 	bl	8006054 <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d901      	bls.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e077      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009fdc:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0f0      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009fe8:	4b19      	ldr	r3, [pc, #100]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ff0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d039      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	429a      	cmp	r2, r3
 800a004:	d032      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a006:	4b12      	ldr	r3, [pc, #72]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a010:	4b12      	ldr	r3, [pc, #72]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a012:	2201      	movs	r2, #1
 800a014:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a016:	4b11      	ldr	r3, [pc, #68]	; (800a05c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a01c:	4a0c      	ldr	r2, [pc, #48]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a022:	4b0b      	ldr	r3, [pc, #44]	; (800a050 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d11e      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a02e:	f7fc f811 	bl	8006054 <HAL_GetTick>
 800a032:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a034:	e014      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a036:	f7fc f80d 	bl	8006054 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	f241 3288 	movw	r2, #5000	; 0x1388
 800a044:	4293      	cmp	r3, r2
 800a046:	d90b      	bls.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e03f      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a04c:	42470068 	.word	0x42470068
 800a050:	40023800 	.word	0x40023800
 800a054:	42470070 	.word	0x42470070
 800a058:	40007000 	.word	0x40007000
 800a05c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a060:	4b1c      	ldr	r3, [pc, #112]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a064:	f003 0302 	and.w	r3, r3, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0e4      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a078:	d10d      	bne.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a07a:	4b16      	ldr	r3, [pc, #88]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08e:	4911      	ldr	r1, [pc, #68]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a090:	4313      	orrs	r3, r2
 800a092:	608b      	str	r3, [r1, #8]
 800a094:	e005      	b.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a096:	4b0f      	ldr	r3, [pc, #60]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	4a0e      	ldr	r2, [pc, #56]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a09c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a0a0:	6093      	str	r3, [r2, #8]
 800a0a2:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a0a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0ae:	4909      	ldr	r1, [pc, #36]	; (800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d004      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a0c6:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a0c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	40023800 	.word	0x40023800
 800a0d8:	424711e0 	.word	0x424711e0

0800a0dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d101      	bne.n	800a0f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e025      	b.n	800a13c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f7f9 fec5 	bl	8003e94 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2202      	movs	r2, #2
 800a10e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3304      	adds	r3, #4
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f002 f9f5 	bl	800c50c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	461a      	mov	r2, r3
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	f002 fa60 	bl	800c5f2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d101      	bne.n	800a160 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a15c:	2302      	movs	r3, #2
 800a15e:	e018      	b.n	800a192 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2202      	movs	r2, #2
 800a164:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	68b9      	ldr	r1, [r7, #8]
 800a170:	4618      	mov	r0, r3
 800a172:	f002 fabd 	bl	800c6f0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d104      	bne.n	800a188 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2205      	movs	r2, #5
 800a182:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a186:	e003      	b.n	800a190 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d101      	bne.n	800a1b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e00e      	b.n	800a1d2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f002 fad0 	bl	800c768 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b082      	sub	sp, #8
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e056      	b.n	800a29a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d106      	bne.n	800a20c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7fa fc18 	bl	8004a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685a      	ldr	r2, [r3, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a248:	431a      	orrs	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	431a      	orrs	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a1b      	ldr	r3, [r3, #32]
 800a254:	ea42 0103 	orr.w	r1, r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	f003 0104 	and.w	r1, r3, #4
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69da      	ldr	r2, [r3, #28]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a288:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e01a      	b.n	800a2ea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2ca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7fa fbfd 	bl	8004acc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b088      	sub	sp, #32
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	4613      	mov	r3, r2
 800a300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d101      	bne.n	800a314 <HAL_SPI_Transmit+0x22>
 800a310:	2302      	movs	r3, #2
 800a312:	e11e      	b.n	800a552 <HAL_SPI_Transmit+0x260>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a31c:	f7fb fe9a 	bl	8006054 <HAL_GetTick>
 800a320:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a322:	88fb      	ldrh	r3, [r7, #6]
 800a324:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d002      	beq.n	800a338 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a332:	2302      	movs	r3, #2
 800a334:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a336:	e103      	b.n	800a540 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_SPI_Transmit+0x52>
 800a33e:	88fb      	ldrh	r3, [r7, #6]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d102      	bne.n	800a34a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a348:	e0fa      	b.n	800a540 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2203      	movs	r2, #3
 800a34e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2200      	movs	r2, #0
 800a386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a390:	d107      	bne.n	800a3a2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ac:	2b40      	cmp	r3, #64	; 0x40
 800a3ae:	d007      	beq.n	800a3c0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3c8:	d14b      	bne.n	800a462 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HAL_SPI_Transmit+0xe6>
 800a3d2:	8afb      	ldrh	r3, [r7, #22]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d13e      	bne.n	800a456 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3dc:	881a      	ldrh	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	1c9a      	adds	r2, r3, #2
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a3fc:	e02b      	b.n	800a456 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d112      	bne.n	800a432 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a410:	881a      	ldrh	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41c:	1c9a      	adds	r2, r3, #2
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a426:	b29b      	uxth	r3, r3
 800a428:	3b01      	subs	r3, #1
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a430:	e011      	b.n	800a456 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a432:	f7fb fe0f 	bl	8006054 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	683a      	ldr	r2, [r7, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d803      	bhi.n	800a44a <HAL_SPI_Transmit+0x158>
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a448:	d102      	bne.n	800a450 <HAL_SPI_Transmit+0x15e>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a450:	2303      	movs	r3, #3
 800a452:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a454:	e074      	b.n	800a540 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1ce      	bne.n	800a3fe <HAL_SPI_Transmit+0x10c>
 800a460:	e04c      	b.n	800a4fc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <HAL_SPI_Transmit+0x17e>
 800a46a:	8afb      	ldrh	r3, [r7, #22]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d140      	bne.n	800a4f2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	330c      	adds	r3, #12
 800a47a:	7812      	ldrb	r2, [r2, #0]
 800a47c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a496:	e02c      	b.n	800a4f2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d113      	bne.n	800a4ce <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	330c      	adds	r3, #12
 800a4b0:	7812      	ldrb	r2, [r2, #0]
 800a4b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4cc:	e011      	b.n	800a4f2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ce:	f7fb fdc1 	bl	8006054 <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d803      	bhi.n	800a4e6 <HAL_SPI_Transmit+0x1f4>
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e4:	d102      	bne.n	800a4ec <HAL_SPI_Transmit+0x1fa>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4f0:	e026      	b.n	800a540 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1cd      	bne.n	800a498 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 fbb3 	bl	800ac6c <SPI_EndRxTxTransaction>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a51a:	2300      	movs	r3, #0
 800a51c:	613b      	str	r3, [r7, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	613b      	str	r3, [r7, #16]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	77fb      	strb	r3, [r7, #31]
 800a53c:	e000      	b.n	800a540 <HAL_SPI_Transmit+0x24e>
  }

error:
 800a53e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a550:	7ffb      	ldrb	r3, [r7, #31]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3720      	adds	r7, #32
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b088      	sub	sp, #32
 800a55e:	af02      	add	r7, sp, #8
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	603b      	str	r3, [r7, #0]
 800a566:	4613      	mov	r3, r2
 800a568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a56a:	2300      	movs	r3, #0
 800a56c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a576:	d112      	bne.n	800a59e <HAL_SPI_Receive+0x44>
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10e      	bne.n	800a59e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2204      	movs	r2, #4
 800a584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a588:	88fa      	ldrh	r2, [r7, #6]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	4613      	mov	r3, r2
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	68b9      	ldr	r1, [r7, #8]
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f8e9 	bl	800a76c <HAL_SPI_TransmitReceive>
 800a59a:	4603      	mov	r3, r0
 800a59c:	e0e2      	b.n	800a764 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d101      	bne.n	800a5ac <HAL_SPI_Receive+0x52>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e0db      	b.n	800a764 <HAL_SPI_Receive+0x20a>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5b4:	f7fb fd4e 	bl	8006054 <HAL_GetTick>
 800a5b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d002      	beq.n	800a5cc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5ca:	e0c2      	b.n	800a752 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <HAL_SPI_Receive+0x7e>
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d102      	bne.n	800a5de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a5dc:	e0b9      	b.n	800a752 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	88fa      	ldrh	r2, [r7, #6]
 800a5f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	88fa      	ldrh	r2, [r7, #6]
 800a5fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a624:	d107      	bne.n	800a636 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a634:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a640:	2b40      	cmp	r3, #64	; 0x40
 800a642:	d007      	beq.n	800a654 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a652:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d162      	bne.n	800a722 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a65c:	e02e      	b.n	800a6bc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b01      	cmp	r3, #1
 800a66a:	d115      	bne.n	800a698 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f103 020c 	add.w	r2, r3, #12
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a678:	7812      	ldrb	r2, [r2, #0]
 800a67a:	b2d2      	uxtb	r2, r2
 800a67c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a696:	e011      	b.n	800a6bc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a698:	f7fb fcdc 	bl	8006054 <HAL_GetTick>
 800a69c:	4602      	mov	r2, r0
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d803      	bhi.n	800a6b0 <HAL_SPI_Receive+0x156>
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ae:	d102      	bne.n	800a6b6 <HAL_SPI_Receive+0x15c>
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d102      	bne.n	800a6bc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a6ba:	e04a      	b.n	800a752 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1cb      	bne.n	800a65e <HAL_SPI_Receive+0x104>
 800a6c6:	e031      	b.n	800a72c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d113      	bne.n	800a6fe <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68da      	ldr	r2, [r3, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e0:	b292      	uxth	r2, r2
 800a6e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6e8:	1c9a      	adds	r2, r3, #2
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6fc:	e011      	b.n	800a722 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6fe:	f7fb fca9 	bl	8006054 <HAL_GetTick>
 800a702:	4602      	mov	r2, r0
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d803      	bhi.n	800a716 <HAL_SPI_Receive+0x1bc>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d102      	bne.n	800a71c <HAL_SPI_Receive+0x1c2>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d102      	bne.n	800a722 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a720:	e017      	b.n	800a752 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a726:	b29b      	uxth	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1cd      	bne.n	800a6c8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f000 fa35 	bl	800aba0 <SPI_EndRxTransaction>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2220      	movs	r2, #32
 800a740:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	75fb      	strb	r3, [r7, #23]
 800a74e:	e000      	b.n	800a752 <HAL_SPI_Receive+0x1f8>
  }

error :
 800a750:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a762:	7dfb      	ldrb	r3, [r7, #23]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b08c      	sub	sp, #48	; 0x30
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a77a:	2301      	movs	r3, #1
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a77e:	2300      	movs	r3, #0
 800a780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d101      	bne.n	800a792 <HAL_SPI_TransmitReceive+0x26>
 800a78e:	2302      	movs	r3, #2
 800a790:	e18a      	b.n	800aaa8 <HAL_SPI_TransmitReceive+0x33c>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a79a:	f7fb fc5b 	bl	8006054 <HAL_GetTick>
 800a79e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a7b0:	887b      	ldrh	r3, [r7, #2]
 800a7b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d00f      	beq.n	800a7dc <HAL_SPI_TransmitReceive+0x70>
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7c2:	d107      	bne.n	800a7d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d103      	bne.n	800a7d4 <HAL_SPI_TransmitReceive+0x68>
 800a7cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d003      	beq.n	800a7dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a7da:	e15b      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d005      	beq.n	800a7ee <HAL_SPI_TransmitReceive+0x82>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <HAL_SPI_TransmitReceive+0x82>
 800a7e8:	887b      	ldrh	r3, [r7, #2]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d103      	bne.n	800a7f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a7f4:	e14e      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d003      	beq.n	800a80a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2205      	movs	r2, #5
 800a806:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	887a      	ldrh	r2, [r7, #2]
 800a81a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	887a      	ldrh	r2, [r7, #2]
 800a820:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	887a      	ldrh	r2, [r7, #2]
 800a82c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	887a      	ldrh	r2, [r7, #2]
 800a832:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a84a:	2b40      	cmp	r3, #64	; 0x40
 800a84c:	d007      	beq.n	800a85e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a85c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a866:	d178      	bne.n	800a95a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <HAL_SPI_TransmitReceive+0x10a>
 800a870:	8b7b      	ldrh	r3, [r7, #26]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d166      	bne.n	800a944 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	881a      	ldrh	r2, [r3, #0]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a886:	1c9a      	adds	r2, r3, #2
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a890:	b29b      	uxth	r3, r3
 800a892:	3b01      	subs	r3, #1
 800a894:	b29a      	uxth	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a89a:	e053      	b.n	800a944 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d11b      	bne.n	800a8e2 <HAL_SPI_TransmitReceive+0x176>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d016      	beq.n	800a8e2 <HAL_SPI_TransmitReceive+0x176>
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d113      	bne.n	800a8e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8be:	881a      	ldrh	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ca:	1c9a      	adds	r2, r3, #2
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d119      	bne.n	800a924 <HAL_SPI_TransmitReceive+0x1b8>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d014      	beq.n	800a924 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68da      	ldr	r2, [r3, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a904:	b292      	uxth	r2, r2
 800a906:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90c:	1c9a      	adds	r2, r3, #2
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a916:	b29b      	uxth	r3, r3
 800a918:	3b01      	subs	r3, #1
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a920:	2301      	movs	r3, #1
 800a922:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a924:	f7fb fb96 	bl	8006054 <HAL_GetTick>
 800a928:	4602      	mov	r2, r0
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a930:	429a      	cmp	r2, r3
 800a932:	d807      	bhi.n	800a944 <HAL_SPI_TransmitReceive+0x1d8>
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93a:	d003      	beq.n	800a944 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a942:	e0a7      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a948:	b29b      	uxth	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1a6      	bne.n	800a89c <HAL_SPI_TransmitReceive+0x130>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a952:	b29b      	uxth	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1a1      	bne.n	800a89c <HAL_SPI_TransmitReceive+0x130>
 800a958:	e07c      	b.n	800aa54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <HAL_SPI_TransmitReceive+0x1fc>
 800a962:	8b7b      	ldrh	r3, [r7, #26]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d16b      	bne.n	800aa40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	330c      	adds	r3, #12
 800a972:	7812      	ldrb	r2, [r2, #0]
 800a974:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a984:	b29b      	uxth	r3, r3
 800a986:	3b01      	subs	r3, #1
 800a988:	b29a      	uxth	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a98e:	e057      	b.n	800aa40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f003 0302 	and.w	r3, r3, #2
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d11c      	bne.n	800a9d8 <HAL_SPI_TransmitReceive+0x26c>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d017      	beq.n	800a9d8 <HAL_SPI_TransmitReceive+0x26c>
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d114      	bne.n	800a9d8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	330c      	adds	r3, #12
 800a9b8:	7812      	ldrb	r2, [r2, #0]
 800a9ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c0:	1c5a      	adds	r2, r3, #1
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d119      	bne.n	800aa1a <HAL_SPI_TransmitReceive+0x2ae>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d014      	beq.n	800aa1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	b2d2      	uxtb	r2, r2
 800a9fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa16:	2301      	movs	r3, #1
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aa1a:	f7fb fb1b 	bl	8006054 <HAL_GetTick>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d803      	bhi.n	800aa32 <HAL_SPI_TransmitReceive+0x2c6>
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d102      	bne.n	800aa38 <HAL_SPI_TransmitReceive+0x2cc>
 800aa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800aa3e:	e029      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1a2      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x224>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d19d      	bne.n	800a990 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 f907 	bl	800ac6c <SPI_EndRxTxTransaction>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d006      	beq.n	800aa72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aa70:	e010      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10b      	bne.n	800aa92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	617b      	str	r3, [r7, #20]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	617b      	str	r3, [r7, #20]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	e000      	b.n	800aa94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aa92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aaa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3730      	adds	r7, #48	; 0x30
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aabe:	b2db      	uxtb	r3, r3
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	370c      	adds	r7, #12
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	603b      	str	r3, [r7, #0]
 800aad8:	4613      	mov	r3, r2
 800aada:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aadc:	e04c      	b.n	800ab78 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae4:	d048      	beq.n	800ab78 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800aae6:	f7fb fab5 	bl	8006054 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d902      	bls.n	800aafc <SPI_WaitFlagStateUntilTimeout+0x30>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d13d      	bne.n	800ab78 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab14:	d111      	bne.n	800ab3a <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab1e:	d004      	beq.n	800ab2a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab28:	d107      	bne.n	800ab3a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab42:	d10f      	bne.n	800ab64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab52:	601a      	str	r2, [r3, #0]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e00f      	b.n	800ab98 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689a      	ldr	r2, [r3, #8]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	4013      	ands	r3, r2
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	bf0c      	ite	eq
 800ab88:	2301      	moveq	r3, #1
 800ab8a:	2300      	movne	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	461a      	mov	r2, r3
 800ab90:	79fb      	ldrb	r3, [r7, #7]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d1a3      	bne.n	800aade <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abb4:	d111      	bne.n	800abda <SPI_EndRxTransaction+0x3a>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abbe:	d004      	beq.n	800abca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abc8:	d107      	bne.n	800abda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abe2:	d12a      	bne.n	800ac3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abec:	d012      	beq.n	800ac14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2200      	movs	r2, #0
 800abf6:	2180      	movs	r1, #128	; 0x80
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff ff67 	bl	800aacc <SPI_WaitFlagStateUntilTimeout>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d02d      	beq.n	800ac60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac08:	f043 0220 	orr.w	r2, r3, #32
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e026      	b.n	800ac62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f7ff ff54 	bl	800aacc <SPI_WaitFlagStateUntilTimeout>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d01a      	beq.n	800ac60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2e:	f043 0220 	orr.w	r2, r3, #32
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e013      	b.n	800ac62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2200      	movs	r2, #0
 800ac42:	2101      	movs	r1, #1
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f7ff ff41 	bl	800aacc <SPI_WaitFlagStateUntilTimeout>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac54:	f043 0220 	orr.w	r2, r3, #32
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e000      	b.n	800ac62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af02      	add	r7, sp, #8
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac78:	4b1b      	ldr	r3, [pc, #108]	; (800ace8 <SPI_EndRxTxTransaction+0x7c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a1b      	ldr	r2, [pc, #108]	; (800acec <SPI_EndRxTxTransaction+0x80>)
 800ac7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac82:	0d5b      	lsrs	r3, r3, #21
 800ac84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac88:	fb02 f303 	mul.w	r3, r2, r3
 800ac8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac96:	d112      	bne.n	800acbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	9300      	str	r3, [sp, #0]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2180      	movs	r1, #128	; 0x80
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f7ff ff12 	bl	800aacc <SPI_WaitFlagStateUntilTimeout>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d016      	beq.n	800acdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb2:	f043 0220 	orr.w	r2, r3, #32
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e00f      	b.n	800acde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd4:	2b80      	cmp	r3, #128	; 0x80
 800acd6:	d0f2      	beq.n	800acbe <SPI_EndRxTxTransaction+0x52>
 800acd8:	e000      	b.n	800acdc <SPI_EndRxTxTransaction+0x70>
        break;
 800acda:	bf00      	nop
  }

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000008 	.word	0x20000008
 800acec:	165e9f81 	.word	0x165e9f81

0800acf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e01d      	b.n	800ad3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7fa f8b6 	bl	8004e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f000 fa14 	bl	800b15c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b085      	sub	sp, #20
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	68da      	ldr	r2, [r3, #12]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f042 0201 	orr.w	r2, r2, #1
 800ad5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	f003 0307 	and.w	r3, r3, #7
 800ad68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2b06      	cmp	r3, #6
 800ad6e:	d007      	beq.n	800ad80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f042 0201 	orr.w	r2, r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d122      	bne.n	800adea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	f003 0302 	and.w	r3, r3, #2
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d11b      	bne.n	800adea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f06f 0202 	mvn.w	r2, #2
 800adba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	f003 0303 	and.w	r3, r3, #3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f9a5 	bl	800b120 <HAL_TIM_IC_CaptureCallback>
 800add6:	e005      	b.n	800ade4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f997 	bl	800b10c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f9a8 	bl	800b134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d122      	bne.n	800ae3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f003 0304 	and.w	r3, r3, #4
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d11b      	bne.n	800ae3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f06f 0204 	mvn.w	r2, #4
 800ae0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2202      	movs	r2, #2
 800ae14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 f97b 	bl	800b120 <HAL_TIM_IC_CaptureCallback>
 800ae2a:	e005      	b.n	800ae38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f96d 	bl	800b10c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f97e 	bl	800b134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	f003 0308 	and.w	r3, r3, #8
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d122      	bne.n	800ae92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	f003 0308 	and.w	r3, r3, #8
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	d11b      	bne.n	800ae92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f06f 0208 	mvn.w	r2, #8
 800ae62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2204      	movs	r2, #4
 800ae68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f951 	bl	800b120 <HAL_TIM_IC_CaptureCallback>
 800ae7e:	e005      	b.n	800ae8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f943 	bl	800b10c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f954 	bl	800b134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b10      	cmp	r3, #16
 800ae9e:	d122      	bne.n	800aee6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f003 0310 	and.w	r3, r3, #16
 800aeaa:	2b10      	cmp	r3, #16
 800aeac:	d11b      	bne.n	800aee6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f06f 0210 	mvn.w	r2, #16
 800aeb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2208      	movs	r2, #8
 800aebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f927 	bl	800b120 <HAL_TIM_IC_CaptureCallback>
 800aed2:	e005      	b.n	800aee0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f919 	bl	800b10c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f92a 	bl	800b134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d10e      	bne.n	800af12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d107      	bne.n	800af12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f06f 0201 	mvn.w	r2, #1
 800af0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7f9 fd43 	bl	8004998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1c:	2b80      	cmp	r3, #128	; 0x80
 800af1e:	d10e      	bne.n	800af3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2a:	2b80      	cmp	r3, #128	; 0x80
 800af2c:	d107      	bne.n	800af3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 facf 	bl	800b4dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af48:	2b40      	cmp	r3, #64	; 0x40
 800af4a:	d10e      	bne.n	800af6a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b40      	cmp	r3, #64	; 0x40
 800af58:	d107      	bne.n	800af6a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f8ef 	bl	800b148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	f003 0320 	and.w	r3, r3, #32
 800af74:	2b20      	cmp	r3, #32
 800af76:	d10e      	bne.n	800af96 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f003 0320 	and.w	r3, r3, #32
 800af82:	2b20      	cmp	r3, #32
 800af84:	d107      	bne.n	800af96 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f06f 0220 	mvn.w	r2, #32
 800af8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fa99 	bl	800b4c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af96:	bf00      	nop
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b084      	sub	sp, #16
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <HAL_TIM_ConfigClockSource+0x18>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e0a6      	b.n	800b104 <HAL_TIM_ConfigClockSource+0x166>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2202      	movs	r2, #2
 800afc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800afd4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afdc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2b40      	cmp	r3, #64	; 0x40
 800afec:	d067      	beq.n	800b0be <HAL_TIM_ConfigClockSource+0x120>
 800afee:	2b40      	cmp	r3, #64	; 0x40
 800aff0:	d80b      	bhi.n	800b00a <HAL_TIM_ConfigClockSource+0x6c>
 800aff2:	2b10      	cmp	r3, #16
 800aff4:	d073      	beq.n	800b0de <HAL_TIM_ConfigClockSource+0x140>
 800aff6:	2b10      	cmp	r3, #16
 800aff8:	d802      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x62>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d06f      	beq.n	800b0de <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800affe:	e078      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b000:	2b20      	cmp	r3, #32
 800b002:	d06c      	beq.n	800b0de <HAL_TIM_ConfigClockSource+0x140>
 800b004:	2b30      	cmp	r3, #48	; 0x30
 800b006:	d06a      	beq.n	800b0de <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b008:	e073      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b00a:	2b70      	cmp	r3, #112	; 0x70
 800b00c:	d00d      	beq.n	800b02a <HAL_TIM_ConfigClockSource+0x8c>
 800b00e:	2b70      	cmp	r3, #112	; 0x70
 800b010:	d804      	bhi.n	800b01c <HAL_TIM_ConfigClockSource+0x7e>
 800b012:	2b50      	cmp	r3, #80	; 0x50
 800b014:	d033      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0xe0>
 800b016:	2b60      	cmp	r3, #96	; 0x60
 800b018:	d041      	beq.n	800b09e <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b01a:	e06a      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b020:	d066      	beq.n	800b0f0 <HAL_TIM_ConfigClockSource+0x152>
 800b022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b026:	d017      	beq.n	800b058 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b028:	e063      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6818      	ldr	r0, [r3, #0]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	6899      	ldr	r1, [r3, #8]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	f000 f9a9 	bl	800b390 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b04c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	609a      	str	r2, [r3, #8]
      break;
 800b056:	e04c      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6818      	ldr	r0, [r3, #0]
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	6899      	ldr	r1, [r3, #8]
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f000 f992 	bl	800b390 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689a      	ldr	r2, [r3, #8]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b07a:	609a      	str	r2, [r3, #8]
      break;
 800b07c:	e039      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6818      	ldr	r0, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	6859      	ldr	r1, [r3, #4]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	461a      	mov	r2, r3
 800b08c:	f000 f906 	bl	800b29c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2150      	movs	r1, #80	; 0x50
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f95f 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800b09c:	e029      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6818      	ldr	r0, [r3, #0]
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6859      	ldr	r1, [r3, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	f000 f925 	bl	800b2fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2160      	movs	r1, #96	; 0x60
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f94f 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800b0bc:	e019      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6818      	ldr	r0, [r3, #0]
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	6859      	ldr	r1, [r3, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f000 f8e6 	bl	800b29c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2140      	movs	r1, #64	; 0x40
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 f93f 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800b0dc:	e009      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	4610      	mov	r0, r2
 800b0ea:	f000 f936 	bl	800b35a <TIM_ITRx_SetConfig>
      break;
 800b0ee:	e000      	b.n	800b0f2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b0f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a40      	ldr	r2, [pc, #256]	; (800b270 <TIM_Base_SetConfig+0x114>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d013      	beq.n	800b19c <TIM_Base_SetConfig+0x40>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17a:	d00f      	beq.n	800b19c <TIM_Base_SetConfig+0x40>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a3d      	ldr	r2, [pc, #244]	; (800b274 <TIM_Base_SetConfig+0x118>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d00b      	beq.n	800b19c <TIM_Base_SetConfig+0x40>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a3c      	ldr	r2, [pc, #240]	; (800b278 <TIM_Base_SetConfig+0x11c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d007      	beq.n	800b19c <TIM_Base_SetConfig+0x40>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a3b      	ldr	r2, [pc, #236]	; (800b27c <TIM_Base_SetConfig+0x120>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d003      	beq.n	800b19c <TIM_Base_SetConfig+0x40>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a3a      	ldr	r2, [pc, #232]	; (800b280 <TIM_Base_SetConfig+0x124>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d108      	bne.n	800b1ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a2f      	ldr	r2, [pc, #188]	; (800b270 <TIM_Base_SetConfig+0x114>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d02b      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1bc:	d027      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a2c      	ldr	r2, [pc, #176]	; (800b274 <TIM_Base_SetConfig+0x118>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d023      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a2b      	ldr	r2, [pc, #172]	; (800b278 <TIM_Base_SetConfig+0x11c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d01f      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a2a      	ldr	r2, [pc, #168]	; (800b27c <TIM_Base_SetConfig+0x120>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d01b      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a29      	ldr	r2, [pc, #164]	; (800b280 <TIM_Base_SetConfig+0x124>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d017      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a28      	ldr	r2, [pc, #160]	; (800b284 <TIM_Base_SetConfig+0x128>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d013      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a27      	ldr	r2, [pc, #156]	; (800b288 <TIM_Base_SetConfig+0x12c>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d00f      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a26      	ldr	r2, [pc, #152]	; (800b28c <TIM_Base_SetConfig+0x130>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00b      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a25      	ldr	r2, [pc, #148]	; (800b290 <TIM_Base_SetConfig+0x134>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d007      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a24      	ldr	r2, [pc, #144]	; (800b294 <TIM_Base_SetConfig+0x138>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d003      	beq.n	800b20e <TIM_Base_SetConfig+0xb2>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a23      	ldr	r2, [pc, #140]	; (800b298 <TIM_Base_SetConfig+0x13c>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d108      	bne.n	800b220 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	689a      	ldr	r2, [r3, #8]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a0a      	ldr	r2, [pc, #40]	; (800b270 <TIM_Base_SetConfig+0x114>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d003      	beq.n	800b254 <TIM_Base_SetConfig+0xf8>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a0c      	ldr	r2, [pc, #48]	; (800b280 <TIM_Base_SetConfig+0x124>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d103      	bne.n	800b25c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	691a      	ldr	r2, [r3, #16]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	615a      	str	r2, [r3, #20]
}
 800b262:	bf00      	nop
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	40010000 	.word	0x40010000
 800b274:	40000400 	.word	0x40000400
 800b278:	40000800 	.word	0x40000800
 800b27c:	40000c00 	.word	0x40000c00
 800b280:	40010400 	.word	0x40010400
 800b284:	40014000 	.word	0x40014000
 800b288:	40014400 	.word	0x40014400
 800b28c:	40014800 	.word	0x40014800
 800b290:	40001800 	.word	0x40001800
 800b294:	40001c00 	.word	0x40001c00
 800b298:	40002000 	.word	0x40002000

0800b29c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6a1b      	ldr	r3, [r3, #32]
 800b2ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6a1b      	ldr	r3, [r3, #32]
 800b2b2:	f023 0201 	bic.w	r2, r3, #1
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	693a      	ldr	r2, [r7, #16]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f023 030a 	bic.w	r3, r3, #10
 800b2d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	621a      	str	r2, [r3, #32]
}
 800b2ee:	bf00      	nop
 800b2f0:	371c      	adds	r7, #28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr

0800b2fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b087      	sub	sp, #28
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	60f8      	str	r0, [r7, #12]
 800b302:	60b9      	str	r1, [r7, #8]
 800b304:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	f023 0210 	bic.w	r2, r3, #16
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	699b      	ldr	r3, [r3, #24]
 800b316:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	031b      	lsls	r3, r3, #12
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b336:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4313      	orrs	r3, r2
 800b340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	621a      	str	r2, [r3, #32]
}
 800b34e:	bf00      	nop
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b085      	sub	sp, #20
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b370:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	4313      	orrs	r3, r2
 800b378:	f043 0307 	orr.w	r3, r3, #7
 800b37c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	609a      	str	r2, [r3, #8]
}
 800b384:	bf00      	nop
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b390:	b480      	push	{r7}
 800b392:	b087      	sub	sp, #28
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	021a      	lsls	r2, r3, #8
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	609a      	str	r2, [r3, #8]
}
 800b3c4:	bf00      	nop
 800b3c6:	371c      	adds	r7, #28
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d101      	bne.n	800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	e05a      	b.n	800b49e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b40e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a21      	ldr	r2, [pc, #132]	; (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d022      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b434:	d01d      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d018      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a1b      	ldr	r2, [pc, #108]	; (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d013      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a1a      	ldr	r2, [pc, #104]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d00e      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d009      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a17      	ldr	r2, [pc, #92]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d004      	beq.n	800b472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a15      	ldr	r2, [pc, #84]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d10c      	bne.n	800b48c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4313      	orrs	r3, r2
 800b482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40010400 	.word	0x40010400
 800b4c0:	40014000 	.word	0x40014000
 800b4c4:	40001800 	.word	0x40001800

0800b4c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4e4:	bf00      	nop
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr

0800b4f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e03f      	b.n	800b582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7f9 fd02 	bl	8004f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2224      	movs	r2, #36	; 0x24
 800b520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fc6d 	bl	800be14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	695a      	ldr	r2, [r3, #20]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b088      	sub	sp, #32
 800b58e:	af02      	add	r7, sp, #8
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	603b      	str	r3, [r7, #0]
 800b596:	4613      	mov	r3, r2
 800b598:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b20      	cmp	r3, #32
 800b5a8:	f040 8083 	bne.w	800b6b2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d002      	beq.n	800b5b8 <HAL_UART_Transmit+0x2e>
 800b5b2:	88fb      	ldrh	r3, [r7, #6]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e07b      	b.n	800b6b4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d101      	bne.n	800b5ca <HAL_UART_Transmit+0x40>
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	e074      	b.n	800b6b4 <HAL_UART_Transmit+0x12a>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2221      	movs	r2, #33	; 0x21
 800b5dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b5e0:	f7fa fd38 	bl	8006054 <HAL_GetTick>
 800b5e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	88fa      	ldrh	r2, [r7, #6]
 800b5ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	88fa      	ldrh	r2, [r7, #6]
 800b5f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b5fa:	e042      	b.n	800b682 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b600:	b29b      	uxth	r3, r3
 800b602:	3b01      	subs	r3, #1
 800b604:	b29a      	uxth	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b612:	d122      	bne.n	800b65a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2200      	movs	r2, #0
 800b61c:	2180      	movs	r1, #128	; 0x80
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 fa76 	bl	800bb10 <UART_WaitOnFlagUntilTimeout>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e042      	b.n	800b6b4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b640:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d103      	bne.n	800b652 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	3302      	adds	r3, #2
 800b64e:	60bb      	str	r3, [r7, #8]
 800b650:	e017      	b.n	800b682 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	3301      	adds	r3, #1
 800b656:	60bb      	str	r3, [r7, #8]
 800b658:	e013      	b.n	800b682 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2200      	movs	r2, #0
 800b662:	2180      	movs	r1, #128	; 0x80
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 fa53 	bl	800bb10 <UART_WaitOnFlagUntilTimeout>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b670:	2303      	movs	r3, #3
 800b672:	e01f      	b.n	800b6b4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	60ba      	str	r2, [r7, #8]
 800b67a:	781a      	ldrb	r2, [r3, #0]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b686:	b29b      	uxth	r3, r3
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1b7      	bne.n	800b5fc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	9300      	str	r3, [sp, #0]
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	2200      	movs	r2, #0
 800b694:	2140      	movs	r1, #64	; 0x40
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 fa3a 	bl	800bb10 <UART_WaitOnFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e006      	b.n	800b6b4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e000      	b.n	800b6b4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b6b2:	2302      	movs	r3, #2
  }
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	2b20      	cmp	r3, #32
 800b6d4:	d166      	bne.n	800b7a4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <HAL_UART_Receive_DMA+0x26>
 800b6dc:	88fb      	ldrh	r3, [r7, #6]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d101      	bne.n	800b6e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e05f      	b.n	800b7a6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d101      	bne.n	800b6f4 <HAL_UART_Receive_DMA+0x38>
 800b6f0:	2302      	movs	r3, #2
 800b6f2:	e058      	b.n	800b7a6 <HAL_UART_Receive_DMA+0xea>
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	88fa      	ldrh	r2, [r7, #6]
 800b706:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2222      	movs	r2, #34	; 0x22
 800b712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71a:	4a25      	ldr	r2, [pc, #148]	; (800b7b0 <HAL_UART_Receive_DMA+0xf4>)
 800b71c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b722:	4a24      	ldr	r2, [pc, #144]	; (800b7b4 <HAL_UART_Receive_DMA+0xf8>)
 800b724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72a:	4a23      	ldr	r2, [pc, #140]	; (800b7b8 <HAL_UART_Receive_DMA+0xfc>)
 800b72c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b732:	2200      	movs	r2, #0
 800b734:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800b736:	f107 0308 	add.w	r3, r7, #8
 800b73a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3304      	adds	r3, #4
 800b746:	4619      	mov	r1, r3
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	88fb      	ldrh	r3, [r7, #6]
 800b74e:	f7fa feb9 	bl	80064c4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b752:	2300      	movs	r3, #0
 800b754:	613b      	str	r3, [r7, #16]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	613b      	str	r3, [r7, #16]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	613b      	str	r3, [r7, #16]
 800b766:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b77e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	695a      	ldr	r2, [r3, #20]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f042 0201 	orr.w	r2, r2, #1
 800b78e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695a      	ldr	r2, [r3, #20]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b79e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	e000      	b.n	800b7a6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b7a4:	2302      	movs	r3, #2
  }
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	0800b9f9 	.word	0x0800b9f9
 800b7b4:	0800ba61 	.word	0x0800ba61
 800b7b8:	0800ba7d 	.word	0x0800ba7d

0800b7bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	f003 030f 	and.w	r3, r3, #15
 800b7ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10d      	bne.n	800b80e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	f003 0320 	and.w	r3, r3, #32
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d008      	beq.n	800b80e <HAL_UART_IRQHandler+0x52>
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	f003 0320 	and.w	r3, r3, #32
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fa82 	bl	800bd10 <UART_Receive_IT>
      return;
 800b80c:	e0d1      	b.n	800b9b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 80b0 	beq.w	800b976 <HAL_UART_IRQHandler+0x1ba>
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d105      	bne.n	800b82c <HAL_UART_IRQHandler+0x70>
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80a5 	beq.w	800b976 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00a      	beq.n	800b84c <HAL_UART_IRQHandler+0x90>
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d005      	beq.n	800b84c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b844:	f043 0201 	orr.w	r2, r3, #1
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	f003 0304 	and.w	r3, r3, #4
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <HAL_UART_IRQHandler+0xb0>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b864:	f043 0202 	orr.w	r2, r3, #2
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	f003 0302 	and.w	r3, r3, #2
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00a      	beq.n	800b88c <HAL_UART_IRQHandler+0xd0>
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f003 0301 	and.w	r3, r3, #1
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d005      	beq.n	800b88c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b884:	f043 0204 	orr.w	r2, r3, #4
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	f003 0308 	and.w	r3, r3, #8
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00f      	beq.n	800b8b6 <HAL_UART_IRQHandler+0xfa>
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d104      	bne.n	800b8aa <HAL_UART_IRQHandler+0xee>
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f003 0301 	and.w	r3, r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ae:	f043 0208 	orr.w	r2, r3, #8
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d078      	beq.n	800b9b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	f003 0320 	and.w	r3, r3, #32
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d007      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x11c>
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	f003 0320 	and.w	r3, r3, #32
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fa1c 	bl	800bd10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e2:	2b40      	cmp	r3, #64	; 0x40
 800b8e4:	bf0c      	ite	eq
 800b8e6:	2301      	moveq	r3, #1
 800b8e8:	2300      	movne	r3, #0
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f2:	f003 0308 	and.w	r3, r3, #8
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <HAL_UART_IRQHandler+0x144>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d031      	beq.n	800b964 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f965 	bl	800bbd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b910:	2b40      	cmp	r3, #64	; 0x40
 800b912:	d123      	bne.n	800b95c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	695a      	ldr	r2, [r3, #20]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b922:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d013      	beq.n	800b954 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	4a21      	ldr	r2, [pc, #132]	; (800b9b8 <HAL_UART_IRQHandler+0x1fc>)
 800b932:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fa fe1b 	bl	8006574 <HAL_DMA_Abort_IT>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d016      	beq.n	800b972 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b94e:	4610      	mov	r0, r2
 800b950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b952:	e00e      	b.n	800b972 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f845 	bl	800b9e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b95a:	e00a      	b.n	800b972 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f841 	bl	800b9e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b962:	e006      	b.n	800b972 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f83d 	bl	800b9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b970:	e01e      	b.n	800b9b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b972:	bf00      	nop
    return;
 800b974:	e01c      	b.n	800b9b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d008      	beq.n	800b992 <HAL_UART_IRQHandler+0x1d6>
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 f952 	bl	800bc34 <UART_Transmit_IT>
    return;
 800b990:	e00f      	b.n	800b9b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b992:	69fb      	ldr	r3, [r7, #28]
 800b994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00a      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x1f6>
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d005      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f99a 	bl	800bce0 <UART_EndTransmit_IT>
    return;
 800b9ac:	bf00      	nop
 800b9ae:	e000      	b.n	800b9b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 800b9b0:	bf00      	nop
  }
}
 800b9b2:	3720      	adds	r7, #32
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	0800bc0d 	.word	0x0800bc0d

0800b9bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b9d8:	bf00      	nop
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba04:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d11e      	bne.n	800ba52 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68da      	ldr	r2, [r3, #12]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba28:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	695a      	ldr	r2, [r3, #20]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f022 0201 	bic.w	r2, r2, #1
 800ba38:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	695a      	ldr	r2, [r3, #20]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba48:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7f8 fdae 	bl	80045b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba58:	bf00      	nop
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba6c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f7ff ffae 	bl	800b9d0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba74:	bf00      	nop
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba98:	2b80      	cmp	r3, #128	; 0x80
 800ba9a:	bf0c      	ite	eq
 800ba9c:	2301      	moveq	r3, #1
 800ba9e:	2300      	movne	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b21      	cmp	r3, #33	; 0x21
 800baae:	d108      	bne.n	800bac2 <UART_DMAError+0x46>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d005      	beq.n	800bac2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2200      	movs	r2, #0
 800baba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800babc:	68b8      	ldr	r0, [r7, #8]
 800babe:	f000 f871 	bl	800bba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	695b      	ldr	r3, [r3, #20]
 800bac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bacc:	2b40      	cmp	r3, #64	; 0x40
 800bace:	bf0c      	ite	eq
 800bad0:	2301      	moveq	r3, #1
 800bad2:	2300      	movne	r3, #0
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b22      	cmp	r3, #34	; 0x22
 800bae2:	d108      	bne.n	800baf6 <UART_DMAError+0x7a>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d005      	beq.n	800baf6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	2200      	movs	r2, #0
 800baee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800baf0:	68b8      	ldr	r0, [r7, #8]
 800baf2:	f000 f86d 	bl	800bbd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafa:	f043 0210 	orr.w	r2, r3, #16
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb02:	68b8      	ldr	r0, [r7, #8]
 800bb04:	f7ff ff6e 	bl	800b9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb20:	e02c      	b.n	800bb7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb28:	d028      	beq.n	800bb7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d007      	beq.n	800bb40 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb30:	f7fa fa90 	bl	8006054 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d21d      	bcs.n	800bb7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68da      	ldr	r2, [r3, #12]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	695a      	ldr	r2, [r3, #20]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 0201 	bic.w	r2, r2, #1
 800bb5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2220      	movs	r2, #32
 800bb64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e00f      	b.n	800bb9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4013      	ands	r3, r2
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	bf0c      	ite	eq
 800bb8c:	2301      	moveq	r3, #1
 800bb8e:	2300      	movne	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	461a      	mov	r2, r3
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d0c3      	beq.n	800bb22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b083      	sub	sp, #12
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68da      	ldr	r2, [r3, #12]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bbba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800bbc4:	bf00      	nop
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68da      	ldr	r2, [r3, #12]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bbe6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	695a      	ldr	r2, [r3, #20]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f022 0201 	bic.w	r2, r2, #1
 800bbf6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2200      	movs	r2, #0
 800bc24:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff fedc 	bl	800b9e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b21      	cmp	r3, #33	; 0x21
 800bc46:	d144      	bne.n	800bcd2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc50:	d11a      	bne.n	800bc88 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc66:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d105      	bne.n	800bc7c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a1b      	ldr	r3, [r3, #32]
 800bc74:	1c9a      	adds	r2, r3, #2
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	621a      	str	r2, [r3, #32]
 800bc7a:	e00e      	b.n	800bc9a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a1b      	ldr	r3, [r3, #32]
 800bc80:	1c5a      	adds	r2, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	621a      	str	r2, [r3, #32]
 800bc86:	e008      	b.n	800bc9a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a1b      	ldr	r3, [r3, #32]
 800bc8c:	1c59      	adds	r1, r3, #1
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	6211      	str	r1, [r2, #32]
 800bc92:	781a      	ldrb	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	3b01      	subs	r3, #1
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	4619      	mov	r1, r3
 800bca8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10f      	bne.n	800bcce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68da      	ldr	r2, [r3, #12]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68da      	ldr	r2, [r3, #12]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bccc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e000      	b.n	800bcd4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bcd2:	2302      	movs	r3, #2
  }
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68da      	ldr	r2, [r3, #12]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcf6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2220      	movs	r2, #32
 800bcfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff fe5b 	bl	800b9bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	2b22      	cmp	r3, #34	; 0x22
 800bd22:	d171      	bne.n	800be08 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2c:	d123      	bne.n	800bd76 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd32:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10e      	bne.n	800bd5a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd52:	1c9a      	adds	r2, r3, #2
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	629a      	str	r2, [r3, #40]	; 0x28
 800bd58:	e029      	b.n	800bdae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	629a      	str	r2, [r3, #40]	; 0x28
 800bd74:	e01b      	b.n	800bdae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	6858      	ldr	r0, [r3, #4]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd88:	1c59      	adds	r1, r3, #1
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6291      	str	r1, [r2, #40]	; 0x28
 800bd8e:	b2c2      	uxtb	r2, r0
 800bd90:	701a      	strb	r2, [r3, #0]
 800bd92:	e00c      	b.n	800bdae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda0:	1c58      	adds	r0, r3, #1
 800bda2:	6879      	ldr	r1, [r7, #4]
 800bda4:	6288      	str	r0, [r1, #40]	; 0x28
 800bda6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d120      	bne.n	800be04 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 0220 	bic.w	r2, r2, #32
 800bdd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68da      	ldr	r2, [r3, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bde0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	695a      	ldr	r2, [r3, #20]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f022 0201 	bic.w	r2, r2, #1
 800bdf0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7f8 fbda 	bl	80045b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e002      	b.n	800be0a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	e000      	b.n	800be0a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800be08:	2302      	movs	r3, #2
  }
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be18:	b085      	sub	sp, #20
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68da      	ldr	r2, [r3, #12]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	431a      	orrs	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	4313      	orrs	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800be56:	f023 030c 	bic.w	r3, r3, #12
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	68f9      	ldr	r1, [r7, #12]
 800be60:	430b      	orrs	r3, r1
 800be62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	699a      	ldr	r2, [r3, #24]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	430a      	orrs	r2, r1
 800be78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be82:	f040 818b 	bne.w	800c19c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	4ac1      	ldr	r2, [pc, #772]	; (800c190 <UART_SetConfig+0x37c>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d005      	beq.n	800be9c <UART_SetConfig+0x88>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4abf      	ldr	r2, [pc, #764]	; (800c194 <UART_SetConfig+0x380>)
 800be96:	4293      	cmp	r3, r2
 800be98:	f040 80bd 	bne.w	800c016 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800be9c:	f7fd ff1a 	bl	8009cd4 <HAL_RCC_GetPCLK2Freq>
 800bea0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	461d      	mov	r5, r3
 800bea6:	f04f 0600 	mov.w	r6, #0
 800beaa:	46a8      	mov	r8, r5
 800beac:	46b1      	mov	r9, r6
 800beae:	eb18 0308 	adds.w	r3, r8, r8
 800beb2:	eb49 0409 	adc.w	r4, r9, r9
 800beb6:	4698      	mov	r8, r3
 800beb8:	46a1      	mov	r9, r4
 800beba:	eb18 0805 	adds.w	r8, r8, r5
 800bebe:	eb49 0906 	adc.w	r9, r9, r6
 800bec2:	f04f 0100 	mov.w	r1, #0
 800bec6:	f04f 0200 	mov.w	r2, #0
 800beca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bece:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bed2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bed6:	4688      	mov	r8, r1
 800bed8:	4691      	mov	r9, r2
 800beda:	eb18 0005 	adds.w	r0, r8, r5
 800bede:	eb49 0106 	adc.w	r1, r9, r6
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	461d      	mov	r5, r3
 800bee8:	f04f 0600 	mov.w	r6, #0
 800beec:	196b      	adds	r3, r5, r5
 800beee:	eb46 0406 	adc.w	r4, r6, r6
 800bef2:	461a      	mov	r2, r3
 800bef4:	4623      	mov	r3, r4
 800bef6:	f7f4 fdf9 	bl	8000aec <__aeabi_uldivmod>
 800befa:	4603      	mov	r3, r0
 800befc:	460c      	mov	r4, r1
 800befe:	461a      	mov	r2, r3
 800bf00:	4ba5      	ldr	r3, [pc, #660]	; (800c198 <UART_SetConfig+0x384>)
 800bf02:	fba3 2302 	umull	r2, r3, r3, r2
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	461d      	mov	r5, r3
 800bf10:	f04f 0600 	mov.w	r6, #0
 800bf14:	46a9      	mov	r9, r5
 800bf16:	46b2      	mov	sl, r6
 800bf18:	eb19 0309 	adds.w	r3, r9, r9
 800bf1c:	eb4a 040a 	adc.w	r4, sl, sl
 800bf20:	4699      	mov	r9, r3
 800bf22:	46a2      	mov	sl, r4
 800bf24:	eb19 0905 	adds.w	r9, r9, r5
 800bf28:	eb4a 0a06 	adc.w	sl, sl, r6
 800bf2c:	f04f 0100 	mov.w	r1, #0
 800bf30:	f04f 0200 	mov.w	r2, #0
 800bf34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf40:	4689      	mov	r9, r1
 800bf42:	4692      	mov	sl, r2
 800bf44:	eb19 0005 	adds.w	r0, r9, r5
 800bf48:	eb4a 0106 	adc.w	r1, sl, r6
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	461d      	mov	r5, r3
 800bf52:	f04f 0600 	mov.w	r6, #0
 800bf56:	196b      	adds	r3, r5, r5
 800bf58:	eb46 0406 	adc.w	r4, r6, r6
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	4623      	mov	r3, r4
 800bf60:	f7f4 fdc4 	bl	8000aec <__aeabi_uldivmod>
 800bf64:	4603      	mov	r3, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4b8b      	ldr	r3, [pc, #556]	; (800c198 <UART_SetConfig+0x384>)
 800bf6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bf70:	095b      	lsrs	r3, r3, #5
 800bf72:	2164      	movs	r1, #100	; 0x64
 800bf74:	fb01 f303 	mul.w	r3, r1, r3
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	3332      	adds	r3, #50	; 0x32
 800bf7e:	4a86      	ldr	r2, [pc, #536]	; (800c198 <UART_SetConfig+0x384>)
 800bf80:	fba2 2303 	umull	r2, r3, r2, r3
 800bf84:	095b      	lsrs	r3, r3, #5
 800bf86:	005b      	lsls	r3, r3, #1
 800bf88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bf8c:	4498      	add	r8, r3
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	461d      	mov	r5, r3
 800bf92:	f04f 0600 	mov.w	r6, #0
 800bf96:	46a9      	mov	r9, r5
 800bf98:	46b2      	mov	sl, r6
 800bf9a:	eb19 0309 	adds.w	r3, r9, r9
 800bf9e:	eb4a 040a 	adc.w	r4, sl, sl
 800bfa2:	4699      	mov	r9, r3
 800bfa4:	46a2      	mov	sl, r4
 800bfa6:	eb19 0905 	adds.w	r9, r9, r5
 800bfaa:	eb4a 0a06 	adc.w	sl, sl, r6
 800bfae:	f04f 0100 	mov.w	r1, #0
 800bfb2:	f04f 0200 	mov.w	r2, #0
 800bfb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bfba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bfbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bfc2:	4689      	mov	r9, r1
 800bfc4:	4692      	mov	sl, r2
 800bfc6:	eb19 0005 	adds.w	r0, r9, r5
 800bfca:	eb4a 0106 	adc.w	r1, sl, r6
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	461d      	mov	r5, r3
 800bfd4:	f04f 0600 	mov.w	r6, #0
 800bfd8:	196b      	adds	r3, r5, r5
 800bfda:	eb46 0406 	adc.w	r4, r6, r6
 800bfde:	461a      	mov	r2, r3
 800bfe0:	4623      	mov	r3, r4
 800bfe2:	f7f4 fd83 	bl	8000aec <__aeabi_uldivmod>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	460c      	mov	r4, r1
 800bfea:	461a      	mov	r2, r3
 800bfec:	4b6a      	ldr	r3, [pc, #424]	; (800c198 <UART_SetConfig+0x384>)
 800bfee:	fba3 1302 	umull	r1, r3, r3, r2
 800bff2:	095b      	lsrs	r3, r3, #5
 800bff4:	2164      	movs	r1, #100	; 0x64
 800bff6:	fb01 f303 	mul.w	r3, r1, r3
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	00db      	lsls	r3, r3, #3
 800bffe:	3332      	adds	r3, #50	; 0x32
 800c000:	4a65      	ldr	r2, [pc, #404]	; (800c198 <UART_SetConfig+0x384>)
 800c002:	fba2 2303 	umull	r2, r3, r2, r3
 800c006:	095b      	lsrs	r3, r3, #5
 800c008:	f003 0207 	and.w	r2, r3, #7
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4442      	add	r2, r8
 800c012:	609a      	str	r2, [r3, #8]
 800c014:	e26f      	b.n	800c4f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c016:	f7fd fe49 	bl	8009cac <HAL_RCC_GetPCLK1Freq>
 800c01a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	461d      	mov	r5, r3
 800c020:	f04f 0600 	mov.w	r6, #0
 800c024:	46a8      	mov	r8, r5
 800c026:	46b1      	mov	r9, r6
 800c028:	eb18 0308 	adds.w	r3, r8, r8
 800c02c:	eb49 0409 	adc.w	r4, r9, r9
 800c030:	4698      	mov	r8, r3
 800c032:	46a1      	mov	r9, r4
 800c034:	eb18 0805 	adds.w	r8, r8, r5
 800c038:	eb49 0906 	adc.w	r9, r9, r6
 800c03c:	f04f 0100 	mov.w	r1, #0
 800c040:	f04f 0200 	mov.w	r2, #0
 800c044:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c048:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c04c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c050:	4688      	mov	r8, r1
 800c052:	4691      	mov	r9, r2
 800c054:	eb18 0005 	adds.w	r0, r8, r5
 800c058:	eb49 0106 	adc.w	r1, r9, r6
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	461d      	mov	r5, r3
 800c062:	f04f 0600 	mov.w	r6, #0
 800c066:	196b      	adds	r3, r5, r5
 800c068:	eb46 0406 	adc.w	r4, r6, r6
 800c06c:	461a      	mov	r2, r3
 800c06e:	4623      	mov	r3, r4
 800c070:	f7f4 fd3c 	bl	8000aec <__aeabi_uldivmod>
 800c074:	4603      	mov	r3, r0
 800c076:	460c      	mov	r4, r1
 800c078:	461a      	mov	r2, r3
 800c07a:	4b47      	ldr	r3, [pc, #284]	; (800c198 <UART_SetConfig+0x384>)
 800c07c:	fba3 2302 	umull	r2, r3, r3, r2
 800c080:	095b      	lsrs	r3, r3, #5
 800c082:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	461d      	mov	r5, r3
 800c08a:	f04f 0600 	mov.w	r6, #0
 800c08e:	46a9      	mov	r9, r5
 800c090:	46b2      	mov	sl, r6
 800c092:	eb19 0309 	adds.w	r3, r9, r9
 800c096:	eb4a 040a 	adc.w	r4, sl, sl
 800c09a:	4699      	mov	r9, r3
 800c09c:	46a2      	mov	sl, r4
 800c09e:	eb19 0905 	adds.w	r9, r9, r5
 800c0a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800c0a6:	f04f 0100 	mov.w	r1, #0
 800c0aa:	f04f 0200 	mov.w	r2, #0
 800c0ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c0b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c0b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c0ba:	4689      	mov	r9, r1
 800c0bc:	4692      	mov	sl, r2
 800c0be:	eb19 0005 	adds.w	r0, r9, r5
 800c0c2:	eb4a 0106 	adc.w	r1, sl, r6
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	461d      	mov	r5, r3
 800c0cc:	f04f 0600 	mov.w	r6, #0
 800c0d0:	196b      	adds	r3, r5, r5
 800c0d2:	eb46 0406 	adc.w	r4, r6, r6
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	4623      	mov	r3, r4
 800c0da:	f7f4 fd07 	bl	8000aec <__aeabi_uldivmod>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	4b2c      	ldr	r3, [pc, #176]	; (800c198 <UART_SetConfig+0x384>)
 800c0e6:	fba3 1302 	umull	r1, r3, r3, r2
 800c0ea:	095b      	lsrs	r3, r3, #5
 800c0ec:	2164      	movs	r1, #100	; 0x64
 800c0ee:	fb01 f303 	mul.w	r3, r1, r3
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	3332      	adds	r3, #50	; 0x32
 800c0f8:	4a27      	ldr	r2, [pc, #156]	; (800c198 <UART_SetConfig+0x384>)
 800c0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fe:	095b      	lsrs	r3, r3, #5
 800c100:	005b      	lsls	r3, r3, #1
 800c102:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c106:	4498      	add	r8, r3
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	461d      	mov	r5, r3
 800c10c:	f04f 0600 	mov.w	r6, #0
 800c110:	46a9      	mov	r9, r5
 800c112:	46b2      	mov	sl, r6
 800c114:	eb19 0309 	adds.w	r3, r9, r9
 800c118:	eb4a 040a 	adc.w	r4, sl, sl
 800c11c:	4699      	mov	r9, r3
 800c11e:	46a2      	mov	sl, r4
 800c120:	eb19 0905 	adds.w	r9, r9, r5
 800c124:	eb4a 0a06 	adc.w	sl, sl, r6
 800c128:	f04f 0100 	mov.w	r1, #0
 800c12c:	f04f 0200 	mov.w	r2, #0
 800c130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c134:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c138:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c13c:	4689      	mov	r9, r1
 800c13e:	4692      	mov	sl, r2
 800c140:	eb19 0005 	adds.w	r0, r9, r5
 800c144:	eb4a 0106 	adc.w	r1, sl, r6
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	461d      	mov	r5, r3
 800c14e:	f04f 0600 	mov.w	r6, #0
 800c152:	196b      	adds	r3, r5, r5
 800c154:	eb46 0406 	adc.w	r4, r6, r6
 800c158:	461a      	mov	r2, r3
 800c15a:	4623      	mov	r3, r4
 800c15c:	f7f4 fcc6 	bl	8000aec <__aeabi_uldivmod>
 800c160:	4603      	mov	r3, r0
 800c162:	460c      	mov	r4, r1
 800c164:	461a      	mov	r2, r3
 800c166:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <UART_SetConfig+0x384>)
 800c168:	fba3 1302 	umull	r1, r3, r3, r2
 800c16c:	095b      	lsrs	r3, r3, #5
 800c16e:	2164      	movs	r1, #100	; 0x64
 800c170:	fb01 f303 	mul.w	r3, r1, r3
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	3332      	adds	r3, #50	; 0x32
 800c17a:	4a07      	ldr	r2, [pc, #28]	; (800c198 <UART_SetConfig+0x384>)
 800c17c:	fba2 2303 	umull	r2, r3, r2, r3
 800c180:	095b      	lsrs	r3, r3, #5
 800c182:	f003 0207 	and.w	r2, r3, #7
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4442      	add	r2, r8
 800c18c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c18e:	e1b2      	b.n	800c4f6 <UART_SetConfig+0x6e2>
 800c190:	40011000 	.word	0x40011000
 800c194:	40011400 	.word	0x40011400
 800c198:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4ad7      	ldr	r2, [pc, #860]	; (800c500 <UART_SetConfig+0x6ec>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d005      	beq.n	800c1b2 <UART_SetConfig+0x39e>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4ad6      	ldr	r2, [pc, #856]	; (800c504 <UART_SetConfig+0x6f0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	f040 80d1 	bne.w	800c354 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1b2:	f7fd fd8f 	bl	8009cd4 <HAL_RCC_GetPCLK2Freq>
 800c1b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	469a      	mov	sl, r3
 800c1bc:	f04f 0b00 	mov.w	fp, #0
 800c1c0:	46d0      	mov	r8, sl
 800c1c2:	46d9      	mov	r9, fp
 800c1c4:	eb18 0308 	adds.w	r3, r8, r8
 800c1c8:	eb49 0409 	adc.w	r4, r9, r9
 800c1cc:	4698      	mov	r8, r3
 800c1ce:	46a1      	mov	r9, r4
 800c1d0:	eb18 080a 	adds.w	r8, r8, sl
 800c1d4:	eb49 090b 	adc.w	r9, r9, fp
 800c1d8:	f04f 0100 	mov.w	r1, #0
 800c1dc:	f04f 0200 	mov.w	r2, #0
 800c1e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c1e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c1e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c1ec:	4688      	mov	r8, r1
 800c1ee:	4691      	mov	r9, r2
 800c1f0:	eb1a 0508 	adds.w	r5, sl, r8
 800c1f4:	eb4b 0609 	adc.w	r6, fp, r9
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	f04f 0200 	mov.w	r2, #0
 800c202:	f04f 0300 	mov.w	r3, #0
 800c206:	f04f 0400 	mov.w	r4, #0
 800c20a:	0094      	lsls	r4, r2, #2
 800c20c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c210:	008b      	lsls	r3, r1, #2
 800c212:	461a      	mov	r2, r3
 800c214:	4623      	mov	r3, r4
 800c216:	4628      	mov	r0, r5
 800c218:	4631      	mov	r1, r6
 800c21a:	f7f4 fc67 	bl	8000aec <__aeabi_uldivmod>
 800c21e:	4603      	mov	r3, r0
 800c220:	460c      	mov	r4, r1
 800c222:	461a      	mov	r2, r3
 800c224:	4bb8      	ldr	r3, [pc, #736]	; (800c508 <UART_SetConfig+0x6f4>)
 800c226:	fba3 2302 	umull	r2, r3, r3, r2
 800c22a:	095b      	lsrs	r3, r3, #5
 800c22c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	469b      	mov	fp, r3
 800c234:	f04f 0c00 	mov.w	ip, #0
 800c238:	46d9      	mov	r9, fp
 800c23a:	46e2      	mov	sl, ip
 800c23c:	eb19 0309 	adds.w	r3, r9, r9
 800c240:	eb4a 040a 	adc.w	r4, sl, sl
 800c244:	4699      	mov	r9, r3
 800c246:	46a2      	mov	sl, r4
 800c248:	eb19 090b 	adds.w	r9, r9, fp
 800c24c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c250:	f04f 0100 	mov.w	r1, #0
 800c254:	f04f 0200 	mov.w	r2, #0
 800c258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c25c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c264:	4689      	mov	r9, r1
 800c266:	4692      	mov	sl, r2
 800c268:	eb1b 0509 	adds.w	r5, fp, r9
 800c26c:	eb4c 060a 	adc.w	r6, ip, sl
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	4619      	mov	r1, r3
 800c276:	f04f 0200 	mov.w	r2, #0
 800c27a:	f04f 0300 	mov.w	r3, #0
 800c27e:	f04f 0400 	mov.w	r4, #0
 800c282:	0094      	lsls	r4, r2, #2
 800c284:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c288:	008b      	lsls	r3, r1, #2
 800c28a:	461a      	mov	r2, r3
 800c28c:	4623      	mov	r3, r4
 800c28e:	4628      	mov	r0, r5
 800c290:	4631      	mov	r1, r6
 800c292:	f7f4 fc2b 	bl	8000aec <__aeabi_uldivmod>
 800c296:	4603      	mov	r3, r0
 800c298:	460c      	mov	r4, r1
 800c29a:	461a      	mov	r2, r3
 800c29c:	4b9a      	ldr	r3, [pc, #616]	; (800c508 <UART_SetConfig+0x6f4>)
 800c29e:	fba3 1302 	umull	r1, r3, r3, r2
 800c2a2:	095b      	lsrs	r3, r3, #5
 800c2a4:	2164      	movs	r1, #100	; 0x64
 800c2a6:	fb01 f303 	mul.w	r3, r1, r3
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	3332      	adds	r3, #50	; 0x32
 800c2b0:	4a95      	ldr	r2, [pc, #596]	; (800c508 <UART_SetConfig+0x6f4>)
 800c2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2bc:	4498      	add	r8, r3
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	469b      	mov	fp, r3
 800c2c2:	f04f 0c00 	mov.w	ip, #0
 800c2c6:	46d9      	mov	r9, fp
 800c2c8:	46e2      	mov	sl, ip
 800c2ca:	eb19 0309 	adds.w	r3, r9, r9
 800c2ce:	eb4a 040a 	adc.w	r4, sl, sl
 800c2d2:	4699      	mov	r9, r3
 800c2d4:	46a2      	mov	sl, r4
 800c2d6:	eb19 090b 	adds.w	r9, r9, fp
 800c2da:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c2de:	f04f 0100 	mov.w	r1, #0
 800c2e2:	f04f 0200 	mov.w	r2, #0
 800c2e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c2ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c2f2:	4689      	mov	r9, r1
 800c2f4:	4692      	mov	sl, r2
 800c2f6:	eb1b 0509 	adds.w	r5, fp, r9
 800c2fa:	eb4c 060a 	adc.w	r6, ip, sl
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	4619      	mov	r1, r3
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	f04f 0300 	mov.w	r3, #0
 800c30c:	f04f 0400 	mov.w	r4, #0
 800c310:	0094      	lsls	r4, r2, #2
 800c312:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c316:	008b      	lsls	r3, r1, #2
 800c318:	461a      	mov	r2, r3
 800c31a:	4623      	mov	r3, r4
 800c31c:	4628      	mov	r0, r5
 800c31e:	4631      	mov	r1, r6
 800c320:	f7f4 fbe4 	bl	8000aec <__aeabi_uldivmod>
 800c324:	4603      	mov	r3, r0
 800c326:	460c      	mov	r4, r1
 800c328:	461a      	mov	r2, r3
 800c32a:	4b77      	ldr	r3, [pc, #476]	; (800c508 <UART_SetConfig+0x6f4>)
 800c32c:	fba3 1302 	umull	r1, r3, r3, r2
 800c330:	095b      	lsrs	r3, r3, #5
 800c332:	2164      	movs	r1, #100	; 0x64
 800c334:	fb01 f303 	mul.w	r3, r1, r3
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	011b      	lsls	r3, r3, #4
 800c33c:	3332      	adds	r3, #50	; 0x32
 800c33e:	4a72      	ldr	r2, [pc, #456]	; (800c508 <UART_SetConfig+0x6f4>)
 800c340:	fba2 2303 	umull	r2, r3, r2, r3
 800c344:	095b      	lsrs	r3, r3, #5
 800c346:	f003 020f 	and.w	r2, r3, #15
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4442      	add	r2, r8
 800c350:	609a      	str	r2, [r3, #8]
 800c352:	e0d0      	b.n	800c4f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c354:	f7fd fcaa 	bl	8009cac <HAL_RCC_GetPCLK1Freq>
 800c358:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	469a      	mov	sl, r3
 800c35e:	f04f 0b00 	mov.w	fp, #0
 800c362:	46d0      	mov	r8, sl
 800c364:	46d9      	mov	r9, fp
 800c366:	eb18 0308 	adds.w	r3, r8, r8
 800c36a:	eb49 0409 	adc.w	r4, r9, r9
 800c36e:	4698      	mov	r8, r3
 800c370:	46a1      	mov	r9, r4
 800c372:	eb18 080a 	adds.w	r8, r8, sl
 800c376:	eb49 090b 	adc.w	r9, r9, fp
 800c37a:	f04f 0100 	mov.w	r1, #0
 800c37e:	f04f 0200 	mov.w	r2, #0
 800c382:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c386:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c38a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c38e:	4688      	mov	r8, r1
 800c390:	4691      	mov	r9, r2
 800c392:	eb1a 0508 	adds.w	r5, sl, r8
 800c396:	eb4b 0609 	adc.w	r6, fp, r9
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	f04f 0200 	mov.w	r2, #0
 800c3a4:	f04f 0300 	mov.w	r3, #0
 800c3a8:	f04f 0400 	mov.w	r4, #0
 800c3ac:	0094      	lsls	r4, r2, #2
 800c3ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c3b2:	008b      	lsls	r3, r1, #2
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	4623      	mov	r3, r4
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	f7f4 fb96 	bl	8000aec <__aeabi_uldivmod>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	4b50      	ldr	r3, [pc, #320]	; (800c508 <UART_SetConfig+0x6f4>)
 800c3c8:	fba3 2302 	umull	r2, r3, r3, r2
 800c3cc:	095b      	lsrs	r3, r3, #5
 800c3ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	469b      	mov	fp, r3
 800c3d6:	f04f 0c00 	mov.w	ip, #0
 800c3da:	46d9      	mov	r9, fp
 800c3dc:	46e2      	mov	sl, ip
 800c3de:	eb19 0309 	adds.w	r3, r9, r9
 800c3e2:	eb4a 040a 	adc.w	r4, sl, sl
 800c3e6:	4699      	mov	r9, r3
 800c3e8:	46a2      	mov	sl, r4
 800c3ea:	eb19 090b 	adds.w	r9, r9, fp
 800c3ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c3f2:	f04f 0100 	mov.w	r1, #0
 800c3f6:	f04f 0200 	mov.w	r2, #0
 800c3fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c402:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c406:	4689      	mov	r9, r1
 800c408:	4692      	mov	sl, r2
 800c40a:	eb1b 0509 	adds.w	r5, fp, r9
 800c40e:	eb4c 060a 	adc.w	r6, ip, sl
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	4619      	mov	r1, r3
 800c418:	f04f 0200 	mov.w	r2, #0
 800c41c:	f04f 0300 	mov.w	r3, #0
 800c420:	f04f 0400 	mov.w	r4, #0
 800c424:	0094      	lsls	r4, r2, #2
 800c426:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c42a:	008b      	lsls	r3, r1, #2
 800c42c:	461a      	mov	r2, r3
 800c42e:	4623      	mov	r3, r4
 800c430:	4628      	mov	r0, r5
 800c432:	4631      	mov	r1, r6
 800c434:	f7f4 fb5a 	bl	8000aec <__aeabi_uldivmod>
 800c438:	4603      	mov	r3, r0
 800c43a:	460c      	mov	r4, r1
 800c43c:	461a      	mov	r2, r3
 800c43e:	4b32      	ldr	r3, [pc, #200]	; (800c508 <UART_SetConfig+0x6f4>)
 800c440:	fba3 1302 	umull	r1, r3, r3, r2
 800c444:	095b      	lsrs	r3, r3, #5
 800c446:	2164      	movs	r1, #100	; 0x64
 800c448:	fb01 f303 	mul.w	r3, r1, r3
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	3332      	adds	r3, #50	; 0x32
 800c452:	4a2d      	ldr	r2, [pc, #180]	; (800c508 <UART_SetConfig+0x6f4>)
 800c454:	fba2 2303 	umull	r2, r3, r2, r3
 800c458:	095b      	lsrs	r3, r3, #5
 800c45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c45e:	4498      	add	r8, r3
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	469b      	mov	fp, r3
 800c464:	f04f 0c00 	mov.w	ip, #0
 800c468:	46d9      	mov	r9, fp
 800c46a:	46e2      	mov	sl, ip
 800c46c:	eb19 0309 	adds.w	r3, r9, r9
 800c470:	eb4a 040a 	adc.w	r4, sl, sl
 800c474:	4699      	mov	r9, r3
 800c476:	46a2      	mov	sl, r4
 800c478:	eb19 090b 	adds.w	r9, r9, fp
 800c47c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c480:	f04f 0100 	mov.w	r1, #0
 800c484:	f04f 0200 	mov.w	r2, #0
 800c488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c48c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c490:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c494:	4689      	mov	r9, r1
 800c496:	4692      	mov	sl, r2
 800c498:	eb1b 0509 	adds.w	r5, fp, r9
 800c49c:	eb4c 060a 	adc.w	r6, ip, sl
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f04f 0200 	mov.w	r2, #0
 800c4aa:	f04f 0300 	mov.w	r3, #0
 800c4ae:	f04f 0400 	mov.w	r4, #0
 800c4b2:	0094      	lsls	r4, r2, #2
 800c4b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c4b8:	008b      	lsls	r3, r1, #2
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	4623      	mov	r3, r4
 800c4be:	4628      	mov	r0, r5
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	f7f4 fb13 	bl	8000aec <__aeabi_uldivmod>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	4b0e      	ldr	r3, [pc, #56]	; (800c508 <UART_SetConfig+0x6f4>)
 800c4ce:	fba3 1302 	umull	r1, r3, r3, r2
 800c4d2:	095b      	lsrs	r3, r3, #5
 800c4d4:	2164      	movs	r1, #100	; 0x64
 800c4d6:	fb01 f303 	mul.w	r3, r1, r3
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	011b      	lsls	r3, r3, #4
 800c4de:	3332      	adds	r3, #50	; 0x32
 800c4e0:	4a09      	ldr	r2, [pc, #36]	; (800c508 <UART_SetConfig+0x6f4>)
 800c4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e6:	095b      	lsrs	r3, r3, #5
 800c4e8:	f003 020f 	and.w	r2, r3, #15
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4442      	add	r2, r8
 800c4f2:	609a      	str	r2, [r3, #8]
}
 800c4f4:	e7ff      	b.n	800c4f6 <UART_SetConfig+0x6e2>
 800c4f6:	bf00      	nop
 800c4f8:	3714      	adds	r7, #20
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c500:	40011000 	.word	0x40011000
 800c504:	40011400 	.word	0x40011400
 800c508:	51eb851f 	.word	0x51eb851f

0800c50c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800c51a:	2300      	movs	r3, #0
 800c51c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b01      	cmp	r3, #1
 800c524:	d029      	beq.n	800c57a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c536:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c540:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800c546:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800c54c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800c552:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800c558:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800c55e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800c564:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800c56a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4313      	orrs	r3, r2
 800c570:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	e034      	b.n	800c5e4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c586:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c590:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c596:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c5aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c5ae:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5b8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800c5be:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800c5c4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800c5ca:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800c5d0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5d2:	68ba      	ldr	r2, [r7, #8]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b087      	sub	sp, #28
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	60f8      	str	r0, [r7, #12]
 800c5fa:	60b9      	str	r1, [r7, #8]
 800c5fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800c602:	2300      	movs	r3, #0
 800c604:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d02e      	beq.n	800c66a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c618:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	3b01      	subs	r3, #1
 800c626:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800c628:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	3b01      	subs	r3, #1
 800c630:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800c632:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	3b01      	subs	r3, #1
 800c63a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800c63c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	3b01      	subs	r3, #1
 800c644:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800c646:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	3b01      	subs	r3, #1
 800c64e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800c650:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	699b      	ldr	r3, [r3, #24]
 800c656:	3b01      	subs	r3, #1
 800c658:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800c65a:	4313      	orrs	r3, r2
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	4313      	orrs	r3, r2
 800c660:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	609a      	str	r2, [r3, #8]
 800c668:	e03b      	b.n	800c6e2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c67a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	3b01      	subs	r3, #1
 800c682:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	3b01      	subs	r3, #1
 800c68a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800c68c:	4313      	orrs	r3, r2
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	4313      	orrs	r3, r2
 800c692:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c6a0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800c6b0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800c6ba:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800c6c4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	699b      	ldr	r3, [r3, #24]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	693a      	ldr	r2, [r7, #16]
 800c6e0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	371c      	adds	r7, #28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c70c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	3b01      	subs	r3, #1
 800c714:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c716:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	68db      	ldr	r3, [r3, #12]
 800c71c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c71e:	4313      	orrs	r3, r2
 800c720:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800c728:	f7f9 fc94 	bl	8006054 <HAL_GetTick>
 800c72c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c72e:	e010      	b.n	800c752 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c736:	d00c      	beq.n	800c752 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d007      	beq.n	800c74e <FMC_SDRAM_SendCommand+0x5e>
 800c73e:	f7f9 fc89 	bl	8006054 <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d201      	bcs.n	800c752 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e006      	b.n	800c760 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	f003 0320 	and.w	r3, r3, #32
 800c75a:	2b20      	cmp	r3, #32
 800c75c:	d0e8      	beq.n	800c730 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3718      	adds	r7, #24
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	695a      	ldr	r2, [r3, #20]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	005b      	lsls	r3, r3, #1
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f043 0201 	orr.w	r2, r3, #1
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	370c      	adds	r7, #12
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	f023 0201 	bic.w	r2, r3, #1
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	370c      	adds	r7, #12
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	019b      	lsls	r3, r3, #6
 800c7e6:	f043 0220 	orr.w	r2, r3, #32
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	60fb      	str	r3, [r7, #12]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	4a09      	ldr	r2, [pc, #36]	; (800c81c <USB_FlushTxFifo+0x48>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d901      	bls.n	800c800 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e006      	b.n	800c80e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	f003 0320 	and.w	r3, r3, #32
 800c808:	2b20      	cmp	r3, #32
 800c80a:	d0f0      	beq.n	800c7ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	00030d40 	.word	0x00030d40

0800c820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2210      	movs	r2, #16
 800c830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4a09      	ldr	r2, [pc, #36]	; (800c860 <USB_FlushRxFifo+0x40>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d901      	bls.n	800c844 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c840:	2303      	movs	r3, #3
 800c842:	e006      	b.n	800c852 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b10      	cmp	r3, #16
 800c84e:	d0f0      	beq.n	800c832 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop
 800c860:	00030d40 	.word	0x00030d40

0800c864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c864:	b480      	push	{r7}
 800c866:	b089      	sub	sp, #36	; 0x24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	4613      	mov	r3, r2
 800c870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c87a:	88fb      	ldrh	r3, [r7, #6]
 800c87c:	3303      	adds	r3, #3
 800c87e:	089b      	lsrs	r3, r3, #2
 800c880:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c882:	2300      	movs	r3, #0
 800c884:	61bb      	str	r3, [r7, #24]
 800c886:	e00b      	b.n	800c8a0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	601a      	str	r2, [r3, #0]
    pDest++;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	3304      	adds	r3, #4
 800c898:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	3301      	adds	r3, #1
 800c89e:	61bb      	str	r3, [r7, #24]
 800c8a0:	69ba      	ldr	r2, [r7, #24]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d3ef      	bcc.n	800c888 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c8a8:	69fb      	ldr	r3, [r7, #28]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3724      	adds	r7, #36	; 0x24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr

0800c8b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b085      	sub	sp, #20
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	f003 0301 	and.w	r3, r3, #1
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	78fb      	ldrb	r3, [r7, #3]
 800c926:	f003 0303 	and.w	r3, r3, #3
 800c92a:	68f9      	ldr	r1, [r7, #12]
 800c92c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c930:	4313      	orrs	r3, r2
 800c932:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d107      	bne.n	800c94a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c940:	461a      	mov	r2, r3
 800c942:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c946:	6053      	str	r3, [r2, #4]
 800c948:	e009      	b.n	800c95e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d106      	bne.n	800c95e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c956:	461a      	mov	r2, r3
 800c958:	f241 7370 	movw	r3, #6000	; 0x1770
 800c95c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c97e:	695b      	ldr	r3, [r3, #20]
 800c980:	b29b      	uxth	r3, r3
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c98e:	b480      	push	{r7}
 800c990:	b087      	sub	sp, #28
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	460b      	mov	r3, r1
 800c998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	0c9b      	lsrs	r3, r3, #18
 800c9b6:	f003 0303 	and.w	r3, r3, #3
 800c9ba:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <USB_HC_Halt+0x3a>
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d16c      	bne.n	800caa2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	015a      	lsls	r2, r3, #5
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	0151      	lsls	r1, r2, #5
 800c9da:	693a      	ldr	r2, [r7, #16]
 800c9dc:	440a      	add	r2, r1
 800c9de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9e6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d143      	bne.n	800ca7c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	0151      	lsls	r1, r2, #5
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	440a      	add	r2, r1
 800ca0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca12:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	0151      	lsls	r1, r2, #5
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	440a      	add	r2, r1
 800ca2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	68fa      	ldr	r2, [r7, #12]
 800ca44:	0151      	lsls	r1, r2, #5
 800ca46:	693a      	ldr	r2, [r7, #16]
 800ca48:	440a      	add	r2, r1
 800ca4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca52:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	3301      	adds	r3, #1
 800ca58:	617b      	str	r3, [r7, #20]
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca60:	d81d      	bhi.n	800ca9e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca78:	d0ec      	beq.n	800ca54 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca7a:	e080      	b.n	800cb7e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	015a      	lsls	r2, r3, #5
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	4413      	add	r3, r2
 800ca84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	0151      	lsls	r1, r2, #5
 800ca8e:	693a      	ldr	r2, [r7, #16]
 800ca90:	440a      	add	r2, r1
 800ca92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca9a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ca9c:	e06f      	b.n	800cb7e <USB_HC_Halt+0x1f0>
          break;
 800ca9e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800caa0:	e06d      	b.n	800cb7e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	015a      	lsls	r2, r3, #5
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	4413      	add	r3, r2
 800caaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	0151      	lsls	r1, r2, #5
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	440a      	add	r2, r1
 800cab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cabc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cac0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d143      	bne.n	800cb5a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	015a      	lsls	r2, r3, #5
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	4413      	add	r3, r2
 800cada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	0151      	lsls	r1, r2, #5
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	440a      	add	r2, r1
 800cae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caf0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	015a      	lsls	r2, r3, #5
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	4413      	add	r3, r2
 800cafa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	0151      	lsls	r1, r2, #5
 800cb04:	693a      	ldr	r2, [r7, #16]
 800cb06:	440a      	add	r2, r1
 800cb08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb10:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	015a      	lsls	r2, r3, #5
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	0151      	lsls	r1, r2, #5
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	440a      	add	r2, r1
 800cb28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb30:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	3301      	adds	r3, #1
 800cb36:	617b      	str	r3, [r7, #20]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb3e:	d81d      	bhi.n	800cb7c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb56:	d0ec      	beq.n	800cb32 <USB_HC_Halt+0x1a4>
 800cb58:	e011      	b.n	800cb7e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	015a      	lsls	r2, r3, #5
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	0151      	lsls	r1, r2, #5
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	440a      	add	r2, r1
 800cb70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb78:	6013      	str	r3, [r2, #0]
 800cb7a:	e000      	b.n	800cb7e <USB_HC_Halt+0x1f0>
          break;
 800cb7c:	bf00      	nop
    }
  }

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	371c      	adds	r7, #28
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7ff fe07 	bl	800c7b0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cba2:	2110      	movs	r1, #16
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff fe15 	bl	800c7d4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fe38 	bl	800c820 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	613b      	str	r3, [r7, #16]
 800cbb4:	e01f      	b.n	800cbf6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	015a      	lsls	r2, r3, #5
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbcc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbd4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbdc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	015a      	lsls	r2, r3, #5
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbea:	461a      	mov	r2, r3
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	613b      	str	r3, [r7, #16]
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	2b0f      	cmp	r3, #15
 800cbfa:	d9dc      	bls.n	800cbb6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	613b      	str	r3, [r7, #16]
 800cc00:	e034      	b.n	800cc6c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	015a      	lsls	r2, r3, #5
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	4413      	add	r3, r2
 800cc0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc28:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	015a      	lsls	r2, r3, #5
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	4413      	add	r3, r2
 800cc32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc36:	461a      	mov	r2, r3
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	617b      	str	r3, [r7, #20]
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc48:	d80c      	bhi.n	800cc64 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	015a      	lsls	r2, r3, #5
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc60:	d0ec      	beq.n	800cc3c <USB_StopHost+0xb0>
 800cc62:	e000      	b.n	800cc66 <USB_StopHost+0xda>
        break;
 800cc64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	613b      	str	r3, [r7, #16]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	2b0f      	cmp	r3, #15
 800cc70:	d9c7      	bls.n	800cc02 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc78:	461a      	mov	r2, r3
 800cc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f04f 32ff 	mov.w	r2, #4294967295
 800cc86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7ff fd80 	bl	800c78e <USB_EnableGlobalInt>

  return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f804 	bl	800ccbc <USBH_HandleSof>
}
 800ccb4:	bf00      	nop
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	2b0b      	cmp	r3, #11
 800cccc:	d10a      	bne.n	800cce4 <USBH_HandleSof+0x28>
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d005      	beq.n	800cce4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	4798      	blx	r3
  }
}
 800cce4:	bf00      	nop
 800cce6:	3708      	adds	r7, #8
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd10:	2200      	movs	r2, #0
 800cd12:	4619      	mov	r1, r3
 800cd14:	f000 f8ae 	bl	800ce74 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cd18:	bf00      	nop
}
 800cd1a:	3708      	adds	r7, #8
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cd30:	bf00      	nop
}
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2201      	movs	r2, #1
 800cd48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd70:	2200      	movs	r2, #0
 800cd72:	4619      	mov	r1, r3
 800cd74:	f000 f87e 	bl	800ce74 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b082      	sub	sp, #8
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 f8fe 	bl	800dfa4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	791b      	ldrb	r3, [r3, #4]
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f830 	bl	800ce14 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	795b      	ldrb	r3, [r3, #5]
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f82a 	bl	800ce14 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	f000 f84c 	bl	800ce74 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce02:	2200      	movs	r2, #0
 800ce04:	4619      	mov	r1, r3
 800ce06:	f000 f835 	bl	800ce74 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	2b0a      	cmp	r3, #10
 800ce24:	d80d      	bhi.n	800ce42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ce26:	78fb      	ldrb	r3, [r7, #3]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	33e0      	adds	r3, #224	; 0xe0
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	4413      	add	r3, r2
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	78fb      	ldrb	r3, [r7, #3]
 800ce34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ce38:	6879      	ldr	r1, [r7, #4]
 800ce3a:	33e0      	adds	r3, #224	; 0xe0
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	440b      	add	r3, r1
 800ce40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce56:	f3ef 8305 	mrs	r3, IPSR
 800ce5a:	607b      	str	r3, [r7, #4]
  return(result);
 800ce5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	bf14      	ite	ne
 800ce62:	2301      	movne	r3, #1
 800ce64:	2300      	moveq	r3, #0
 800ce66:	b2db      	uxtb	r3, r3
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	370c      	adds	r7, #12
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b086      	sub	sp, #24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <osMessagePut+0x1e>
    ticks = 1;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ce92:	f7ff ffdd 	bl	800ce50 <inHandlerMode>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d018      	beq.n	800cece <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ce9c:	f107 0210 	add.w	r2, r7, #16
 800cea0:	f107 0108 	add.w	r1, r7, #8
 800cea4:	2300      	movs	r3, #0
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f000 f9a6 	bl	800d1f8 <xQueueGenericSendFromISR>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d001      	beq.n	800ceb6 <osMessagePut+0x42>
      return osErrorOS;
 800ceb2:	23ff      	movs	r3, #255	; 0xff
 800ceb4:	e018      	b.n	800cee8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d014      	beq.n	800cee6 <osMessagePut+0x72>
 800cebc:	4b0c      	ldr	r3, [pc, #48]	; (800cef0 <osMessagePut+0x7c>)
 800cebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cec2:	601a      	str	r2, [r3, #0]
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	e00b      	b.n	800cee6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cece:	f107 0108 	add.w	r1, r7, #8
 800ced2:	2300      	movs	r3, #0
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f000 f894 	bl	800d004 <xQueueGenericSend>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d001      	beq.n	800cee6 <osMessagePut+0x72>
      return osErrorOS;
 800cee2:	23ff      	movs	r3, #255	; 0xff
 800cee4:	e000      	b.n	800cee8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	e000ed04 	.word	0xe000ed04

0800cef4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	689a      	ldr	r2, [r3, #8]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	601a      	str	r2, [r3, #0]
}
 800cf30:	bf00      	nop
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	d103      	bne.n	800cf5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	60fb      	str	r3, [r7, #12]
 800cf5a:	e00c      	b.n	800cf76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	e002      	b.n	800cf6a <vListInsert+0x2e>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	60fb      	str	r3, [r7, #12]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d2f6      	bcs.n	800cf64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	683a      	ldr	r2, [r7, #0]
 800cf90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	1c5a      	adds	r2, r3, #1
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	601a      	str	r2, [r3, #0]
}
 800cfa2:	bf00      	nop
 800cfa4:	3714      	adds	r7, #20
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b085      	sub	sp, #20
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	6892      	ldr	r2, [r2, #8]
 800cfc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	6852      	ldr	r2, [r2, #4]
 800cfce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d103      	bne.n	800cfe2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	689a      	ldr	r2, [r3, #8]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	1e5a      	subs	r2, r3, #1
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr
	...

0800d004 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b08e      	sub	sp, #56	; 0x38
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d012:	2300      	movs	r3, #0
 800d014:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d109      	bne.n	800d034 <xQueueGenericSend+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	62bb      	str	r3, [r7, #40]	; 0x28
 800d032:	e7fe      	b.n	800d032 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d103      	bne.n	800d042 <xQueueGenericSend+0x3e>
 800d03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d101      	bne.n	800d046 <xQueueGenericSend+0x42>
 800d042:	2301      	movs	r3, #1
 800d044:	e000      	b.n	800d048 <xQueueGenericSend+0x44>
 800d046:	2300      	movs	r3, #0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d109      	bne.n	800d060 <xQueueGenericSend+0x5c>
 800d04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d050:	f383 8811 	msr	BASEPRI, r3
 800d054:	f3bf 8f6f 	isb	sy
 800d058:	f3bf 8f4f 	dsb	sy
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
 800d05e:	e7fe      	b.n	800d05e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d103      	bne.n	800d06e <xQueueGenericSend+0x6a>
 800d066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d101      	bne.n	800d072 <xQueueGenericSend+0x6e>
 800d06e:	2301      	movs	r3, #1
 800d070:	e000      	b.n	800d074 <xQueueGenericSend+0x70>
 800d072:	2300      	movs	r3, #0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d109      	bne.n	800d08c <xQueueGenericSend+0x88>
 800d078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	623b      	str	r3, [r7, #32]
 800d08a:	e7fe      	b.n	800d08a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d08c:	f000 fd26 	bl	800dadc <xTaskGetSchedulerState>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d102      	bne.n	800d09c <xQueueGenericSend+0x98>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d101      	bne.n	800d0a0 <xQueueGenericSend+0x9c>
 800d09c:	2301      	movs	r3, #1
 800d09e:	e000      	b.n	800d0a2 <xQueueGenericSend+0x9e>
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d109      	bne.n	800d0ba <xQueueGenericSend+0xb6>
 800d0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0aa:	f383 8811 	msr	BASEPRI, r3
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	e7fe      	b.n	800d0b8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0ba:	f000 fe2d 	bl	800dd18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d302      	bcc.n	800d0d0 <xQueueGenericSend+0xcc>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d129      	bne.n	800d124 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	68b9      	ldr	r1, [r7, #8]
 800d0d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0d6:	f000 f923 	bl	800d320 <prvCopyDataToQueue>
 800d0da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d010      	beq.n	800d106 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e6:	3324      	adds	r3, #36	; 0x24
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 fbf3 	bl	800d8d4 <xTaskRemoveFromEventList>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d013      	beq.n	800d11c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d0f4:	4b3f      	ldr	r3, [pc, #252]	; (800d1f4 <xQueueGenericSend+0x1f0>)
 800d0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0fa:	601a      	str	r2, [r3, #0]
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	f3bf 8f6f 	isb	sy
 800d104:	e00a      	b.n	800d11c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d007      	beq.n	800d11c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d10c:	4b39      	ldr	r3, [pc, #228]	; (800d1f4 <xQueueGenericSend+0x1f0>)
 800d10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d112:	601a      	str	r2, [r3, #0]
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d11c:	f000 fe2a 	bl	800dd74 <vPortExitCritical>
				return pdPASS;
 800d120:	2301      	movs	r3, #1
 800d122:	e063      	b.n	800d1ec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d103      	bne.n	800d132 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d12a:	f000 fe23 	bl	800dd74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	e05c      	b.n	800d1ec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d134:	2b00      	cmp	r3, #0
 800d136:	d106      	bne.n	800d146 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fc2b 	bl	800d998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d142:	2301      	movs	r3, #1
 800d144:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d146:	f000 fe15 	bl	800dd74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d14a:	f000 f9bd 	bl	800d4c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d14e:	f000 fde3 	bl	800dd18 <vPortEnterCritical>
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d158:	b25b      	sxtb	r3, r3
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15e:	d103      	bne.n	800d168 <xQueueGenericSend+0x164>
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	2200      	movs	r2, #0
 800d164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d16a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d16e:	b25b      	sxtb	r3, r3
 800d170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d174:	d103      	bne.n	800d17e <xQueueGenericSend+0x17a>
 800d176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d17e:	f000 fdf9 	bl	800dd74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d182:	1d3a      	adds	r2, r7, #4
 800d184:	f107 0314 	add.w	r3, r7, #20
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 fc1a 	bl	800d9c4 <xTaskCheckForTimeOut>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d124      	bne.n	800d1e0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d198:	f000 f97e 	bl	800d498 <prvIsQueueFull>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d018      	beq.n	800d1d4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	3310      	adds	r3, #16
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f000 fb6e 	bl	800d88c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1b2:	f000 f91f 	bl	800d3f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d1b6:	f000 f995 	bl	800d4e4 <xTaskResumeAll>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f47f af7c 	bne.w	800d0ba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d1c2:	4b0c      	ldr	r3, [pc, #48]	; (800d1f4 <xQueueGenericSend+0x1f0>)
 800d1c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	f3bf 8f6f 	isb	sy
 800d1d2:	e772      	b.n	800d0ba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d1d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1d6:	f000 f90d 	bl	800d3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1da:	f000 f983 	bl	800d4e4 <xTaskResumeAll>
 800d1de:	e76c      	b.n	800d0ba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e2:	f000 f907 	bl	800d3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1e6:	f000 f97d 	bl	800d4e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d1ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3738      	adds	r7, #56	; 0x38
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	e000ed04 	.word	0xe000ed04

0800d1f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08e      	sub	sp, #56	; 0x38
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d109      	bne.n	800d224 <xQueueGenericSendFromISR+0x2c>
 800d210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d214:	f383 8811 	msr	BASEPRI, r3
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	f3bf 8f4f 	dsb	sy
 800d220:	627b      	str	r3, [r7, #36]	; 0x24
 800d222:	e7fe      	b.n	800d222 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d103      	bne.n	800d232 <xQueueGenericSendFromISR+0x3a>
 800d22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <xQueueGenericSendFromISR+0x3e>
 800d232:	2301      	movs	r3, #1
 800d234:	e000      	b.n	800d238 <xQueueGenericSendFromISR+0x40>
 800d236:	2300      	movs	r3, #0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d109      	bne.n	800d250 <xQueueGenericSendFromISR+0x58>
 800d23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	623b      	str	r3, [r7, #32]
 800d24e:	e7fe      	b.n	800d24e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2b02      	cmp	r3, #2
 800d254:	d103      	bne.n	800d25e <xQueueGenericSendFromISR+0x66>
 800d256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d101      	bne.n	800d262 <xQueueGenericSendFromISR+0x6a>
 800d25e:	2301      	movs	r3, #1
 800d260:	e000      	b.n	800d264 <xQueueGenericSendFromISR+0x6c>
 800d262:	2300      	movs	r3, #0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d109      	bne.n	800d27c <xQueueGenericSendFromISR+0x84>
 800d268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26c:	f383 8811 	msr	BASEPRI, r3
 800d270:	f3bf 8f6f 	isb	sy
 800d274:	f3bf 8f4f 	dsb	sy
 800d278:	61fb      	str	r3, [r7, #28]
 800d27a:	e7fe      	b.n	800d27a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d27c:	f000 fdfc 	bl	800de78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d280:	f3ef 8211 	mrs	r2, BASEPRI
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	61ba      	str	r2, [r7, #24]
 800d296:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d298:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d29a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d302      	bcc.n	800d2ae <xQueueGenericSendFromISR+0xb6>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d12c      	bne.n	800d308 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d2b8:	683a      	ldr	r2, [r7, #0]
 800d2ba:	68b9      	ldr	r1, [r7, #8]
 800d2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2be:	f000 f82f 	bl	800d320 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d2c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ca:	d112      	bne.n	800d2f2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d016      	beq.n	800d302 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d6:	3324      	adds	r3, #36	; 0x24
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 fafb 	bl	800d8d4 <xTaskRemoveFromEventList>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00e      	beq.n	800d302 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00b      	beq.n	800d302 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	601a      	str	r2, [r3, #0]
 800d2f0:	e007      	b.n	800d302 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d2f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	b25a      	sxtb	r2, r3
 800d2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d302:	2301      	movs	r3, #1
 800d304:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d306:	e001      	b.n	800d30c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d308:	2300      	movs	r3, #0
 800d30a:	637b      	str	r3, [r7, #52]	; 0x34
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3738      	adds	r7, #56	; 0x38
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d32c:	2300      	movs	r3, #0
 800d32e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10d      	bne.n	800d35a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d14d      	bne.n	800d3e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f000 fbe4 	bl	800db18 <xTaskPriorityDisinherit>
 800d350:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	609a      	str	r2, [r3, #8]
 800d358:	e043      	b.n	800d3e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d119      	bne.n	800d394 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6858      	ldr	r0, [r3, #4]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d368:	461a      	mov	r2, r3
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	f000 fe8c 	bl	800e088 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d378:	441a      	add	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	685a      	ldr	r2, [r3, #4]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	429a      	cmp	r2, r3
 800d388:	d32b      	bcc.n	800d3e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	605a      	str	r2, [r3, #4]
 800d392:	e026      	b.n	800d3e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	68d8      	ldr	r0, [r3, #12]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39c:	461a      	mov	r2, r3
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	f000 fe72 	bl	800e088 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	68da      	ldr	r2, [r3, #12]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ac:	425b      	negs	r3, r3
 800d3ae:	441a      	add	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	68da      	ldr	r2, [r3, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d207      	bcs.n	800d3d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	689a      	ldr	r2, [r3, #8]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c8:	425b      	negs	r3, r3
 800d3ca:	441a      	add	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d105      	bne.n	800d3e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3ea:	697b      	ldr	r3, [r7, #20]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d3fc:	f000 fc8c 	bl	800dd18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d406:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d408:	e011      	b.n	800d42e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d012      	beq.n	800d438 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	3324      	adds	r3, #36	; 0x24
 800d416:	4618      	mov	r0, r3
 800d418:	f000 fa5c 	bl	800d8d4 <xTaskRemoveFromEventList>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d422:	f000 fb2f 	bl	800da84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d426:	7bfb      	ldrb	r3, [r7, #15]
 800d428:	3b01      	subs	r3, #1
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d432:	2b00      	cmp	r3, #0
 800d434:	dce9      	bgt.n	800d40a <prvUnlockQueue+0x16>
 800d436:	e000      	b.n	800d43a <prvUnlockQueue+0x46>
					break;
 800d438:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	22ff      	movs	r2, #255	; 0xff
 800d43e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d442:	f000 fc97 	bl	800dd74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d446:	f000 fc67 	bl	800dd18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d450:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d452:	e011      	b.n	800d478 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d012      	beq.n	800d482 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3310      	adds	r3, #16
 800d460:	4618      	mov	r0, r3
 800d462:	f000 fa37 	bl	800d8d4 <xTaskRemoveFromEventList>
 800d466:	4603      	mov	r3, r0
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d001      	beq.n	800d470 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d46c:	f000 fb0a 	bl	800da84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	3b01      	subs	r3, #1
 800d474:	b2db      	uxtb	r3, r3
 800d476:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d478:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dce9      	bgt.n	800d454 <prvUnlockQueue+0x60>
 800d480:	e000      	b.n	800d484 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d482:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	22ff      	movs	r2, #255	; 0xff
 800d488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d48c:	f000 fc72 	bl	800dd74 <vPortExitCritical>
}
 800d490:	bf00      	nop
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4a0:	f000 fc3a 	bl	800dd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d102      	bne.n	800d4b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	60fb      	str	r3, [r7, #12]
 800d4b4:	e001      	b.n	800d4ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d4ba:	f000 fc5b 	bl	800dd74 <vPortExitCritical>

	return xReturn;
 800d4be:	68fb      	ldr	r3, [r7, #12]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d4cc:	4b04      	ldr	r3, [pc, #16]	; (800d4e0 <vTaskSuspendAll+0x18>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	4a03      	ldr	r2, [pc, #12]	; (800d4e0 <vTaskSuspendAll+0x18>)
 800d4d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d4d6:	bf00      	nop
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	20000374 	.word	0x20000374

0800d4e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d4f2:	4b41      	ldr	r3, [pc, #260]	; (800d5f8 <xTaskResumeAll+0x114>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d109      	bne.n	800d50e <xTaskResumeAll+0x2a>
	__asm volatile
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	e7fe      	b.n	800d50c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d50e:	f000 fc03 	bl	800dd18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d512:	4b39      	ldr	r3, [pc, #228]	; (800d5f8 <xTaskResumeAll+0x114>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3b01      	subs	r3, #1
 800d518:	4a37      	ldr	r2, [pc, #220]	; (800d5f8 <xTaskResumeAll+0x114>)
 800d51a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d51c:	4b36      	ldr	r3, [pc, #216]	; (800d5f8 <xTaskResumeAll+0x114>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d161      	bne.n	800d5e8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d524:	4b35      	ldr	r3, [pc, #212]	; (800d5fc <xTaskResumeAll+0x118>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d05d      	beq.n	800d5e8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d52c:	e02e      	b.n	800d58c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52e:	4b34      	ldr	r3, [pc, #208]	; (800d600 <xTaskResumeAll+0x11c>)
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3318      	adds	r3, #24
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff fd37 	bl	800cfae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	3304      	adds	r3, #4
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff fd32 	bl	800cfae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	2201      	movs	r2, #1
 800d550:	409a      	lsls	r2, r3
 800d552:	4b2c      	ldr	r3, [pc, #176]	; (800d604 <xTaskResumeAll+0x120>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4313      	orrs	r3, r2
 800d558:	4a2a      	ldr	r2, [pc, #168]	; (800d604 <xTaskResumeAll+0x120>)
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4a27      	ldr	r2, [pc, #156]	; (800d608 <xTaskResumeAll+0x124>)
 800d56a:	441a      	add	r2, r3
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7ff fcbe 	bl	800cef4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57c:	4b23      	ldr	r3, [pc, #140]	; (800d60c <xTaskResumeAll+0x128>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	429a      	cmp	r2, r3
 800d584:	d302      	bcc.n	800d58c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800d586:	4b22      	ldr	r3, [pc, #136]	; (800d610 <xTaskResumeAll+0x12c>)
 800d588:	2201      	movs	r2, #1
 800d58a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d58c:	4b1c      	ldr	r3, [pc, #112]	; (800d600 <xTaskResumeAll+0x11c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d1cc      	bne.n	800d52e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d59a:	f000 fa7f 	bl	800da9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d59e:	4b1d      	ldr	r3, [pc, #116]	; (800d614 <xTaskResumeAll+0x130>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d010      	beq.n	800d5cc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d5aa:	f000 f837 	bl	800d61c <xTaskIncrementTick>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d002      	beq.n	800d5ba <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800d5b4:	4b16      	ldr	r3, [pc, #88]	; (800d610 <xTaskResumeAll+0x12c>)
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1f1      	bne.n	800d5aa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800d5c6:	4b13      	ldr	r3, [pc, #76]	; (800d614 <xTaskResumeAll+0x130>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d5cc:	4b10      	ldr	r3, [pc, #64]	; (800d610 <xTaskResumeAll+0x12c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d009      	beq.n	800d5e8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d5d8:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <xTaskResumeAll+0x134>)
 800d5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5e8:	f000 fbc4 	bl	800dd74 <vPortExitCritical>

	return xAlreadyYielded;
 800d5ec:	68bb      	ldr	r3, [r7, #8]
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	20000374 	.word	0x20000374
 800d5fc:	20000354 	.word	0x20000354
 800d600:	2000032c 	.word	0x2000032c
 800d604:	2000035c 	.word	0x2000035c
 800d608:	20000298 	.word	0x20000298
 800d60c:	20000294 	.word	0x20000294
 800d610:	20000368 	.word	0x20000368
 800d614:	20000364 	.word	0x20000364
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d622:	2300      	movs	r3, #0
 800d624:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d626:	4b4e      	ldr	r3, [pc, #312]	; (800d760 <xTaskIncrementTick+0x144>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f040 8087 	bne.w	800d73e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d630:	4b4c      	ldr	r3, [pc, #304]	; (800d764 <xTaskIncrementTick+0x148>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3301      	adds	r3, #1
 800d636:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d638:	4a4a      	ldr	r2, [pc, #296]	; (800d764 <xTaskIncrementTick+0x148>)
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d11f      	bne.n	800d684 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d644:	4b48      	ldr	r3, [pc, #288]	; (800d768 <xTaskIncrementTick+0x14c>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <xTaskIncrementTick+0x46>
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	603b      	str	r3, [r7, #0]
 800d660:	e7fe      	b.n	800d660 <xTaskIncrementTick+0x44>
 800d662:	4b41      	ldr	r3, [pc, #260]	; (800d768 <xTaskIncrementTick+0x14c>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	60fb      	str	r3, [r7, #12]
 800d668:	4b40      	ldr	r3, [pc, #256]	; (800d76c <xTaskIncrementTick+0x150>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a3e      	ldr	r2, [pc, #248]	; (800d768 <xTaskIncrementTick+0x14c>)
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	4a3e      	ldr	r2, [pc, #248]	; (800d76c <xTaskIncrementTick+0x150>)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6013      	str	r3, [r2, #0]
 800d676:	4b3e      	ldr	r3, [pc, #248]	; (800d770 <xTaskIncrementTick+0x154>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	3301      	adds	r3, #1
 800d67c:	4a3c      	ldr	r2, [pc, #240]	; (800d770 <xTaskIncrementTick+0x154>)
 800d67e:	6013      	str	r3, [r2, #0]
 800d680:	f000 fa0c 	bl	800da9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d684:	4b3b      	ldr	r3, [pc, #236]	; (800d774 <xTaskIncrementTick+0x158>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	693a      	ldr	r2, [r7, #16]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d348      	bcc.n	800d720 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d68e:	4b36      	ldr	r3, [pc, #216]	; (800d768 <xTaskIncrementTick+0x14c>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d104      	bne.n	800d6a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d698:	4b36      	ldr	r3, [pc, #216]	; (800d774 <xTaskIncrementTick+0x158>)
 800d69a:	f04f 32ff 	mov.w	r2, #4294967295
 800d69e:	601a      	str	r2, [r3, #0]
					break;
 800d6a0:	e03e      	b.n	800d720 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6a2:	4b31      	ldr	r3, [pc, #196]	; (800d768 <xTaskIncrementTick+0x14c>)
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d6b2:	693a      	ldr	r2, [r7, #16]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d203      	bcs.n	800d6c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d6ba:	4a2e      	ldr	r2, [pc, #184]	; (800d774 <xTaskIncrementTick+0x158>)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d6c0:	e02e      	b.n	800d720 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff fc71 	bl	800cfae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	3318      	adds	r3, #24
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7ff fc68 	bl	800cfae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	409a      	lsls	r2, r3
 800d6e6:	4b24      	ldr	r3, [pc, #144]	; (800d778 <xTaskIncrementTick+0x15c>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	4a22      	ldr	r2, [pc, #136]	; (800d778 <xTaskIncrementTick+0x15c>)
 800d6ee:	6013      	str	r3, [r2, #0]
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4413      	add	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4a1f      	ldr	r2, [pc, #124]	; (800d77c <xTaskIncrementTick+0x160>)
 800d6fe:	441a      	add	r2, r3
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	3304      	adds	r3, #4
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f7ff fbf4 	bl	800cef4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d710:	4b1b      	ldr	r3, [pc, #108]	; (800d780 <xTaskIncrementTick+0x164>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d716:	429a      	cmp	r2, r3
 800d718:	d3b9      	bcc.n	800d68e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d71a:	2301      	movs	r3, #1
 800d71c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d71e:	e7b6      	b.n	800d68e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d720:	4b17      	ldr	r3, [pc, #92]	; (800d780 <xTaskIncrementTick+0x164>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d726:	4915      	ldr	r1, [pc, #84]	; (800d77c <xTaskIncrementTick+0x160>)
 800d728:	4613      	mov	r3, r2
 800d72a:	009b      	lsls	r3, r3, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	440b      	add	r3, r1
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d907      	bls.n	800d748 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	617b      	str	r3, [r7, #20]
 800d73c:	e004      	b.n	800d748 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d73e:	4b11      	ldr	r3, [pc, #68]	; (800d784 <xTaskIncrementTick+0x168>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3301      	adds	r3, #1
 800d744:	4a0f      	ldr	r2, [pc, #60]	; (800d784 <xTaskIncrementTick+0x168>)
 800d746:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d748:	4b0f      	ldr	r3, [pc, #60]	; (800d788 <xTaskIncrementTick+0x16c>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800d750:	2301      	movs	r3, #1
 800d752:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d754:	697b      	ldr	r3, [r7, #20]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	20000374 	.word	0x20000374
 800d764:	20000358 	.word	0x20000358
 800d768:	20000324 	.word	0x20000324
 800d76c:	20000328 	.word	0x20000328
 800d770:	2000036c 	.word	0x2000036c
 800d774:	20000370 	.word	0x20000370
 800d778:	2000035c 	.word	0x2000035c
 800d77c:	20000298 	.word	0x20000298
 800d780:	20000294 	.word	0x20000294
 800d784:	20000364 	.word	0x20000364
 800d788:	20000368 	.word	0x20000368

0800d78c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d792:	4b39      	ldr	r3, [pc, #228]	; (800d878 <vTaskSwitchContext+0xec>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d79a:	4b38      	ldr	r3, [pc, #224]	; (800d87c <vTaskSwitchContext+0xf0>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d7a0:	e065      	b.n	800d86e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800d7a2:	4b36      	ldr	r3, [pc, #216]	; (800d87c <vTaskSwitchContext+0xf0>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d7a8:	4b35      	ldr	r3, [pc, #212]	; (800d880 <vTaskSwitchContext+0xf4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ae:	61fb      	str	r3, [r7, #28]
 800d7b0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d7b4:	61bb      	str	r3, [r7, #24]
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	69ba      	ldr	r2, [r7, #24]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d111      	bne.n	800d7e4 <vTaskSwitchContext+0x58>
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	69ba      	ldr	r2, [r7, #24]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d10b      	bne.n	800d7e4 <vTaskSwitchContext+0x58>
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	3308      	adds	r3, #8
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	69ba      	ldr	r2, [r7, #24]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d105      	bne.n	800d7e4 <vTaskSwitchContext+0x58>
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	330c      	adds	r3, #12
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	69ba      	ldr	r2, [r7, #24]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d008      	beq.n	800d7f6 <vTaskSwitchContext+0x6a>
 800d7e4:	4b26      	ldr	r3, [pc, #152]	; (800d880 <vTaskSwitchContext+0xf4>)
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	4b25      	ldr	r3, [pc, #148]	; (800d880 <vTaskSwitchContext+0xf4>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3334      	adds	r3, #52	; 0x34
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	f7f6 fb59 	bl	8003ea8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f6:	4b23      	ldr	r3, [pc, #140]	; (800d884 <vTaskSwitchContext+0xf8>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	fab3 f383 	clz	r3, r3
 800d802:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d804:	7afb      	ldrb	r3, [r7, #11]
 800d806:	f1c3 031f 	rsb	r3, r3, #31
 800d80a:	617b      	str	r3, [r7, #20]
 800d80c:	491e      	ldr	r1, [pc, #120]	; (800d888 <vTaskSwitchContext+0xfc>)
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	4613      	mov	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	4413      	add	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	440b      	add	r3, r1
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d109      	bne.n	800d834 <vTaskSwitchContext+0xa8>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	607b      	str	r3, [r7, #4]
 800d832:	e7fe      	b.n	800d832 <vTaskSwitchContext+0xa6>
 800d834:	697a      	ldr	r2, [r7, #20]
 800d836:	4613      	mov	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	4413      	add	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4a12      	ldr	r2, [pc, #72]	; (800d888 <vTaskSwitchContext+0xfc>)
 800d840:	4413      	add	r3, r2
 800d842:	613b      	str	r3, [r7, #16]
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	605a      	str	r2, [r3, #4]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	3308      	adds	r3, #8
 800d856:	429a      	cmp	r2, r3
 800d858:	d104      	bne.n	800d864 <vTaskSwitchContext+0xd8>
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	605a      	str	r2, [r3, #4]
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	4a05      	ldr	r2, [pc, #20]	; (800d880 <vTaskSwitchContext+0xf4>)
 800d86c:	6013      	str	r3, [r2, #0]
}
 800d86e:	bf00      	nop
 800d870:	3720      	adds	r7, #32
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	20000374 	.word	0x20000374
 800d87c:	20000368 	.word	0x20000368
 800d880:	20000294 	.word	0x20000294
 800d884:	2000035c 	.word	0x2000035c
 800d888:	20000298 	.word	0x20000298

0800d88c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d109      	bne.n	800d8b0 <vTaskPlaceOnEventList+0x24>
 800d89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	60fb      	str	r3, [r7, #12]
 800d8ae:	e7fe      	b.n	800d8ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <vTaskPlaceOnEventList+0x44>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3318      	adds	r3, #24
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff fb3f 	bl	800cf3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8be:	2101      	movs	r1, #1
 800d8c0:	6838      	ldr	r0, [r7, #0]
 800d8c2:	f000 f9ad 	bl	800dc20 <prvAddCurrentTaskToDelayedList>
}
 800d8c6:	bf00      	nop
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	20000294 	.word	0x20000294

0800d8d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d109      	bne.n	800d8fe <xTaskRemoveFromEventList+0x2a>
 800d8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ee:	f383 8811 	msr	BASEPRI, r3
 800d8f2:	f3bf 8f6f 	isb	sy
 800d8f6:	f3bf 8f4f 	dsb	sy
 800d8fa:	60fb      	str	r3, [r7, #12]
 800d8fc:	e7fe      	b.n	800d8fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	3318      	adds	r3, #24
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff fb53 	bl	800cfae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d908:	4b1d      	ldr	r3, [pc, #116]	; (800d980 <xTaskRemoveFromEventList+0xac>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d11c      	bne.n	800d94a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	3304      	adds	r3, #4
 800d914:	4618      	mov	r0, r3
 800d916:	f7ff fb4a 	bl	800cfae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91e:	2201      	movs	r2, #1
 800d920:	409a      	lsls	r2, r3
 800d922:	4b18      	ldr	r3, [pc, #96]	; (800d984 <xTaskRemoveFromEventList+0xb0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4313      	orrs	r3, r2
 800d928:	4a16      	ldr	r2, [pc, #88]	; (800d984 <xTaskRemoveFromEventList+0xb0>)
 800d92a:	6013      	str	r3, [r2, #0]
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d930:	4613      	mov	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	4413      	add	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	4a13      	ldr	r2, [pc, #76]	; (800d988 <xTaskRemoveFromEventList+0xb4>)
 800d93a:	441a      	add	r2, r3
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	3304      	adds	r3, #4
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f7ff fad6 	bl	800cef4 <vListInsertEnd>
 800d948:	e005      	b.n	800d956 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	3318      	adds	r3, #24
 800d94e:	4619      	mov	r1, r3
 800d950:	480e      	ldr	r0, [pc, #56]	; (800d98c <xTaskRemoveFromEventList+0xb8>)
 800d952:	f7ff facf 	bl	800cef4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d95a:	4b0d      	ldr	r3, [pc, #52]	; (800d990 <xTaskRemoveFromEventList+0xbc>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d960:	429a      	cmp	r2, r3
 800d962:	d905      	bls.n	800d970 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d964:	2301      	movs	r3, #1
 800d966:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d968:	4b0a      	ldr	r3, [pc, #40]	; (800d994 <xTaskRemoveFromEventList+0xc0>)
 800d96a:	2201      	movs	r2, #1
 800d96c:	601a      	str	r2, [r3, #0]
 800d96e:	e001      	b.n	800d974 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d970:	2300      	movs	r3, #0
 800d972:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d974:	697b      	ldr	r3, [r7, #20]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	20000374 	.word	0x20000374
 800d984:	2000035c 	.word	0x2000035c
 800d988:	20000298 	.word	0x20000298
 800d98c:	2000032c 	.word	0x2000032c
 800d990:	20000294 	.word	0x20000294
 800d994:	20000368 	.word	0x20000368

0800d998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9a0:	4b06      	ldr	r3, [pc, #24]	; (800d9bc <vTaskInternalSetTimeOutState+0x24>)
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9a8:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <vTaskInternalSetTimeOutState+0x28>)
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	605a      	str	r2, [r3, #4]
}
 800d9b0:	bf00      	nop
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	2000036c 	.word	0x2000036c
 800d9c0:	20000358 	.word	0x20000358

0800d9c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d109      	bne.n	800d9e8 <xTaskCheckForTimeOut+0x24>
 800d9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d8:	f383 8811 	msr	BASEPRI, r3
 800d9dc:	f3bf 8f6f 	isb	sy
 800d9e0:	f3bf 8f4f 	dsb	sy
 800d9e4:	613b      	str	r3, [r7, #16]
 800d9e6:	e7fe      	b.n	800d9e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <xTaskCheckForTimeOut+0x3e>
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	e7fe      	b.n	800da00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800da02:	f000 f989 	bl	800dd18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800da06:	4b1d      	ldr	r3, [pc, #116]	; (800da7c <xTaskCheckForTimeOut+0xb8>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	69ba      	ldr	r2, [r7, #24]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1e:	d102      	bne.n	800da26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800da20:	2300      	movs	r3, #0
 800da22:	61fb      	str	r3, [r7, #28]
 800da24:	e023      	b.n	800da6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	4b15      	ldr	r3, [pc, #84]	; (800da80 <xTaskCheckForTimeOut+0xbc>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d007      	beq.n	800da42 <xTaskCheckForTimeOut+0x7e>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	69ba      	ldr	r2, [r7, #24]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d302      	bcc.n	800da42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800da3c:	2301      	movs	r3, #1
 800da3e:	61fb      	str	r3, [r7, #28]
 800da40:	e015      	b.n	800da6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d20b      	bcs.n	800da64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	1ad2      	subs	r2, r2, r3
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff ff9d 	bl	800d998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800da5e:	2300      	movs	r3, #0
 800da60:	61fb      	str	r3, [r7, #28]
 800da62:	e004      	b.n	800da6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800da6a:	2301      	movs	r3, #1
 800da6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800da6e:	f000 f981 	bl	800dd74 <vPortExitCritical>

	return xReturn;
 800da72:	69fb      	ldr	r3, [r7, #28]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3720      	adds	r7, #32
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	20000358 	.word	0x20000358
 800da80:	2000036c 	.word	0x2000036c

0800da84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800da84:	b480      	push	{r7}
 800da86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800da88:	4b03      	ldr	r3, [pc, #12]	; (800da98 <vTaskMissedYield+0x14>)
 800da8a:	2201      	movs	r2, #1
 800da8c:	601a      	str	r2, [r3, #0]
}
 800da8e:	bf00      	nop
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	20000368 	.word	0x20000368

0800da9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daa2:	4b0c      	ldr	r3, [pc, #48]	; (800dad4 <prvResetNextTaskUnblockTime+0x38>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d104      	bne.n	800dab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daac:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <prvResetNextTaskUnblockTime+0x3c>)
 800daae:	f04f 32ff 	mov.w	r2, #4294967295
 800dab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dab4:	e008      	b.n	800dac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab6:	4b07      	ldr	r3, [pc, #28]	; (800dad4 <prvResetNextTaskUnblockTime+0x38>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	4a04      	ldr	r2, [pc, #16]	; (800dad8 <prvResetNextTaskUnblockTime+0x3c>)
 800dac6:	6013      	str	r3, [r2, #0]
}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	20000324 	.word	0x20000324
 800dad8:	20000370 	.word	0x20000370

0800dadc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dae2:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <xTaskGetSchedulerState+0x34>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daea:	2301      	movs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	e008      	b.n	800db02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf0:	4b08      	ldr	r3, [pc, #32]	; (800db14 <xTaskGetSchedulerState+0x38>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d102      	bne.n	800dafe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800daf8:	2302      	movs	r3, #2
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	e001      	b.n	800db02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dafe:	2300      	movs	r3, #0
 800db00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db02:	687b      	ldr	r3, [r7, #4]
	}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	20000360 	.word	0x20000360
 800db14:	20000374 	.word	0x20000374

0800db18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db24:	2300      	movs	r3, #0
 800db26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d06c      	beq.n	800dc08 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db2e:	4b39      	ldr	r3, [pc, #228]	; (800dc14 <xTaskPriorityDisinherit+0xfc>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	429a      	cmp	r2, r3
 800db36:	d009      	beq.n	800db4c <xTaskPriorityDisinherit+0x34>
 800db38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	60fb      	str	r3, [r7, #12]
 800db4a:	e7fe      	b.n	800db4a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db50:	2b00      	cmp	r3, #0
 800db52:	d109      	bne.n	800db68 <xTaskPriorityDisinherit+0x50>
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	60bb      	str	r3, [r7, #8]
 800db66:	e7fe      	b.n	800db66 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db6c:	1e5a      	subs	r2, r3, #1
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d044      	beq.n	800dc08 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db82:	2b00      	cmp	r3, #0
 800db84:	d140      	bne.n	800dc08 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	3304      	adds	r3, #4
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff fa0f 	bl	800cfae <uxListRemove>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d115      	bne.n	800dbc2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9a:	491f      	ldr	r1, [pc, #124]	; (800dc18 <xTaskPriorityDisinherit+0x100>)
 800db9c:	4613      	mov	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	4413      	add	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	440b      	add	r3, r1
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10a      	bne.n	800dbc2 <xTaskPriorityDisinherit+0xaa>
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	fa02 f303 	lsl.w	r3, r2, r3
 800dbb6:	43da      	mvns	r2, r3
 800dbb8:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <xTaskPriorityDisinherit+0x104>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4013      	ands	r3, r2
 800dbbe:	4a17      	ldr	r2, [pc, #92]	; (800dc1c <xTaskPriorityDisinherit+0x104>)
 800dbc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbce:	f1c3 0207 	rsb	r2, r3, #7
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbda:	2201      	movs	r2, #1
 800dbdc:	409a      	lsls	r2, r3
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <xTaskPriorityDisinherit+0x104>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	4a0d      	ldr	r2, [pc, #52]	; (800dc1c <xTaskPriorityDisinherit+0x104>)
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4a08      	ldr	r2, [pc, #32]	; (800dc18 <xTaskPriorityDisinherit+0x100>)
 800dbf6:	441a      	add	r2, r3
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4610      	mov	r0, r2
 800dc00:	f7ff f978 	bl	800cef4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc04:	2301      	movs	r3, #1
 800dc06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc08:	697b      	ldr	r3, [r7, #20]
	}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	20000294 	.word	0x20000294
 800dc18:	20000298 	.word	0x20000298
 800dc1c:	2000035c 	.word	0x2000035c

0800dc20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc2a:	4b29      	ldr	r3, [pc, #164]	; (800dcd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc30:	4b28      	ldr	r3, [pc, #160]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	3304      	adds	r3, #4
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff f9b9 	bl	800cfae <uxListRemove>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10b      	bne.n	800dc5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dc42:	4b24      	ldr	r3, [pc, #144]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc48:	2201      	movs	r2, #1
 800dc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc4e:	43da      	mvns	r2, r3
 800dc50:	4b21      	ldr	r3, [pc, #132]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4013      	ands	r3, r2
 800dc56:	4a20      	ldr	r2, [pc, #128]	; (800dcd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc60:	d10a      	bne.n	800dc78 <prvAddCurrentTaskToDelayedList+0x58>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d007      	beq.n	800dc78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc68:	4b1a      	ldr	r3, [pc, #104]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	4619      	mov	r1, r3
 800dc70:	481a      	ldr	r0, [pc, #104]	; (800dcdc <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc72:	f7ff f93f 	bl	800cef4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dc76:	e026      	b.n	800dcc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc80:	4b14      	ldr	r3, [pc, #80]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d209      	bcs.n	800dca4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc90:	4b13      	ldr	r3, [pc, #76]	; (800dce0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	4b0f      	ldr	r3, [pc, #60]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3304      	adds	r3, #4
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	4610      	mov	r0, r2
 800dc9e:	f7ff f94d 	bl	800cf3c <vListInsert>
}
 800dca2:	e010      	b.n	800dcc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	4b0a      	ldr	r3, [pc, #40]	; (800dcd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	3304      	adds	r3, #4
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7ff f943 	bl	800cf3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dcb6:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d202      	bcs.n	800dcc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dcc0:	4a09      	ldr	r2, [pc, #36]	; (800dce8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	6013      	str	r3, [r2, #0]
}
 800dcc6:	bf00      	nop
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	20000358 	.word	0x20000358
 800dcd4:	20000294 	.word	0x20000294
 800dcd8:	2000035c 	.word	0x2000035c
 800dcdc:	20000340 	.word	0x20000340
 800dce0:	20000328 	.word	0x20000328
 800dce4:	20000324 	.word	0x20000324
 800dce8:	20000370 	.word	0x20000370
 800dcec:	00000000 	.word	0x00000000

0800dcf0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dcf0:	4b07      	ldr	r3, [pc, #28]	; (800dd10 <pxCurrentTCBConst2>)
 800dcf2:	6819      	ldr	r1, [r3, #0]
 800dcf4:	6808      	ldr	r0, [r1, #0]
 800dcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfa:	f380 8809 	msr	PSP, r0
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f04f 0000 	mov.w	r0, #0
 800dd06:	f380 8811 	msr	BASEPRI, r0
 800dd0a:	4770      	bx	lr
 800dd0c:	f3af 8000 	nop.w

0800dd10 <pxCurrentTCBConst2>:
 800dd10:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop

0800dd18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b083      	sub	sp, #12
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd30:	4b0e      	ldr	r3, [pc, #56]	; (800dd6c <vPortEnterCritical+0x54>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	3301      	adds	r3, #1
 800dd36:	4a0d      	ldr	r2, [pc, #52]	; (800dd6c <vPortEnterCritical+0x54>)
 800dd38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd3a:	4b0c      	ldr	r3, [pc, #48]	; (800dd6c <vPortEnterCritical+0x54>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d10e      	bne.n	800dd60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd42:	4b0b      	ldr	r3, [pc, #44]	; (800dd70 <vPortEnterCritical+0x58>)
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d009      	beq.n	800dd60 <vPortEnterCritical+0x48>
 800dd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd50:	f383 8811 	msr	BASEPRI, r3
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	f3bf 8f4f 	dsb	sy
 800dd5c:	603b      	str	r3, [r7, #0]
 800dd5e:	e7fe      	b.n	800dd5e <vPortEnterCritical+0x46>
	}
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	2000005c 	.word	0x2000005c
 800dd70:	e000ed04 	.word	0xe000ed04

0800dd74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd7a:	4b11      	ldr	r3, [pc, #68]	; (800ddc0 <vPortExitCritical+0x4c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d109      	bne.n	800dd96 <vPortExitCritical+0x22>
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	607b      	str	r3, [r7, #4]
 800dd94:	e7fe      	b.n	800dd94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800dd96:	4b0a      	ldr	r3, [pc, #40]	; (800ddc0 <vPortExitCritical+0x4c>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	4a08      	ldr	r2, [pc, #32]	; (800ddc0 <vPortExitCritical+0x4c>)
 800dd9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dda0:	4b07      	ldr	r3, [pc, #28]	; (800ddc0 <vPortExitCritical+0x4c>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d104      	bne.n	800ddb2 <vPortExitCritical+0x3e>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ddb2:	bf00      	nop
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	2000005c 	.word	0x2000005c
	...

0800ddd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ddd0:	f3ef 8009 	mrs	r0, PSP
 800ddd4:	f3bf 8f6f 	isb	sy
 800ddd8:	4b15      	ldr	r3, [pc, #84]	; (800de30 <pxCurrentTCBConst>)
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	f01e 0f10 	tst.w	lr, #16
 800dde0:	bf08      	it	eq
 800dde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	6010      	str	r0, [r2, #0]
 800ddec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ddf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ddf4:	f380 8811 	msr	BASEPRI, r0
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	f3bf 8f6f 	isb	sy
 800de00:	f7ff fcc4 	bl	800d78c <vTaskSwitchContext>
 800de04:	f04f 0000 	mov.w	r0, #0
 800de08:	f380 8811 	msr	BASEPRI, r0
 800de0c:	bc09      	pop	{r0, r3}
 800de0e:	6819      	ldr	r1, [r3, #0]
 800de10:	6808      	ldr	r0, [r1, #0]
 800de12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de16:	f01e 0f10 	tst.w	lr, #16
 800de1a:	bf08      	it	eq
 800de1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de20:	f380 8809 	msr	PSP, r0
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	f3af 8000 	nop.w

0800de30 <pxCurrentTCBConst>:
 800de30:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop

0800de38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de50:	f7ff fbe4 	bl	800d61c <xTaskIncrementTick>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d003      	beq.n	800de62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de5a:	4b06      	ldr	r3, [pc, #24]	; (800de74 <SysTick_Handler+0x3c>)
 800de5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	2300      	movs	r3, #0
 800de64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	e000ed04 	.word	0xe000ed04

0800de78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de7e:	f3ef 8305 	mrs	r3, IPSR
 800de82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d913      	bls.n	800deb2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de8a:	4a16      	ldr	r2, [pc, #88]	; (800dee4 <vPortValidateInterruptPriority+0x6c>)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4413      	add	r3, r2
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de94:	4b14      	ldr	r3, [pc, #80]	; (800dee8 <vPortValidateInterruptPriority+0x70>)
 800de96:	781b      	ldrb	r3, [r3, #0]
 800de98:	7afa      	ldrb	r2, [r7, #11]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d209      	bcs.n	800deb2 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	607b      	str	r3, [r7, #4]
 800deb0:	e7fe      	b.n	800deb0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800deb2:	4b0e      	ldr	r3, [pc, #56]	; (800deec <vPortValidateInterruptPriority+0x74>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800deba:	4b0d      	ldr	r3, [pc, #52]	; (800def0 <vPortValidateInterruptPriority+0x78>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d909      	bls.n	800ded6 <vPortValidateInterruptPriority+0x5e>
 800dec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	603b      	str	r3, [r7, #0]
 800ded4:	e7fe      	b.n	800ded4 <vPortValidateInterruptPriority+0x5c>
	}
 800ded6:	bf00      	nop
 800ded8:	3714      	adds	r7, #20
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	e000e3f0 	.word	0xe000e3f0
 800dee8:	20000378 	.word	0x20000378
 800deec:	e000ed0c 	.word	0xe000ed0c
 800def0:	2000037c 	.word	0x2000037c

0800def4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe fec8 	bl	800cc98 <USBH_LL_IncTimer>
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fe ff0c 	bl	800cd3c <USBH_LL_Connect>
}
 800df24:	bf00      	nop
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe ff21 	bl	800cd82 <USBH_LL_Disconnect>
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
 800df54:	4613      	mov	r3, r2
 800df56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe ff41 	bl	800cde6 <USBH_LL_NotifyURBChange>
#endif
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7fe feb6 	bl	800ccec <USBH_LL_PortEnabled>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df96:	4618      	mov	r0, r3
 800df98:	f7fe fec2 	bl	800cd20 <USBH_LL_PortDisabled>
}
 800df9c:	bf00      	nop
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7f9 fcd1 	bl	8007962 <HAL_HCD_Stop>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dfc4:	7bfb      	ldrb	r3, [r7, #15]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 f808 	bl	800dfdc <USBH_Get_USB_Status>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
	...

0800dfdc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	2b03      	cmp	r3, #3
 800dfee:	d817      	bhi.n	800e020 <USBH_Get_USB_Status+0x44>
 800dff0:	a201      	add	r2, pc, #4	; (adr r2, 800dff8 <USBH_Get_USB_Status+0x1c>)
 800dff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff6:	bf00      	nop
 800dff8:	0800e009 	.word	0x0800e009
 800dffc:	0800e00f 	.word	0x0800e00f
 800e000:	0800e015 	.word	0x0800e015
 800e004:	0800e01b 	.word	0x0800e01b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	73fb      	strb	r3, [r7, #15]
    break;
 800e00c:	e00b      	b.n	800e026 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e00e:	2302      	movs	r3, #2
 800e010:	73fb      	strb	r3, [r7, #15]
    break;
 800e012:	e008      	b.n	800e026 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e014:	2301      	movs	r3, #1
 800e016:	73fb      	strb	r3, [r7, #15]
    break;
 800e018:	e005      	b.n	800e026 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e01a:	2302      	movs	r3, #2
 800e01c:	73fb      	strb	r3, [r7, #15]
    break;
 800e01e:	e002      	b.n	800e026 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e020:	2302      	movs	r3, #2
 800e022:	73fb      	strb	r3, [r7, #15]
    break;
 800e024:	bf00      	nop
  }
  return usb_status;
 800e026:	7bfb      	ldrb	r3, [r7, #15]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3714      	adds	r7, #20
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr

0800e034 <__errno>:
 800e034:	4b01      	ldr	r3, [pc, #4]	; (800e03c <__errno+0x8>)
 800e036:	6818      	ldr	r0, [r3, #0]
 800e038:	4770      	bx	lr
 800e03a:	bf00      	nop
 800e03c:	20000060 	.word	0x20000060

0800e040 <__libc_init_array>:
 800e040:	b570      	push	{r4, r5, r6, lr}
 800e042:	4e0d      	ldr	r6, [pc, #52]	; (800e078 <__libc_init_array+0x38>)
 800e044:	4c0d      	ldr	r4, [pc, #52]	; (800e07c <__libc_init_array+0x3c>)
 800e046:	1ba4      	subs	r4, r4, r6
 800e048:	10a4      	asrs	r4, r4, #2
 800e04a:	2500      	movs	r5, #0
 800e04c:	42a5      	cmp	r5, r4
 800e04e:	d109      	bne.n	800e064 <__libc_init_array+0x24>
 800e050:	4e0b      	ldr	r6, [pc, #44]	; (800e080 <__libc_init_array+0x40>)
 800e052:	4c0c      	ldr	r4, [pc, #48]	; (800e084 <__libc_init_array+0x44>)
 800e054:	f001 fcea 	bl	800fa2c <_init>
 800e058:	1ba4      	subs	r4, r4, r6
 800e05a:	10a4      	asrs	r4, r4, #2
 800e05c:	2500      	movs	r5, #0
 800e05e:	42a5      	cmp	r5, r4
 800e060:	d105      	bne.n	800e06e <__libc_init_array+0x2e>
 800e062:	bd70      	pop	{r4, r5, r6, pc}
 800e064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e068:	4798      	blx	r3
 800e06a:	3501      	adds	r5, #1
 800e06c:	e7ee      	b.n	800e04c <__libc_init_array+0xc>
 800e06e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e072:	4798      	blx	r3
 800e074:	3501      	adds	r5, #1
 800e076:	e7f2      	b.n	800e05e <__libc_init_array+0x1e>
 800e078:	08011990 	.word	0x08011990
 800e07c:	08011990 	.word	0x08011990
 800e080:	08011990 	.word	0x08011990
 800e084:	08011994 	.word	0x08011994

0800e088 <memcpy>:
 800e088:	b510      	push	{r4, lr}
 800e08a:	1e43      	subs	r3, r0, #1
 800e08c:	440a      	add	r2, r1
 800e08e:	4291      	cmp	r1, r2
 800e090:	d100      	bne.n	800e094 <memcpy+0xc>
 800e092:	bd10      	pop	{r4, pc}
 800e094:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e09c:	e7f7      	b.n	800e08e <memcpy+0x6>

0800e09e <memset>:
 800e09e:	4402      	add	r2, r0
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d100      	bne.n	800e0a8 <memset+0xa>
 800e0a6:	4770      	bx	lr
 800e0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0ac:	e7f9      	b.n	800e0a2 <memset+0x4>
	...

0800e0b0 <_free_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	2900      	cmp	r1, #0
 800e0b6:	d045      	beq.n	800e144 <_free_r+0x94>
 800e0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0bc:	1f0c      	subs	r4, r1, #4
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	bfb8      	it	lt
 800e0c2:	18e4      	addlt	r4, r4, r3
 800e0c4:	f000 fbae 	bl	800e824 <__malloc_lock>
 800e0c8:	4a1f      	ldr	r2, [pc, #124]	; (800e148 <_free_r+0x98>)
 800e0ca:	6813      	ldr	r3, [r2, #0]
 800e0cc:	4610      	mov	r0, r2
 800e0ce:	b933      	cbnz	r3, 800e0de <_free_r+0x2e>
 800e0d0:	6063      	str	r3, [r4, #4]
 800e0d2:	6014      	str	r4, [r2, #0]
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0da:	f000 bba4 	b.w	800e826 <__malloc_unlock>
 800e0de:	42a3      	cmp	r3, r4
 800e0e0:	d90c      	bls.n	800e0fc <_free_r+0x4c>
 800e0e2:	6821      	ldr	r1, [r4, #0]
 800e0e4:	1862      	adds	r2, r4, r1
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	bf04      	itt	eq
 800e0ea:	681a      	ldreq	r2, [r3, #0]
 800e0ec:	685b      	ldreq	r3, [r3, #4]
 800e0ee:	6063      	str	r3, [r4, #4]
 800e0f0:	bf04      	itt	eq
 800e0f2:	1852      	addeq	r2, r2, r1
 800e0f4:	6022      	streq	r2, [r4, #0]
 800e0f6:	6004      	str	r4, [r0, #0]
 800e0f8:	e7ec      	b.n	800e0d4 <_free_r+0x24>
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	685a      	ldr	r2, [r3, #4]
 800e0fe:	b10a      	cbz	r2, 800e104 <_free_r+0x54>
 800e100:	42a2      	cmp	r2, r4
 800e102:	d9fa      	bls.n	800e0fa <_free_r+0x4a>
 800e104:	6819      	ldr	r1, [r3, #0]
 800e106:	1858      	adds	r0, r3, r1
 800e108:	42a0      	cmp	r0, r4
 800e10a:	d10b      	bne.n	800e124 <_free_r+0x74>
 800e10c:	6820      	ldr	r0, [r4, #0]
 800e10e:	4401      	add	r1, r0
 800e110:	1858      	adds	r0, r3, r1
 800e112:	4282      	cmp	r2, r0
 800e114:	6019      	str	r1, [r3, #0]
 800e116:	d1dd      	bne.n	800e0d4 <_free_r+0x24>
 800e118:	6810      	ldr	r0, [r2, #0]
 800e11a:	6852      	ldr	r2, [r2, #4]
 800e11c:	605a      	str	r2, [r3, #4]
 800e11e:	4401      	add	r1, r0
 800e120:	6019      	str	r1, [r3, #0]
 800e122:	e7d7      	b.n	800e0d4 <_free_r+0x24>
 800e124:	d902      	bls.n	800e12c <_free_r+0x7c>
 800e126:	230c      	movs	r3, #12
 800e128:	602b      	str	r3, [r5, #0]
 800e12a:	e7d3      	b.n	800e0d4 <_free_r+0x24>
 800e12c:	6820      	ldr	r0, [r4, #0]
 800e12e:	1821      	adds	r1, r4, r0
 800e130:	428a      	cmp	r2, r1
 800e132:	bf04      	itt	eq
 800e134:	6811      	ldreq	r1, [r2, #0]
 800e136:	6852      	ldreq	r2, [r2, #4]
 800e138:	6062      	str	r2, [r4, #4]
 800e13a:	bf04      	itt	eq
 800e13c:	1809      	addeq	r1, r1, r0
 800e13e:	6021      	streq	r1, [r4, #0]
 800e140:	605c      	str	r4, [r3, #4]
 800e142:	e7c7      	b.n	800e0d4 <_free_r+0x24>
 800e144:	bd38      	pop	{r3, r4, r5, pc}
 800e146:	bf00      	nop
 800e148:	20000380 	.word	0x20000380

0800e14c <_malloc_r>:
 800e14c:	b570      	push	{r4, r5, r6, lr}
 800e14e:	1ccd      	adds	r5, r1, #3
 800e150:	f025 0503 	bic.w	r5, r5, #3
 800e154:	3508      	adds	r5, #8
 800e156:	2d0c      	cmp	r5, #12
 800e158:	bf38      	it	cc
 800e15a:	250c      	movcc	r5, #12
 800e15c:	2d00      	cmp	r5, #0
 800e15e:	4606      	mov	r6, r0
 800e160:	db01      	blt.n	800e166 <_malloc_r+0x1a>
 800e162:	42a9      	cmp	r1, r5
 800e164:	d903      	bls.n	800e16e <_malloc_r+0x22>
 800e166:	230c      	movs	r3, #12
 800e168:	6033      	str	r3, [r6, #0]
 800e16a:	2000      	movs	r0, #0
 800e16c:	bd70      	pop	{r4, r5, r6, pc}
 800e16e:	f000 fb59 	bl	800e824 <__malloc_lock>
 800e172:	4a21      	ldr	r2, [pc, #132]	; (800e1f8 <_malloc_r+0xac>)
 800e174:	6814      	ldr	r4, [r2, #0]
 800e176:	4621      	mov	r1, r4
 800e178:	b991      	cbnz	r1, 800e1a0 <_malloc_r+0x54>
 800e17a:	4c20      	ldr	r4, [pc, #128]	; (800e1fc <_malloc_r+0xb0>)
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	b91b      	cbnz	r3, 800e188 <_malloc_r+0x3c>
 800e180:	4630      	mov	r0, r6
 800e182:	f000 f8a1 	bl	800e2c8 <_sbrk_r>
 800e186:	6020      	str	r0, [r4, #0]
 800e188:	4629      	mov	r1, r5
 800e18a:	4630      	mov	r0, r6
 800e18c:	f000 f89c 	bl	800e2c8 <_sbrk_r>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d124      	bne.n	800e1de <_malloc_r+0x92>
 800e194:	230c      	movs	r3, #12
 800e196:	6033      	str	r3, [r6, #0]
 800e198:	4630      	mov	r0, r6
 800e19a:	f000 fb44 	bl	800e826 <__malloc_unlock>
 800e19e:	e7e4      	b.n	800e16a <_malloc_r+0x1e>
 800e1a0:	680b      	ldr	r3, [r1, #0]
 800e1a2:	1b5b      	subs	r3, r3, r5
 800e1a4:	d418      	bmi.n	800e1d8 <_malloc_r+0x8c>
 800e1a6:	2b0b      	cmp	r3, #11
 800e1a8:	d90f      	bls.n	800e1ca <_malloc_r+0x7e>
 800e1aa:	600b      	str	r3, [r1, #0]
 800e1ac:	50cd      	str	r5, [r1, r3]
 800e1ae:	18cc      	adds	r4, r1, r3
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f000 fb38 	bl	800e826 <__malloc_unlock>
 800e1b6:	f104 000b 	add.w	r0, r4, #11
 800e1ba:	1d23      	adds	r3, r4, #4
 800e1bc:	f020 0007 	bic.w	r0, r0, #7
 800e1c0:	1ac3      	subs	r3, r0, r3
 800e1c2:	d0d3      	beq.n	800e16c <_malloc_r+0x20>
 800e1c4:	425a      	negs	r2, r3
 800e1c6:	50e2      	str	r2, [r4, r3]
 800e1c8:	e7d0      	b.n	800e16c <_malloc_r+0x20>
 800e1ca:	428c      	cmp	r4, r1
 800e1cc:	684b      	ldr	r3, [r1, #4]
 800e1ce:	bf16      	itet	ne
 800e1d0:	6063      	strne	r3, [r4, #4]
 800e1d2:	6013      	streq	r3, [r2, #0]
 800e1d4:	460c      	movne	r4, r1
 800e1d6:	e7eb      	b.n	800e1b0 <_malloc_r+0x64>
 800e1d8:	460c      	mov	r4, r1
 800e1da:	6849      	ldr	r1, [r1, #4]
 800e1dc:	e7cc      	b.n	800e178 <_malloc_r+0x2c>
 800e1de:	1cc4      	adds	r4, r0, #3
 800e1e0:	f024 0403 	bic.w	r4, r4, #3
 800e1e4:	42a0      	cmp	r0, r4
 800e1e6:	d005      	beq.n	800e1f4 <_malloc_r+0xa8>
 800e1e8:	1a21      	subs	r1, r4, r0
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f000 f86c 	bl	800e2c8 <_sbrk_r>
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d0cf      	beq.n	800e194 <_malloc_r+0x48>
 800e1f4:	6025      	str	r5, [r4, #0]
 800e1f6:	e7db      	b.n	800e1b0 <_malloc_r+0x64>
 800e1f8:	20000380 	.word	0x20000380
 800e1fc:	20000384 	.word	0x20000384

0800e200 <_puts_r>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	460e      	mov	r6, r1
 800e204:	4605      	mov	r5, r0
 800e206:	b118      	cbz	r0, 800e210 <_puts_r+0x10>
 800e208:	6983      	ldr	r3, [r0, #24]
 800e20a:	b90b      	cbnz	r3, 800e210 <_puts_r+0x10>
 800e20c:	f000 fa1c 	bl	800e648 <__sinit>
 800e210:	69ab      	ldr	r3, [r5, #24]
 800e212:	68ac      	ldr	r4, [r5, #8]
 800e214:	b913      	cbnz	r3, 800e21c <_puts_r+0x1c>
 800e216:	4628      	mov	r0, r5
 800e218:	f000 fa16 	bl	800e648 <__sinit>
 800e21c:	4b23      	ldr	r3, [pc, #140]	; (800e2ac <_puts_r+0xac>)
 800e21e:	429c      	cmp	r4, r3
 800e220:	d117      	bne.n	800e252 <_puts_r+0x52>
 800e222:	686c      	ldr	r4, [r5, #4]
 800e224:	89a3      	ldrh	r3, [r4, #12]
 800e226:	071b      	lsls	r3, r3, #28
 800e228:	d51d      	bpl.n	800e266 <_puts_r+0x66>
 800e22a:	6923      	ldr	r3, [r4, #16]
 800e22c:	b1db      	cbz	r3, 800e266 <_puts_r+0x66>
 800e22e:	3e01      	subs	r6, #1
 800e230:	68a3      	ldr	r3, [r4, #8]
 800e232:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e236:	3b01      	subs	r3, #1
 800e238:	60a3      	str	r3, [r4, #8]
 800e23a:	b9e9      	cbnz	r1, 800e278 <_puts_r+0x78>
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	da2e      	bge.n	800e29e <_puts_r+0x9e>
 800e240:	4622      	mov	r2, r4
 800e242:	210a      	movs	r1, #10
 800e244:	4628      	mov	r0, r5
 800e246:	f000 f84f 	bl	800e2e8 <__swbuf_r>
 800e24a:	3001      	adds	r0, #1
 800e24c:	d011      	beq.n	800e272 <_puts_r+0x72>
 800e24e:	200a      	movs	r0, #10
 800e250:	e011      	b.n	800e276 <_puts_r+0x76>
 800e252:	4b17      	ldr	r3, [pc, #92]	; (800e2b0 <_puts_r+0xb0>)
 800e254:	429c      	cmp	r4, r3
 800e256:	d101      	bne.n	800e25c <_puts_r+0x5c>
 800e258:	68ac      	ldr	r4, [r5, #8]
 800e25a:	e7e3      	b.n	800e224 <_puts_r+0x24>
 800e25c:	4b15      	ldr	r3, [pc, #84]	; (800e2b4 <_puts_r+0xb4>)
 800e25e:	429c      	cmp	r4, r3
 800e260:	bf08      	it	eq
 800e262:	68ec      	ldreq	r4, [r5, #12]
 800e264:	e7de      	b.n	800e224 <_puts_r+0x24>
 800e266:	4621      	mov	r1, r4
 800e268:	4628      	mov	r0, r5
 800e26a:	f000 f88f 	bl	800e38c <__swsetup_r>
 800e26e:	2800      	cmp	r0, #0
 800e270:	d0dd      	beq.n	800e22e <_puts_r+0x2e>
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	2b00      	cmp	r3, #0
 800e27a:	da04      	bge.n	800e286 <_puts_r+0x86>
 800e27c:	69a2      	ldr	r2, [r4, #24]
 800e27e:	429a      	cmp	r2, r3
 800e280:	dc06      	bgt.n	800e290 <_puts_r+0x90>
 800e282:	290a      	cmp	r1, #10
 800e284:	d004      	beq.n	800e290 <_puts_r+0x90>
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	1c5a      	adds	r2, r3, #1
 800e28a:	6022      	str	r2, [r4, #0]
 800e28c:	7019      	strb	r1, [r3, #0]
 800e28e:	e7cf      	b.n	800e230 <_puts_r+0x30>
 800e290:	4622      	mov	r2, r4
 800e292:	4628      	mov	r0, r5
 800e294:	f000 f828 	bl	800e2e8 <__swbuf_r>
 800e298:	3001      	adds	r0, #1
 800e29a:	d1c9      	bne.n	800e230 <_puts_r+0x30>
 800e29c:	e7e9      	b.n	800e272 <_puts_r+0x72>
 800e29e:	6823      	ldr	r3, [r4, #0]
 800e2a0:	200a      	movs	r0, #10
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	6022      	str	r2, [r4, #0]
 800e2a6:	7018      	strb	r0, [r3, #0]
 800e2a8:	e7e5      	b.n	800e276 <_puts_r+0x76>
 800e2aa:	bf00      	nop
 800e2ac:	08011770 	.word	0x08011770
 800e2b0:	08011790 	.word	0x08011790
 800e2b4:	08011750 	.word	0x08011750

0800e2b8 <puts>:
 800e2b8:	4b02      	ldr	r3, [pc, #8]	; (800e2c4 <puts+0xc>)
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	6818      	ldr	r0, [r3, #0]
 800e2be:	f7ff bf9f 	b.w	800e200 <_puts_r>
 800e2c2:	bf00      	nop
 800e2c4:	20000060 	.word	0x20000060

0800e2c8 <_sbrk_r>:
 800e2c8:	b538      	push	{r3, r4, r5, lr}
 800e2ca:	4c06      	ldr	r4, [pc, #24]	; (800e2e4 <_sbrk_r+0x1c>)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	6023      	str	r3, [r4, #0]
 800e2d4:	f7f6 fd3c 	bl	8004d50 <_sbrk>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_sbrk_r+0x1a>
 800e2dc:	6823      	ldr	r3, [r4, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_sbrk_r+0x1a>
 800e2e0:	602b      	str	r3, [r5, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	200009f0 	.word	0x200009f0

0800e2e8 <__swbuf_r>:
 800e2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ea:	460e      	mov	r6, r1
 800e2ec:	4614      	mov	r4, r2
 800e2ee:	4605      	mov	r5, r0
 800e2f0:	b118      	cbz	r0, 800e2fa <__swbuf_r+0x12>
 800e2f2:	6983      	ldr	r3, [r0, #24]
 800e2f4:	b90b      	cbnz	r3, 800e2fa <__swbuf_r+0x12>
 800e2f6:	f000 f9a7 	bl	800e648 <__sinit>
 800e2fa:	4b21      	ldr	r3, [pc, #132]	; (800e380 <__swbuf_r+0x98>)
 800e2fc:	429c      	cmp	r4, r3
 800e2fe:	d12a      	bne.n	800e356 <__swbuf_r+0x6e>
 800e300:	686c      	ldr	r4, [r5, #4]
 800e302:	69a3      	ldr	r3, [r4, #24]
 800e304:	60a3      	str	r3, [r4, #8]
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	071a      	lsls	r2, r3, #28
 800e30a:	d52e      	bpl.n	800e36a <__swbuf_r+0x82>
 800e30c:	6923      	ldr	r3, [r4, #16]
 800e30e:	b363      	cbz	r3, 800e36a <__swbuf_r+0x82>
 800e310:	6923      	ldr	r3, [r4, #16]
 800e312:	6820      	ldr	r0, [r4, #0]
 800e314:	1ac0      	subs	r0, r0, r3
 800e316:	6963      	ldr	r3, [r4, #20]
 800e318:	b2f6      	uxtb	r6, r6
 800e31a:	4283      	cmp	r3, r0
 800e31c:	4637      	mov	r7, r6
 800e31e:	dc04      	bgt.n	800e32a <__swbuf_r+0x42>
 800e320:	4621      	mov	r1, r4
 800e322:	4628      	mov	r0, r5
 800e324:	f000 f926 	bl	800e574 <_fflush_r>
 800e328:	bb28      	cbnz	r0, 800e376 <__swbuf_r+0x8e>
 800e32a:	68a3      	ldr	r3, [r4, #8]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	60a3      	str	r3, [r4, #8]
 800e330:	6823      	ldr	r3, [r4, #0]
 800e332:	1c5a      	adds	r2, r3, #1
 800e334:	6022      	str	r2, [r4, #0]
 800e336:	701e      	strb	r6, [r3, #0]
 800e338:	6963      	ldr	r3, [r4, #20]
 800e33a:	3001      	adds	r0, #1
 800e33c:	4283      	cmp	r3, r0
 800e33e:	d004      	beq.n	800e34a <__swbuf_r+0x62>
 800e340:	89a3      	ldrh	r3, [r4, #12]
 800e342:	07db      	lsls	r3, r3, #31
 800e344:	d519      	bpl.n	800e37a <__swbuf_r+0x92>
 800e346:	2e0a      	cmp	r6, #10
 800e348:	d117      	bne.n	800e37a <__swbuf_r+0x92>
 800e34a:	4621      	mov	r1, r4
 800e34c:	4628      	mov	r0, r5
 800e34e:	f000 f911 	bl	800e574 <_fflush_r>
 800e352:	b190      	cbz	r0, 800e37a <__swbuf_r+0x92>
 800e354:	e00f      	b.n	800e376 <__swbuf_r+0x8e>
 800e356:	4b0b      	ldr	r3, [pc, #44]	; (800e384 <__swbuf_r+0x9c>)
 800e358:	429c      	cmp	r4, r3
 800e35a:	d101      	bne.n	800e360 <__swbuf_r+0x78>
 800e35c:	68ac      	ldr	r4, [r5, #8]
 800e35e:	e7d0      	b.n	800e302 <__swbuf_r+0x1a>
 800e360:	4b09      	ldr	r3, [pc, #36]	; (800e388 <__swbuf_r+0xa0>)
 800e362:	429c      	cmp	r4, r3
 800e364:	bf08      	it	eq
 800e366:	68ec      	ldreq	r4, [r5, #12]
 800e368:	e7cb      	b.n	800e302 <__swbuf_r+0x1a>
 800e36a:	4621      	mov	r1, r4
 800e36c:	4628      	mov	r0, r5
 800e36e:	f000 f80d 	bl	800e38c <__swsetup_r>
 800e372:	2800      	cmp	r0, #0
 800e374:	d0cc      	beq.n	800e310 <__swbuf_r+0x28>
 800e376:	f04f 37ff 	mov.w	r7, #4294967295
 800e37a:	4638      	mov	r0, r7
 800e37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e37e:	bf00      	nop
 800e380:	08011770 	.word	0x08011770
 800e384:	08011790 	.word	0x08011790
 800e388:	08011750 	.word	0x08011750

0800e38c <__swsetup_r>:
 800e38c:	4b32      	ldr	r3, [pc, #200]	; (800e458 <__swsetup_r+0xcc>)
 800e38e:	b570      	push	{r4, r5, r6, lr}
 800e390:	681d      	ldr	r5, [r3, #0]
 800e392:	4606      	mov	r6, r0
 800e394:	460c      	mov	r4, r1
 800e396:	b125      	cbz	r5, 800e3a2 <__swsetup_r+0x16>
 800e398:	69ab      	ldr	r3, [r5, #24]
 800e39a:	b913      	cbnz	r3, 800e3a2 <__swsetup_r+0x16>
 800e39c:	4628      	mov	r0, r5
 800e39e:	f000 f953 	bl	800e648 <__sinit>
 800e3a2:	4b2e      	ldr	r3, [pc, #184]	; (800e45c <__swsetup_r+0xd0>)
 800e3a4:	429c      	cmp	r4, r3
 800e3a6:	d10f      	bne.n	800e3c8 <__swsetup_r+0x3c>
 800e3a8:	686c      	ldr	r4, [r5, #4]
 800e3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	0715      	lsls	r5, r2, #28
 800e3b2:	d42c      	bmi.n	800e40e <__swsetup_r+0x82>
 800e3b4:	06d0      	lsls	r0, r2, #27
 800e3b6:	d411      	bmi.n	800e3dc <__swsetup_r+0x50>
 800e3b8:	2209      	movs	r2, #9
 800e3ba:	6032      	str	r2, [r6, #0]
 800e3bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3c0:	81a3      	strh	r3, [r4, #12]
 800e3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c6:	e03e      	b.n	800e446 <__swsetup_r+0xba>
 800e3c8:	4b25      	ldr	r3, [pc, #148]	; (800e460 <__swsetup_r+0xd4>)
 800e3ca:	429c      	cmp	r4, r3
 800e3cc:	d101      	bne.n	800e3d2 <__swsetup_r+0x46>
 800e3ce:	68ac      	ldr	r4, [r5, #8]
 800e3d0:	e7eb      	b.n	800e3aa <__swsetup_r+0x1e>
 800e3d2:	4b24      	ldr	r3, [pc, #144]	; (800e464 <__swsetup_r+0xd8>)
 800e3d4:	429c      	cmp	r4, r3
 800e3d6:	bf08      	it	eq
 800e3d8:	68ec      	ldreq	r4, [r5, #12]
 800e3da:	e7e6      	b.n	800e3aa <__swsetup_r+0x1e>
 800e3dc:	0751      	lsls	r1, r2, #29
 800e3de:	d512      	bpl.n	800e406 <__swsetup_r+0x7a>
 800e3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3e2:	b141      	cbz	r1, 800e3f6 <__swsetup_r+0x6a>
 800e3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3e8:	4299      	cmp	r1, r3
 800e3ea:	d002      	beq.n	800e3f2 <__swsetup_r+0x66>
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f7ff fe5f 	bl	800e0b0 <_free_r>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3fc:	81a3      	strh	r3, [r4, #12]
 800e3fe:	2300      	movs	r3, #0
 800e400:	6063      	str	r3, [r4, #4]
 800e402:	6923      	ldr	r3, [r4, #16]
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	89a3      	ldrh	r3, [r4, #12]
 800e408:	f043 0308 	orr.w	r3, r3, #8
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	6923      	ldr	r3, [r4, #16]
 800e410:	b94b      	cbnz	r3, 800e426 <__swsetup_r+0x9a>
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e41c:	d003      	beq.n	800e426 <__swsetup_r+0x9a>
 800e41e:	4621      	mov	r1, r4
 800e420:	4630      	mov	r0, r6
 800e422:	f000 f9bf 	bl	800e7a4 <__smakebuf_r>
 800e426:	89a2      	ldrh	r2, [r4, #12]
 800e428:	f012 0301 	ands.w	r3, r2, #1
 800e42c:	d00c      	beq.n	800e448 <__swsetup_r+0xbc>
 800e42e:	2300      	movs	r3, #0
 800e430:	60a3      	str	r3, [r4, #8]
 800e432:	6963      	ldr	r3, [r4, #20]
 800e434:	425b      	negs	r3, r3
 800e436:	61a3      	str	r3, [r4, #24]
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	b953      	cbnz	r3, 800e452 <__swsetup_r+0xc6>
 800e43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e440:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e444:	d1ba      	bne.n	800e3bc <__swsetup_r+0x30>
 800e446:	bd70      	pop	{r4, r5, r6, pc}
 800e448:	0792      	lsls	r2, r2, #30
 800e44a:	bf58      	it	pl
 800e44c:	6963      	ldrpl	r3, [r4, #20]
 800e44e:	60a3      	str	r3, [r4, #8]
 800e450:	e7f2      	b.n	800e438 <__swsetup_r+0xac>
 800e452:	2000      	movs	r0, #0
 800e454:	e7f7      	b.n	800e446 <__swsetup_r+0xba>
 800e456:	bf00      	nop
 800e458:	20000060 	.word	0x20000060
 800e45c:	08011770 	.word	0x08011770
 800e460:	08011790 	.word	0x08011790
 800e464:	08011750 	.word	0x08011750

0800e468 <__sflush_r>:
 800e468:	898a      	ldrh	r2, [r1, #12]
 800e46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e46e:	4605      	mov	r5, r0
 800e470:	0710      	lsls	r0, r2, #28
 800e472:	460c      	mov	r4, r1
 800e474:	d458      	bmi.n	800e528 <__sflush_r+0xc0>
 800e476:	684b      	ldr	r3, [r1, #4]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dc05      	bgt.n	800e488 <__sflush_r+0x20>
 800e47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e47e:	2b00      	cmp	r3, #0
 800e480:	dc02      	bgt.n	800e488 <__sflush_r+0x20>
 800e482:	2000      	movs	r0, #0
 800e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e48a:	2e00      	cmp	r6, #0
 800e48c:	d0f9      	beq.n	800e482 <__sflush_r+0x1a>
 800e48e:	2300      	movs	r3, #0
 800e490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e494:	682f      	ldr	r7, [r5, #0]
 800e496:	6a21      	ldr	r1, [r4, #32]
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	d032      	beq.n	800e502 <__sflush_r+0x9a>
 800e49c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	075a      	lsls	r2, r3, #29
 800e4a2:	d505      	bpl.n	800e4b0 <__sflush_r+0x48>
 800e4a4:	6863      	ldr	r3, [r4, #4]
 800e4a6:	1ac0      	subs	r0, r0, r3
 800e4a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4aa:	b10b      	cbz	r3, 800e4b0 <__sflush_r+0x48>
 800e4ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4ae:	1ac0      	subs	r0, r0, r3
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4b6:	6a21      	ldr	r1, [r4, #32]
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	47b0      	blx	r6
 800e4bc:	1c43      	adds	r3, r0, #1
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	d106      	bne.n	800e4d0 <__sflush_r+0x68>
 800e4c2:	6829      	ldr	r1, [r5, #0]
 800e4c4:	291d      	cmp	r1, #29
 800e4c6:	d848      	bhi.n	800e55a <__sflush_r+0xf2>
 800e4c8:	4a29      	ldr	r2, [pc, #164]	; (800e570 <__sflush_r+0x108>)
 800e4ca:	40ca      	lsrs	r2, r1
 800e4cc:	07d6      	lsls	r6, r2, #31
 800e4ce:	d544      	bpl.n	800e55a <__sflush_r+0xf2>
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	6062      	str	r2, [r4, #4]
 800e4d4:	04d9      	lsls	r1, r3, #19
 800e4d6:	6922      	ldr	r2, [r4, #16]
 800e4d8:	6022      	str	r2, [r4, #0]
 800e4da:	d504      	bpl.n	800e4e6 <__sflush_r+0x7e>
 800e4dc:	1c42      	adds	r2, r0, #1
 800e4de:	d101      	bne.n	800e4e4 <__sflush_r+0x7c>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	b903      	cbnz	r3, 800e4e6 <__sflush_r+0x7e>
 800e4e4:	6560      	str	r0, [r4, #84]	; 0x54
 800e4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4e8:	602f      	str	r7, [r5, #0]
 800e4ea:	2900      	cmp	r1, #0
 800e4ec:	d0c9      	beq.n	800e482 <__sflush_r+0x1a>
 800e4ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4f2:	4299      	cmp	r1, r3
 800e4f4:	d002      	beq.n	800e4fc <__sflush_r+0x94>
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f7ff fdda 	bl	800e0b0 <_free_r>
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	6360      	str	r0, [r4, #52]	; 0x34
 800e500:	e7c0      	b.n	800e484 <__sflush_r+0x1c>
 800e502:	2301      	movs	r3, #1
 800e504:	4628      	mov	r0, r5
 800e506:	47b0      	blx	r6
 800e508:	1c41      	adds	r1, r0, #1
 800e50a:	d1c8      	bne.n	800e49e <__sflush_r+0x36>
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d0c5      	beq.n	800e49e <__sflush_r+0x36>
 800e512:	2b1d      	cmp	r3, #29
 800e514:	d001      	beq.n	800e51a <__sflush_r+0xb2>
 800e516:	2b16      	cmp	r3, #22
 800e518:	d101      	bne.n	800e51e <__sflush_r+0xb6>
 800e51a:	602f      	str	r7, [r5, #0]
 800e51c:	e7b1      	b.n	800e482 <__sflush_r+0x1a>
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e524:	81a3      	strh	r3, [r4, #12]
 800e526:	e7ad      	b.n	800e484 <__sflush_r+0x1c>
 800e528:	690f      	ldr	r7, [r1, #16]
 800e52a:	2f00      	cmp	r7, #0
 800e52c:	d0a9      	beq.n	800e482 <__sflush_r+0x1a>
 800e52e:	0793      	lsls	r3, r2, #30
 800e530:	680e      	ldr	r6, [r1, #0]
 800e532:	bf08      	it	eq
 800e534:	694b      	ldreq	r3, [r1, #20]
 800e536:	600f      	str	r7, [r1, #0]
 800e538:	bf18      	it	ne
 800e53a:	2300      	movne	r3, #0
 800e53c:	eba6 0807 	sub.w	r8, r6, r7
 800e540:	608b      	str	r3, [r1, #8]
 800e542:	f1b8 0f00 	cmp.w	r8, #0
 800e546:	dd9c      	ble.n	800e482 <__sflush_r+0x1a>
 800e548:	4643      	mov	r3, r8
 800e54a:	463a      	mov	r2, r7
 800e54c:	6a21      	ldr	r1, [r4, #32]
 800e54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e550:	4628      	mov	r0, r5
 800e552:	47b0      	blx	r6
 800e554:	2800      	cmp	r0, #0
 800e556:	dc06      	bgt.n	800e566 <__sflush_r+0xfe>
 800e558:	89a3      	ldrh	r3, [r4, #12]
 800e55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e55e:	81a3      	strh	r3, [r4, #12]
 800e560:	f04f 30ff 	mov.w	r0, #4294967295
 800e564:	e78e      	b.n	800e484 <__sflush_r+0x1c>
 800e566:	4407      	add	r7, r0
 800e568:	eba8 0800 	sub.w	r8, r8, r0
 800e56c:	e7e9      	b.n	800e542 <__sflush_r+0xda>
 800e56e:	bf00      	nop
 800e570:	20400001 	.word	0x20400001

0800e574 <_fflush_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	690b      	ldr	r3, [r1, #16]
 800e578:	4605      	mov	r5, r0
 800e57a:	460c      	mov	r4, r1
 800e57c:	b1db      	cbz	r3, 800e5b6 <_fflush_r+0x42>
 800e57e:	b118      	cbz	r0, 800e588 <_fflush_r+0x14>
 800e580:	6983      	ldr	r3, [r0, #24]
 800e582:	b90b      	cbnz	r3, 800e588 <_fflush_r+0x14>
 800e584:	f000 f860 	bl	800e648 <__sinit>
 800e588:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <_fflush_r+0x48>)
 800e58a:	429c      	cmp	r4, r3
 800e58c:	d109      	bne.n	800e5a2 <_fflush_r+0x2e>
 800e58e:	686c      	ldr	r4, [r5, #4]
 800e590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e594:	b17b      	cbz	r3, 800e5b6 <_fflush_r+0x42>
 800e596:	4621      	mov	r1, r4
 800e598:	4628      	mov	r0, r5
 800e59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e59e:	f7ff bf63 	b.w	800e468 <__sflush_r>
 800e5a2:	4b07      	ldr	r3, [pc, #28]	; (800e5c0 <_fflush_r+0x4c>)
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	d101      	bne.n	800e5ac <_fflush_r+0x38>
 800e5a8:	68ac      	ldr	r4, [r5, #8]
 800e5aa:	e7f1      	b.n	800e590 <_fflush_r+0x1c>
 800e5ac:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <_fflush_r+0x50>)
 800e5ae:	429c      	cmp	r4, r3
 800e5b0:	bf08      	it	eq
 800e5b2:	68ec      	ldreq	r4, [r5, #12]
 800e5b4:	e7ec      	b.n	800e590 <_fflush_r+0x1c>
 800e5b6:	2000      	movs	r0, #0
 800e5b8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ba:	bf00      	nop
 800e5bc:	08011770 	.word	0x08011770
 800e5c0:	08011790 	.word	0x08011790
 800e5c4:	08011750 	.word	0x08011750

0800e5c8 <std>:
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	b510      	push	{r4, lr}
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e5d2:	6083      	str	r3, [r0, #8]
 800e5d4:	8181      	strh	r1, [r0, #12]
 800e5d6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5d8:	81c2      	strh	r2, [r0, #14]
 800e5da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5de:	6183      	str	r3, [r0, #24]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	2208      	movs	r2, #8
 800e5e4:	305c      	adds	r0, #92	; 0x5c
 800e5e6:	f7ff fd5a 	bl	800e09e <memset>
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <std+0x38>)
 800e5ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <std+0x3c>)
 800e5f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5f2:	4b05      	ldr	r3, [pc, #20]	; (800e608 <std+0x40>)
 800e5f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <std+0x44>)
 800e5f8:	6224      	str	r4, [r4, #32]
 800e5fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e5fc:	bd10      	pop	{r4, pc}
 800e5fe:	bf00      	nop
 800e600:	0800e829 	.word	0x0800e829
 800e604:	0800e84b 	.word	0x0800e84b
 800e608:	0800e883 	.word	0x0800e883
 800e60c:	0800e8a7 	.word	0x0800e8a7

0800e610 <_cleanup_r>:
 800e610:	4901      	ldr	r1, [pc, #4]	; (800e618 <_cleanup_r+0x8>)
 800e612:	f000 b885 	b.w	800e720 <_fwalk_reent>
 800e616:	bf00      	nop
 800e618:	0800e575 	.word	0x0800e575

0800e61c <__sfmoreglue>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	1e4a      	subs	r2, r1, #1
 800e620:	2568      	movs	r5, #104	; 0x68
 800e622:	4355      	muls	r5, r2
 800e624:	460e      	mov	r6, r1
 800e626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e62a:	f7ff fd8f 	bl	800e14c <_malloc_r>
 800e62e:	4604      	mov	r4, r0
 800e630:	b140      	cbz	r0, 800e644 <__sfmoreglue+0x28>
 800e632:	2100      	movs	r1, #0
 800e634:	e9c0 1600 	strd	r1, r6, [r0]
 800e638:	300c      	adds	r0, #12
 800e63a:	60a0      	str	r0, [r4, #8]
 800e63c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e640:	f7ff fd2d 	bl	800e09e <memset>
 800e644:	4620      	mov	r0, r4
 800e646:	bd70      	pop	{r4, r5, r6, pc}

0800e648 <__sinit>:
 800e648:	6983      	ldr	r3, [r0, #24]
 800e64a:	b510      	push	{r4, lr}
 800e64c:	4604      	mov	r4, r0
 800e64e:	bb33      	cbnz	r3, 800e69e <__sinit+0x56>
 800e650:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e654:	6503      	str	r3, [r0, #80]	; 0x50
 800e656:	4b12      	ldr	r3, [pc, #72]	; (800e6a0 <__sinit+0x58>)
 800e658:	4a12      	ldr	r2, [pc, #72]	; (800e6a4 <__sinit+0x5c>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	6282      	str	r2, [r0, #40]	; 0x28
 800e65e:	4298      	cmp	r0, r3
 800e660:	bf04      	itt	eq
 800e662:	2301      	moveq	r3, #1
 800e664:	6183      	streq	r3, [r0, #24]
 800e666:	f000 f81f 	bl	800e6a8 <__sfp>
 800e66a:	6060      	str	r0, [r4, #4]
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 f81b 	bl	800e6a8 <__sfp>
 800e672:	60a0      	str	r0, [r4, #8]
 800e674:	4620      	mov	r0, r4
 800e676:	f000 f817 	bl	800e6a8 <__sfp>
 800e67a:	2200      	movs	r2, #0
 800e67c:	60e0      	str	r0, [r4, #12]
 800e67e:	2104      	movs	r1, #4
 800e680:	6860      	ldr	r0, [r4, #4]
 800e682:	f7ff ffa1 	bl	800e5c8 <std>
 800e686:	2201      	movs	r2, #1
 800e688:	2109      	movs	r1, #9
 800e68a:	68a0      	ldr	r0, [r4, #8]
 800e68c:	f7ff ff9c 	bl	800e5c8 <std>
 800e690:	2202      	movs	r2, #2
 800e692:	2112      	movs	r1, #18
 800e694:	68e0      	ldr	r0, [r4, #12]
 800e696:	f7ff ff97 	bl	800e5c8 <std>
 800e69a:	2301      	movs	r3, #1
 800e69c:	61a3      	str	r3, [r4, #24]
 800e69e:	bd10      	pop	{r4, pc}
 800e6a0:	0801174c 	.word	0x0801174c
 800e6a4:	0800e611 	.word	0x0800e611

0800e6a8 <__sfp>:
 800e6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6aa:	4b1b      	ldr	r3, [pc, #108]	; (800e718 <__sfp+0x70>)
 800e6ac:	681e      	ldr	r6, [r3, #0]
 800e6ae:	69b3      	ldr	r3, [r6, #24]
 800e6b0:	4607      	mov	r7, r0
 800e6b2:	b913      	cbnz	r3, 800e6ba <__sfp+0x12>
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	f7ff ffc7 	bl	800e648 <__sinit>
 800e6ba:	3648      	adds	r6, #72	; 0x48
 800e6bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	d503      	bpl.n	800e6cc <__sfp+0x24>
 800e6c4:	6833      	ldr	r3, [r6, #0]
 800e6c6:	b133      	cbz	r3, 800e6d6 <__sfp+0x2e>
 800e6c8:	6836      	ldr	r6, [r6, #0]
 800e6ca:	e7f7      	b.n	800e6bc <__sfp+0x14>
 800e6cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6d0:	b16d      	cbz	r5, 800e6ee <__sfp+0x46>
 800e6d2:	3468      	adds	r4, #104	; 0x68
 800e6d4:	e7f4      	b.n	800e6c0 <__sfp+0x18>
 800e6d6:	2104      	movs	r1, #4
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f7ff ff9f 	bl	800e61c <__sfmoreglue>
 800e6de:	6030      	str	r0, [r6, #0]
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d1f1      	bne.n	800e6c8 <__sfp+0x20>
 800e6e4:	230c      	movs	r3, #12
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6ee:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <__sfp+0x74>)
 800e6f0:	6665      	str	r5, [r4, #100]	; 0x64
 800e6f2:	e9c4 5500 	strd	r5, r5, [r4]
 800e6f6:	60a5      	str	r5, [r4, #8]
 800e6f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e6fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e700:	2208      	movs	r2, #8
 800e702:	4629      	mov	r1, r5
 800e704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e708:	f7ff fcc9 	bl	800e09e <memset>
 800e70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e714:	e7e9      	b.n	800e6ea <__sfp+0x42>
 800e716:	bf00      	nop
 800e718:	0801174c 	.word	0x0801174c
 800e71c:	ffff0001 	.word	0xffff0001

0800e720 <_fwalk_reent>:
 800e720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e72c:	2600      	movs	r6, #0
 800e72e:	b914      	cbnz	r4, 800e736 <_fwalk_reent+0x16>
 800e730:	4630      	mov	r0, r6
 800e732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e736:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e73a:	3f01      	subs	r7, #1
 800e73c:	d501      	bpl.n	800e742 <_fwalk_reent+0x22>
 800e73e:	6824      	ldr	r4, [r4, #0]
 800e740:	e7f5      	b.n	800e72e <_fwalk_reent+0xe>
 800e742:	89ab      	ldrh	r3, [r5, #12]
 800e744:	2b01      	cmp	r3, #1
 800e746:	d907      	bls.n	800e758 <_fwalk_reent+0x38>
 800e748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e74c:	3301      	adds	r3, #1
 800e74e:	d003      	beq.n	800e758 <_fwalk_reent+0x38>
 800e750:	4629      	mov	r1, r5
 800e752:	4640      	mov	r0, r8
 800e754:	47c8      	blx	r9
 800e756:	4306      	orrs	r6, r0
 800e758:	3568      	adds	r5, #104	; 0x68
 800e75a:	e7ee      	b.n	800e73a <_fwalk_reent+0x1a>

0800e75c <__swhatbuf_r>:
 800e75c:	b570      	push	{r4, r5, r6, lr}
 800e75e:	460e      	mov	r6, r1
 800e760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e764:	2900      	cmp	r1, #0
 800e766:	b096      	sub	sp, #88	; 0x58
 800e768:	4614      	mov	r4, r2
 800e76a:	461d      	mov	r5, r3
 800e76c:	da07      	bge.n	800e77e <__swhatbuf_r+0x22>
 800e76e:	2300      	movs	r3, #0
 800e770:	602b      	str	r3, [r5, #0]
 800e772:	89b3      	ldrh	r3, [r6, #12]
 800e774:	061a      	lsls	r2, r3, #24
 800e776:	d410      	bmi.n	800e79a <__swhatbuf_r+0x3e>
 800e778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e77c:	e00e      	b.n	800e79c <__swhatbuf_r+0x40>
 800e77e:	466a      	mov	r2, sp
 800e780:	f000 f8b8 	bl	800e8f4 <_fstat_r>
 800e784:	2800      	cmp	r0, #0
 800e786:	dbf2      	blt.n	800e76e <__swhatbuf_r+0x12>
 800e788:	9a01      	ldr	r2, [sp, #4]
 800e78a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e78e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e792:	425a      	negs	r2, r3
 800e794:	415a      	adcs	r2, r3
 800e796:	602a      	str	r2, [r5, #0]
 800e798:	e7ee      	b.n	800e778 <__swhatbuf_r+0x1c>
 800e79a:	2340      	movs	r3, #64	; 0x40
 800e79c:	2000      	movs	r0, #0
 800e79e:	6023      	str	r3, [r4, #0]
 800e7a0:	b016      	add	sp, #88	; 0x58
 800e7a2:	bd70      	pop	{r4, r5, r6, pc}

0800e7a4 <__smakebuf_r>:
 800e7a4:	898b      	ldrh	r3, [r1, #12]
 800e7a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7a8:	079d      	lsls	r5, r3, #30
 800e7aa:	4606      	mov	r6, r0
 800e7ac:	460c      	mov	r4, r1
 800e7ae:	d507      	bpl.n	800e7c0 <__smakebuf_r+0x1c>
 800e7b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7b4:	6023      	str	r3, [r4, #0]
 800e7b6:	6123      	str	r3, [r4, #16]
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	6163      	str	r3, [r4, #20]
 800e7bc:	b002      	add	sp, #8
 800e7be:	bd70      	pop	{r4, r5, r6, pc}
 800e7c0:	ab01      	add	r3, sp, #4
 800e7c2:	466a      	mov	r2, sp
 800e7c4:	f7ff ffca 	bl	800e75c <__swhatbuf_r>
 800e7c8:	9900      	ldr	r1, [sp, #0]
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	4630      	mov	r0, r6
 800e7ce:	f7ff fcbd 	bl	800e14c <_malloc_r>
 800e7d2:	b948      	cbnz	r0, 800e7e8 <__smakebuf_r+0x44>
 800e7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d8:	059a      	lsls	r2, r3, #22
 800e7da:	d4ef      	bmi.n	800e7bc <__smakebuf_r+0x18>
 800e7dc:	f023 0303 	bic.w	r3, r3, #3
 800e7e0:	f043 0302 	orr.w	r3, r3, #2
 800e7e4:	81a3      	strh	r3, [r4, #12]
 800e7e6:	e7e3      	b.n	800e7b0 <__smakebuf_r+0xc>
 800e7e8:	4b0d      	ldr	r3, [pc, #52]	; (800e820 <__smakebuf_r+0x7c>)
 800e7ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7ec:	89a3      	ldrh	r3, [r4, #12]
 800e7ee:	6020      	str	r0, [r4, #0]
 800e7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7f4:	81a3      	strh	r3, [r4, #12]
 800e7f6:	9b00      	ldr	r3, [sp, #0]
 800e7f8:	6163      	str	r3, [r4, #20]
 800e7fa:	9b01      	ldr	r3, [sp, #4]
 800e7fc:	6120      	str	r0, [r4, #16]
 800e7fe:	b15b      	cbz	r3, 800e818 <__smakebuf_r+0x74>
 800e800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e804:	4630      	mov	r0, r6
 800e806:	f000 f887 	bl	800e918 <_isatty_r>
 800e80a:	b128      	cbz	r0, 800e818 <__smakebuf_r+0x74>
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	f023 0303 	bic.w	r3, r3, #3
 800e812:	f043 0301 	orr.w	r3, r3, #1
 800e816:	81a3      	strh	r3, [r4, #12]
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	431d      	orrs	r5, r3
 800e81c:	81a5      	strh	r5, [r4, #12]
 800e81e:	e7cd      	b.n	800e7bc <__smakebuf_r+0x18>
 800e820:	0800e611 	.word	0x0800e611

0800e824 <__malloc_lock>:
 800e824:	4770      	bx	lr

0800e826 <__malloc_unlock>:
 800e826:	4770      	bx	lr

0800e828 <__sread>:
 800e828:	b510      	push	{r4, lr}
 800e82a:	460c      	mov	r4, r1
 800e82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e830:	f000 f894 	bl	800e95c <_read_r>
 800e834:	2800      	cmp	r0, #0
 800e836:	bfab      	itete	ge
 800e838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e83a:	89a3      	ldrhlt	r3, [r4, #12]
 800e83c:	181b      	addge	r3, r3, r0
 800e83e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e842:	bfac      	ite	ge
 800e844:	6563      	strge	r3, [r4, #84]	; 0x54
 800e846:	81a3      	strhlt	r3, [r4, #12]
 800e848:	bd10      	pop	{r4, pc}

0800e84a <__swrite>:
 800e84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e84e:	461f      	mov	r7, r3
 800e850:	898b      	ldrh	r3, [r1, #12]
 800e852:	05db      	lsls	r3, r3, #23
 800e854:	4605      	mov	r5, r0
 800e856:	460c      	mov	r4, r1
 800e858:	4616      	mov	r6, r2
 800e85a:	d505      	bpl.n	800e868 <__swrite+0x1e>
 800e85c:	2302      	movs	r3, #2
 800e85e:	2200      	movs	r2, #0
 800e860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e864:	f000 f868 	bl	800e938 <_lseek_r>
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e86e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e872:	81a3      	strh	r3, [r4, #12]
 800e874:	4632      	mov	r2, r6
 800e876:	463b      	mov	r3, r7
 800e878:	4628      	mov	r0, r5
 800e87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e87e:	f000 b817 	b.w	800e8b0 <_write_r>

0800e882 <__sseek>:
 800e882:	b510      	push	{r4, lr}
 800e884:	460c      	mov	r4, r1
 800e886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e88a:	f000 f855 	bl	800e938 <_lseek_r>
 800e88e:	1c43      	adds	r3, r0, #1
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	bf15      	itete	ne
 800e894:	6560      	strne	r0, [r4, #84]	; 0x54
 800e896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e89e:	81a3      	strheq	r3, [r4, #12]
 800e8a0:	bf18      	it	ne
 800e8a2:	81a3      	strhne	r3, [r4, #12]
 800e8a4:	bd10      	pop	{r4, pc}

0800e8a6 <__sclose>:
 800e8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8aa:	f000 b813 	b.w	800e8d4 <_close_r>
	...

0800e8b0 <_write_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4c07      	ldr	r4, [pc, #28]	; (800e8d0 <_write_r+0x20>)
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	4608      	mov	r0, r1
 800e8b8:	4611      	mov	r1, r2
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	6022      	str	r2, [r4, #0]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	f7f5 fe9c 	bl	80045fc <_write>
 800e8c4:	1c43      	adds	r3, r0, #1
 800e8c6:	d102      	bne.n	800e8ce <_write_r+0x1e>
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	b103      	cbz	r3, 800e8ce <_write_r+0x1e>
 800e8cc:	602b      	str	r3, [r5, #0]
 800e8ce:	bd38      	pop	{r3, r4, r5, pc}
 800e8d0:	200009f0 	.word	0x200009f0

0800e8d4 <_close_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	4c06      	ldr	r4, [pc, #24]	; (800e8f0 <_close_r+0x1c>)
 800e8d8:	2300      	movs	r3, #0
 800e8da:	4605      	mov	r5, r0
 800e8dc:	4608      	mov	r0, r1
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	f7f6 fa01 	bl	8004ce6 <_close>
 800e8e4:	1c43      	adds	r3, r0, #1
 800e8e6:	d102      	bne.n	800e8ee <_close_r+0x1a>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	b103      	cbz	r3, 800e8ee <_close_r+0x1a>
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	bd38      	pop	{r3, r4, r5, pc}
 800e8f0:	200009f0 	.word	0x200009f0

0800e8f4 <_fstat_r>:
 800e8f4:	b538      	push	{r3, r4, r5, lr}
 800e8f6:	4c07      	ldr	r4, [pc, #28]	; (800e914 <_fstat_r+0x20>)
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	4608      	mov	r0, r1
 800e8fe:	4611      	mov	r1, r2
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	f7f6 f9fc 	bl	8004cfe <_fstat>
 800e906:	1c43      	adds	r3, r0, #1
 800e908:	d102      	bne.n	800e910 <_fstat_r+0x1c>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	b103      	cbz	r3, 800e910 <_fstat_r+0x1c>
 800e90e:	602b      	str	r3, [r5, #0]
 800e910:	bd38      	pop	{r3, r4, r5, pc}
 800e912:	bf00      	nop
 800e914:	200009f0 	.word	0x200009f0

0800e918 <_isatty_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4c06      	ldr	r4, [pc, #24]	; (800e934 <_isatty_r+0x1c>)
 800e91c:	2300      	movs	r3, #0
 800e91e:	4605      	mov	r5, r0
 800e920:	4608      	mov	r0, r1
 800e922:	6023      	str	r3, [r4, #0]
 800e924:	f7f6 f9fb 	bl	8004d1e <_isatty>
 800e928:	1c43      	adds	r3, r0, #1
 800e92a:	d102      	bne.n	800e932 <_isatty_r+0x1a>
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	b103      	cbz	r3, 800e932 <_isatty_r+0x1a>
 800e930:	602b      	str	r3, [r5, #0]
 800e932:	bd38      	pop	{r3, r4, r5, pc}
 800e934:	200009f0 	.word	0x200009f0

0800e938 <_lseek_r>:
 800e938:	b538      	push	{r3, r4, r5, lr}
 800e93a:	4c07      	ldr	r4, [pc, #28]	; (800e958 <_lseek_r+0x20>)
 800e93c:	4605      	mov	r5, r0
 800e93e:	4608      	mov	r0, r1
 800e940:	4611      	mov	r1, r2
 800e942:	2200      	movs	r2, #0
 800e944:	6022      	str	r2, [r4, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	f7f6 f9f4 	bl	8004d34 <_lseek>
 800e94c:	1c43      	adds	r3, r0, #1
 800e94e:	d102      	bne.n	800e956 <_lseek_r+0x1e>
 800e950:	6823      	ldr	r3, [r4, #0]
 800e952:	b103      	cbz	r3, 800e956 <_lseek_r+0x1e>
 800e954:	602b      	str	r3, [r5, #0]
 800e956:	bd38      	pop	{r3, r4, r5, pc}
 800e958:	200009f0 	.word	0x200009f0

0800e95c <_read_r>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	4c07      	ldr	r4, [pc, #28]	; (800e97c <_read_r+0x20>)
 800e960:	4605      	mov	r5, r0
 800e962:	4608      	mov	r0, r1
 800e964:	4611      	mov	r1, r2
 800e966:	2200      	movs	r2, #0
 800e968:	6022      	str	r2, [r4, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	f7f6 f99e 	bl	8004cac <_read>
 800e970:	1c43      	adds	r3, r0, #1
 800e972:	d102      	bne.n	800e97a <_read_r+0x1e>
 800e974:	6823      	ldr	r3, [r4, #0]
 800e976:	b103      	cbz	r3, 800e97a <_read_r+0x1e>
 800e978:	602b      	str	r3, [r5, #0]
 800e97a:	bd38      	pop	{r3, r4, r5, pc}
 800e97c:	200009f0 	.word	0x200009f0

0800e980 <cos>:
 800e980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e982:	ec51 0b10 	vmov	r0, r1, d0
 800e986:	4a1e      	ldr	r2, [pc, #120]	; (800ea00 <cos+0x80>)
 800e988:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e98c:	4293      	cmp	r3, r2
 800e98e:	dc06      	bgt.n	800e99e <cos+0x1e>
 800e990:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800e9f8 <cos+0x78>
 800e994:	f000 fa74 	bl	800ee80 <__kernel_cos>
 800e998:	ec51 0b10 	vmov	r0, r1, d0
 800e99c:	e007      	b.n	800e9ae <cos+0x2e>
 800e99e:	4a19      	ldr	r2, [pc, #100]	; (800ea04 <cos+0x84>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	dd09      	ble.n	800e9b8 <cos+0x38>
 800e9a4:	ee10 2a10 	vmov	r2, s0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	f7f1 fc25 	bl	80001f8 <__aeabi_dsub>
 800e9ae:	ec41 0b10 	vmov	d0, r0, r1
 800e9b2:	b005      	add	sp, #20
 800e9b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9b8:	4668      	mov	r0, sp
 800e9ba:	f000 f86d 	bl	800ea98 <__ieee754_rem_pio2>
 800e9be:	f000 0003 	and.w	r0, r0, #3
 800e9c2:	2801      	cmp	r0, #1
 800e9c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e9c8:	ed9d 0b00 	vldr	d0, [sp]
 800e9cc:	d007      	beq.n	800e9de <cos+0x5e>
 800e9ce:	2802      	cmp	r0, #2
 800e9d0:	d00e      	beq.n	800e9f0 <cos+0x70>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d0de      	beq.n	800e994 <cos+0x14>
 800e9d6:	2001      	movs	r0, #1
 800e9d8:	f000 fe5a 	bl	800f690 <__kernel_sin>
 800e9dc:	e7dc      	b.n	800e998 <cos+0x18>
 800e9de:	f000 fe57 	bl	800f690 <__kernel_sin>
 800e9e2:	ec53 2b10 	vmov	r2, r3, d0
 800e9e6:	ee10 0a10 	vmov	r0, s0
 800e9ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e9ee:	e7de      	b.n	800e9ae <cos+0x2e>
 800e9f0:	f000 fa46 	bl	800ee80 <__kernel_cos>
 800e9f4:	e7f5      	b.n	800e9e2 <cos+0x62>
 800e9f6:	bf00      	nop
	...
 800ea00:	3fe921fb 	.word	0x3fe921fb
 800ea04:	7fefffff 	.word	0x7fefffff

0800ea08 <sin>:
 800ea08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea0a:	ec51 0b10 	vmov	r0, r1, d0
 800ea0e:	4a20      	ldr	r2, [pc, #128]	; (800ea90 <sin+0x88>)
 800ea10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ea14:	4293      	cmp	r3, r2
 800ea16:	dc07      	bgt.n	800ea28 <sin+0x20>
 800ea18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ea88 <sin+0x80>
 800ea1c:	2000      	movs	r0, #0
 800ea1e:	f000 fe37 	bl	800f690 <__kernel_sin>
 800ea22:	ec51 0b10 	vmov	r0, r1, d0
 800ea26:	e007      	b.n	800ea38 <sin+0x30>
 800ea28:	4a1a      	ldr	r2, [pc, #104]	; (800ea94 <sin+0x8c>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	dd09      	ble.n	800ea42 <sin+0x3a>
 800ea2e:	ee10 2a10 	vmov	r2, s0
 800ea32:	460b      	mov	r3, r1
 800ea34:	f7f1 fbe0 	bl	80001f8 <__aeabi_dsub>
 800ea38:	ec41 0b10 	vmov	d0, r0, r1
 800ea3c:	b005      	add	sp, #20
 800ea3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea42:	4668      	mov	r0, sp
 800ea44:	f000 f828 	bl	800ea98 <__ieee754_rem_pio2>
 800ea48:	f000 0003 	and.w	r0, r0, #3
 800ea4c:	2801      	cmp	r0, #1
 800ea4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea52:	ed9d 0b00 	vldr	d0, [sp]
 800ea56:	d004      	beq.n	800ea62 <sin+0x5a>
 800ea58:	2802      	cmp	r0, #2
 800ea5a:	d005      	beq.n	800ea68 <sin+0x60>
 800ea5c:	b970      	cbnz	r0, 800ea7c <sin+0x74>
 800ea5e:	2001      	movs	r0, #1
 800ea60:	e7dd      	b.n	800ea1e <sin+0x16>
 800ea62:	f000 fa0d 	bl	800ee80 <__kernel_cos>
 800ea66:	e7dc      	b.n	800ea22 <sin+0x1a>
 800ea68:	2001      	movs	r0, #1
 800ea6a:	f000 fe11 	bl	800f690 <__kernel_sin>
 800ea6e:	ec53 2b10 	vmov	r2, r3, d0
 800ea72:	ee10 0a10 	vmov	r0, s0
 800ea76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ea7a:	e7dd      	b.n	800ea38 <sin+0x30>
 800ea7c:	f000 fa00 	bl	800ee80 <__kernel_cos>
 800ea80:	e7f5      	b.n	800ea6e <sin+0x66>
 800ea82:	bf00      	nop
 800ea84:	f3af 8000 	nop.w
	...
 800ea90:	3fe921fb 	.word	0x3fe921fb
 800ea94:	7fefffff 	.word	0x7fefffff

0800ea98 <__ieee754_rem_pio2>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	ec57 6b10 	vmov	r6, r7, d0
 800eaa0:	4bc3      	ldr	r3, [pc, #780]	; (800edb0 <__ieee754_rem_pio2+0x318>)
 800eaa2:	b08d      	sub	sp, #52	; 0x34
 800eaa4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eaa8:	4598      	cmp	r8, r3
 800eaaa:	4604      	mov	r4, r0
 800eaac:	9704      	str	r7, [sp, #16]
 800eaae:	dc07      	bgt.n	800eac0 <__ieee754_rem_pio2+0x28>
 800eab0:	2200      	movs	r2, #0
 800eab2:	2300      	movs	r3, #0
 800eab4:	ed84 0b00 	vstr	d0, [r4]
 800eab8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800eabc:	2500      	movs	r5, #0
 800eabe:	e027      	b.n	800eb10 <__ieee754_rem_pio2+0x78>
 800eac0:	4bbc      	ldr	r3, [pc, #752]	; (800edb4 <__ieee754_rem_pio2+0x31c>)
 800eac2:	4598      	cmp	r8, r3
 800eac4:	dc75      	bgt.n	800ebb2 <__ieee754_rem_pio2+0x11a>
 800eac6:	9b04      	ldr	r3, [sp, #16]
 800eac8:	4dbb      	ldr	r5, [pc, #748]	; (800edb8 <__ieee754_rem_pio2+0x320>)
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	ee10 0a10 	vmov	r0, s0
 800ead0:	a3a9      	add	r3, pc, #676	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x2e0>)
 800ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead6:	4639      	mov	r1, r7
 800ead8:	dd36      	ble.n	800eb48 <__ieee754_rem_pio2+0xb0>
 800eada:	f7f1 fb8d 	bl	80001f8 <__aeabi_dsub>
 800eade:	45a8      	cmp	r8, r5
 800eae0:	4606      	mov	r6, r0
 800eae2:	460f      	mov	r7, r1
 800eae4:	d018      	beq.n	800eb18 <__ieee754_rem_pio2+0x80>
 800eae6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x2e8>)
 800eae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaec:	f7f1 fb84 	bl	80001f8 <__aeabi_dsub>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	e9c4 2300 	strd	r2, r3, [r4]
 800eaf8:	4630      	mov	r0, r6
 800eafa:	4639      	mov	r1, r7
 800eafc:	f7f1 fb7c 	bl	80001f8 <__aeabi_dsub>
 800eb00:	a39f      	add	r3, pc, #636	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x2e8>)
 800eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb06:	f7f1 fb77 	bl	80001f8 <__aeabi_dsub>
 800eb0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eb0e:	2501      	movs	r5, #1
 800eb10:	4628      	mov	r0, r5
 800eb12:	b00d      	add	sp, #52	; 0x34
 800eb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb18:	a39b      	add	r3, pc, #620	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x2f0>)
 800eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1e:	f7f1 fb6b 	bl	80001f8 <__aeabi_dsub>
 800eb22:	a39b      	add	r3, pc, #620	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x2f8>)
 800eb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb28:	4606      	mov	r6, r0
 800eb2a:	460f      	mov	r7, r1
 800eb2c:	f7f1 fb64 	bl	80001f8 <__aeabi_dsub>
 800eb30:	4602      	mov	r2, r0
 800eb32:	460b      	mov	r3, r1
 800eb34:	e9c4 2300 	strd	r2, r3, [r4]
 800eb38:	4630      	mov	r0, r6
 800eb3a:	4639      	mov	r1, r7
 800eb3c:	f7f1 fb5c 	bl	80001f8 <__aeabi_dsub>
 800eb40:	a393      	add	r3, pc, #588	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x2f8>)
 800eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb46:	e7de      	b.n	800eb06 <__ieee754_rem_pio2+0x6e>
 800eb48:	f7f1 fb58 	bl	80001fc <__adddf3>
 800eb4c:	45a8      	cmp	r8, r5
 800eb4e:	4606      	mov	r6, r0
 800eb50:	460f      	mov	r7, r1
 800eb52:	d016      	beq.n	800eb82 <__ieee754_rem_pio2+0xea>
 800eb54:	a38a      	add	r3, pc, #552	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x2e8>)
 800eb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5a:	f7f1 fb4f 	bl	80001fc <__adddf3>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	e9c4 2300 	strd	r2, r3, [r4]
 800eb66:	4630      	mov	r0, r6
 800eb68:	4639      	mov	r1, r7
 800eb6a:	f7f1 fb45 	bl	80001f8 <__aeabi_dsub>
 800eb6e:	a384      	add	r3, pc, #528	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x2e8>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	f7f1 fb42 	bl	80001fc <__adddf3>
 800eb78:	f04f 35ff 	mov.w	r5, #4294967295
 800eb7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eb80:	e7c6      	b.n	800eb10 <__ieee754_rem_pio2+0x78>
 800eb82:	a381      	add	r3, pc, #516	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x2f0>)
 800eb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb88:	f7f1 fb38 	bl	80001fc <__adddf3>
 800eb8c:	a380      	add	r3, pc, #512	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x2f8>)
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	f7f1 fb31 	bl	80001fc <__adddf3>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e9c4 2300 	strd	r2, r3, [r4]
 800eba2:	4630      	mov	r0, r6
 800eba4:	4639      	mov	r1, r7
 800eba6:	f7f1 fb27 	bl	80001f8 <__aeabi_dsub>
 800ebaa:	a379      	add	r3, pc, #484	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x2f8>)
 800ebac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb0:	e7e0      	b.n	800eb74 <__ieee754_rem_pio2+0xdc>
 800ebb2:	4b82      	ldr	r3, [pc, #520]	; (800edbc <__ieee754_rem_pio2+0x324>)
 800ebb4:	4598      	cmp	r8, r3
 800ebb6:	f300 80d0 	bgt.w	800ed5a <__ieee754_rem_pio2+0x2c2>
 800ebba:	f000 fe23 	bl	800f804 <fabs>
 800ebbe:	ec57 6b10 	vmov	r6, r7, d0
 800ebc2:	ee10 0a10 	vmov	r0, s0
 800ebc6:	a374      	add	r3, pc, #464	; (adr r3, 800ed98 <__ieee754_rem_pio2+0x300>)
 800ebc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebcc:	4639      	mov	r1, r7
 800ebce:	f7f1 fccb 	bl	8000568 <__aeabi_dmul>
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	4b7a      	ldr	r3, [pc, #488]	; (800edc0 <__ieee754_rem_pio2+0x328>)
 800ebd6:	f7f1 fb11 	bl	80001fc <__adddf3>
 800ebda:	f7f1 ff5f 	bl	8000a9c <__aeabi_d2iz>
 800ebde:	4605      	mov	r5, r0
 800ebe0:	f7f1 fc58 	bl	8000494 <__aeabi_i2d>
 800ebe4:	a364      	add	r3, pc, #400	; (adr r3, 800ed78 <__ieee754_rem_pio2+0x2e0>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebee:	f7f1 fcbb 	bl	8000568 <__aeabi_dmul>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	4639      	mov	r1, r7
 800ebfa:	f7f1 fafd 	bl	80001f8 <__aeabi_dsub>
 800ebfe:	a360      	add	r3, pc, #384	; (adr r3, 800ed80 <__ieee754_rem_pio2+0x2e8>)
 800ec00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec04:	4682      	mov	sl, r0
 800ec06:	468b      	mov	fp, r1
 800ec08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec0c:	f7f1 fcac 	bl	8000568 <__aeabi_dmul>
 800ec10:	2d1f      	cmp	r5, #31
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	dc0c      	bgt.n	800ec32 <__ieee754_rem_pio2+0x19a>
 800ec18:	1e6a      	subs	r2, r5, #1
 800ec1a:	4b6a      	ldr	r3, [pc, #424]	; (800edc4 <__ieee754_rem_pio2+0x32c>)
 800ec1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec20:	4543      	cmp	r3, r8
 800ec22:	d006      	beq.n	800ec32 <__ieee754_rem_pio2+0x19a>
 800ec24:	4632      	mov	r2, r6
 800ec26:	463b      	mov	r3, r7
 800ec28:	4650      	mov	r0, sl
 800ec2a:	4659      	mov	r1, fp
 800ec2c:	f7f1 fae4 	bl	80001f8 <__aeabi_dsub>
 800ec30:	e00e      	b.n	800ec50 <__ieee754_rem_pio2+0x1b8>
 800ec32:	4632      	mov	r2, r6
 800ec34:	463b      	mov	r3, r7
 800ec36:	4650      	mov	r0, sl
 800ec38:	4659      	mov	r1, fp
 800ec3a:	f7f1 fadd 	bl	80001f8 <__aeabi_dsub>
 800ec3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec42:	9305      	str	r3, [sp, #20]
 800ec44:	9a05      	ldr	r2, [sp, #20]
 800ec46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	2b10      	cmp	r3, #16
 800ec4e:	dc02      	bgt.n	800ec56 <__ieee754_rem_pio2+0x1be>
 800ec50:	e9c4 0100 	strd	r0, r1, [r4]
 800ec54:	e039      	b.n	800ecca <__ieee754_rem_pio2+0x232>
 800ec56:	a34c      	add	r3, pc, #304	; (adr r3, 800ed88 <__ieee754_rem_pio2+0x2f0>)
 800ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec60:	f7f1 fc82 	bl	8000568 <__aeabi_dmul>
 800ec64:	4606      	mov	r6, r0
 800ec66:	460f      	mov	r7, r1
 800ec68:	4602      	mov	r2, r0
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	4650      	mov	r0, sl
 800ec6e:	4659      	mov	r1, fp
 800ec70:	f7f1 fac2 	bl	80001f8 <__aeabi_dsub>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	4680      	mov	r8, r0
 800ec7a:	4689      	mov	r9, r1
 800ec7c:	4650      	mov	r0, sl
 800ec7e:	4659      	mov	r1, fp
 800ec80:	f7f1 faba 	bl	80001f8 <__aeabi_dsub>
 800ec84:	4632      	mov	r2, r6
 800ec86:	463b      	mov	r3, r7
 800ec88:	f7f1 fab6 	bl	80001f8 <__aeabi_dsub>
 800ec8c:	a340      	add	r3, pc, #256	; (adr r3, 800ed90 <__ieee754_rem_pio2+0x2f8>)
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	4606      	mov	r6, r0
 800ec94:	460f      	mov	r7, r1
 800ec96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec9a:	f7f1 fc65 	bl	8000568 <__aeabi_dmul>
 800ec9e:	4632      	mov	r2, r6
 800eca0:	463b      	mov	r3, r7
 800eca2:	f7f1 faa9 	bl	80001f8 <__aeabi_dsub>
 800eca6:	4602      	mov	r2, r0
 800eca8:	460b      	mov	r3, r1
 800ecaa:	4606      	mov	r6, r0
 800ecac:	460f      	mov	r7, r1
 800ecae:	4640      	mov	r0, r8
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	f7f1 faa1 	bl	80001f8 <__aeabi_dsub>
 800ecb6:	9a05      	ldr	r2, [sp, #20]
 800ecb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	2b31      	cmp	r3, #49	; 0x31
 800ecc0:	dc20      	bgt.n	800ed04 <__ieee754_rem_pio2+0x26c>
 800ecc2:	e9c4 0100 	strd	r0, r1, [r4]
 800ecc6:	46c2      	mov	sl, r8
 800ecc8:	46cb      	mov	fp, r9
 800ecca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ecce:	4650      	mov	r0, sl
 800ecd0:	4642      	mov	r2, r8
 800ecd2:	464b      	mov	r3, r9
 800ecd4:	4659      	mov	r1, fp
 800ecd6:	f7f1 fa8f 	bl	80001f8 <__aeabi_dsub>
 800ecda:	463b      	mov	r3, r7
 800ecdc:	4632      	mov	r2, r6
 800ecde:	f7f1 fa8b 	bl	80001f8 <__aeabi_dsub>
 800ece2:	9b04      	ldr	r3, [sp, #16]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ecea:	f6bf af11 	bge.w	800eb10 <__ieee754_rem_pio2+0x78>
 800ecee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ecf2:	6063      	str	r3, [r4, #4]
 800ecf4:	f8c4 8000 	str.w	r8, [r4]
 800ecf8:	60a0      	str	r0, [r4, #8]
 800ecfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecfe:	60e3      	str	r3, [r4, #12]
 800ed00:	426d      	negs	r5, r5
 800ed02:	e705      	b.n	800eb10 <__ieee754_rem_pio2+0x78>
 800ed04:	a326      	add	r3, pc, #152	; (adr r3, 800eda0 <__ieee754_rem_pio2+0x308>)
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed0e:	f7f1 fc2b 	bl	8000568 <__aeabi_dmul>
 800ed12:	4606      	mov	r6, r0
 800ed14:	460f      	mov	r7, r1
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	4649      	mov	r1, r9
 800ed1e:	f7f1 fa6b 	bl	80001f8 <__aeabi_dsub>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	4682      	mov	sl, r0
 800ed28:	468b      	mov	fp, r1
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	f7f1 fa63 	bl	80001f8 <__aeabi_dsub>
 800ed32:	4632      	mov	r2, r6
 800ed34:	463b      	mov	r3, r7
 800ed36:	f7f1 fa5f 	bl	80001f8 <__aeabi_dsub>
 800ed3a:	a31b      	add	r3, pc, #108	; (adr r3, 800eda8 <__ieee754_rem_pio2+0x310>)
 800ed3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed40:	4606      	mov	r6, r0
 800ed42:	460f      	mov	r7, r1
 800ed44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed48:	f7f1 fc0e 	bl	8000568 <__aeabi_dmul>
 800ed4c:	4632      	mov	r2, r6
 800ed4e:	463b      	mov	r3, r7
 800ed50:	f7f1 fa52 	bl	80001f8 <__aeabi_dsub>
 800ed54:	4606      	mov	r6, r0
 800ed56:	460f      	mov	r7, r1
 800ed58:	e764      	b.n	800ec24 <__ieee754_rem_pio2+0x18c>
 800ed5a:	4b1b      	ldr	r3, [pc, #108]	; (800edc8 <__ieee754_rem_pio2+0x330>)
 800ed5c:	4598      	cmp	r8, r3
 800ed5e:	dd35      	ble.n	800edcc <__ieee754_rem_pio2+0x334>
 800ed60:	ee10 2a10 	vmov	r2, s0
 800ed64:	463b      	mov	r3, r7
 800ed66:	4630      	mov	r0, r6
 800ed68:	4639      	mov	r1, r7
 800ed6a:	f7f1 fa45 	bl	80001f8 <__aeabi_dsub>
 800ed6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed72:	e9c4 0100 	strd	r0, r1, [r4]
 800ed76:	e6a1      	b.n	800eabc <__ieee754_rem_pio2+0x24>
 800ed78:	54400000 	.word	0x54400000
 800ed7c:	3ff921fb 	.word	0x3ff921fb
 800ed80:	1a626331 	.word	0x1a626331
 800ed84:	3dd0b461 	.word	0x3dd0b461
 800ed88:	1a600000 	.word	0x1a600000
 800ed8c:	3dd0b461 	.word	0x3dd0b461
 800ed90:	2e037073 	.word	0x2e037073
 800ed94:	3ba3198a 	.word	0x3ba3198a
 800ed98:	6dc9c883 	.word	0x6dc9c883
 800ed9c:	3fe45f30 	.word	0x3fe45f30
 800eda0:	2e000000 	.word	0x2e000000
 800eda4:	3ba3198a 	.word	0x3ba3198a
 800eda8:	252049c1 	.word	0x252049c1
 800edac:	397b839a 	.word	0x397b839a
 800edb0:	3fe921fb 	.word	0x3fe921fb
 800edb4:	4002d97b 	.word	0x4002d97b
 800edb8:	3ff921fb 	.word	0x3ff921fb
 800edbc:	413921fb 	.word	0x413921fb
 800edc0:	3fe00000 	.word	0x3fe00000
 800edc4:	080117b0 	.word	0x080117b0
 800edc8:	7fefffff 	.word	0x7fefffff
 800edcc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800edd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800edd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800edd8:	4630      	mov	r0, r6
 800edda:	460f      	mov	r7, r1
 800eddc:	f7f1 fe5e 	bl	8000a9c <__aeabi_d2iz>
 800ede0:	f7f1 fb58 	bl	8000494 <__aeabi_i2d>
 800ede4:	4602      	mov	r2, r0
 800ede6:	460b      	mov	r3, r1
 800ede8:	4630      	mov	r0, r6
 800edea:	4639      	mov	r1, r7
 800edec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800edf0:	f7f1 fa02 	bl	80001f8 <__aeabi_dsub>
 800edf4:	2200      	movs	r2, #0
 800edf6:	4b1f      	ldr	r3, [pc, #124]	; (800ee74 <__ieee754_rem_pio2+0x3dc>)
 800edf8:	f7f1 fbb6 	bl	8000568 <__aeabi_dmul>
 800edfc:	460f      	mov	r7, r1
 800edfe:	4606      	mov	r6, r0
 800ee00:	f7f1 fe4c 	bl	8000a9c <__aeabi_d2iz>
 800ee04:	f7f1 fb46 	bl	8000494 <__aeabi_i2d>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	4630      	mov	r0, r6
 800ee0e:	4639      	mov	r1, r7
 800ee10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ee14:	f7f1 f9f0 	bl	80001f8 <__aeabi_dsub>
 800ee18:	2200      	movs	r2, #0
 800ee1a:	4b16      	ldr	r3, [pc, #88]	; (800ee74 <__ieee754_rem_pio2+0x3dc>)
 800ee1c:	f7f1 fba4 	bl	8000568 <__aeabi_dmul>
 800ee20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ee24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ee28:	f04f 0803 	mov.w	r8, #3
 800ee2c:	2600      	movs	r6, #0
 800ee2e:	2700      	movs	r7, #0
 800ee30:	4632      	mov	r2, r6
 800ee32:	463b      	mov	r3, r7
 800ee34:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ee38:	f108 3aff 	add.w	sl, r8, #4294967295
 800ee3c:	f7f1 fdfc 	bl	8000a38 <__aeabi_dcmpeq>
 800ee40:	b9b0      	cbnz	r0, 800ee70 <__ieee754_rem_pio2+0x3d8>
 800ee42:	4b0d      	ldr	r3, [pc, #52]	; (800ee78 <__ieee754_rem_pio2+0x3e0>)
 800ee44:	9301      	str	r3, [sp, #4]
 800ee46:	2302      	movs	r3, #2
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	462a      	mov	r2, r5
 800ee4c:	4643      	mov	r3, r8
 800ee4e:	4621      	mov	r1, r4
 800ee50:	a806      	add	r0, sp, #24
 800ee52:	f000 f8dd 	bl	800f010 <__kernel_rem_pio2>
 800ee56:	9b04      	ldr	r3, [sp, #16]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	f6bf ae58 	bge.w	800eb10 <__ieee754_rem_pio2+0x78>
 800ee60:	6863      	ldr	r3, [r4, #4]
 800ee62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee66:	6063      	str	r3, [r4, #4]
 800ee68:	68e3      	ldr	r3, [r4, #12]
 800ee6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ee6e:	e746      	b.n	800ecfe <__ieee754_rem_pio2+0x266>
 800ee70:	46d0      	mov	r8, sl
 800ee72:	e7dd      	b.n	800ee30 <__ieee754_rem_pio2+0x398>
 800ee74:	41700000 	.word	0x41700000
 800ee78:	08011830 	.word	0x08011830
 800ee7c:	00000000 	.word	0x00000000

0800ee80 <__kernel_cos>:
 800ee80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	ec59 8b10 	vmov	r8, r9, d0
 800ee88:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ee8c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ee90:	ed2d 8b02 	vpush	{d8}
 800ee94:	eeb0 8a41 	vmov.f32	s16, s2
 800ee98:	eef0 8a61 	vmov.f32	s17, s3
 800ee9c:	da07      	bge.n	800eeae <__kernel_cos+0x2e>
 800ee9e:	ee10 0a10 	vmov	r0, s0
 800eea2:	4649      	mov	r1, r9
 800eea4:	f7f1 fdfa 	bl	8000a9c <__aeabi_d2iz>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	f000 8089 	beq.w	800efc0 <__kernel_cos+0x140>
 800eeae:	4642      	mov	r2, r8
 800eeb0:	464b      	mov	r3, r9
 800eeb2:	4640      	mov	r0, r8
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	f7f1 fb57 	bl	8000568 <__aeabi_dmul>
 800eeba:	2200      	movs	r2, #0
 800eebc:	4b4e      	ldr	r3, [pc, #312]	; (800eff8 <__kernel_cos+0x178>)
 800eebe:	4604      	mov	r4, r0
 800eec0:	460d      	mov	r5, r1
 800eec2:	f7f1 fb51 	bl	8000568 <__aeabi_dmul>
 800eec6:	a340      	add	r3, pc, #256	; (adr r3, 800efc8 <__kernel_cos+0x148>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	4682      	mov	sl, r0
 800eece:	468b      	mov	fp, r1
 800eed0:	4620      	mov	r0, r4
 800eed2:	4629      	mov	r1, r5
 800eed4:	f7f1 fb48 	bl	8000568 <__aeabi_dmul>
 800eed8:	a33d      	add	r3, pc, #244	; (adr r3, 800efd0 <__kernel_cos+0x150>)
 800eeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eede:	f7f1 f98d 	bl	80001fc <__adddf3>
 800eee2:	4622      	mov	r2, r4
 800eee4:	462b      	mov	r3, r5
 800eee6:	f7f1 fb3f 	bl	8000568 <__aeabi_dmul>
 800eeea:	a33b      	add	r3, pc, #236	; (adr r3, 800efd8 <__kernel_cos+0x158>)
 800eeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef0:	f7f1 f982 	bl	80001f8 <__aeabi_dsub>
 800eef4:	4622      	mov	r2, r4
 800eef6:	462b      	mov	r3, r5
 800eef8:	f7f1 fb36 	bl	8000568 <__aeabi_dmul>
 800eefc:	a338      	add	r3, pc, #224	; (adr r3, 800efe0 <__kernel_cos+0x160>)
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	f7f1 f97b 	bl	80001fc <__adddf3>
 800ef06:	4622      	mov	r2, r4
 800ef08:	462b      	mov	r3, r5
 800ef0a:	f7f1 fb2d 	bl	8000568 <__aeabi_dmul>
 800ef0e:	a336      	add	r3, pc, #216	; (adr r3, 800efe8 <__kernel_cos+0x168>)
 800ef10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef14:	f7f1 f970 	bl	80001f8 <__aeabi_dsub>
 800ef18:	4622      	mov	r2, r4
 800ef1a:	462b      	mov	r3, r5
 800ef1c:	f7f1 fb24 	bl	8000568 <__aeabi_dmul>
 800ef20:	a333      	add	r3, pc, #204	; (adr r3, 800eff0 <__kernel_cos+0x170>)
 800ef22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef26:	f7f1 f969 	bl	80001fc <__adddf3>
 800ef2a:	4622      	mov	r2, r4
 800ef2c:	462b      	mov	r3, r5
 800ef2e:	f7f1 fb1b 	bl	8000568 <__aeabi_dmul>
 800ef32:	4622      	mov	r2, r4
 800ef34:	462b      	mov	r3, r5
 800ef36:	f7f1 fb17 	bl	8000568 <__aeabi_dmul>
 800ef3a:	ec53 2b18 	vmov	r2, r3, d8
 800ef3e:	4604      	mov	r4, r0
 800ef40:	460d      	mov	r5, r1
 800ef42:	4640      	mov	r0, r8
 800ef44:	4649      	mov	r1, r9
 800ef46:	f7f1 fb0f 	bl	8000568 <__aeabi_dmul>
 800ef4a:	460b      	mov	r3, r1
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	4629      	mov	r1, r5
 800ef50:	4620      	mov	r0, r4
 800ef52:	f7f1 f951 	bl	80001f8 <__aeabi_dsub>
 800ef56:	4b29      	ldr	r3, [pc, #164]	; (800effc <__kernel_cos+0x17c>)
 800ef58:	429e      	cmp	r6, r3
 800ef5a:	4680      	mov	r8, r0
 800ef5c:	4689      	mov	r9, r1
 800ef5e:	dc11      	bgt.n	800ef84 <__kernel_cos+0x104>
 800ef60:	4602      	mov	r2, r0
 800ef62:	460b      	mov	r3, r1
 800ef64:	4650      	mov	r0, sl
 800ef66:	4659      	mov	r1, fp
 800ef68:	f7f1 f946 	bl	80001f8 <__aeabi_dsub>
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	4924      	ldr	r1, [pc, #144]	; (800f000 <__kernel_cos+0x180>)
 800ef70:	4602      	mov	r2, r0
 800ef72:	2000      	movs	r0, #0
 800ef74:	f7f1 f940 	bl	80001f8 <__aeabi_dsub>
 800ef78:	ecbd 8b02 	vpop	{d8}
 800ef7c:	ec41 0b10 	vmov	d0, r0, r1
 800ef80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef84:	4b1f      	ldr	r3, [pc, #124]	; (800f004 <__kernel_cos+0x184>)
 800ef86:	491e      	ldr	r1, [pc, #120]	; (800f000 <__kernel_cos+0x180>)
 800ef88:	429e      	cmp	r6, r3
 800ef8a:	bfcc      	ite	gt
 800ef8c:	4d1e      	ldrgt	r5, [pc, #120]	; (800f008 <__kernel_cos+0x188>)
 800ef8e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ef92:	2400      	movs	r4, #0
 800ef94:	4622      	mov	r2, r4
 800ef96:	462b      	mov	r3, r5
 800ef98:	2000      	movs	r0, #0
 800ef9a:	f7f1 f92d 	bl	80001f8 <__aeabi_dsub>
 800ef9e:	4622      	mov	r2, r4
 800efa0:	4606      	mov	r6, r0
 800efa2:	460f      	mov	r7, r1
 800efa4:	462b      	mov	r3, r5
 800efa6:	4650      	mov	r0, sl
 800efa8:	4659      	mov	r1, fp
 800efaa:	f7f1 f925 	bl	80001f8 <__aeabi_dsub>
 800efae:	4642      	mov	r2, r8
 800efb0:	464b      	mov	r3, r9
 800efb2:	f7f1 f921 	bl	80001f8 <__aeabi_dsub>
 800efb6:	4602      	mov	r2, r0
 800efb8:	460b      	mov	r3, r1
 800efba:	4630      	mov	r0, r6
 800efbc:	4639      	mov	r1, r7
 800efbe:	e7d9      	b.n	800ef74 <__kernel_cos+0xf4>
 800efc0:	2000      	movs	r0, #0
 800efc2:	490f      	ldr	r1, [pc, #60]	; (800f000 <__kernel_cos+0x180>)
 800efc4:	e7d8      	b.n	800ef78 <__kernel_cos+0xf8>
 800efc6:	bf00      	nop
 800efc8:	be8838d4 	.word	0xbe8838d4
 800efcc:	bda8fae9 	.word	0xbda8fae9
 800efd0:	bdb4b1c4 	.word	0xbdb4b1c4
 800efd4:	3e21ee9e 	.word	0x3e21ee9e
 800efd8:	809c52ad 	.word	0x809c52ad
 800efdc:	3e927e4f 	.word	0x3e927e4f
 800efe0:	19cb1590 	.word	0x19cb1590
 800efe4:	3efa01a0 	.word	0x3efa01a0
 800efe8:	16c15177 	.word	0x16c15177
 800efec:	3f56c16c 	.word	0x3f56c16c
 800eff0:	5555554c 	.word	0x5555554c
 800eff4:	3fa55555 	.word	0x3fa55555
 800eff8:	3fe00000 	.word	0x3fe00000
 800effc:	3fd33332 	.word	0x3fd33332
 800f000:	3ff00000 	.word	0x3ff00000
 800f004:	3fe90000 	.word	0x3fe90000
 800f008:	3fd20000 	.word	0x3fd20000
 800f00c:	00000000 	.word	0x00000000

0800f010 <__kernel_rem_pio2>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	ed2d 8b02 	vpush	{d8}
 800f018:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f01c:	1ed4      	subs	r4, r2, #3
 800f01e:	9308      	str	r3, [sp, #32]
 800f020:	9101      	str	r1, [sp, #4]
 800f022:	4bc5      	ldr	r3, [pc, #788]	; (800f338 <__kernel_rem_pio2+0x328>)
 800f024:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f026:	9009      	str	r0, [sp, #36]	; 0x24
 800f028:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f02c:	9304      	str	r3, [sp, #16]
 800f02e:	9b08      	ldr	r3, [sp, #32]
 800f030:	3b01      	subs	r3, #1
 800f032:	9307      	str	r3, [sp, #28]
 800f034:	2318      	movs	r3, #24
 800f036:	fb94 f4f3 	sdiv	r4, r4, r3
 800f03a:	f06f 0317 	mvn.w	r3, #23
 800f03e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800f042:	fb04 3303 	mla	r3, r4, r3, r3
 800f046:	eb03 0a02 	add.w	sl, r3, r2
 800f04a:	9b04      	ldr	r3, [sp, #16]
 800f04c:	9a07      	ldr	r2, [sp, #28]
 800f04e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800f328 <__kernel_rem_pio2+0x318>
 800f052:	eb03 0802 	add.w	r8, r3, r2
 800f056:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f058:	1aa7      	subs	r7, r4, r2
 800f05a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f05e:	ae22      	add	r6, sp, #136	; 0x88
 800f060:	2500      	movs	r5, #0
 800f062:	4545      	cmp	r5, r8
 800f064:	dd13      	ble.n	800f08e <__kernel_rem_pio2+0x7e>
 800f066:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f328 <__kernel_rem_pio2+0x318>
 800f06a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f06e:	2600      	movs	r6, #0
 800f070:	9b04      	ldr	r3, [sp, #16]
 800f072:	429e      	cmp	r6, r3
 800f074:	dc32      	bgt.n	800f0dc <__kernel_rem_pio2+0xcc>
 800f076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f078:	9302      	str	r3, [sp, #8]
 800f07a:	9b08      	ldr	r3, [sp, #32]
 800f07c:	199d      	adds	r5, r3, r6
 800f07e:	ab22      	add	r3, sp, #136	; 0x88
 800f080:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f084:	9306      	str	r3, [sp, #24]
 800f086:	ec59 8b18 	vmov	r8, r9, d8
 800f08a:	2700      	movs	r7, #0
 800f08c:	e01f      	b.n	800f0ce <__kernel_rem_pio2+0xbe>
 800f08e:	42ef      	cmn	r7, r5
 800f090:	d407      	bmi.n	800f0a2 <__kernel_rem_pio2+0x92>
 800f092:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f096:	f7f1 f9fd 	bl	8000494 <__aeabi_i2d>
 800f09a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f09e:	3501      	adds	r5, #1
 800f0a0:	e7df      	b.n	800f062 <__kernel_rem_pio2+0x52>
 800f0a2:	ec51 0b18 	vmov	r0, r1, d8
 800f0a6:	e7f8      	b.n	800f09a <__kernel_rem_pio2+0x8a>
 800f0a8:	9906      	ldr	r1, [sp, #24]
 800f0aa:	9d02      	ldr	r5, [sp, #8]
 800f0ac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800f0b0:	9106      	str	r1, [sp, #24]
 800f0b2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800f0b6:	9502      	str	r5, [sp, #8]
 800f0b8:	f7f1 fa56 	bl	8000568 <__aeabi_dmul>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4640      	mov	r0, r8
 800f0c2:	4649      	mov	r1, r9
 800f0c4:	f7f1 f89a 	bl	80001fc <__adddf3>
 800f0c8:	3701      	adds	r7, #1
 800f0ca:	4680      	mov	r8, r0
 800f0cc:	4689      	mov	r9, r1
 800f0ce:	9b07      	ldr	r3, [sp, #28]
 800f0d0:	429f      	cmp	r7, r3
 800f0d2:	dde9      	ble.n	800f0a8 <__kernel_rem_pio2+0x98>
 800f0d4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800f0d8:	3601      	adds	r6, #1
 800f0da:	e7c9      	b.n	800f070 <__kernel_rem_pio2+0x60>
 800f0dc:	9b04      	ldr	r3, [sp, #16]
 800f0de:	aa0e      	add	r2, sp, #56	; 0x38
 800f0e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0e4:	930c      	str	r3, [sp, #48]	; 0x30
 800f0e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f0e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f0ec:	9c04      	ldr	r4, [sp, #16]
 800f0ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f0:	ab9a      	add	r3, sp, #616	; 0x268
 800f0f2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800f0f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f0fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f0fe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800f102:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800f106:	ab9a      	add	r3, sp, #616	; 0x268
 800f108:	445b      	add	r3, fp
 800f10a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800f10e:	2500      	movs	r5, #0
 800f110:	1b63      	subs	r3, r4, r5
 800f112:	2b00      	cmp	r3, #0
 800f114:	dc78      	bgt.n	800f208 <__kernel_rem_pio2+0x1f8>
 800f116:	4650      	mov	r0, sl
 800f118:	ec49 8b10 	vmov	d0, r8, r9
 800f11c:	f000 fc00 	bl	800f920 <scalbn>
 800f120:	ec57 6b10 	vmov	r6, r7, d0
 800f124:	2200      	movs	r2, #0
 800f126:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f12a:	ee10 0a10 	vmov	r0, s0
 800f12e:	4639      	mov	r1, r7
 800f130:	f7f1 fa1a 	bl	8000568 <__aeabi_dmul>
 800f134:	ec41 0b10 	vmov	d0, r0, r1
 800f138:	f000 fb6e 	bl	800f818 <floor>
 800f13c:	2200      	movs	r2, #0
 800f13e:	ec51 0b10 	vmov	r0, r1, d0
 800f142:	4b7e      	ldr	r3, [pc, #504]	; (800f33c <__kernel_rem_pio2+0x32c>)
 800f144:	f7f1 fa10 	bl	8000568 <__aeabi_dmul>
 800f148:	4602      	mov	r2, r0
 800f14a:	460b      	mov	r3, r1
 800f14c:	4630      	mov	r0, r6
 800f14e:	4639      	mov	r1, r7
 800f150:	f7f1 f852 	bl	80001f8 <__aeabi_dsub>
 800f154:	460f      	mov	r7, r1
 800f156:	4606      	mov	r6, r0
 800f158:	f7f1 fca0 	bl	8000a9c <__aeabi_d2iz>
 800f15c:	9006      	str	r0, [sp, #24]
 800f15e:	f7f1 f999 	bl	8000494 <__aeabi_i2d>
 800f162:	4602      	mov	r2, r0
 800f164:	460b      	mov	r3, r1
 800f166:	4630      	mov	r0, r6
 800f168:	4639      	mov	r1, r7
 800f16a:	f7f1 f845 	bl	80001f8 <__aeabi_dsub>
 800f16e:	f1ba 0f00 	cmp.w	sl, #0
 800f172:	4606      	mov	r6, r0
 800f174:	460f      	mov	r7, r1
 800f176:	dd6c      	ble.n	800f252 <__kernel_rem_pio2+0x242>
 800f178:	1e62      	subs	r2, r4, #1
 800f17a:	ab0e      	add	r3, sp, #56	; 0x38
 800f17c:	f1ca 0118 	rsb	r1, sl, #24
 800f180:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f184:	9d06      	ldr	r5, [sp, #24]
 800f186:	fa40 f301 	asr.w	r3, r0, r1
 800f18a:	441d      	add	r5, r3
 800f18c:	408b      	lsls	r3, r1
 800f18e:	1ac0      	subs	r0, r0, r3
 800f190:	ab0e      	add	r3, sp, #56	; 0x38
 800f192:	9506      	str	r5, [sp, #24]
 800f194:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f198:	f1ca 0317 	rsb	r3, sl, #23
 800f19c:	fa40 f303 	asr.w	r3, r0, r3
 800f1a0:	9302      	str	r3, [sp, #8]
 800f1a2:	9b02      	ldr	r3, [sp, #8]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	dd62      	ble.n	800f26e <__kernel_rem_pio2+0x25e>
 800f1a8:	9b06      	ldr	r3, [sp, #24]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	9306      	str	r3, [sp, #24]
 800f1b0:	4615      	mov	r5, r2
 800f1b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f1b6:	4294      	cmp	r4, r2
 800f1b8:	f300 8095 	bgt.w	800f2e6 <__kernel_rem_pio2+0x2d6>
 800f1bc:	f1ba 0f00 	cmp.w	sl, #0
 800f1c0:	dd07      	ble.n	800f1d2 <__kernel_rem_pio2+0x1c2>
 800f1c2:	f1ba 0f01 	cmp.w	sl, #1
 800f1c6:	f000 80a2 	beq.w	800f30e <__kernel_rem_pio2+0x2fe>
 800f1ca:	f1ba 0f02 	cmp.w	sl, #2
 800f1ce:	f000 80c1 	beq.w	800f354 <__kernel_rem_pio2+0x344>
 800f1d2:	9b02      	ldr	r3, [sp, #8]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	d14a      	bne.n	800f26e <__kernel_rem_pio2+0x25e>
 800f1d8:	4632      	mov	r2, r6
 800f1da:	463b      	mov	r3, r7
 800f1dc:	2000      	movs	r0, #0
 800f1de:	4958      	ldr	r1, [pc, #352]	; (800f340 <__kernel_rem_pio2+0x330>)
 800f1e0:	f7f1 f80a 	bl	80001f8 <__aeabi_dsub>
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	460f      	mov	r7, r1
 800f1e8:	2d00      	cmp	r5, #0
 800f1ea:	d040      	beq.n	800f26e <__kernel_rem_pio2+0x25e>
 800f1ec:	4650      	mov	r0, sl
 800f1ee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800f330 <__kernel_rem_pio2+0x320>
 800f1f2:	f000 fb95 	bl	800f920 <scalbn>
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	ec53 2b10 	vmov	r2, r3, d0
 800f1fe:	f7f0 fffb 	bl	80001f8 <__aeabi_dsub>
 800f202:	4606      	mov	r6, r0
 800f204:	460f      	mov	r7, r1
 800f206:	e032      	b.n	800f26e <__kernel_rem_pio2+0x25e>
 800f208:	2200      	movs	r2, #0
 800f20a:	4b4e      	ldr	r3, [pc, #312]	; (800f344 <__kernel_rem_pio2+0x334>)
 800f20c:	4640      	mov	r0, r8
 800f20e:	4649      	mov	r1, r9
 800f210:	f7f1 f9aa 	bl	8000568 <__aeabi_dmul>
 800f214:	f7f1 fc42 	bl	8000a9c <__aeabi_d2iz>
 800f218:	f7f1 f93c 	bl	8000494 <__aeabi_i2d>
 800f21c:	2200      	movs	r2, #0
 800f21e:	4b4a      	ldr	r3, [pc, #296]	; (800f348 <__kernel_rem_pio2+0x338>)
 800f220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f224:	f7f1 f9a0 	bl	8000568 <__aeabi_dmul>
 800f228:	4602      	mov	r2, r0
 800f22a:	460b      	mov	r3, r1
 800f22c:	4640      	mov	r0, r8
 800f22e:	4649      	mov	r1, r9
 800f230:	f7f0 ffe2 	bl	80001f8 <__aeabi_dsub>
 800f234:	f7f1 fc32 	bl	8000a9c <__aeabi_d2iz>
 800f238:	ab0e      	add	r3, sp, #56	; 0x38
 800f23a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800f23e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f246:	f7f0 ffd9 	bl	80001fc <__adddf3>
 800f24a:	3501      	adds	r5, #1
 800f24c:	4680      	mov	r8, r0
 800f24e:	4689      	mov	r9, r1
 800f250:	e75e      	b.n	800f110 <__kernel_rem_pio2+0x100>
 800f252:	d105      	bne.n	800f260 <__kernel_rem_pio2+0x250>
 800f254:	1e63      	subs	r3, r4, #1
 800f256:	aa0e      	add	r2, sp, #56	; 0x38
 800f258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f25c:	15c3      	asrs	r3, r0, #23
 800f25e:	e79f      	b.n	800f1a0 <__kernel_rem_pio2+0x190>
 800f260:	2200      	movs	r2, #0
 800f262:	4b3a      	ldr	r3, [pc, #232]	; (800f34c <__kernel_rem_pio2+0x33c>)
 800f264:	f7f1 fc06 	bl	8000a74 <__aeabi_dcmpge>
 800f268:	2800      	cmp	r0, #0
 800f26a:	d139      	bne.n	800f2e0 <__kernel_rem_pio2+0x2d0>
 800f26c:	9002      	str	r0, [sp, #8]
 800f26e:	2200      	movs	r2, #0
 800f270:	2300      	movs	r3, #0
 800f272:	4630      	mov	r0, r6
 800f274:	4639      	mov	r1, r7
 800f276:	f7f1 fbdf 	bl	8000a38 <__aeabi_dcmpeq>
 800f27a:	2800      	cmp	r0, #0
 800f27c:	f000 80c7 	beq.w	800f40e <__kernel_rem_pio2+0x3fe>
 800f280:	1e65      	subs	r5, r4, #1
 800f282:	462b      	mov	r3, r5
 800f284:	2200      	movs	r2, #0
 800f286:	9904      	ldr	r1, [sp, #16]
 800f288:	428b      	cmp	r3, r1
 800f28a:	da6a      	bge.n	800f362 <__kernel_rem_pio2+0x352>
 800f28c:	2a00      	cmp	r2, #0
 800f28e:	f000 8088 	beq.w	800f3a2 <__kernel_rem_pio2+0x392>
 800f292:	ab0e      	add	r3, sp, #56	; 0x38
 800f294:	f1aa 0a18 	sub.w	sl, sl, #24
 800f298:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	f000 80b4 	beq.w	800f40a <__kernel_rem_pio2+0x3fa>
 800f2a2:	4650      	mov	r0, sl
 800f2a4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800f330 <__kernel_rem_pio2+0x320>
 800f2a8:	f000 fb3a 	bl	800f920 <scalbn>
 800f2ac:	00ec      	lsls	r4, r5, #3
 800f2ae:	ab72      	add	r3, sp, #456	; 0x1c8
 800f2b0:	191e      	adds	r6, r3, r4
 800f2b2:	ec59 8b10 	vmov	r8, r9, d0
 800f2b6:	f106 0a08 	add.w	sl, r6, #8
 800f2ba:	462f      	mov	r7, r5
 800f2bc:	2f00      	cmp	r7, #0
 800f2be:	f280 80df 	bge.w	800f480 <__kernel_rem_pio2+0x470>
 800f2c2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800f328 <__kernel_rem_pio2+0x318>
 800f2c6:	f04f 0a00 	mov.w	sl, #0
 800f2ca:	eba5 030a 	sub.w	r3, r5, sl
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f2c0 810a 	blt.w	800f4e8 <__kernel_rem_pio2+0x4d8>
 800f2d4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800f350 <__kernel_rem_pio2+0x340>
 800f2d8:	ec59 8b18 	vmov	r8, r9, d8
 800f2dc:	2700      	movs	r7, #0
 800f2de:	e0f5      	b.n	800f4cc <__kernel_rem_pio2+0x4bc>
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	9302      	str	r3, [sp, #8]
 800f2e4:	e760      	b.n	800f1a8 <__kernel_rem_pio2+0x198>
 800f2e6:	ab0e      	add	r3, sp, #56	; 0x38
 800f2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ec:	b94d      	cbnz	r5, 800f302 <__kernel_rem_pio2+0x2f2>
 800f2ee:	b12b      	cbz	r3, 800f2fc <__kernel_rem_pio2+0x2ec>
 800f2f0:	a80e      	add	r0, sp, #56	; 0x38
 800f2f2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f2f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	3201      	adds	r2, #1
 800f2fe:	461d      	mov	r5, r3
 800f300:	e759      	b.n	800f1b6 <__kernel_rem_pio2+0x1a6>
 800f302:	a80e      	add	r0, sp, #56	; 0x38
 800f304:	1acb      	subs	r3, r1, r3
 800f306:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800f30a:	462b      	mov	r3, r5
 800f30c:	e7f6      	b.n	800f2fc <__kernel_rem_pio2+0x2ec>
 800f30e:	1e62      	subs	r2, r4, #1
 800f310:	ab0e      	add	r3, sp, #56	; 0x38
 800f312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f316:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f31a:	a90e      	add	r1, sp, #56	; 0x38
 800f31c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f320:	e757      	b.n	800f1d2 <__kernel_rem_pio2+0x1c2>
 800f322:	bf00      	nop
 800f324:	f3af 8000 	nop.w
	...
 800f334:	3ff00000 	.word	0x3ff00000
 800f338:	08011978 	.word	0x08011978
 800f33c:	40200000 	.word	0x40200000
 800f340:	3ff00000 	.word	0x3ff00000
 800f344:	3e700000 	.word	0x3e700000
 800f348:	41700000 	.word	0x41700000
 800f34c:	3fe00000 	.word	0x3fe00000
 800f350:	08011938 	.word	0x08011938
 800f354:	1e62      	subs	r2, r4, #1
 800f356:	ab0e      	add	r3, sp, #56	; 0x38
 800f358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f35c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f360:	e7db      	b.n	800f31a <__kernel_rem_pio2+0x30a>
 800f362:	a90e      	add	r1, sp, #56	; 0x38
 800f364:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f368:	3b01      	subs	r3, #1
 800f36a:	430a      	orrs	r2, r1
 800f36c:	e78b      	b.n	800f286 <__kernel_rem_pio2+0x276>
 800f36e:	3301      	adds	r3, #1
 800f370:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f374:	2900      	cmp	r1, #0
 800f376:	d0fa      	beq.n	800f36e <__kernel_rem_pio2+0x35e>
 800f378:	9a08      	ldr	r2, [sp, #32]
 800f37a:	4422      	add	r2, r4
 800f37c:	00d2      	lsls	r2, r2, #3
 800f37e:	a922      	add	r1, sp, #136	; 0x88
 800f380:	18e3      	adds	r3, r4, r3
 800f382:	9206      	str	r2, [sp, #24]
 800f384:	440a      	add	r2, r1
 800f386:	9302      	str	r3, [sp, #8]
 800f388:	f10b 0108 	add.w	r1, fp, #8
 800f38c:	f102 0308 	add.w	r3, r2, #8
 800f390:	1c66      	adds	r6, r4, #1
 800f392:	910a      	str	r1, [sp, #40]	; 0x28
 800f394:	2500      	movs	r5, #0
 800f396:	930d      	str	r3, [sp, #52]	; 0x34
 800f398:	9b02      	ldr	r3, [sp, #8]
 800f39a:	42b3      	cmp	r3, r6
 800f39c:	da04      	bge.n	800f3a8 <__kernel_rem_pio2+0x398>
 800f39e:	461c      	mov	r4, r3
 800f3a0:	e6a6      	b.n	800f0f0 <__kernel_rem_pio2+0xe0>
 800f3a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e7e3      	b.n	800f370 <__kernel_rem_pio2+0x360>
 800f3a8:	9b06      	ldr	r3, [sp, #24]
 800f3aa:	18ef      	adds	r7, r5, r3
 800f3ac:	ab22      	add	r3, sp, #136	; 0x88
 800f3ae:	441f      	add	r7, r3
 800f3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f3b6:	f7f1 f86d 	bl	8000494 <__aeabi_i2d>
 800f3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3bc:	461c      	mov	r4, r3
 800f3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3c0:	e9c7 0100 	strd	r0, r1, [r7]
 800f3c4:	eb03 0b05 	add.w	fp, r3, r5
 800f3c8:	2700      	movs	r7, #0
 800f3ca:	f04f 0800 	mov.w	r8, #0
 800f3ce:	f04f 0900 	mov.w	r9, #0
 800f3d2:	9b07      	ldr	r3, [sp, #28]
 800f3d4:	429f      	cmp	r7, r3
 800f3d6:	dd08      	ble.n	800f3ea <__kernel_rem_pio2+0x3da>
 800f3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3da:	aa72      	add	r2, sp, #456	; 0x1c8
 800f3dc:	18eb      	adds	r3, r5, r3
 800f3de:	4413      	add	r3, r2
 800f3e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800f3e4:	3601      	adds	r6, #1
 800f3e6:	3508      	adds	r5, #8
 800f3e8:	e7d6      	b.n	800f398 <__kernel_rem_pio2+0x388>
 800f3ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f3ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f3f2:	f7f1 f8b9 	bl	8000568 <__aeabi_dmul>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	4640      	mov	r0, r8
 800f3fc:	4649      	mov	r1, r9
 800f3fe:	f7f0 fefd 	bl	80001fc <__adddf3>
 800f402:	3701      	adds	r7, #1
 800f404:	4680      	mov	r8, r0
 800f406:	4689      	mov	r9, r1
 800f408:	e7e3      	b.n	800f3d2 <__kernel_rem_pio2+0x3c2>
 800f40a:	3d01      	subs	r5, #1
 800f40c:	e741      	b.n	800f292 <__kernel_rem_pio2+0x282>
 800f40e:	f1ca 0000 	rsb	r0, sl, #0
 800f412:	ec47 6b10 	vmov	d0, r6, r7
 800f416:	f000 fa83 	bl	800f920 <scalbn>
 800f41a:	ec57 6b10 	vmov	r6, r7, d0
 800f41e:	2200      	movs	r2, #0
 800f420:	4b99      	ldr	r3, [pc, #612]	; (800f688 <__kernel_rem_pio2+0x678>)
 800f422:	ee10 0a10 	vmov	r0, s0
 800f426:	4639      	mov	r1, r7
 800f428:	f7f1 fb24 	bl	8000a74 <__aeabi_dcmpge>
 800f42c:	b1f8      	cbz	r0, 800f46e <__kernel_rem_pio2+0x45e>
 800f42e:	2200      	movs	r2, #0
 800f430:	4b96      	ldr	r3, [pc, #600]	; (800f68c <__kernel_rem_pio2+0x67c>)
 800f432:	4630      	mov	r0, r6
 800f434:	4639      	mov	r1, r7
 800f436:	f7f1 f897 	bl	8000568 <__aeabi_dmul>
 800f43a:	f7f1 fb2f 	bl	8000a9c <__aeabi_d2iz>
 800f43e:	4680      	mov	r8, r0
 800f440:	f7f1 f828 	bl	8000494 <__aeabi_i2d>
 800f444:	2200      	movs	r2, #0
 800f446:	4b90      	ldr	r3, [pc, #576]	; (800f688 <__kernel_rem_pio2+0x678>)
 800f448:	f7f1 f88e 	bl	8000568 <__aeabi_dmul>
 800f44c:	460b      	mov	r3, r1
 800f44e:	4602      	mov	r2, r0
 800f450:	4639      	mov	r1, r7
 800f452:	4630      	mov	r0, r6
 800f454:	f7f0 fed0 	bl	80001f8 <__aeabi_dsub>
 800f458:	f7f1 fb20 	bl	8000a9c <__aeabi_d2iz>
 800f45c:	1c65      	adds	r5, r4, #1
 800f45e:	ab0e      	add	r3, sp, #56	; 0x38
 800f460:	f10a 0a18 	add.w	sl, sl, #24
 800f464:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f468:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f46c:	e719      	b.n	800f2a2 <__kernel_rem_pio2+0x292>
 800f46e:	4630      	mov	r0, r6
 800f470:	4639      	mov	r1, r7
 800f472:	f7f1 fb13 	bl	8000a9c <__aeabi_d2iz>
 800f476:	ab0e      	add	r3, sp, #56	; 0x38
 800f478:	4625      	mov	r5, r4
 800f47a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f47e:	e710      	b.n	800f2a2 <__kernel_rem_pio2+0x292>
 800f480:	ab0e      	add	r3, sp, #56	; 0x38
 800f482:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f486:	f7f1 f805 	bl	8000494 <__aeabi_i2d>
 800f48a:	4642      	mov	r2, r8
 800f48c:	464b      	mov	r3, r9
 800f48e:	f7f1 f86b 	bl	8000568 <__aeabi_dmul>
 800f492:	2200      	movs	r2, #0
 800f494:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f498:	4b7c      	ldr	r3, [pc, #496]	; (800f68c <__kernel_rem_pio2+0x67c>)
 800f49a:	4640      	mov	r0, r8
 800f49c:	4649      	mov	r1, r9
 800f49e:	f7f1 f863 	bl	8000568 <__aeabi_dmul>
 800f4a2:	3f01      	subs	r7, #1
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	4689      	mov	r9, r1
 800f4a8:	e708      	b.n	800f2bc <__kernel_rem_pio2+0x2ac>
 800f4aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800f4b6:	f7f1 f857 	bl	8000568 <__aeabi_dmul>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4640      	mov	r0, r8
 800f4c0:	4649      	mov	r1, r9
 800f4c2:	f7f0 fe9b 	bl	80001fc <__adddf3>
 800f4c6:	3701      	adds	r7, #1
 800f4c8:	4680      	mov	r8, r0
 800f4ca:	4689      	mov	r9, r1
 800f4cc:	9b04      	ldr	r3, [sp, #16]
 800f4ce:	429f      	cmp	r7, r3
 800f4d0:	dc01      	bgt.n	800f4d6 <__kernel_rem_pio2+0x4c6>
 800f4d2:	45ba      	cmp	sl, r7
 800f4d4:	dae9      	bge.n	800f4aa <__kernel_rem_pio2+0x49a>
 800f4d6:	ab4a      	add	r3, sp, #296	; 0x128
 800f4d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f4dc:	e9c3 8900 	strd	r8, r9, [r3]
 800f4e0:	f10a 0a01 	add.w	sl, sl, #1
 800f4e4:	3e08      	subs	r6, #8
 800f4e6:	e6f0      	b.n	800f2ca <__kernel_rem_pio2+0x2ba>
 800f4e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	d85b      	bhi.n	800f5a6 <__kernel_rem_pio2+0x596>
 800f4ee:	e8df f003 	tbb	[pc, r3]
 800f4f2:	264a      	.short	0x264a
 800f4f4:	0226      	.short	0x0226
 800f4f6:	ab9a      	add	r3, sp, #616	; 0x268
 800f4f8:	441c      	add	r4, r3
 800f4fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f4fe:	46a2      	mov	sl, r4
 800f500:	46ab      	mov	fp, r5
 800f502:	f1bb 0f00 	cmp.w	fp, #0
 800f506:	dc6c      	bgt.n	800f5e2 <__kernel_rem_pio2+0x5d2>
 800f508:	46a2      	mov	sl, r4
 800f50a:	46ab      	mov	fp, r5
 800f50c:	f1bb 0f01 	cmp.w	fp, #1
 800f510:	f300 8086 	bgt.w	800f620 <__kernel_rem_pio2+0x610>
 800f514:	2000      	movs	r0, #0
 800f516:	2100      	movs	r1, #0
 800f518:	2d01      	cmp	r5, #1
 800f51a:	f300 80a0 	bgt.w	800f65e <__kernel_rem_pio2+0x64e>
 800f51e:	9b02      	ldr	r3, [sp, #8]
 800f520:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800f524:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f040 809e 	bne.w	800f66a <__kernel_rem_pio2+0x65a>
 800f52e:	9b01      	ldr	r3, [sp, #4]
 800f530:	e9c3 7800 	strd	r7, r8, [r3]
 800f534:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f538:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f53c:	e033      	b.n	800f5a6 <__kernel_rem_pio2+0x596>
 800f53e:	3408      	adds	r4, #8
 800f540:	ab4a      	add	r3, sp, #296	; 0x128
 800f542:	441c      	add	r4, r3
 800f544:	462e      	mov	r6, r5
 800f546:	2000      	movs	r0, #0
 800f548:	2100      	movs	r1, #0
 800f54a:	2e00      	cmp	r6, #0
 800f54c:	da3a      	bge.n	800f5c4 <__kernel_rem_pio2+0x5b4>
 800f54e:	9b02      	ldr	r3, [sp, #8]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d03d      	beq.n	800f5d0 <__kernel_rem_pio2+0x5c0>
 800f554:	4602      	mov	r2, r0
 800f556:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f55a:	9c01      	ldr	r4, [sp, #4]
 800f55c:	e9c4 2300 	strd	r2, r3, [r4]
 800f560:	4602      	mov	r2, r0
 800f562:	460b      	mov	r3, r1
 800f564:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f568:	f7f0 fe46 	bl	80001f8 <__aeabi_dsub>
 800f56c:	ae4c      	add	r6, sp, #304	; 0x130
 800f56e:	2401      	movs	r4, #1
 800f570:	42a5      	cmp	r5, r4
 800f572:	da30      	bge.n	800f5d6 <__kernel_rem_pio2+0x5c6>
 800f574:	9b02      	ldr	r3, [sp, #8]
 800f576:	b113      	cbz	r3, 800f57e <__kernel_rem_pio2+0x56e>
 800f578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f57c:	4619      	mov	r1, r3
 800f57e:	9b01      	ldr	r3, [sp, #4]
 800f580:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f584:	e00f      	b.n	800f5a6 <__kernel_rem_pio2+0x596>
 800f586:	ab9a      	add	r3, sp, #616	; 0x268
 800f588:	441c      	add	r4, r3
 800f58a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f58e:	2000      	movs	r0, #0
 800f590:	2100      	movs	r1, #0
 800f592:	2d00      	cmp	r5, #0
 800f594:	da10      	bge.n	800f5b8 <__kernel_rem_pio2+0x5a8>
 800f596:	9b02      	ldr	r3, [sp, #8]
 800f598:	b113      	cbz	r3, 800f5a0 <__kernel_rem_pio2+0x590>
 800f59a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f59e:	4619      	mov	r1, r3
 800f5a0:	9b01      	ldr	r3, [sp, #4]
 800f5a2:	e9c3 0100 	strd	r0, r1, [r3]
 800f5a6:	9b06      	ldr	r3, [sp, #24]
 800f5a8:	f003 0007 	and.w	r0, r3, #7
 800f5ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f5b0:	ecbd 8b02 	vpop	{d8}
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f5bc:	f7f0 fe1e 	bl	80001fc <__adddf3>
 800f5c0:	3d01      	subs	r5, #1
 800f5c2:	e7e6      	b.n	800f592 <__kernel_rem_pio2+0x582>
 800f5c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f5c8:	f7f0 fe18 	bl	80001fc <__adddf3>
 800f5cc:	3e01      	subs	r6, #1
 800f5ce:	e7bc      	b.n	800f54a <__kernel_rem_pio2+0x53a>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	e7c1      	b.n	800f55a <__kernel_rem_pio2+0x54a>
 800f5d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f5da:	f7f0 fe0f 	bl	80001fc <__adddf3>
 800f5de:	3401      	adds	r4, #1
 800f5e0:	e7c6      	b.n	800f570 <__kernel_rem_pio2+0x560>
 800f5e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800f5e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f5ea:	4640      	mov	r0, r8
 800f5ec:	ec53 2b17 	vmov	r2, r3, d7
 800f5f0:	4649      	mov	r1, r9
 800f5f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f5f6:	f7f0 fe01 	bl	80001fc <__adddf3>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	4606      	mov	r6, r0
 800f600:	460f      	mov	r7, r1
 800f602:	4640      	mov	r0, r8
 800f604:	4649      	mov	r1, r9
 800f606:	f7f0 fdf7 	bl	80001f8 <__aeabi_dsub>
 800f60a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f60e:	f7f0 fdf5 	bl	80001fc <__adddf3>
 800f612:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f616:	e9ca 0100 	strd	r0, r1, [sl]
 800f61a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800f61e:	e770      	b.n	800f502 <__kernel_rem_pio2+0x4f2>
 800f620:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800f624:	ed3a 7b02 	vldmdb	sl!, {d7}
 800f628:	4630      	mov	r0, r6
 800f62a:	ec53 2b17 	vmov	r2, r3, d7
 800f62e:	4639      	mov	r1, r7
 800f630:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f634:	f7f0 fde2 	bl	80001fc <__adddf3>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4680      	mov	r8, r0
 800f63e:	4689      	mov	r9, r1
 800f640:	4630      	mov	r0, r6
 800f642:	4639      	mov	r1, r7
 800f644:	f7f0 fdd8 	bl	80001f8 <__aeabi_dsub>
 800f648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f64c:	f7f0 fdd6 	bl	80001fc <__adddf3>
 800f650:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f654:	e9ca 0100 	strd	r0, r1, [sl]
 800f658:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800f65c:	e756      	b.n	800f50c <__kernel_rem_pio2+0x4fc>
 800f65e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f662:	f7f0 fdcb 	bl	80001fc <__adddf3>
 800f666:	3d01      	subs	r5, #1
 800f668:	e756      	b.n	800f518 <__kernel_rem_pio2+0x508>
 800f66a:	9b01      	ldr	r3, [sp, #4]
 800f66c:	9a01      	ldr	r2, [sp, #4]
 800f66e:	601f      	str	r7, [r3, #0]
 800f670:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f674:	605c      	str	r4, [r3, #4]
 800f676:	609d      	str	r5, [r3, #8]
 800f678:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f67c:	60d3      	str	r3, [r2, #12]
 800f67e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f682:	6110      	str	r0, [r2, #16]
 800f684:	6153      	str	r3, [r2, #20]
 800f686:	e78e      	b.n	800f5a6 <__kernel_rem_pio2+0x596>
 800f688:	41700000 	.word	0x41700000
 800f68c:	3e700000 	.word	0x3e700000

0800f690 <__kernel_sin>:
 800f690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f694:	ec55 4b10 	vmov	r4, r5, d0
 800f698:	b085      	sub	sp, #20
 800f69a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f69e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f6a2:	ed8d 1b00 	vstr	d1, [sp]
 800f6a6:	9002      	str	r0, [sp, #8]
 800f6a8:	da06      	bge.n	800f6b8 <__kernel_sin+0x28>
 800f6aa:	ee10 0a10 	vmov	r0, s0
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	f7f1 f9f4 	bl	8000a9c <__aeabi_d2iz>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d051      	beq.n	800f75c <__kernel_sin+0xcc>
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	462b      	mov	r3, r5
 800f6bc:	4620      	mov	r0, r4
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f7f0 ff52 	bl	8000568 <__aeabi_dmul>
 800f6c4:	4682      	mov	sl, r0
 800f6c6:	468b      	mov	fp, r1
 800f6c8:	4602      	mov	r2, r0
 800f6ca:	460b      	mov	r3, r1
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	f7f0 ff4a 	bl	8000568 <__aeabi_dmul>
 800f6d4:	a341      	add	r3, pc, #260	; (adr r3, 800f7dc <__kernel_sin+0x14c>)
 800f6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6da:	4680      	mov	r8, r0
 800f6dc:	4689      	mov	r9, r1
 800f6de:	4650      	mov	r0, sl
 800f6e0:	4659      	mov	r1, fp
 800f6e2:	f7f0 ff41 	bl	8000568 <__aeabi_dmul>
 800f6e6:	a33f      	add	r3, pc, #252	; (adr r3, 800f7e4 <__kernel_sin+0x154>)
 800f6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ec:	f7f0 fd84 	bl	80001f8 <__aeabi_dsub>
 800f6f0:	4652      	mov	r2, sl
 800f6f2:	465b      	mov	r3, fp
 800f6f4:	f7f0 ff38 	bl	8000568 <__aeabi_dmul>
 800f6f8:	a33c      	add	r3, pc, #240	; (adr r3, 800f7ec <__kernel_sin+0x15c>)
 800f6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fe:	f7f0 fd7d 	bl	80001fc <__adddf3>
 800f702:	4652      	mov	r2, sl
 800f704:	465b      	mov	r3, fp
 800f706:	f7f0 ff2f 	bl	8000568 <__aeabi_dmul>
 800f70a:	a33a      	add	r3, pc, #232	; (adr r3, 800f7f4 <__kernel_sin+0x164>)
 800f70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f710:	f7f0 fd72 	bl	80001f8 <__aeabi_dsub>
 800f714:	4652      	mov	r2, sl
 800f716:	465b      	mov	r3, fp
 800f718:	f7f0 ff26 	bl	8000568 <__aeabi_dmul>
 800f71c:	a337      	add	r3, pc, #220	; (adr r3, 800f7fc <__kernel_sin+0x16c>)
 800f71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f722:	f7f0 fd6b 	bl	80001fc <__adddf3>
 800f726:	9b02      	ldr	r3, [sp, #8]
 800f728:	4606      	mov	r6, r0
 800f72a:	460f      	mov	r7, r1
 800f72c:	b9db      	cbnz	r3, 800f766 <__kernel_sin+0xd6>
 800f72e:	4602      	mov	r2, r0
 800f730:	460b      	mov	r3, r1
 800f732:	4650      	mov	r0, sl
 800f734:	4659      	mov	r1, fp
 800f736:	f7f0 ff17 	bl	8000568 <__aeabi_dmul>
 800f73a:	a325      	add	r3, pc, #148	; (adr r3, 800f7d0 <__kernel_sin+0x140>)
 800f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f740:	f7f0 fd5a 	bl	80001f8 <__aeabi_dsub>
 800f744:	4642      	mov	r2, r8
 800f746:	464b      	mov	r3, r9
 800f748:	f7f0 ff0e 	bl	8000568 <__aeabi_dmul>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	4620      	mov	r0, r4
 800f752:	4629      	mov	r1, r5
 800f754:	f7f0 fd52 	bl	80001fc <__adddf3>
 800f758:	4604      	mov	r4, r0
 800f75a:	460d      	mov	r5, r1
 800f75c:	ec45 4b10 	vmov	d0, r4, r5
 800f760:	b005      	add	sp, #20
 800f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f766:	2200      	movs	r2, #0
 800f768:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <__kernel_sin+0x148>)
 800f76a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f76e:	f7f0 fefb 	bl	8000568 <__aeabi_dmul>
 800f772:	4632      	mov	r2, r6
 800f774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f778:	463b      	mov	r3, r7
 800f77a:	4640      	mov	r0, r8
 800f77c:	4649      	mov	r1, r9
 800f77e:	f7f0 fef3 	bl	8000568 <__aeabi_dmul>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f78a:	f7f0 fd35 	bl	80001f8 <__aeabi_dsub>
 800f78e:	4652      	mov	r2, sl
 800f790:	465b      	mov	r3, fp
 800f792:	f7f0 fee9 	bl	8000568 <__aeabi_dmul>
 800f796:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f79a:	f7f0 fd2d 	bl	80001f8 <__aeabi_dsub>
 800f79e:	a30c      	add	r3, pc, #48	; (adr r3, 800f7d0 <__kernel_sin+0x140>)
 800f7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a4:	4606      	mov	r6, r0
 800f7a6:	460f      	mov	r7, r1
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	f7f0 fedc 	bl	8000568 <__aeabi_dmul>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	4639      	mov	r1, r7
 800f7b8:	f7f0 fd20 	bl	80001fc <__adddf3>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	f7f0 fd18 	bl	80001f8 <__aeabi_dsub>
 800f7c8:	e7c6      	b.n	800f758 <__kernel_sin+0xc8>
 800f7ca:	bf00      	nop
 800f7cc:	f3af 8000 	nop.w
 800f7d0:	55555549 	.word	0x55555549
 800f7d4:	3fc55555 	.word	0x3fc55555
 800f7d8:	3fe00000 	.word	0x3fe00000
 800f7dc:	5acfd57c 	.word	0x5acfd57c
 800f7e0:	3de5d93a 	.word	0x3de5d93a
 800f7e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f7e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f7ec:	57b1fe7d 	.word	0x57b1fe7d
 800f7f0:	3ec71de3 	.word	0x3ec71de3
 800f7f4:	19c161d5 	.word	0x19c161d5
 800f7f8:	3f2a01a0 	.word	0x3f2a01a0
 800f7fc:	1110f8a6 	.word	0x1110f8a6
 800f800:	3f811111 	.word	0x3f811111

0800f804 <fabs>:
 800f804:	ec51 0b10 	vmov	r0, r1, d0
 800f808:	ee10 2a10 	vmov	r2, s0
 800f80c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f810:	ec43 2b10 	vmov	d0, r2, r3
 800f814:	4770      	bx	lr
	...

0800f818 <floor>:
 800f818:	ec51 0b10 	vmov	r0, r1, d0
 800f81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f820:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f824:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f828:	2e13      	cmp	r6, #19
 800f82a:	460c      	mov	r4, r1
 800f82c:	ee10 5a10 	vmov	r5, s0
 800f830:	4680      	mov	r8, r0
 800f832:	dc34      	bgt.n	800f89e <floor+0x86>
 800f834:	2e00      	cmp	r6, #0
 800f836:	da16      	bge.n	800f866 <floor+0x4e>
 800f838:	a335      	add	r3, pc, #212	; (adr r3, 800f910 <floor+0xf8>)
 800f83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f83e:	f7f0 fcdd 	bl	80001fc <__adddf3>
 800f842:	2200      	movs	r2, #0
 800f844:	2300      	movs	r3, #0
 800f846:	f7f1 f91f 	bl	8000a88 <__aeabi_dcmpgt>
 800f84a:	b148      	cbz	r0, 800f860 <floor+0x48>
 800f84c:	2c00      	cmp	r4, #0
 800f84e:	da59      	bge.n	800f904 <floor+0xec>
 800f850:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f854:	4a30      	ldr	r2, [pc, #192]	; (800f918 <floor+0x100>)
 800f856:	432b      	orrs	r3, r5
 800f858:	2500      	movs	r5, #0
 800f85a:	42ab      	cmp	r3, r5
 800f85c:	bf18      	it	ne
 800f85e:	4614      	movne	r4, r2
 800f860:	4621      	mov	r1, r4
 800f862:	4628      	mov	r0, r5
 800f864:	e025      	b.n	800f8b2 <floor+0x9a>
 800f866:	4f2d      	ldr	r7, [pc, #180]	; (800f91c <floor+0x104>)
 800f868:	4137      	asrs	r7, r6
 800f86a:	ea01 0307 	and.w	r3, r1, r7
 800f86e:	4303      	orrs	r3, r0
 800f870:	d01f      	beq.n	800f8b2 <floor+0x9a>
 800f872:	a327      	add	r3, pc, #156	; (adr r3, 800f910 <floor+0xf8>)
 800f874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f878:	f7f0 fcc0 	bl	80001fc <__adddf3>
 800f87c:	2200      	movs	r2, #0
 800f87e:	2300      	movs	r3, #0
 800f880:	f7f1 f902 	bl	8000a88 <__aeabi_dcmpgt>
 800f884:	2800      	cmp	r0, #0
 800f886:	d0eb      	beq.n	800f860 <floor+0x48>
 800f888:	2c00      	cmp	r4, #0
 800f88a:	bfbe      	ittt	lt
 800f88c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f890:	fa43 f606 	asrlt.w	r6, r3, r6
 800f894:	19a4      	addlt	r4, r4, r6
 800f896:	ea24 0407 	bic.w	r4, r4, r7
 800f89a:	2500      	movs	r5, #0
 800f89c:	e7e0      	b.n	800f860 <floor+0x48>
 800f89e:	2e33      	cmp	r6, #51	; 0x33
 800f8a0:	dd0b      	ble.n	800f8ba <floor+0xa2>
 800f8a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f8a6:	d104      	bne.n	800f8b2 <floor+0x9a>
 800f8a8:	ee10 2a10 	vmov	r2, s0
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	f7f0 fca5 	bl	80001fc <__adddf3>
 800f8b2:	ec41 0b10 	vmov	d0, r0, r1
 800f8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f8be:	f04f 33ff 	mov.w	r3, #4294967295
 800f8c2:	fa23 f707 	lsr.w	r7, r3, r7
 800f8c6:	4207      	tst	r7, r0
 800f8c8:	d0f3      	beq.n	800f8b2 <floor+0x9a>
 800f8ca:	a311      	add	r3, pc, #68	; (adr r3, 800f910 <floor+0xf8>)
 800f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d0:	f7f0 fc94 	bl	80001fc <__adddf3>
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f7f1 f8d6 	bl	8000a88 <__aeabi_dcmpgt>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	d0bf      	beq.n	800f860 <floor+0x48>
 800f8e0:	2c00      	cmp	r4, #0
 800f8e2:	da02      	bge.n	800f8ea <floor+0xd2>
 800f8e4:	2e14      	cmp	r6, #20
 800f8e6:	d103      	bne.n	800f8f0 <floor+0xd8>
 800f8e8:	3401      	adds	r4, #1
 800f8ea:	ea25 0507 	bic.w	r5, r5, r7
 800f8ee:	e7b7      	b.n	800f860 <floor+0x48>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f8f6:	fa03 f606 	lsl.w	r6, r3, r6
 800f8fa:	4435      	add	r5, r6
 800f8fc:	4545      	cmp	r5, r8
 800f8fe:	bf38      	it	cc
 800f900:	18e4      	addcc	r4, r4, r3
 800f902:	e7f2      	b.n	800f8ea <floor+0xd2>
 800f904:	2500      	movs	r5, #0
 800f906:	462c      	mov	r4, r5
 800f908:	e7aa      	b.n	800f860 <floor+0x48>
 800f90a:	bf00      	nop
 800f90c:	f3af 8000 	nop.w
 800f910:	8800759c 	.word	0x8800759c
 800f914:	7e37e43c 	.word	0x7e37e43c
 800f918:	bff00000 	.word	0xbff00000
 800f91c:	000fffff 	.word	0x000fffff

0800f920 <scalbn>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	ec55 4b10 	vmov	r4, r5, d0
 800f926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f92a:	4606      	mov	r6, r0
 800f92c:	462b      	mov	r3, r5
 800f92e:	b9aa      	cbnz	r2, 800f95c <scalbn+0x3c>
 800f930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f934:	4323      	orrs	r3, r4
 800f936:	d03b      	beq.n	800f9b0 <scalbn+0x90>
 800f938:	4b31      	ldr	r3, [pc, #196]	; (800fa00 <scalbn+0xe0>)
 800f93a:	4629      	mov	r1, r5
 800f93c:	2200      	movs	r2, #0
 800f93e:	ee10 0a10 	vmov	r0, s0
 800f942:	f7f0 fe11 	bl	8000568 <__aeabi_dmul>
 800f946:	4b2f      	ldr	r3, [pc, #188]	; (800fa04 <scalbn+0xe4>)
 800f948:	429e      	cmp	r6, r3
 800f94a:	4604      	mov	r4, r0
 800f94c:	460d      	mov	r5, r1
 800f94e:	da12      	bge.n	800f976 <scalbn+0x56>
 800f950:	a327      	add	r3, pc, #156	; (adr r3, 800f9f0 <scalbn+0xd0>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	f7f0 fe07 	bl	8000568 <__aeabi_dmul>
 800f95a:	e009      	b.n	800f970 <scalbn+0x50>
 800f95c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f960:	428a      	cmp	r2, r1
 800f962:	d10c      	bne.n	800f97e <scalbn+0x5e>
 800f964:	ee10 2a10 	vmov	r2, s0
 800f968:	4620      	mov	r0, r4
 800f96a:	4629      	mov	r1, r5
 800f96c:	f7f0 fc46 	bl	80001fc <__adddf3>
 800f970:	4604      	mov	r4, r0
 800f972:	460d      	mov	r5, r1
 800f974:	e01c      	b.n	800f9b0 <scalbn+0x90>
 800f976:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f97a:	460b      	mov	r3, r1
 800f97c:	3a36      	subs	r2, #54	; 0x36
 800f97e:	4432      	add	r2, r6
 800f980:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f984:	428a      	cmp	r2, r1
 800f986:	dd0b      	ble.n	800f9a0 <scalbn+0x80>
 800f988:	ec45 4b11 	vmov	d1, r4, r5
 800f98c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f9f8 <scalbn+0xd8>
 800f990:	f000 f83c 	bl	800fa0c <copysign>
 800f994:	a318      	add	r3, pc, #96	; (adr r3, 800f9f8 <scalbn+0xd8>)
 800f996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99a:	ec51 0b10 	vmov	r0, r1, d0
 800f99e:	e7da      	b.n	800f956 <scalbn+0x36>
 800f9a0:	2a00      	cmp	r2, #0
 800f9a2:	dd08      	ble.n	800f9b6 <scalbn+0x96>
 800f9a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f9a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f9ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9b0:	ec45 4b10 	vmov	d0, r4, r5
 800f9b4:	bd70      	pop	{r4, r5, r6, pc}
 800f9b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f9ba:	da0d      	bge.n	800f9d8 <scalbn+0xb8>
 800f9bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f9c0:	429e      	cmp	r6, r3
 800f9c2:	ec45 4b11 	vmov	d1, r4, r5
 800f9c6:	dce1      	bgt.n	800f98c <scalbn+0x6c>
 800f9c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f9f0 <scalbn+0xd0>
 800f9cc:	f000 f81e 	bl	800fa0c <copysign>
 800f9d0:	a307      	add	r3, pc, #28	; (adr r3, 800f9f0 <scalbn+0xd0>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	e7e0      	b.n	800f99a <scalbn+0x7a>
 800f9d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f9dc:	3236      	adds	r2, #54	; 0x36
 800f9de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f9e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	4629      	mov	r1, r5
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4b06      	ldr	r3, [pc, #24]	; (800fa08 <scalbn+0xe8>)
 800f9ee:	e7b2      	b.n	800f956 <scalbn+0x36>
 800f9f0:	c2f8f359 	.word	0xc2f8f359
 800f9f4:	01a56e1f 	.word	0x01a56e1f
 800f9f8:	8800759c 	.word	0x8800759c
 800f9fc:	7e37e43c 	.word	0x7e37e43c
 800fa00:	43500000 	.word	0x43500000
 800fa04:	ffff3cb0 	.word	0xffff3cb0
 800fa08:	3c900000 	.word	0x3c900000

0800fa0c <copysign>:
 800fa0c:	ec51 0b10 	vmov	r0, r1, d0
 800fa10:	ee11 0a90 	vmov	r0, s3
 800fa14:	ee10 2a10 	vmov	r2, s0
 800fa18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800fa1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800fa20:	ea41 0300 	orr.w	r3, r1, r0
 800fa24:	ec43 2b10 	vmov	d0, r2, r3
 800fa28:	4770      	bx	lr
	...

0800fa2c <_init>:
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2e:	bf00      	nop
 800fa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa32:	bc08      	pop	{r3}
 800fa34:	469e      	mov	lr, r3
 800fa36:	4770      	bx	lr

0800fa38 <_fini>:
 800fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3a:	bf00      	nop
 800fa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3e:	bc08      	pop	{r3}
 800fa40:	469e      	mov	lr, r3
 800fa42:	4770      	bx	lr
